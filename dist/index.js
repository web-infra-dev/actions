var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_stream = __toESM(require("stream"));
var import_http = __toESM(require("http"));
var import_url = __toESM(require("url"));
var import_https = __toESM(require("https"));
var import_zlib = __toESM(require("zlib"));
var import_path = __toESM(require("path"));
var import_path2 = __toESM(require("path"));
var import_path3 = __toESM(require("path"));
var import_os = __toESM(require("os"));
var import_path4 = __toESM(require("path"));
var import_path5 = __toESM(require("path"));
var import_fs = __toESM(require("fs"));
var import_path6 = __toESM(require("path"));
var import_util = require("util");
var import_util2 = __toESM(require("util"));
var import_path7 = __toESM(require("path"));
var import_path8 = __toESM(require("path"));
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esmMin = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __commonJSMin = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name2 in all)
    __defProp2(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
var require_utils = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toCommandProperties = exports.toCommandValue = void 0;
  function toCommandValue(input) {
    if (input === null || input === void 0) {
      return "";
    } else if (typeof input === "string" || input instanceof String) {
      return input;
    }
    return JSON.stringify(input);
  }
  exports.toCommandValue = toCommandValue;
  function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
      return {};
    }
    return {
      title: annotationProperties.title,
      file: annotationProperties.file,
      line: annotationProperties.startLine,
      endLine: annotationProperties.endLine,
      col: annotationProperties.startColumn,
      endColumn: annotationProperties.endColumn
    };
  }
  exports.toCommandProperties = toCommandProperties;
});
var require_command = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.issue = exports.issueCommand = void 0;
  var os2 = __importStar(__require("os"));
  var utils_1 = require_utils();
  function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os2.EOL);
  }
  exports.issueCommand = issueCommand;
  function issue(name2, message = "") {
    issueCommand(name2, {}, message);
  }
  exports.issue = issue;
  var CMD_STRING = "::";
  var Command = class {
    constructor(command, properties, message) {
      if (!command) {
        command = "missing.command";
      }
      this.command = command;
      this.properties = properties;
      this.message = message;
    }
    toString() {
      let cmdStr = CMD_STRING + this.command;
      if (this.properties && Object.keys(this.properties).length > 0) {
        cmdStr += " ";
        let first = true;
        for (const key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            const val = this.properties[key];
            if (val) {
              if (first) {
                first = false;
              } else {
                cmdStr += ",";
              }
              cmdStr += `${key}=${escapeProperty(val)}`;
            }
          }
        }
      }
      cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
      return cmdStr;
    }
  };
  function escapeData(s) {
    return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
  }
  function escapeProperty(s) {
    return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
  }
});
var require_file_command = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.issueCommand = void 0;
  var fs9 = __importStar(__require("fs"));
  var os2 = __importStar(__require("os"));
  var utils_1 = require_utils();
  function issueCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
      throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs9.existsSync(filePath)) {
      throw new Error(`Missing file at path: ${filePath}`);
    }
    fs9.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os2.EOL}`, {
      encoding: "utf8"
    });
  }
  exports.issueCommand = issueCommand;
});
var require_proxy = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.checkBypass = exports.getProxyUrl = void 0;
  function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === "https:";
    if (checkBypass(reqUrl)) {
      return void 0;
    }
    const proxyVar = (() => {
      if (usingSsl) {
        return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
      } else {
        return process.env["http_proxy"] || process.env["HTTP_PROXY"];
      }
    })();
    if (proxyVar) {
      return new URL(proxyVar);
    } else {
      return void 0;
    }
  }
  exports.getProxyUrl = getProxyUrl;
  function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
      return false;
    }
    const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
    if (!noProxy) {
      return false;
    }
    let reqPort;
    if (reqUrl.port) {
      reqPort = Number(reqUrl.port);
    } else if (reqUrl.protocol === "http:") {
      reqPort = 80;
    } else if (reqUrl.protocol === "https:") {
      reqPort = 443;
    }
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === "number") {
      upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
      if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
        return true;
      }
    }
    return false;
  }
  exports.checkBypass = checkBypass;
});
var require_tunnel = __commonJSMin((exports) => {
  "use strict";
  var net = __require("net");
  var tls = __require("tls");
  var http2 = __require("http");
  var https2 = __require("https");
  var events = __require("events");
  var assert = __require("assert");
  var util2 = __require("util");
  exports.httpOverHttp = httpOverHttp;
  exports.httpsOverHttp = httpsOverHttp;
  exports.httpOverHttps = httpOverHttps;
  exports.httpsOverHttps = httpsOverHttps;
  function httpOverHttp(options2) {
    var agent = new TunnelingAgent(options2);
    agent.request = http2.request;
    return agent;
  }
  function httpsOverHttp(options2) {
    var agent = new TunnelingAgent(options2);
    agent.request = http2.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function httpOverHttps(options2) {
    var agent = new TunnelingAgent(options2);
    agent.request = https2.request;
    return agent;
  }
  function httpsOverHttps(options2) {
    var agent = new TunnelingAgent(options2);
    agent.request = https2.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function TunnelingAgent(options2) {
    var self2 = this;
    self2.options = options2 || {};
    self2.proxyOptions = self2.options.proxy || {};
    self2.maxSockets = self2.options.maxSockets || http2.Agent.defaultMaxSockets;
    self2.requests = [];
    self2.sockets = [];
    self2.on("free", function onFree(socket, host, port, localAddress) {
      var options3 = toOptions(host, port, localAddress);
      for (var i = 0, len = self2.requests.length; i < len; ++i) {
        var pending = self2.requests[i];
        if (pending.host === options3.host && pending.port === options3.port) {
          self2.requests.splice(i, 1);
          pending.request.onSocket(socket);
          return;
        }
      }
      socket.destroy();
      self2.removeSocket(socket);
    });
  }
  util2.inherits(TunnelingAgent, events.EventEmitter);
  TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
    var self2 = this;
    var options2 = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
    if (self2.sockets.length >= this.maxSockets) {
      self2.requests.push(options2);
      return;
    }
    self2.createSocket(options2, function(socket) {
      socket.on("free", onFree);
      socket.on("close", onCloseOrRemove);
      socket.on("agentRemove", onCloseOrRemove);
      req.onSocket(socket);
      function onFree() {
        self2.emit("free", socket, options2);
      }
      function onCloseOrRemove(err) {
        self2.removeSocket(socket);
        socket.removeListener("free", onFree);
        socket.removeListener("close", onCloseOrRemove);
        socket.removeListener("agentRemove", onCloseOrRemove);
      }
    });
  };
  TunnelingAgent.prototype.createSocket = function createSocket(options2, cb) {
    var self2 = this;
    var placeholder = {};
    self2.sockets.push(placeholder);
    var connectOptions = mergeOptions({}, self2.proxyOptions, {
      method: "CONNECT",
      path: options2.host + ":" + options2.port,
      agent: false,
      headers: {
        host: options2.host + ":" + options2.port
      }
    });
    if (options2.localAddress) {
      connectOptions.localAddress = options2.localAddress;
    }
    if (connectOptions.proxyAuth) {
      connectOptions.headers = connectOptions.headers || {};
      connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
    }
    debug("making CONNECT request");
    var connectReq = self2.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false;
    connectReq.once("response", onResponse);
    connectReq.once("upgrade", onUpgrade);
    connectReq.once("connect", onConnect);
    connectReq.once("error", onError);
    connectReq.end();
    function onResponse(res) {
      res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
      process.nextTick(function() {
        onConnect(res, socket, head);
      });
    }
    function onConnect(res, socket, head) {
      connectReq.removeAllListeners();
      socket.removeAllListeners();
      if (res.statusCode !== 200) {
        debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
        socket.destroy();
        var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
        error.code = "ECONNRESET";
        options2.request.emit("error", error);
        self2.removeSocket(placeholder);
        return;
      }
      if (head.length > 0) {
        debug("got illegal response body from proxy");
        socket.destroy();
        var error = new Error("got illegal response body from proxy");
        error.code = "ECONNRESET";
        options2.request.emit("error", error);
        self2.removeSocket(placeholder);
        return;
      }
      debug("tunneling connection has established");
      self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
      return cb(socket);
    }
    function onError(cause) {
      connectReq.removeAllListeners();
      debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
      var error = new Error("tunneling socket could not be established, cause=" + cause.message);
      error.code = "ECONNRESET";
      options2.request.emit("error", error);
      self2.removeSocket(placeholder);
    }
  };
  TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) {
      return;
    }
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) {
      this.createSocket(pending, function(socket2) {
        pending.request.onSocket(socket2);
      });
    }
  };
  function createSecureSocket(options2, cb) {
    var self2 = this;
    TunnelingAgent.prototype.createSocket.call(self2, options2, function(socket) {
      var hostHeader = options2.request.getHeader("host");
      var tlsOptions = mergeOptions({}, self2.options, {
        socket,
        servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options2.host
      });
      var secureSocket = tls.connect(0, tlsOptions);
      self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
      cb(secureSocket);
    });
  }
  function toOptions(host, port, localAddress) {
    if (typeof host === "string") {
      return {
        host,
        port,
        localAddress
      };
    }
    return host;
  }
  function mergeOptions(target) {
    for (var i = 1, len = arguments.length; i < len; ++i) {
      var overrides = arguments[i];
      if (typeof overrides === "object") {
        var keys = Object.keys(overrides);
        for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
          var k = keys[j];
          if (overrides[k] !== void 0) {
            target[k] = overrides[k];
          }
        }
      }
    }
    return target;
  }
  var debug;
  if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
    debug = function() {
      var args = Array.prototype.slice.call(arguments);
      if (typeof args[0] === "string") {
        args[0] = "TUNNEL: " + args[0];
      } else {
        args.unshift("TUNNEL:");
      }
      console.error.apply(console, args);
    };
  } else {
    debug = function() {
    };
  }
  exports.debug = debug;
});
var require_tunnel2 = __commonJSMin((exports, module2) => {
  module2.exports = require_tunnel();
});
var require_lib = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
  var http2 = __importStar(__require("http"));
  var https2 = __importStar(__require("https"));
  var pm = __importStar(require_proxy());
  var tunnel = __importStar(require_tunnel2());
  var HttpCodes;
  (function(HttpCodes2) {
    HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
    HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
    HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
    HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
    HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
    HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
    HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
    HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
    HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
    HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
    HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
  })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
  var Headers2;
  (function(Headers3) {
    Headers3["Accept"] = "accept";
    Headers3["ContentType"] = "content-type";
  })(Headers2 = exports.Headers || (exports.Headers = {}));
  var MediaTypes;
  (function(MediaTypes2) {
    MediaTypes2["ApplicationJson"] = "application/json";
  })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
  function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
  }
  exports.getProxyUrl = getProxyUrl;
  var HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
  ];
  var HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
  ];
  var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
  var ExponentialBackoffCeiling = 10;
  var ExponentialBackoffTimeSlice = 5;
  var HttpClientError = class extends Error {
    constructor(message, statusCode) {
      super(message);
      this.name = "HttpClientError";
      this.statusCode = statusCode;
      Object.setPrototypeOf(this, HttpClientError.prototype);
    }
  };
  exports.HttpClientError = HttpClientError;
  var HttpClientResponse = class {
    constructor(message) {
      this.message = message;
    }
    readBody() {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
          let output = Buffer.alloc(0);
          this.message.on("data", (chunk) => {
            output = Buffer.concat([output, chunk]);
          });
          this.message.on("end", () => {
            resolve(output.toString());
          });
        }));
      });
    }
  };
  exports.HttpClientResponse = HttpClientResponse;
  function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === "https:";
  }
  exports.isHttps = isHttps;
  var HttpClient = class {
    constructor(userAgent2, handlers, requestOptions) {
      this._ignoreSslError = false;
      this._allowRedirects = true;
      this._allowRedirectDowngrade = false;
      this._maxRedirects = 50;
      this._allowRetries = false;
      this._maxRetries = 1;
      this._keepAlive = false;
      this._disposed = false;
      this.userAgent = userAgent2;
      this.handlers = handlers || [];
      this.requestOptions = requestOptions;
      if (requestOptions) {
        if (requestOptions.ignoreSslError != null) {
          this._ignoreSslError = requestOptions.ignoreSslError;
        }
        this._socketTimeout = requestOptions.socketTimeout;
        if (requestOptions.allowRedirects != null) {
          this._allowRedirects = requestOptions.allowRedirects;
        }
        if (requestOptions.allowRedirectDowngrade != null) {
          this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
        }
        if (requestOptions.maxRedirects != null) {
          this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
        }
        if (requestOptions.keepAlive != null) {
          this._keepAlive = requestOptions.keepAlive;
        }
        if (requestOptions.allowRetries != null) {
          this._allowRetries = requestOptions.allowRetries;
        }
        if (requestOptions.maxRetries != null) {
          this._maxRetries = requestOptions.maxRetries;
        }
      }
    }
    options(requestUrl, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
      });
    }
    get(requestUrl, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("GET", requestUrl, null, additionalHeaders || {});
      });
    }
    del(requestUrl, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("DELETE", requestUrl, null, additionalHeaders || {});
      });
    }
    post(requestUrl, data, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("POST", requestUrl, data, additionalHeaders || {});
      });
    }
    patch(requestUrl, data, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("PATCH", requestUrl, data, additionalHeaders || {});
      });
    }
    put(requestUrl, data, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("PUT", requestUrl, data, additionalHeaders || {});
      });
    }
    head(requestUrl, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request("HEAD", requestUrl, null, additionalHeaders || {});
      });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
      return __awaiter(this, void 0, void 0, function* () {
        return this.request(verb, requestUrl, stream, additionalHeaders);
      });
    }
    getJson(requestUrl, additionalHeaders = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        const res = yield this.get(requestUrl, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.post(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.put(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.patch(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    request(verb, requestUrl, data, headers) {
      return __awaiter(this, void 0, void 0, function* () {
        if (this._disposed) {
          throw new Error("Client has already been disposed.");
        }
        const parsedUrl = new URL(requestUrl);
        let info = this._prepareRequest(verb, parsedUrl, headers);
        const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
        let numTries = 0;
        let response;
        do {
          response = yield this.requestRaw(info, data);
          if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
            let authenticationHandler;
            for (const handler of this.handlers) {
              if (handler.canHandleAuthentication(response)) {
                authenticationHandler = handler;
                break;
              }
            }
            if (authenticationHandler) {
              return authenticationHandler.handleAuthentication(this, info, data);
            } else {
              return response;
            }
          }
          let redirectsRemaining = this._maxRedirects;
          while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
            const redirectUrl = response.message.headers["location"];
            if (!redirectUrl) {
              break;
            }
            const parsedRedirectUrl = new URL(redirectUrl);
            if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
              throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
            }
            yield response.readBody();
            if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
              for (const header in headers) {
                if (header.toLowerCase() === "authorization") {
                  delete headers[header];
                }
              }
            }
            info = this._prepareRequest(verb, parsedRedirectUrl, headers);
            response = yield this.requestRaw(info, data);
            redirectsRemaining--;
          }
          if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
            return response;
          }
          numTries += 1;
          if (numTries < maxTries) {
            yield response.readBody();
            yield this._performExponentialBackoff(numTries);
          }
        } while (numTries < maxTries);
        return response;
      });
    }
    dispose() {
      if (this._agent) {
        this._agent.destroy();
      }
      this._disposed = true;
    }
    requestRaw(info, data) {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          function callbackForResult(err, res) {
            if (err) {
              reject(err);
            } else if (!res) {
              reject(new Error("Unknown error"));
            } else {
              resolve(res);
            }
          }
          this.requestRawWithCallback(info, data, callbackForResult);
        });
      });
    }
    requestRawWithCallback(info, data, onResult) {
      if (typeof data === "string") {
        if (!info.options.headers) {
          info.options.headers = {};
        }
        info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
      }
      let callbackCalled = false;
      function handleResult(err, res) {
        if (!callbackCalled) {
          callbackCalled = true;
          onResult(err, res);
        }
      }
      const req = info.httpModule.request(info.options, (msg) => {
        const res = new HttpClientResponse(msg);
        handleResult(void 0, res);
      });
      let socket;
      req.on("socket", (sock) => {
        socket = sock;
      });
      req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
        if (socket) {
          socket.end();
        }
        handleResult(new Error(`Request timeout: ${info.options.path}`));
      });
      req.on("error", function(err) {
        handleResult(err);
      });
      if (data && typeof data === "string") {
        req.write(data, "utf8");
      }
      if (data && typeof data !== "string") {
        data.on("close", function() {
          req.end();
        });
        data.pipe(req);
      } else {
        req.end();
      }
    }
    getAgent(serverUrl) {
      const parsedUrl = new URL(serverUrl);
      return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
      const info = {};
      info.parsedUrl = requestUrl;
      const usingSsl = info.parsedUrl.protocol === "https:";
      info.httpModule = usingSsl ? https2 : http2;
      const defaultPort = usingSsl ? 443 : 80;
      info.options = {};
      info.options.host = info.parsedUrl.hostname;
      info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
      info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
      info.options.method = method;
      info.options.headers = this._mergeHeaders(headers);
      if (this.userAgent != null) {
        info.options.headers["user-agent"] = this.userAgent;
      }
      info.options.agent = this._getAgent(info.parsedUrl);
      if (this.handlers) {
        for (const handler of this.handlers) {
          handler.prepareRequest(info.options);
        }
      }
      return info;
    }
    _mergeHeaders(headers) {
      if (this.requestOptions && this.requestOptions.headers) {
        return Object.assign({}, lowercaseKeys2(this.requestOptions.headers), lowercaseKeys2(headers || {}));
      }
      return lowercaseKeys2(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
      let clientHeader;
      if (this.requestOptions && this.requestOptions.headers) {
        clientHeader = lowercaseKeys2(this.requestOptions.headers)[header];
      }
      return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
      let agent;
      const proxyUrl = pm.getProxyUrl(parsedUrl);
      const useProxy = proxyUrl && proxyUrl.hostname;
      if (this._keepAlive && useProxy) {
        agent = this._proxyAgent;
      }
      if (this._keepAlive && !useProxy) {
        agent = this._agent;
      }
      if (agent) {
        return agent;
      }
      const usingSsl = parsedUrl.protocol === "https:";
      let maxSockets = 100;
      if (this.requestOptions) {
        maxSockets = this.requestOptions.maxSockets || http2.globalAgent.maxSockets;
      }
      if (proxyUrl && proxyUrl.hostname) {
        const agentOptions = {
          maxSockets,
          keepAlive: this._keepAlive,
          proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
            proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
          }), { host: proxyUrl.hostname, port: proxyUrl.port })
        };
        let tunnelAgent;
        const overHttps = proxyUrl.protocol === "https:";
        if (usingSsl) {
          tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
        } else {
          tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
        }
        agent = tunnelAgent(agentOptions);
        this._proxyAgent = agent;
      }
      if (this._keepAlive && !agent) {
        const options2 = { keepAlive: this._keepAlive, maxSockets };
        agent = usingSsl ? new https2.Agent(options2) : new http2.Agent(options2);
        this._agent = agent;
      }
      if (!agent) {
        agent = usingSsl ? https2.globalAgent : http2.globalAgent;
      }
      if (usingSsl && this._ignoreSslError) {
        agent.options = Object.assign(agent.options || {}, {
          rejectUnauthorized: false
        });
      }
      return agent;
    }
    _performExponentialBackoff(retryNumber) {
      return __awaiter(this, void 0, void 0, function* () {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise((resolve) => setTimeout(() => resolve(), ms));
      });
    }
    _processResponse(res, options2) {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          const statusCode = res.message.statusCode || 0;
          const response = {
            statusCode,
            result: null,
            headers: {}
          };
          if (statusCode === HttpCodes.NotFound) {
            resolve(response);
          }
          function dateTimeDeserializer(key, value) {
            if (typeof value === "string") {
              const a = new Date(value);
              if (!isNaN(a.valueOf())) {
                return a;
              }
            }
            return value;
          }
          let obj;
          let contents;
          try {
            contents = yield res.readBody();
            if (contents && contents.length > 0) {
              if (options2 && options2.deserializeDates) {
                obj = JSON.parse(contents, dateTimeDeserializer);
              } else {
                obj = JSON.parse(contents);
              }
              response.result = obj;
            }
            response.headers = res.message.headers;
          } catch (err) {
          }
          if (statusCode > 299) {
            let msg;
            if (obj && obj.message) {
              msg = obj.message;
            } else if (contents && contents.length > 0) {
              msg = contents;
            } else {
              msg = `Failed request: (${statusCode})`;
            }
            const err = new HttpClientError(msg, statusCode);
            err.result = response.result;
            reject(err);
          } else {
            resolve(response);
          }
        }));
      });
    }
  };
  exports.HttpClient = HttpClient;
  var lowercaseKeys2 = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
});
var require_auth = __commonJSMin((exports) => {
  "use strict";
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
  var BasicCredentialHandler = class {
    constructor(username, password) {
      this.username = username;
      this.password = password;
    }
    prepareRequest(options2) {
      if (!options2.headers) {
        throw Error("The request has no headers");
      }
      options2.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, void 0, void 0, function* () {
        throw new Error("not implemented");
      });
    }
  };
  exports.BasicCredentialHandler = BasicCredentialHandler;
  var BearerCredentialHandler = class {
    constructor(token) {
      this.token = token;
    }
    prepareRequest(options2) {
      if (!options2.headers) {
        throw Error("The request has no headers");
      }
      options2.headers["Authorization"] = `Bearer ${this.token}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, void 0, void 0, function* () {
        throw new Error("not implemented");
      });
    }
  };
  exports.BearerCredentialHandler = BearerCredentialHandler;
  var PersonalAccessTokenCredentialHandler = class {
    constructor(token) {
      this.token = token;
    }
    prepareRequest(options2) {
      if (!options2.headers) {
        throw Error("The request has no headers");
      }
      options2.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
    }
    canHandleAuthentication() {
      return false;
    }
    handleAuthentication() {
      return __awaiter(this, void 0, void 0, function* () {
        throw new Error("not implemented");
      });
    }
  };
  exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
});
var require_oidc_utils = __commonJSMin((exports) => {
  "use strict";
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.OidcClient = void 0;
  var http_client_1 = require_lib();
  var auth_1 = require_auth();
  var core_1 = require_core();
  var OidcClient = class {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
      const requestOptions = {
        allowRetries: allowRetry,
        maxRetries: maxRetry
      };
      return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
      const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
      if (!token) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
      }
      return token;
    }
    static getIDTokenUrl() {
      const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
      if (!runtimeUrl) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
      }
      return runtimeUrl;
    }
    static getCall(id_token_url) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        const httpclient = OidcClient.createHttpClient();
        const res = yield httpclient.getJson(id_token_url).catch((error) => {
          throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.result.message}`);
        });
        const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
        if (!id_token) {
          throw new Error("Response json body do not have ID Token field");
        }
        return id_token;
      });
    }
    static getIDToken(audience) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          let id_token_url = OidcClient.getIDTokenUrl();
          if (audience) {
            const encodedAudience = encodeURIComponent(audience);
            id_token_url = `${id_token_url}&audience=${encodedAudience}`;
          }
          core_1.debug(`ID token url is ${id_token_url}`);
          const id_token = yield OidcClient.getCall(id_token_url);
          core_1.setSecret(id_token);
          return id_token;
        } catch (error) {
          throw new Error(`Error message: ${error.message}`);
        }
      });
    }
  };
  exports.OidcClient = OidcClient;
});
var require_summary = __commonJSMin((exports) => {
  "use strict";
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
  var os_1 = __require("os");
  var fs_1 = __require("fs");
  var { access, appendFile, writeFile } = fs_1.promises;
  exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
  exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
  var Summary = class {
    constructor() {
      this._buffer = "";
    }
    filePath() {
      return __awaiter(this, void 0, void 0, function* () {
        if (this._filePath) {
          return this._filePath;
        }
        const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
        if (!pathFromEnv) {
          throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
        }
        try {
          yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
        } catch (_a) {
          throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
        }
        this._filePath = pathFromEnv;
        return this._filePath;
      });
    }
    wrap(tag, content, attrs = {}) {
      const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
      if (!content) {
        return `<${tag}${htmlAttrs}>`;
      }
      return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    write(options2) {
      return __awaiter(this, void 0, void 0, function* () {
        const overwrite = !!(options2 === null || options2 === void 0 ? void 0 : options2.overwrite);
        const filePath = yield this.filePath();
        const writeFunc = overwrite ? writeFile : appendFile;
        yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
        return this.emptyBuffer();
      });
    }
    clear() {
      return __awaiter(this, void 0, void 0, function* () {
        return this.emptyBuffer().write({ overwrite: true });
      });
    }
    stringify() {
      return this._buffer;
    }
    isEmptyBuffer() {
      return this._buffer.length === 0;
    }
    emptyBuffer() {
      this._buffer = "";
      return this;
    }
    addRaw(text, addEOL = false) {
      this._buffer += text;
      return addEOL ? this.addEOL() : this;
    }
    addEOL() {
      return this.addRaw(os_1.EOL);
    }
    addCodeBlock(code, lang) {
      const attrs = Object.assign({}, lang && { lang });
      const element = this.wrap("pre", this.wrap("code", code), attrs);
      return this.addRaw(element).addEOL();
    }
    addList(items, ordered = false) {
      const tag = ordered ? "ol" : "ul";
      const listItems = items.map((item) => this.wrap("li", item)).join("");
      const element = this.wrap(tag, listItems);
      return this.addRaw(element).addEOL();
    }
    addTable(rows) {
      const tableBody = rows.map((row) => {
        const cells = row.map((cell) => {
          if (typeof cell === "string") {
            return this.wrap("td", cell);
          }
          const { header, data, colspan, rowspan } = cell;
          const tag = header ? "th" : "td";
          const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
          return this.wrap(tag, data, attrs);
        }).join("");
        return this.wrap("tr", cells);
      }).join("");
      const element = this.wrap("table", tableBody);
      return this.addRaw(element).addEOL();
    }
    addDetails(label, content) {
      const element = this.wrap("details", this.wrap("summary", label) + content);
      return this.addRaw(element).addEOL();
    }
    addImage(src, alt, options2) {
      const { width, height } = options2 || {};
      const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
      const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
      return this.addRaw(element).addEOL();
    }
    addHeading(text, level) {
      const tag = `h${level}`;
      const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
      const element = this.wrap(allowedTag, text);
      return this.addRaw(element).addEOL();
    }
    addSeparator() {
      const element = this.wrap("hr", null);
      return this.addRaw(element).addEOL();
    }
    addBreak() {
      const element = this.wrap("br", null);
      return this.addRaw(element).addEOL();
    }
    addQuote(text, cite) {
      const attrs = Object.assign({}, cite && { cite });
      const element = this.wrap("blockquote", text, attrs);
      return this.addRaw(element).addEOL();
    }
    addLink(text, href) {
      const element = this.wrap("a", text, { href });
      return this.addRaw(element).addEOL();
    }
  };
  var _summary = new Summary();
  exports.markdownSummary = _summary;
  exports.summary = _summary;
});
var require_path_utils = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
  var path9 = __importStar(__require("path"));
  function toPosixPath(pth) {
    return pth.replace(/[\\]/g, "/");
  }
  exports.toPosixPath = toPosixPath;
  function toWin32Path(pth) {
    return pth.replace(/[/]/g, "\\");
  }
  exports.toWin32Path = toWin32Path;
  function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path9.sep);
  }
  exports.toPlatformPath = toPlatformPath;
});
var require_core = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
  var command_1 = require_command();
  var file_command_1 = require_file_command();
  var utils_1 = require_utils();
  var os2 = __importStar(__require("os"));
  var path9 = __importStar(__require("path"));
  var oidc_utils_1 = require_oidc_utils();
  var ExitCode;
  (function(ExitCode2) {
    ExitCode2[ExitCode2["Success"] = 0] = "Success";
    ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
  })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
  function exportVariable(name2, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name2] = convertedVal;
    const filePath = process.env["GITHUB_ENV"] || "";
    if (filePath) {
      const delimiter = "_GitHubActionsFileCommandDelimeter_";
      const commandValue = `${name2}<<${delimiter}${os2.EOL}${convertedVal}${os2.EOL}${delimiter}`;
      file_command_1.issueCommand("ENV", commandValue);
    } else {
      command_1.issueCommand("set-env", { name: name2 }, convertedVal);
    }
  }
  exports.exportVariable = exportVariable;
  function setSecret(secret) {
    command_1.issueCommand("add-mask", {}, secret);
  }
  exports.setSecret = setSecret;
  function addPath(inputPath) {
    const filePath = process.env["GITHUB_PATH"] || "";
    if (filePath) {
      file_command_1.issueCommand("PATH", inputPath);
    } else {
      command_1.issueCommand("add-path", {}, inputPath);
    }
    process.env["PATH"] = `${inputPath}${path9.delimiter}${process.env["PATH"]}`;
  }
  exports.addPath = addPath;
  function getInput4(name2, options2) {
    const val = process.env[`INPUT_${name2.replace(/ /g, "_").toUpperCase()}`] || "";
    if (options2 && options2.required && !val) {
      throw new Error(`Input required and not supplied: ${name2}`);
    }
    if (options2 && options2.trimWhitespace === false) {
      return val;
    }
    return val.trim();
  }
  exports.getInput = getInput4;
  function getMultilineInput(name2, options2) {
    const inputs = getInput4(name2, options2).split("\n").filter((x) => x !== "");
    return inputs;
  }
  exports.getMultilineInput = getMultilineInput;
  function getBooleanInput(name2, options2) {
    const trueValue = ["true", "True", "TRUE"];
    const falseValue = ["false", "False", "FALSE"];
    const val = getInput4(name2, options2);
    if (trueValue.includes(val))
      return true;
    if (falseValue.includes(val))
      return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name2}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
  }
  exports.getBooleanInput = getBooleanInput;
  function setOutput(name2, value) {
    process.stdout.write(os2.EOL);
    command_1.issueCommand("set-output", { name: name2 }, value);
  }
  exports.setOutput = setOutput;
  function setCommandEcho(enabled) {
    command_1.issue("echo", enabled ? "on" : "off");
  }
  exports.setCommandEcho = setCommandEcho;
  function setFailed4(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
  }
  exports.setFailed = setFailed4;
  function isDebug() {
    return process.env["RUNNER_DEBUG"] === "1";
  }
  exports.isDebug = isDebug;
  function debug(message) {
    command_1.issueCommand("debug", {}, message);
  }
  exports.debug = debug;
  function error(message, properties = {}) {
    command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
  }
  exports.error = error;
  function warning(message, properties = {}) {
    command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
  }
  exports.warning = warning;
  function notice(message, properties = {}) {
    command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
  }
  exports.notice = notice;
  function info(message) {
    process.stdout.write(message + os2.EOL);
  }
  exports.info = info;
  function startGroup(name2) {
    command_1.issue("group", name2);
  }
  exports.startGroup = startGroup;
  function endGroup() {
    command_1.issue("endgroup");
  }
  exports.endGroup = endGroup;
  function group(name2, fn) {
    return __awaiter(this, void 0, void 0, function* () {
      startGroup(name2);
      let result;
      try {
        result = yield fn();
      } finally {
        endGroup();
      }
      return result;
    });
  }
  exports.group = group;
  function saveState(name2, value) {
    command_1.issueCommand("save-state", { name: name2 }, value);
  }
  exports.saveState = saveState;
  function getState(name2) {
    return process.env[`STATE_${name2}`] || "";
  }
  exports.getState = getState;
  function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
  }
  exports.getIDToken = getIDToken;
  var summary_1 = require_summary();
  Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
    return summary_1.summary;
  } });
  var summary_2 = require_summary();
  Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
    return summary_2.markdownSummary;
  } });
  var path_utils_1 = require_path_utils();
  Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
    return path_utils_1.toPosixPath;
  } });
  Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
    return path_utils_1.toWin32Path;
  } });
  Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
    return path_utils_1.toPlatformPath;
  } });
});
var require_windows = __commonJSMin((exports, module2) => {
  module2.exports = isexe;
  isexe.sync = sync2;
  var fs9 = __require("fs");
  function checkPathExt(path9, options2) {
    var pathext = options2.pathExt !== void 0 ? options2.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path9.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat, path9, options2) {
    if (!stat.isSymbolicLink() && !stat.isFile()) {
      return false;
    }
    return checkPathExt(path9, options2);
  }
  function isexe(path9, options2, cb) {
    fs9.stat(path9, function(er, stat) {
      cb(er, er ? false : checkStat(stat, path9, options2));
    });
  }
  function sync2(path9, options2) {
    return checkStat(fs9.statSync(path9), path9, options2);
  }
});
var require_mode = __commonJSMin((exports, module2) => {
  module2.exports = isexe;
  isexe.sync = sync2;
  var fs9 = __require("fs");
  function isexe(path9, options2, cb) {
    fs9.stat(path9, function(er, stat) {
      cb(er, er ? false : checkStat(stat, options2));
    });
  }
  function sync2(path9, options2) {
    return checkStat(fs9.statSync(path9), options2);
  }
  function checkStat(stat, options2) {
    return stat.isFile() && checkMode(stat, options2);
  }
  function checkMode(stat, options2) {
    var mod = stat.mode;
    var uid = stat.uid;
    var gid = stat.gid;
    var myUid = options2.uid !== void 0 ? options2.uid : process.getuid && process.getuid();
    var myGid = options2.gid !== void 0 ? options2.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
});
var require_isexe = __commonJSMin((exports, module2) => {
  var fs9 = __require("fs");
  var core4;
  if (process.platform === "win32" || global.TESTING_WINDOWS) {
    core4 = require_windows();
  } else {
    core4 = require_mode();
  }
  module2.exports = isexe;
  isexe.sync = sync2;
  function isexe(path9, options2, cb) {
    if (typeof options2 === "function") {
      cb = options2;
      options2 = {};
    }
    if (!cb) {
      if (typeof Promise !== "function") {
        throw new TypeError("callback not provided");
      }
      return new Promise(function(resolve, reject) {
        isexe(path9, options2 || {}, function(er, is) {
          if (er) {
            reject(er);
          } else {
            resolve(is);
          }
        });
      });
    }
    core4(path9, options2 || {}, function(er, is) {
      if (er) {
        if (er.code === "EACCES" || options2 && options2.ignoreErrors) {
          er = null;
          is = false;
        }
      }
      cb(er, is);
    });
  }
  function sync2(path9, options2) {
    try {
      return core4.sync(path9, options2 || {});
    } catch (er) {
      if (options2 && options2.ignoreErrors || er.code === "EACCES") {
        return false;
      } else {
        throw er;
      }
    }
  }
});
var require_which = __commonJSMin((exports, module2) => {
  var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
  var path9 = __require("path");
  var COLON = isWindows ? ";" : ":";
  var isexe = require_isexe();
  var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
  var getPathInfo = (cmd, opt) => {
    const colon = opt.colon || COLON;
    const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
      ...isWindows ? [process.cwd()] : [],
      ...(opt.path || process.env.PATH || "").split(colon)
    ];
    const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
    const pathExt = isWindows ? pathExtExe.split(colon) : [""];
    if (isWindows) {
      if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
        pathExt.unshift("");
    }
    return {
      pathEnv,
      pathExt,
      pathExtExe
    };
  };
  var which = (cmd, opt, cb) => {
    if (typeof opt === "function") {
      cb = opt;
      opt = {};
    }
    if (!opt)
      opt = {};
    const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
    const found = [];
    const step = (i) => new Promise((resolve, reject) => {
      if (i === pathEnv.length)
        return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path9.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      resolve(subStep(p, i, 0));
    });
    const subStep = (p, i, ii) => new Promise((resolve, reject) => {
      if (ii === pathExt.length)
        return resolve(step(i + 1));
      const ext = pathExt[ii];
      isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext);
          else
            return resolve(p + ext);
        }
        return resolve(subStep(p, i, ii + 1));
      });
    });
    return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
  };
  var whichSync = (cmd, opt) => {
    opt = opt || {};
    const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
    const found = [];
    for (let i = 0; i < pathEnv.length; i++) {
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path9.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      for (let j = 0; j < pathExt.length; j++) {
        const cur = p + pathExt[j];
        try {
          const is = isexe.sync(cur, { pathExt: pathExtExe });
          if (is) {
            if (opt.all)
              found.push(cur);
            else
              return cur;
          }
        } catch (ex) {
        }
      }
    }
    if (opt.all && found.length)
      return found;
    if (opt.nothrow)
      return null;
    throw getNotFoundError(cmd);
  };
  module2.exports = which;
  which.sync = whichSync;
});
var require_path_key = __commonJSMin((exports, module2) => {
  "use strict";
  var pathKey = (options2 = {}) => {
    const environment = options2.env || process.env;
    const platform = options2.platform || process.platform;
    if (platform !== "win32") {
      return "PATH";
    }
    return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
  };
  module2.exports = pathKey;
  module2.exports.default = pathKey;
});
var require_resolveCommand = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var which = require_which();
  var getPathKey = require_path_key();
  function resolveCommandAttempt(parsed, withoutPathExt) {
    const env = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
    if (shouldSwitchCwd) {
      try {
        process.chdir(parsed.options.cwd);
      } catch (err) {
      }
    }
    let resolved;
    try {
      resolved = which.sync(parsed.command, {
        path: env[getPathKey({ env })],
        pathExt: withoutPathExt ? path9.delimiter : void 0
      });
    } catch (e) {
    } finally {
      if (shouldSwitchCwd) {
        process.chdir(cwd);
      }
    }
    if (resolved) {
      resolved = path9.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
    }
    return resolved;
  }
  function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
  }
  module2.exports = resolveCommand;
});
var require_escape = __commonJSMin((exports, module2) => {
  "use strict";
  var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
  function escapeCommand(arg) {
    arg = arg.replace(metaCharsRegExp, "^$1");
    return arg;
  }
  function escapeArgument(arg, doubleEscapeMetaChars) {
    arg = `${arg}`;
    arg = arg.replace(/(\\*)"/g, '$1$1\\"');
    arg = arg.replace(/(\\*)$/, "$1$1");
    arg = `"${arg}"`;
    arg = arg.replace(metaCharsRegExp, "^$1");
    if (doubleEscapeMetaChars) {
      arg = arg.replace(metaCharsRegExp, "^$1");
    }
    return arg;
  }
  module2.exports.command = escapeCommand;
  module2.exports.argument = escapeArgument;
});
var require_shebang_regex = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = /^#!(.*)/;
});
var require_shebang_command = __commonJSMin((exports, module2) => {
  "use strict";
  var shebangRegex = require_shebang_regex();
  module2.exports = (string = "") => {
    const match = string.match(shebangRegex);
    if (!match) {
      return null;
    }
    const [path9, argument] = match[0].replace(/#! ?/, "").split(" ");
    const binary = path9.split("/").pop();
    if (binary === "env") {
      return argument;
    }
    return argument ? `${binary} ${argument}` : binary;
  };
});
var require_readShebang = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = __require("fs");
  var shebangCommand = require_shebang_command();
  function readShebang(command) {
    const size = 150;
    const buffer = Buffer.alloc(size);
    let fd;
    try {
      fd = fs9.openSync(command, "r");
      fs9.readSync(fd, buffer, 0, size, 0);
      fs9.closeSync(fd);
    } catch (e) {
    }
    return shebangCommand(buffer.toString());
  }
  module2.exports = readShebang;
});
var require_parse = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var resolveCommand = require_resolveCommand();
  var escape = require_escape();
  var readShebang = require_readShebang();
  var isWin = process.platform === "win32";
  var isExecutableRegExp = /\.(?:com|exe)$/i;
  var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
  function detectShebang(parsed) {
    parsed.file = resolveCommand(parsed);
    const shebang = parsed.file && readShebang(parsed.file);
    if (shebang) {
      parsed.args.unshift(parsed.file);
      parsed.command = shebang;
      return resolveCommand(parsed);
    }
    return parsed.file;
  }
  function parseNonShell(parsed) {
    if (!isWin) {
      return parsed;
    }
    const commandFile = detectShebang(parsed);
    const needsShell = !isExecutableRegExp.test(commandFile);
    if (parsed.options.forceShell || needsShell) {
      const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
      parsed.command = path9.normalize(parsed.command);
      parsed.command = escape.command(parsed.command);
      parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));
      const shellCommand = [parsed.command].concat(parsed.args).join(" ");
      parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
      parsed.command = process.env.comspec || "cmd.exe";
      parsed.options.windowsVerbatimArguments = true;
    }
    return parsed;
  }
  function parse4(command, args, options2) {
    if (args && !Array.isArray(args)) {
      options2 = args;
      args = null;
    }
    args = args ? args.slice(0) : [];
    options2 = Object.assign({}, options2);
    const parsed = {
      command,
      args,
      options: options2,
      file: void 0,
      original: {
        command,
        args
      }
    };
    return options2.shell ? parsed : parseNonShell(parsed);
  }
  module2.exports = parse4;
});
var require_enoent = __commonJSMin((exports, module2) => {
  "use strict";
  var isWin = process.platform === "win32";
  function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
      code: "ENOENT",
      errno: "ENOENT",
      syscall: `${syscall} ${original.command}`,
      path: original.command,
      spawnargs: original.args
    });
  }
  function hookChildProcess(cp, parsed) {
    if (!isWin) {
      return;
    }
    const originalEmit = cp.emit;
    cp.emit = function(name2, arg1) {
      if (name2 === "exit") {
        const err = verifyENOENT(arg1, parsed, "spawn");
        if (err) {
          return originalEmit.call(cp, "error", err);
        }
      }
      return originalEmit.apply(cp, arguments);
    };
  }
  function verifyENOENT(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawn");
    }
    return null;
  }
  function verifyENOENTSync(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
    return null;
  }
  module2.exports = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError
  };
});
var require_cross_spawn = __commonJSMin((exports, module2) => {
  "use strict";
  var cp = __require("child_process");
  var parse4 = require_parse();
  var enoent = require_enoent();
  function spawn2(command, args, options2) {
    const parsed = parse4(command, args, options2);
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
    enoent.hookChildProcess(spawned, parsed);
    return spawned;
  }
  function spawnSync(command, args, options2) {
    const parsed = parse4(command, args, options2);
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
    return result;
  }
  module2.exports = spawn2;
  module2.exports.spawn = spawn2;
  module2.exports.sync = spawnSync;
  module2.exports._parse = parse4;
  module2.exports._enoent = enoent;
});
var require_strip_final_newline = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = (input) => {
    const LF = typeof input === "string" ? "\n" : "\n".charCodeAt();
    const CR = typeof input === "string" ? "\r" : "\r".charCodeAt();
    if (input[input.length - 1] === LF) {
      input = input.slice(0, input.length - 1);
    }
    if (input[input.length - 1] === CR) {
      input = input.slice(0, input.length - 1);
    }
    return input;
  };
});
var require_npm_run_path = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var pathKey = require_path_key();
  var npmRunPath = (options2) => {
    options2 = {
      cwd: process.cwd(),
      path: process.env[pathKey()],
      execPath: process.execPath,
      ...options2
    };
    let previous;
    let cwdPath = path9.resolve(options2.cwd);
    const result = [];
    while (previous !== cwdPath) {
      result.push(path9.join(cwdPath, "node_modules/.bin"));
      previous = cwdPath;
      cwdPath = path9.resolve(cwdPath, "..");
    }
    const execPathDir = path9.resolve(options2.cwd, options2.execPath, "..");
    result.push(execPathDir);
    return result.concat(options2.path).join(path9.delimiter);
  };
  module2.exports = npmRunPath;
  module2.exports.default = npmRunPath;
  module2.exports.env = (options2) => {
    options2 = {
      env: process.env,
      ...options2
    };
    const env = { ...options2.env };
    const path10 = pathKey({ env });
    options2.path = env[path10];
    env[path10] = module2.exports(options2);
    return env;
  };
});
var require_mimic_fn = __commonJSMin((exports, module2) => {
  "use strict";
  var mimicFn = (to, from) => {
    for (const prop of Reflect.ownKeys(from)) {
      Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    }
    return to;
  };
  module2.exports = mimicFn;
  module2.exports.default = mimicFn;
});
var require_onetime = __commonJSMin((exports, module2) => {
  "use strict";
  var mimicFn = require_mimic_fn();
  var calledFunctions = /* @__PURE__ */ new WeakMap();
  var onetime = (function_, options2 = {}) => {
    if (typeof function_ !== "function") {
      throw new TypeError("Expected a function");
    }
    let returnValue;
    let callCount = 0;
    const functionName = function_.displayName || function_.name || "<anonymous>";
    const onetime2 = function(...arguments_) {
      calledFunctions.set(onetime2, ++callCount);
      if (callCount === 1) {
        returnValue = function_.apply(this, arguments_);
        function_ = null;
      } else if (options2.throw === true) {
        throw new Error(`Function \`${functionName}\` can only be called once`);
      }
      return returnValue;
    };
    mimicFn(onetime2, function_);
    calledFunctions.set(onetime2, callCount);
    return onetime2;
  };
  module2.exports = onetime;
  module2.exports.default = onetime;
  module2.exports.callCount = (function_) => {
    if (!calledFunctions.has(function_)) {
      throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
    }
    return calledFunctions.get(function_);
  };
});
var require_core2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SIGNALS = void 0;
  var SIGNALS = [
    {
      name: "SIGHUP",
      number: 1,
      action: "terminate",
      description: "Terminal closed",
      standard: "posix"
    },
    {
      name: "SIGINT",
      number: 2,
      action: "terminate",
      description: "User interruption with CTRL-C",
      standard: "ansi"
    },
    {
      name: "SIGQUIT",
      number: 3,
      action: "core",
      description: "User interruption with CTRL-\\",
      standard: "posix"
    },
    {
      name: "SIGILL",
      number: 4,
      action: "core",
      description: "Invalid machine instruction",
      standard: "ansi"
    },
    {
      name: "SIGTRAP",
      number: 5,
      action: "core",
      description: "Debugger breakpoint",
      standard: "posix"
    },
    {
      name: "SIGABRT",
      number: 6,
      action: "core",
      description: "Aborted",
      standard: "ansi"
    },
    {
      name: "SIGIOT",
      number: 6,
      action: "core",
      description: "Aborted",
      standard: "bsd"
    },
    {
      name: "SIGBUS",
      number: 7,
      action: "core",
      description: "Bus error due to misaligned, non-existing address or paging error",
      standard: "bsd"
    },
    {
      name: "SIGEMT",
      number: 7,
      action: "terminate",
      description: "Command should be emulated but is not implemented",
      standard: "other"
    },
    {
      name: "SIGFPE",
      number: 8,
      action: "core",
      description: "Floating point arithmetic error",
      standard: "ansi"
    },
    {
      name: "SIGKILL",
      number: 9,
      action: "terminate",
      description: "Forced termination",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGUSR1",
      number: 10,
      action: "terminate",
      description: "Application-specific signal",
      standard: "posix"
    },
    {
      name: "SIGSEGV",
      number: 11,
      action: "core",
      description: "Segmentation fault",
      standard: "ansi"
    },
    {
      name: "SIGUSR2",
      number: 12,
      action: "terminate",
      description: "Application-specific signal",
      standard: "posix"
    },
    {
      name: "SIGPIPE",
      number: 13,
      action: "terminate",
      description: "Broken pipe or socket",
      standard: "posix"
    },
    {
      name: "SIGALRM",
      number: 14,
      action: "terminate",
      description: "Timeout or timer",
      standard: "posix"
    },
    {
      name: "SIGTERM",
      number: 15,
      action: "terminate",
      description: "Termination",
      standard: "ansi"
    },
    {
      name: "SIGSTKFLT",
      number: 16,
      action: "terminate",
      description: "Stack is empty or overflowed",
      standard: "other"
    },
    {
      name: "SIGCHLD",
      number: 17,
      action: "ignore",
      description: "Child process terminated, paused or unpaused",
      standard: "posix"
    },
    {
      name: "SIGCLD",
      number: 17,
      action: "ignore",
      description: "Child process terminated, paused or unpaused",
      standard: "other"
    },
    {
      name: "SIGCONT",
      number: 18,
      action: "unpause",
      description: "Unpaused",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGSTOP",
      number: 19,
      action: "pause",
      description: "Paused",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGTSTP",
      number: 20,
      action: "pause",
      description: 'Paused using CTRL-Z or "suspend"',
      standard: "posix"
    },
    {
      name: "SIGTTIN",
      number: 21,
      action: "pause",
      description: "Background process cannot read terminal input",
      standard: "posix"
    },
    {
      name: "SIGBREAK",
      number: 21,
      action: "terminate",
      description: "User interruption with CTRL-BREAK",
      standard: "other"
    },
    {
      name: "SIGTTOU",
      number: 22,
      action: "pause",
      description: "Background process cannot write to terminal output",
      standard: "posix"
    },
    {
      name: "SIGURG",
      number: 23,
      action: "ignore",
      description: "Socket received out-of-band data",
      standard: "bsd"
    },
    {
      name: "SIGXCPU",
      number: 24,
      action: "core",
      description: "Process timed out",
      standard: "bsd"
    },
    {
      name: "SIGXFSZ",
      number: 25,
      action: "core",
      description: "File too big",
      standard: "bsd"
    },
    {
      name: "SIGVTALRM",
      number: 26,
      action: "terminate",
      description: "Timeout or timer",
      standard: "bsd"
    },
    {
      name: "SIGPROF",
      number: 27,
      action: "terminate",
      description: "Timeout or timer",
      standard: "bsd"
    },
    {
      name: "SIGWINCH",
      number: 28,
      action: "ignore",
      description: "Terminal window size changed",
      standard: "bsd"
    },
    {
      name: "SIGIO",
      number: 29,
      action: "terminate",
      description: "I/O is available",
      standard: "other"
    },
    {
      name: "SIGPOLL",
      number: 29,
      action: "terminate",
      description: "Watched event",
      standard: "other"
    },
    {
      name: "SIGINFO",
      number: 29,
      action: "ignore",
      description: "Request for process information",
      standard: "other"
    },
    {
      name: "SIGPWR",
      number: 30,
      action: "terminate",
      description: "Device running out of power",
      standard: "systemv"
    },
    {
      name: "SIGSYS",
      number: 31,
      action: "core",
      description: "Invalid system call",
      standard: "other"
    },
    {
      name: "SIGUNUSED",
      number: 31,
      action: "terminate",
      description: "Invalid system call",
      standard: "other"
    }
  ];
  exports.SIGNALS = SIGNALS;
});
var require_realtime = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SIGRTMAX = exports.getRealtimeSignals = void 0;
  var getRealtimeSignals = function() {
    const length = SIGRTMAX - SIGRTMIN + 1;
    return Array.from({ length }, getRealtimeSignal);
  };
  exports.getRealtimeSignals = getRealtimeSignals;
  var getRealtimeSignal = function(value, index) {
    return {
      name: `SIGRT${index + 1}`,
      number: SIGRTMIN + index,
      action: "terminate",
      description: "Application-specific signal (realtime)",
      standard: "posix"
    };
  };
  var SIGRTMIN = 34;
  var SIGRTMAX = 64;
  exports.SIGRTMAX = SIGRTMAX;
});
var require_signals = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSignals = void 0;
  var _os = __require("os");
  var _core = require_core2();
  var _realtime = require_realtime();
  var getSignals = function() {
    const realtimeSignals = (0, _realtime.getRealtimeSignals)();
    const signals = [..._core.SIGNALS, ...realtimeSignals].map(normalizeSignal);
    return signals;
  };
  exports.getSignals = getSignals;
  var normalizeSignal = function({
    name: name2,
    number: defaultNumber,
    description,
    action,
    forced = false,
    standard
  }) {
    const {
      signals: { [name2]: constantSignal }
    } = _os.constants;
    const supported = constantSignal !== void 0;
    const number = supported ? constantSignal : defaultNumber;
    return { name: name2, number, description, supported, action, forced, standard };
  };
});
var require_main = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.signalsByNumber = exports.signalsByName = void 0;
  var _os = __require("os");
  var _signals = require_signals();
  var _realtime = require_realtime();
  var getSignalsByName = function() {
    const signals = (0, _signals.getSignals)();
    return signals.reduce(getSignalByName, {});
  };
  var getSignalByName = function(signalByNameMemo, { name: name2, number, description, supported, action, forced, standard }) {
    return {
      ...signalByNameMemo,
      [name2]: { name: name2, number, description, supported, action, forced, standard }
    };
  };
  var signalsByName = getSignalsByName();
  exports.signalsByName = signalsByName;
  var getSignalsByNumber = function() {
    const signals = (0, _signals.getSignals)();
    const length = _realtime.SIGRTMAX + 1;
    const signalsA = Array.from({ length }, (value, number) => getSignalByNumber(number, signals));
    return Object.assign({}, ...signalsA);
  };
  var getSignalByNumber = function(number, signals) {
    const signal = findSignalByNumber(number, signals);
    if (signal === void 0) {
      return {};
    }
    const { name: name2, description, supported, action, forced, standard } = signal;
    return {
      [number]: {
        name: name2,
        number,
        description,
        supported,
        action,
        forced,
        standard
      }
    };
  };
  var findSignalByNumber = function(number, signals) {
    const signal = signals.find(({ name: name2 }) => _os.constants.signals[name2] === number);
    if (signal !== void 0) {
      return signal;
    }
    return signals.find((signalA) => signalA.number === number);
  };
  var signalsByNumber = getSignalsByNumber();
  exports.signalsByNumber = signalsByNumber;
});
var require_error = __commonJSMin((exports, module2) => {
  "use strict";
  var { signalsByName } = require_main();
  var getErrorPrefix = ({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled }) => {
    if (timedOut) {
      return `timed out after ${timeout} milliseconds`;
    }
    if (isCanceled) {
      return "was canceled";
    }
    if (errorCode !== void 0) {
      return `failed with ${errorCode}`;
    }
    if (signal !== void 0) {
      return `was killed with ${signal} (${signalDescription})`;
    }
    if (exitCode !== void 0) {
      return `failed with exit code ${exitCode}`;
    }
    return "failed";
  };
  var makeError = ({
    stdout,
    stderr,
    all,
    error,
    signal,
    exitCode,
    command,
    escapedCommand,
    timedOut,
    isCanceled,
    killed,
    parsed: { options: { timeout } }
  }) => {
    exitCode = exitCode === null ? void 0 : exitCode;
    signal = signal === null ? void 0 : signal;
    const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
    const errorCode = error && error.code;
    const prefix2 = getErrorPrefix({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled });
    const execaMessage = `Command ${prefix2}: ${command}`;
    const isError = Object.prototype.toString.call(error) === "[object Error]";
    const shortMessage = isError ? `${execaMessage}
${error.message}` : execaMessage;
    const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
    if (isError) {
      error.originalMessage = error.message;
      error.message = message;
    } else {
      error = new Error(message);
    }
    error.shortMessage = shortMessage;
    error.command = command;
    error.escapedCommand = escapedCommand;
    error.exitCode = exitCode;
    error.signal = signal;
    error.signalDescription = signalDescription;
    error.stdout = stdout;
    error.stderr = stderr;
    if (all !== void 0) {
      error.all = all;
    }
    if ("bufferedData" in error) {
      delete error.bufferedData;
    }
    error.failed = true;
    error.timedOut = Boolean(timedOut);
    error.isCanceled = isCanceled;
    error.killed = killed && !timedOut;
    return error;
  };
  module2.exports = makeError;
});
var require_stdio = __commonJSMin((exports, module2) => {
  "use strict";
  var aliases = ["stdin", "stdout", "stderr"];
  var hasAlias = (options2) => aliases.some((alias) => options2[alias] !== void 0);
  var normalizeStdio = (options2) => {
    if (!options2) {
      return;
    }
    const { stdio } = options2;
    if (stdio === void 0) {
      return aliases.map((alias) => options2[alias]);
    }
    if (hasAlias(options2)) {
      throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map((alias) => `\`${alias}\``).join(", ")}`);
    }
    if (typeof stdio === "string") {
      return stdio;
    }
    if (!Array.isArray(stdio)) {
      throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
    }
    const length = Math.max(stdio.length, aliases.length);
    return Array.from({ length }, (value, index) => stdio[index]);
  };
  module2.exports = normalizeStdio;
  module2.exports.node = (options2) => {
    const stdio = normalizeStdio(options2);
    if (stdio === "ipc") {
      return "ipc";
    }
    if (stdio === void 0 || typeof stdio === "string") {
      return [stdio, stdio, stdio, "ipc"];
    }
    if (stdio.includes("ipc")) {
      return stdio;
    }
    return [...stdio, "ipc"];
  };
});
var require_signals2 = __commonJSMin((exports, module2) => {
  module2.exports = [
    "SIGABRT",
    "SIGALRM",
    "SIGHUP",
    "SIGINT",
    "SIGTERM"
  ];
  if (process.platform !== "win32") {
    module2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
  }
  if (process.platform === "linux") {
    module2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  }
});
var require_signal_exit = __commonJSMin((exports, module2) => {
  var process2 = global.process;
  if (typeof process2 !== "object" || !process2) {
    module2.exports = function() {
    };
  } else {
    assert = __require("assert");
    signals = require_signals2();
    isWin = /^win/i.test(process2.platform);
    EE = __require("events");
    if (typeof EE !== "function") {
      EE = EE.EventEmitter;
    }
    if (process2.__signal_exit_emitter__) {
      emitter = process2.__signal_exit_emitter__;
    } else {
      emitter = process2.__signal_exit_emitter__ = new EE();
      emitter.count = 0;
      emitter.emitted = {};
    }
    if (!emitter.infinite) {
      emitter.setMaxListeners(Infinity);
      emitter.infinite = true;
    }
    module2.exports = function(cb, opts) {
      if (global.process !== process2) {
        return;
      }
      assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
      if (loaded === false) {
        load();
      }
      var ev = "exit";
      if (opts && opts.alwaysLast) {
        ev = "afterexit";
      }
      var remove = function() {
        emitter.removeListener(ev, cb);
        if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
          unload();
        }
      };
      emitter.on(ev, cb);
      return remove;
    };
    unload = function unload2() {
      if (!loaded || global.process !== process2) {
        return;
      }
      loaded = false;
      signals.forEach(function(sig) {
        try {
          process2.removeListener(sig, sigListeners[sig]);
        } catch (er) {
        }
      });
      process2.emit = originalProcessEmit;
      process2.reallyExit = originalProcessReallyExit;
      emitter.count -= 1;
    };
    module2.exports.unload = unload;
    emit = function emit2(event, code, signal) {
      if (emitter.emitted[event]) {
        return;
      }
      emitter.emitted[event] = true;
      emitter.emit(event, code, signal);
    };
    sigListeners = {};
    signals.forEach(function(sig) {
      sigListeners[sig] = function listener() {
        if (process2 !== global.process) {
          return;
        }
        var listeners = process2.listeners(sig);
        if (listeners.length === emitter.count) {
          unload();
          emit("exit", null, sig);
          emit("afterexit", null, sig);
          if (isWin && sig === "SIGHUP") {
            sig = "SIGINT";
          }
          process2.kill(process2.pid, sig);
        }
      };
    });
    module2.exports.signals = function() {
      return signals;
    };
    loaded = false;
    load = function load2() {
      if (loaded || process2 !== global.process) {
        return;
      }
      loaded = true;
      emitter.count += 1;
      signals = signals.filter(function(sig) {
        try {
          process2.on(sig, sigListeners[sig]);
          return true;
        } catch (er) {
          return false;
        }
      });
      process2.emit = processEmit;
      process2.reallyExit = processReallyExit;
    };
    module2.exports.load = load;
    originalProcessReallyExit = process2.reallyExit;
    processReallyExit = function processReallyExit2(code) {
      if (process2 !== global.process) {
        return;
      }
      process2.exitCode = code || 0;
      emit("exit", process2.exitCode, null);
      emit("afterexit", process2.exitCode, null);
      originalProcessReallyExit.call(process2, process2.exitCode);
    };
    originalProcessEmit = process2.emit;
    processEmit = function processEmit2(ev, arg) {
      if (ev === "exit" && process2 === global.process) {
        if (arg !== void 0) {
          process2.exitCode = arg;
        }
        var ret = originalProcessEmit.apply(this, arguments);
        emit("exit", process2.exitCode, null);
        emit("afterexit", process2.exitCode, null);
        return ret;
      } else {
        return originalProcessEmit.apply(this, arguments);
      }
    };
  }
  var assert;
  var signals;
  var isWin;
  var EE;
  var emitter;
  var unload;
  var emit;
  var sigListeners;
  var loaded;
  var load;
  var originalProcessReallyExit;
  var processReallyExit;
  var originalProcessEmit;
  var processEmit;
});
var require_kill = __commonJSMin((exports, module2) => {
  "use strict";
  var os2 = __require("os");
  var onExit = require_signal_exit();
  var DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
  var spawnedKill = (kill, signal = "SIGTERM", options2 = {}) => {
    const killResult = kill(signal);
    setKillTimeout(kill, signal, options2, killResult);
    return killResult;
  };
  var setKillTimeout = (kill, signal, options2, killResult) => {
    if (!shouldForceKill(signal, options2, killResult)) {
      return;
    }
    const timeout = getForceKillAfterTimeout(options2);
    const t = setTimeout(() => {
      kill("SIGKILL");
    }, timeout);
    if (t.unref) {
      t.unref();
    }
  };
  var shouldForceKill = (signal, { forceKillAfterTimeout }, killResult) => {
    return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
  };
  var isSigterm = (signal) => {
    return signal === os2.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
  };
  var getForceKillAfterTimeout = ({ forceKillAfterTimeout = true }) => {
    if (forceKillAfterTimeout === true) {
      return DEFAULT_FORCE_KILL_TIMEOUT;
    }
    if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
      throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
    }
    return forceKillAfterTimeout;
  };
  var spawnedCancel = (spawned, context3) => {
    const killResult = spawned.kill();
    if (killResult) {
      context3.isCanceled = true;
    }
  };
  var timeoutKill = (spawned, signal, reject) => {
    spawned.kill(signal);
    reject(Object.assign(new Error("Timed out"), { timedOut: true, signal }));
  };
  var setupTimeout = (spawned, { timeout, killSignal = "SIGTERM" }, spawnedPromise) => {
    if (timeout === 0 || timeout === void 0) {
      return spawnedPromise;
    }
    let timeoutId;
    const timeoutPromise = new Promise((resolve, reject) => {
      timeoutId = setTimeout(() => {
        timeoutKill(spawned, killSignal, reject);
      }, timeout);
    });
    const safeSpawnedPromise = spawnedPromise.finally(() => {
      clearTimeout(timeoutId);
    });
    return Promise.race([timeoutPromise, safeSpawnedPromise]);
  };
  var validateTimeout = ({ timeout }) => {
    if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
      throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
    }
  };
  var setExitHandler = async (spawned, { cleanup, detached }, timedPromise) => {
    if (!cleanup || detached) {
      return timedPromise;
    }
    const removeExitHandler = onExit(() => {
      spawned.kill();
    });
    return timedPromise.finally(() => {
      removeExitHandler();
    });
  };
  module2.exports = {
    spawnedKill,
    spawnedCancel,
    setupTimeout,
    validateTimeout,
    setExitHandler
  };
});
var require_is_stream = __commonJSMin((exports, module2) => {
  "use strict";
  var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
  isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
  isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
  isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
  isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
  module2.exports = isStream;
});
var require_buffer_stream = __commonJSMin((exports, module2) => {
  "use strict";
  var { PassThrough: PassThroughStream } = __require("stream");
  module2.exports = (options2) => {
    options2 = { ...options2 };
    const { array } = options2;
    let { encoding } = options2;
    const isBuffer = encoding === "buffer";
    let objectMode = false;
    if (array) {
      objectMode = !(encoding || isBuffer);
    } else {
      encoding = encoding || "utf8";
    }
    if (isBuffer) {
      encoding = null;
    }
    const stream = new PassThroughStream({ objectMode });
    if (encoding) {
      stream.setEncoding(encoding);
    }
    let length = 0;
    const chunks = [];
    stream.on("data", (chunk) => {
      chunks.push(chunk);
      if (objectMode) {
        length = chunks.length;
      } else {
        length += chunk.length;
      }
    });
    stream.getBufferedValue = () => {
      if (array) {
        return chunks;
      }
      return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
    };
    stream.getBufferedLength = () => length;
    return stream;
  };
});
var require_get_stream = __commonJSMin((exports, module2) => {
  "use strict";
  var { constants: BufferConstants } = __require("buffer");
  var stream = __require("stream");
  var { promisify } = __require("util");
  var bufferStream = require_buffer_stream();
  var streamPipelinePromisified = promisify(stream.pipeline);
  var MaxBufferError = class extends Error {
    constructor() {
      super("maxBuffer exceeded");
      this.name = "MaxBufferError";
    }
  };
  async function getStream(inputStream, options2) {
    if (!inputStream) {
      throw new Error("Expected a stream");
    }
    options2 = {
      maxBuffer: Infinity,
      ...options2
    };
    const { maxBuffer } = options2;
    const stream2 = bufferStream(options2);
    await new Promise((resolve, reject) => {
      const rejectPromise = (error) => {
        if (error && stream2.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
          error.bufferedData = stream2.getBufferedValue();
        }
        reject(error);
      };
      (async () => {
        try {
          await streamPipelinePromisified(inputStream, stream2);
          resolve();
        } catch (error) {
          rejectPromise(error);
        }
      })();
      stream2.on("data", () => {
        if (stream2.getBufferedLength() > maxBuffer) {
          rejectPromise(new MaxBufferError());
        }
      });
    });
    return stream2.getBufferedValue();
  }
  module2.exports = getStream;
  module2.exports.buffer = (stream2, options2) => getStream(stream2, { ...options2, encoding: "buffer" });
  module2.exports.array = (stream2, options2) => getStream(stream2, { ...options2, array: true });
  module2.exports.MaxBufferError = MaxBufferError;
});
var require_merge_stream = __commonJSMin((exports, module2) => {
  "use strict";
  var { PassThrough: PassThrough2 } = __require("stream");
  module2.exports = function() {
    var sources = [];
    var output = new PassThrough2({ objectMode: true });
    output.setMaxListeners(0);
    output.add = add;
    output.isEmpty = isEmpty;
    output.on("unpipe", remove);
    Array.prototype.slice.call(arguments).forEach(add);
    return output;
    function add(source) {
      if (Array.isArray(source)) {
        source.forEach(add);
        return this;
      }
      sources.push(source);
      source.once("end", remove.bind(null, source));
      source.once("error", output.emit.bind(output, "error"));
      source.pipe(output, { end: false });
      return this;
    }
    function isEmpty() {
      return sources.length == 0;
    }
    function remove(source) {
      sources = sources.filter(function(it) {
        return it !== source;
      });
      if (!sources.length && output.readable) {
        output.end();
      }
    }
  };
});
var require_stream = __commonJSMin((exports, module2) => {
  "use strict";
  var isStream = require_is_stream();
  var getStream = require_get_stream();
  var mergeStream = require_merge_stream();
  var handleInput = (spawned, input) => {
    if (input === void 0 || spawned.stdin === void 0) {
      return;
    }
    if (isStream(input)) {
      input.pipe(spawned.stdin);
    } else {
      spawned.stdin.end(input);
    }
  };
  var makeAllStream = (spawned, { all }) => {
    if (!all || !spawned.stdout && !spawned.stderr) {
      return;
    }
    const mixed = mergeStream();
    if (spawned.stdout) {
      mixed.add(spawned.stdout);
    }
    if (spawned.stderr) {
      mixed.add(spawned.stderr);
    }
    return mixed;
  };
  var getBufferedData = async (stream, streamPromise) => {
    if (!stream) {
      return;
    }
    stream.destroy();
    try {
      return await streamPromise;
    } catch (error) {
      return error.bufferedData;
    }
  };
  var getStreamPromise = (stream, { encoding, buffer, maxBuffer }) => {
    if (!stream || !buffer) {
      return;
    }
    if (encoding) {
      return getStream(stream, { encoding, maxBuffer });
    }
    return getStream.buffer(stream, { maxBuffer });
  };
  var getSpawnedResult = async ({ stdout, stderr, all }, { encoding, buffer, maxBuffer }, processDone) => {
    const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer });
    const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer });
    const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 });
    try {
      return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
    } catch (error) {
      return Promise.all([
        { error, signal: error.signal, timedOut: error.timedOut },
        getBufferedData(stdout, stdoutPromise),
        getBufferedData(stderr, stderrPromise),
        getBufferedData(all, allPromise)
      ]);
    }
  };
  var validateInputSync = ({ input }) => {
    if (isStream(input)) {
      throw new TypeError("The `input` option cannot be a stream in sync mode");
    }
  };
  module2.exports = {
    handleInput,
    makeAllStream,
    getSpawnedResult,
    validateInputSync
  };
});
var require_promise = __commonJSMin((exports, module2) => {
  "use strict";
  var nativePromisePrototype = (async () => {
  })().constructor.prototype;
  var descriptors = ["then", "catch", "finally"].map((property) => [
    property,
    Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
  ]);
  var mergePromise = (spawned, promise) => {
    for (const [property, descriptor] of descriptors) {
      const value = typeof promise === "function" ? (...args) => Reflect.apply(descriptor.value, promise(), args) : descriptor.value.bind(promise);
      Reflect.defineProperty(spawned, property, { ...descriptor, value });
    }
    return spawned;
  };
  var getSpawnedPromise = (spawned) => {
    return new Promise((resolve, reject) => {
      spawned.on("exit", (exitCode, signal) => {
        resolve({ exitCode, signal });
      });
      spawned.on("error", (error) => {
        reject(error);
      });
      if (spawned.stdin) {
        spawned.stdin.on("error", (error) => {
          reject(error);
        });
      }
    });
  };
  module2.exports = {
    mergePromise,
    getSpawnedPromise
  };
});
var require_command2 = __commonJSMin((exports, module2) => {
  "use strict";
  var normalizeArgs = (file, args = []) => {
    if (!Array.isArray(args)) {
      return [file];
    }
    return [file, ...args];
  };
  var NO_ESCAPE_REGEXP = /^[\w.-]+$/;
  var DOUBLE_QUOTES_REGEXP = /"/g;
  var escapeArg = (arg) => {
    if (typeof arg !== "string" || NO_ESCAPE_REGEXP.test(arg)) {
      return arg;
    }
    return `"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`;
  };
  var joinCommand = (file, args) => {
    return normalizeArgs(file, args).join(" ");
  };
  var getEscapedCommand = (file, args) => {
    return normalizeArgs(file, args).map((arg) => escapeArg(arg)).join(" ");
  };
  var SPACES_REGEXP = / +/g;
  var parseCommand = (command) => {
    const tokens = [];
    for (const token of command.trim().split(SPACES_REGEXP)) {
      const previousToken = tokens[tokens.length - 1];
      if (previousToken && previousToken.endsWith("\\")) {
        tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
      } else {
        tokens.push(token);
      }
    }
    return tokens;
  };
  module2.exports = {
    joinCommand,
    getEscapedCommand,
    parseCommand
  };
});
var require_execa = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var childProcess = __require("child_process");
  var crossSpawn = require_cross_spawn();
  var stripFinalNewline = require_strip_final_newline();
  var npmRunPath = require_npm_run_path();
  var onetime = require_onetime();
  var makeError = require_error();
  var normalizeStdio = require_stdio();
  var { spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler } = require_kill();
  var { handleInput, getSpawnedResult, makeAllStream, validateInputSync } = require_stream();
  var { mergePromise, getSpawnedPromise } = require_promise();
  var { joinCommand, parseCommand, getEscapedCommand } = require_command2();
  var DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
  var getEnv = ({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
    const env = extendEnv ? { ...process.env, ...envOption } : envOption;
    if (preferLocal) {
      return npmRunPath.env({ env, cwd: localDir, execPath });
    }
    return env;
  };
  var handleArguments = (file, args, options2 = {}) => {
    const parsed = crossSpawn._parse(file, args, options2);
    file = parsed.command;
    args = parsed.args;
    options2 = parsed.options;
    options2 = {
      maxBuffer: DEFAULT_MAX_BUFFER,
      buffer: true,
      stripFinalNewline: true,
      extendEnv: true,
      preferLocal: false,
      localDir: options2.cwd || process.cwd(),
      execPath: process.execPath,
      encoding: "utf8",
      reject: true,
      cleanup: true,
      all: false,
      windowsHide: true,
      ...options2
    };
    options2.env = getEnv(options2);
    options2.stdio = normalizeStdio(options2);
    if (process.platform === "win32" && path9.basename(file, ".exe") === "cmd") {
      args.unshift("/q");
    }
    return { file, args, options: options2, parsed };
  };
  var handleOutput = (options2, value, error) => {
    if (typeof value !== "string" && !Buffer.isBuffer(value)) {
      return error === void 0 ? void 0 : "";
    }
    if (options2.stripFinalNewline) {
      return stripFinalNewline(value);
    }
    return value;
  };
  var execa6 = (file, args, options2) => {
    const parsed = handleArguments(file, args, options2);
    const command = joinCommand(file, args);
    const escapedCommand = getEscapedCommand(file, args);
    validateTimeout(parsed.options);
    let spawned;
    try {
      spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      const dummySpawned = new childProcess.ChildProcess();
      const errorPromise = Promise.reject(makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        escapedCommand,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      }));
      return mergePromise(dummySpawned, errorPromise);
    }
    const spawnedPromise = getSpawnedPromise(spawned);
    const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
    const processDone = setExitHandler(spawned, parsed.options, timedPromise);
    const context3 = { isCanceled: false };
    spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
    spawned.cancel = spawnedCancel.bind(null, spawned, context3);
    const handlePromise = async () => {
      const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
      const stdout = handleOutput(parsed.options, stdoutResult);
      const stderr = handleOutput(parsed.options, stderrResult);
      const all = handleOutput(parsed.options, allResult);
      if (error || exitCode !== 0 || signal !== null) {
        const returnedError = makeError({
          error,
          exitCode,
          signal,
          stdout,
          stderr,
          all,
          command,
          escapedCommand,
          parsed,
          timedOut,
          isCanceled: context3.isCanceled,
          killed: spawned.killed
        });
        if (!parsed.options.reject) {
          return returnedError;
        }
        throw returnedError;
      }
      return {
        command,
        escapedCommand,
        exitCode: 0,
        stdout,
        stderr,
        all,
        failed: false,
        timedOut: false,
        isCanceled: false,
        killed: false
      };
    };
    const handlePromiseOnce = onetime(handlePromise);
    handleInput(spawned, parsed.options.input);
    spawned.all = makeAllStream(spawned, parsed.options);
    return mergePromise(spawned, handlePromiseOnce);
  };
  module2.exports = execa6;
  module2.exports.sync = (file, args, options2) => {
    const parsed = handleArguments(file, args, options2);
    const command = joinCommand(file, args);
    const escapedCommand = getEscapedCommand(file, args);
    validateInputSync(parsed.options);
    let result;
    try {
      result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      throw makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        escapedCommand,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      });
    }
    const stdout = handleOutput(parsed.options, result.stdout, result.error);
    const stderr = handleOutput(parsed.options, result.stderr, result.error);
    if (result.error || result.status !== 0 || result.signal !== null) {
      const error = makeError({
        stdout,
        stderr,
        error: result.error,
        signal: result.signal,
        exitCode: result.status,
        command,
        escapedCommand,
        parsed,
        timedOut: result.error && result.error.code === "ETIMEDOUT",
        isCanceled: false,
        killed: result.signal !== null
      });
      if (!parsed.options.reject) {
        return error;
      }
      throw error;
    }
    return {
      command,
      escapedCommand,
      exitCode: 0,
      stdout,
      stderr,
      failed: false,
      timedOut: false,
      isCanceled: false,
      killed: false
    };
  };
  module2.exports.command = (command, options2) => {
    const [file, ...args] = parseCommand(command);
    return execa6(file, args, options2);
  };
  module2.exports.commandSync = (command, options2) => {
    const [file, ...args] = parseCommand(command);
    return execa6.sync(file, args, options2);
  };
  module2.exports.node = (scriptPath, args, options2 = {}) => {
    if (args && !Array.isArray(args) && typeof args === "object") {
      options2 = args;
      args = [];
    }
    const stdio = normalizeStdio.node(options2);
    const defaultExecArgv = process.execArgv.filter((arg) => !arg.startsWith("--inspect"));
    const {
      nodePath = process.execPath,
      nodeOptions = defaultExecArgv
    } = options2;
    return execa6(nodePath, [
      ...nodeOptions,
      scriptPath,
      ...Array.isArray(args) ? args : []
    ], {
      ...options2,
      stdin: void 0,
      stdout: void 0,
      stderr: void 0,
      stdio,
      shell: false
    });
  };
});
var require_import_lazy = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 42: (e2) => {
      const lazy = (e3, r2, t2) => e3 === void 0 ? r2(t2) : e3;
      e2.exports = (e3) => (r2) => {
        let t2;
        const _ = { get: (_2, n) => {
          t2 = lazy(t2, e3, r2);
          return Reflect.get(t2, n);
        }, apply: (_2, n, u) => {
          t2 = lazy(t2, e3, r2);
          return Reflect.apply(t2, n, u);
        }, construct: (_2, n) => {
          t2 = lazy(t2, e3, r2);
          return Reflect.construct(t2, n);
        } };
        return new Proxy(function() {
        }, _);
      };
    } };
    var r = {};
    function __nccwpck_require__(t2) {
      var _ = r[t2];
      if (_ !== void 0) {
        return _.exports;
      }
      var n = r[t2] = { exports: {} };
      var u = true;
      try {
        e[t2](n, n.exports, __nccwpck_require__);
        u = false;
      } finally {
        if (u)
          delete r[t2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var t = __nccwpck_require__(42);
    module2.exports = t;
  })();
});
var require_import = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Import = exports.lazyImport = void 0;
  var lazy = (moduleName, requireFn) => {
    const importLazyLocal = require_import_lazy()(requireFn);
    return importLazyLocal(moduleName);
  };
  exports.lazyImport = lazy;
  exports.Import = { lazy };
});
var require_fs_extra = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 571: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(17);
      const o = r2(971).mkdirsSync;
      const c = r2(309).utimesMillisSync;
      const s = r2(883);
      function copySync(e3, t3, r3) {
        if (typeof r3 === "function") {
          r3 = { filter: r3 };
        }
        r3 = r3 || {};
        r3.clobber = "clobber" in r3 ? !!r3.clobber : true;
        r3.overwrite = "overwrite" in r3 ? !!r3.overwrite : r3.clobber;
        if (r3.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        const { srcStat: n2, destStat: i2 } = s.checkPathsSync(e3, t3, "copy", r3);
        s.checkParentPathsSync(e3, n2, t3, "copy");
        return handleFilterAndCopy(i2, e3, t3, r3);
      }
      function handleFilterAndCopy(e3, t3, r3, c2) {
        if (c2.filter && !c2.filter(t3, r3))
          return;
        const s2 = i.dirname(r3);
        if (!n.existsSync(s2))
          o(s2);
        return getStats(e3, t3, r3, c2);
      }
      function startCopy(e3, t3, r3, n2) {
        if (n2.filter && !n2.filter(t3, r3))
          return;
        return getStats(e3, t3, r3, n2);
      }
      function getStats(e3, t3, r3, i2) {
        const o2 = i2.dereference ? n.statSync : n.lstatSync;
        const c2 = o2(t3);
        if (c2.isDirectory())
          return onDir(c2, e3, t3, r3, i2);
        else if (c2.isFile() || c2.isCharacterDevice() || c2.isBlockDevice())
          return onFile(c2, e3, t3, r3, i2);
        else if (c2.isSymbolicLink())
          return onLink(e3, t3, r3, i2);
        else if (c2.isSocket())
          throw new Error(`Cannot copy a socket file: ${t3}`);
        else if (c2.isFIFO())
          throw new Error(`Cannot copy a FIFO pipe: ${t3}`);
        throw new Error(`Unknown file: ${t3}`);
      }
      function onFile(e3, t3, r3, n2, i2) {
        if (!t3)
          return copyFile(e3, r3, n2, i2);
        return mayCopyFile(e3, r3, n2, i2);
      }
      function mayCopyFile(e3, t3, r3, i2) {
        if (i2.overwrite) {
          n.unlinkSync(r3);
          return copyFile(e3, t3, r3, i2);
        } else if (i2.errorOnExist) {
          throw new Error(`'${r3}' already exists`);
        }
      }
      function copyFile(e3, t3, r3, i2) {
        n.copyFileSync(t3, r3);
        if (i2.preserveTimestamps)
          handleTimestamps(e3.mode, t3, r3);
        return setDestMode(r3, e3.mode);
      }
      function handleTimestamps(e3, t3, r3) {
        if (fileIsNotWritable(e3))
          makeFileWritable(r3, e3);
        return setDestTimestamps(t3, r3);
      }
      function fileIsNotWritable(e3) {
        return (e3 & 128) === 0;
      }
      function makeFileWritable(e3, t3) {
        return setDestMode(e3, t3 | 128);
      }
      function setDestMode(e3, t3) {
        return n.chmodSync(e3, t3);
      }
      function setDestTimestamps(e3, t3) {
        const r3 = n.statSync(e3);
        return c(t3, r3.atime, r3.mtime);
      }
      function onDir(e3, t3, r3, n2, i2) {
        if (!t3)
          return mkDirAndCopy(e3.mode, r3, n2, i2);
        return copyDir(r3, n2, i2);
      }
      function mkDirAndCopy(e3, t3, r3, i2) {
        n.mkdirSync(r3);
        copyDir(t3, r3, i2);
        return setDestMode(r3, e3);
      }
      function copyDir(e3, t3, r3) {
        n.readdirSync(e3).forEach((n2) => copyDirItem(n2, e3, t3, r3));
      }
      function copyDirItem(e3, t3, r3, n2) {
        const o2 = i.join(t3, e3);
        const c2 = i.join(r3, e3);
        const { destStat: a } = s.checkPathsSync(o2, c2, "copy", n2);
        return startCopy(a, o2, c2, n2);
      }
      function onLink(e3, t3, r3, o2) {
        let c2 = n.readlinkSync(t3);
        if (o2.dereference) {
          c2 = i.resolve(process.cwd(), c2);
        }
        if (!e3) {
          return n.symlinkSync(c2, r3);
        } else {
          let e4;
          try {
            e4 = n.readlinkSync(r3);
          } catch (e5) {
            if (e5.code === "EINVAL" || e5.code === "UNKNOWN")
              return n.symlinkSync(c2, r3);
            throw e5;
          }
          if (o2.dereference) {
            e4 = i.resolve(process.cwd(), e4);
          }
          if (s.isSrcSubdir(c2, e4)) {
            throw new Error(`Cannot copy '${c2}' to a subdirectory of itself, '${e4}'.`);
          }
          if (n.statSync(r3).isDirectory() && s.isSrcSubdir(e4, c2)) {
            throw new Error(`Cannot overwrite '${e4}' with '${c2}'.`);
          }
          return copyLink(c2, r3);
        }
      }
      function copyLink(e3, t3) {
        n.unlinkSync(t3);
        return n.symlinkSync(e3, t3);
      }
      e2.exports = copySync;
    }, 987: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(17);
      const o = r2(971).mkdirs;
      const c = r2(725).pathExists;
      const s = r2(309).utimesMillis;
      const a = r2(883);
      function copy(e3, t3, r3, n2) {
        if (typeof r3 === "function" && !n2) {
          n2 = r3;
          r3 = {};
        } else if (typeof r3 === "function") {
          r3 = { filter: r3 };
        }
        n2 = n2 || function() {
        };
        r3 = r3 || {};
        r3.clobber = "clobber" in r3 ? !!r3.clobber : true;
        r3.overwrite = "overwrite" in r3 ? !!r3.overwrite : r3.clobber;
        if (r3.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        a.checkPaths(e3, t3, "copy", r3, (i2, o2) => {
          if (i2)
            return n2(i2);
          const { srcStat: c2, destStat: s2 } = o2;
          a.checkParentPaths(e3, c2, t3, "copy", (i3) => {
            if (i3)
              return n2(i3);
            if (r3.filter)
              return handleFilter(checkParentDir, s2, e3, t3, r3, n2);
            return checkParentDir(s2, e3, t3, r3, n2);
          });
        });
      }
      function checkParentDir(e3, t3, r3, n2, s2) {
        const a2 = i.dirname(r3);
        c(a2, (i2, c2) => {
          if (i2)
            return s2(i2);
          if (c2)
            return getStats(e3, t3, r3, n2, s2);
          o(a2, (i3) => {
            if (i3)
              return s2(i3);
            return getStats(e3, t3, r3, n2, s2);
          });
        });
      }
      function handleFilter(e3, t3, r3, n2, i2, o2) {
        Promise.resolve(i2.filter(r3, n2)).then((c2) => {
          if (c2)
            return e3(t3, r3, n2, i2, o2);
          return o2();
        }, (e4) => o2(e4));
      }
      function startCopy(e3, t3, r3, n2, i2) {
        if (n2.filter)
          return handleFilter(getStats, e3, t3, r3, n2, i2);
        return getStats(e3, t3, r3, n2, i2);
      }
      function getStats(e3, t3, r3, i2, o2) {
        const c2 = i2.dereference ? n.stat : n.lstat;
        c2(t3, (n2, c3) => {
          if (n2)
            return o2(n2);
          if (c3.isDirectory())
            return onDir(c3, e3, t3, r3, i2, o2);
          else if (c3.isFile() || c3.isCharacterDevice() || c3.isBlockDevice())
            return onFile(c3, e3, t3, r3, i2, o2);
          else if (c3.isSymbolicLink())
            return onLink(e3, t3, r3, i2, o2);
          else if (c3.isSocket())
            return o2(new Error(`Cannot copy a socket file: ${t3}`));
          else if (c3.isFIFO())
            return o2(new Error(`Cannot copy a FIFO pipe: ${t3}`));
          return o2(new Error(`Unknown file: ${t3}`));
        });
      }
      function onFile(e3, t3, r3, n2, i2, o2) {
        if (!t3)
          return copyFile(e3, r3, n2, i2, o2);
        return mayCopyFile(e3, r3, n2, i2, o2);
      }
      function mayCopyFile(e3, t3, r3, i2, o2) {
        if (i2.overwrite) {
          n.unlink(r3, (n2) => {
            if (n2)
              return o2(n2);
            return copyFile(e3, t3, r3, i2, o2);
          });
        } else if (i2.errorOnExist) {
          return o2(new Error(`'${r3}' already exists`));
        } else
          return o2();
      }
      function copyFile(e3, t3, r3, i2, o2) {
        n.copyFile(t3, r3, (n2) => {
          if (n2)
            return o2(n2);
          if (i2.preserveTimestamps)
            return handleTimestampsAndMode(e3.mode, t3, r3, o2);
          return setDestMode(r3, e3.mode, o2);
        });
      }
      function handleTimestampsAndMode(e3, t3, r3, n2) {
        if (fileIsNotWritable(e3)) {
          return makeFileWritable(r3, e3, (i2) => {
            if (i2)
              return n2(i2);
            return setDestTimestampsAndMode(e3, t3, r3, n2);
          });
        }
        return setDestTimestampsAndMode(e3, t3, r3, n2);
      }
      function fileIsNotWritable(e3) {
        return (e3 & 128) === 0;
      }
      function makeFileWritable(e3, t3, r3) {
        return setDestMode(e3, t3 | 128, r3);
      }
      function setDestTimestampsAndMode(e3, t3, r3, n2) {
        setDestTimestamps(t3, r3, (t4) => {
          if (t4)
            return n2(t4);
          return setDestMode(r3, e3, n2);
        });
      }
      function setDestMode(e3, t3, r3) {
        return n.chmod(e3, t3, r3);
      }
      function setDestTimestamps(e3, t3, r3) {
        n.stat(e3, (e4, n2) => {
          if (e4)
            return r3(e4);
          return s(t3, n2.atime, n2.mtime, r3);
        });
      }
      function onDir(e3, t3, r3, n2, i2, o2) {
        if (!t3)
          return mkDirAndCopy(e3.mode, r3, n2, i2, o2);
        return copyDir(r3, n2, i2, o2);
      }
      function mkDirAndCopy(e3, t3, r3, i2, o2) {
        n.mkdir(r3, (n2) => {
          if (n2)
            return o2(n2);
          copyDir(t3, r3, i2, (t4) => {
            if (t4)
              return o2(t4);
            return setDestMode(r3, e3, o2);
          });
        });
      }
      function copyDir(e3, t3, r3, i2) {
        n.readdir(e3, (n2, o2) => {
          if (n2)
            return i2(n2);
          return copyDirItems(o2, e3, t3, r3, i2);
        });
      }
      function copyDirItems(e3, t3, r3, n2, i2) {
        const o2 = e3.pop();
        if (!o2)
          return i2();
        return copyDirItem(e3, o2, t3, r3, n2, i2);
      }
      function copyDirItem(e3, t3, r3, n2, o2, c2) {
        const s2 = i.join(r3, t3);
        const u = i.join(n2, t3);
        a.checkPaths(s2, u, "copy", o2, (t4, i2) => {
          if (t4)
            return c2(t4);
          const { destStat: a2 } = i2;
          startCopy(a2, s2, u, o2, (t5) => {
            if (t5)
              return c2(t5);
            return copyDirItems(e3, r3, n2, o2, c2);
          });
        });
      }
      function onLink(e3, t3, r3, o2, c2) {
        n.readlink(t3, (t4, s2) => {
          if (t4)
            return c2(t4);
          if (o2.dereference) {
            s2 = i.resolve(process.cwd(), s2);
          }
          if (!e3) {
            return n.symlink(s2, r3, c2);
          } else {
            n.readlink(r3, (t5, u) => {
              if (t5) {
                if (t5.code === "EINVAL" || t5.code === "UNKNOWN")
                  return n.symlink(s2, r3, c2);
                return c2(t5);
              }
              if (o2.dereference) {
                u = i.resolve(process.cwd(), u);
              }
              if (a.isSrcSubdir(s2, u)) {
                return c2(new Error(`Cannot copy '${s2}' to a subdirectory of itself, '${u}'.`));
              }
              if (e3.isDirectory() && a.isSrcSubdir(u, s2)) {
                return c2(new Error(`Cannot overwrite '${u}' with '${s2}'.`));
              }
              return copyLink(s2, r3, c2);
            });
          }
        });
      }
      function copyLink(e3, t3, r3) {
        n.unlink(t3, (i2) => {
          if (i2)
            return r3(i2);
          return n.symlink(e3, t3, r3);
        });
      }
      e2.exports = copy;
    }, 2: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      e2.exports = { copy: n(r2(987)), copySync: r2(571) };
    }, 708: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromPromise;
      const i = r2(812);
      const o = r2(17);
      const c = r2(971);
      const s = r2(95);
      const a = n(async function emptyDir(e3) {
        let t3;
        try {
          t3 = await i.readdir(e3);
        } catch {
          return c.mkdirs(e3);
        }
        return Promise.all(t3.map((t4) => s.remove(o.join(e3, t4))));
      });
      function emptyDirSync(e3) {
        let t3;
        try {
          t3 = i.readdirSync(e3);
        } catch {
          return c.mkdirsSync(e3);
        }
        t3.forEach((t4) => {
          t4 = o.join(e3, t4);
          s.removeSync(t4);
        });
      }
      e2.exports = { emptyDirSync, emptydirSync: emptyDirSync, emptyDir: a, emptydir: a };
    }, 102: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      const i = r2(17);
      const o = r2(127);
      const c = r2(971);
      function createFile(e3, t3) {
        function makeFile() {
          o.writeFile(e3, "", (e4) => {
            if (e4)
              return t3(e4);
            t3();
          });
        }
        o.stat(e3, (r3, n2) => {
          if (!r3 && n2.isFile())
            return t3();
          const s = i.dirname(e3);
          o.stat(s, (e4, r4) => {
            if (e4) {
              if (e4.code === "ENOENT") {
                return c.mkdirs(s, (e5) => {
                  if (e5)
                    return t3(e5);
                  makeFile();
                });
              }
              return t3(e4);
            }
            if (r4.isDirectory())
              makeFile();
            else {
              o.readdir(s, (e5) => {
                if (e5)
                  return t3(e5);
              });
            }
          });
        });
      }
      function createFileSync(e3) {
        let t3;
        try {
          t3 = o.statSync(e3);
        } catch {
        }
        if (t3 && t3.isFile())
          return;
        const r3 = i.dirname(e3);
        try {
          if (!o.statSync(r3).isDirectory()) {
            o.readdirSync(r3);
          }
        } catch (e4) {
          if (e4 && e4.code === "ENOENT")
            c.mkdirsSync(r3);
          else
            throw e4;
        }
        o.writeFileSync(e3, "");
      }
      e2.exports = { createFile: n(createFile), createFileSync };
    }, 726: (e2, t2, r2) => {
      "use strict";
      const { createFile: n, createFileSync: i } = r2(102);
      const { createLink: o, createLinkSync: c } = r2(161);
      const { createSymlink: s, createSymlinkSync: a } = r2(294);
      e2.exports = { createFile: n, createFileSync: i, ensureFile: n, ensureFileSync: i, createLink: o, createLinkSync: c, ensureLink: o, ensureLinkSync: c, createSymlink: s, createSymlinkSync: a, ensureSymlink: s, ensureSymlinkSync: a };
    }, 161: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      const i = r2(17);
      const o = r2(127);
      const c = r2(971);
      const s = r2(725).pathExists;
      const { areIdentical: a } = r2(883);
      function createLink(e3, t3, r3) {
        function makeLink(e4, t4) {
          o.link(e4, t4, (e5) => {
            if (e5)
              return r3(e5);
            r3(null);
          });
        }
        o.lstat(t3, (n2, u) => {
          o.lstat(e3, (n3, o2) => {
            if (n3) {
              n3.message = n3.message.replace("lstat", "ensureLink");
              return r3(n3);
            }
            if (u && a(o2, u))
              return r3(null);
            const f = i.dirname(t3);
            s(f, (n4, i2) => {
              if (n4)
                return r3(n4);
              if (i2)
                return makeLink(e3, t3);
              c.mkdirs(f, (n5) => {
                if (n5)
                  return r3(n5);
                makeLink(e3, t3);
              });
            });
          });
        });
      }
      function createLinkSync(e3, t3) {
        let r3;
        try {
          r3 = o.lstatSync(t3);
        } catch {
        }
        try {
          const t4 = o.lstatSync(e3);
          if (r3 && a(t4, r3))
            return;
        } catch (e4) {
          e4.message = e4.message.replace("lstat", "ensureLink");
          throw e4;
        }
        const n2 = i.dirname(t3);
        const s2 = o.existsSync(n2);
        if (s2)
          return o.linkSync(e3, t3);
        c.mkdirsSync(n2);
        return o.linkSync(e3, t3);
      }
      e2.exports = { createLink: n(createLink), createLinkSync };
    }, 332: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      const i = r2(127);
      const o = r2(725).pathExists;
      function symlinkPaths(e3, t3, r3) {
        if (n.isAbsolute(e3)) {
          return i.lstat(e3, (t4) => {
            if (t4) {
              t4.message = t4.message.replace("lstat", "ensureSymlink");
              return r3(t4);
            }
            return r3(null, { toCwd: e3, toDst: e3 });
          });
        } else {
          const c = n.dirname(t3);
          const s = n.join(c, e3);
          return o(s, (t4, o2) => {
            if (t4)
              return r3(t4);
            if (o2) {
              return r3(null, { toCwd: s, toDst: e3 });
            } else {
              return i.lstat(e3, (t5) => {
                if (t5) {
                  t5.message = t5.message.replace("lstat", "ensureSymlink");
                  return r3(t5);
                }
                return r3(null, { toCwd: e3, toDst: n.relative(c, e3) });
              });
            }
          });
        }
      }
      function symlinkPathsSync(e3, t3) {
        let r3;
        if (n.isAbsolute(e3)) {
          r3 = i.existsSync(e3);
          if (!r3)
            throw new Error("absolute srcpath does not exist");
          return { toCwd: e3, toDst: e3 };
        } else {
          const o2 = n.dirname(t3);
          const c = n.join(o2, e3);
          r3 = i.existsSync(c);
          if (r3) {
            return { toCwd: c, toDst: e3 };
          } else {
            r3 = i.existsSync(e3);
            if (!r3)
              throw new Error("relative srcpath does not exist");
            return { toCwd: e3, toDst: n.relative(o2, e3) };
          }
        }
      }
      e2.exports = { symlinkPaths, symlinkPathsSync };
    }, 894: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      function symlinkType(e3, t3, r3) {
        r3 = typeof t3 === "function" ? t3 : r3;
        t3 = typeof t3 === "function" ? false : t3;
        if (t3)
          return r3(null, t3);
        n.lstat(e3, (e4, n2) => {
          if (e4)
            return r3(null, "file");
          t3 = n2 && n2.isDirectory() ? "dir" : "file";
          r3(null, t3);
        });
      }
      function symlinkTypeSync(e3, t3) {
        let r3;
        if (t3)
          return t3;
        try {
          r3 = n.lstatSync(e3);
        } catch {
          return "file";
        }
        return r3 && r3.isDirectory() ? "dir" : "file";
      }
      e2.exports = { symlinkType, symlinkTypeSync };
    }, 294: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      const i = r2(17);
      const o = r2(812);
      const c = r2(971);
      const s = c.mkdirs;
      const a = c.mkdirsSync;
      const u = r2(332);
      const f = u.symlinkPaths;
      const l = u.symlinkPathsSync;
      const y = r2(894);
      const d = y.symlinkType;
      const m = y.symlinkTypeSync;
      const p = r2(725).pathExists;
      const { areIdentical: h } = r2(883);
      function createSymlink(e3, t3, r3, n2) {
        n2 = typeof r3 === "function" ? r3 : n2;
        r3 = typeof r3 === "function" ? false : r3;
        o.lstat(t3, (i2, c2) => {
          if (!i2 && c2.isSymbolicLink()) {
            Promise.all([o.stat(e3), o.stat(t3)]).then(([i3, o2]) => {
              if (h(i3, o2))
                return n2(null);
              _createSymlink(e3, t3, r3, n2);
            });
          } else
            _createSymlink(e3, t3, r3, n2);
        });
      }
      function _createSymlink(e3, t3, r3, n2) {
        f(e3, t3, (c2, a2) => {
          if (c2)
            return n2(c2);
          e3 = a2.toDst;
          d(a2.toCwd, r3, (r4, c3) => {
            if (r4)
              return n2(r4);
            const a3 = i.dirname(t3);
            p(a3, (r5, i2) => {
              if (r5)
                return n2(r5);
              if (i2)
                return o.symlink(e3, t3, c3, n2);
              s(a3, (r6) => {
                if (r6)
                  return n2(r6);
                o.symlink(e3, t3, c3, n2);
              });
            });
          });
        });
      }
      function createSymlinkSync(e3, t3, r3) {
        let n2;
        try {
          n2 = o.lstatSync(t3);
        } catch {
        }
        if (n2 && n2.isSymbolicLink()) {
          const r4 = o.statSync(e3);
          const n3 = o.statSync(t3);
          if (h(r4, n3))
            return;
        }
        const c2 = l(e3, t3);
        e3 = c2.toDst;
        r3 = m(c2.toCwd, r3);
        const s2 = i.dirname(t3);
        const u2 = o.existsSync(s2);
        if (u2)
          return o.symlinkSync(e3, t3, r3);
        a(s2);
        return o.symlinkSync(e3, t3, r3);
      }
      e2.exports = { createSymlink: n(createSymlink), createSymlinkSync };
    }, 812: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      const i = r2(127);
      const o = ["access", "appendFile", "chmod", "chown", "close", "copyFile", "fchmod", "fchown", "fdatasync", "fstat", "fsync", "ftruncate", "futimes", "lchmod", "lchown", "link", "lstat", "mkdir", "mkdtemp", "open", "opendir", "readdir", "readFile", "readlink", "realpath", "rename", "rm", "rmdir", "stat", "symlink", "truncate", "unlink", "utimes", "writeFile"].filter((e3) => typeof i[e3] === "function");
      Object.assign(t2, i);
      o.forEach((e3) => {
        t2[e3] = n(i[e3]);
      });
      t2.realpath.native = n(i.realpath.native);
      t2.exists = function(e3, t3) {
        if (typeof t3 === "function") {
          return i.exists(e3, t3);
        }
        return new Promise((t4) => i.exists(e3, t4));
      };
      t2.read = function(e3, t3, r3, n2, o2, c) {
        if (typeof c === "function") {
          return i.read(e3, t3, r3, n2, o2, c);
        }
        return new Promise((c2, s) => {
          i.read(e3, t3, r3, n2, o2, (e4, t4, r4) => {
            if (e4)
              return s(e4);
            c2({ bytesRead: t4, buffer: r4 });
          });
        });
      };
      t2.write = function(e3, t3, ...r3) {
        if (typeof r3[r3.length - 1] === "function") {
          return i.write(e3, t3, ...r3);
        }
        return new Promise((n2, o2) => {
          i.write(e3, t3, ...r3, (e4, t4, r4) => {
            if (e4)
              return o2(e4);
            n2({ bytesWritten: t4, buffer: r4 });
          });
        });
      };
      if (typeof i.writev === "function") {
        t2.writev = function(e3, t3, ...r3) {
          if (typeof r3[r3.length - 1] === "function") {
            return i.writev(e3, t3, ...r3);
          }
          return new Promise((n2, o2) => {
            i.writev(e3, t3, ...r3, (e4, t4, r4) => {
              if (e4)
                return o2(e4);
              n2({ bytesWritten: t4, buffers: r4 });
            });
          });
        };
      }
    }, 81: (e2, t2, r2) => {
      "use strict";
      e2.exports = { ...r2(812), ...r2(2), ...r2(708), ...r2(726), ...r2(779), ...r2(971), ...r2(511), ...r2(701), ...r2(725), ...r2(95) };
    }, 779: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromPromise;
      const i = r2(901);
      i.outputJson = n(r2(410));
      i.outputJsonSync = r2(925);
      i.outputJSON = i.outputJson;
      i.outputJSONSync = i.outputJsonSync;
      i.writeJSON = i.writeJson;
      i.writeJSONSync = i.writeJsonSync;
      i.readJSON = i.readJson;
      i.readJSONSync = i.readJsonSync;
      e2.exports = i;
    }, 901: (e2, t2, r2) => {
      "use strict";
      const n = r2(654);
      e2.exports = { readJson: n.readFile, readJsonSync: n.readFileSync, writeJson: n.writeFile, writeJsonSync: n.writeFileSync };
    }, 925: (e2, t2, r2) => {
      "use strict";
      const { stringify: n } = r2(208);
      const { outputFileSync: i } = r2(701);
      function outputJsonSync(e3, t3, r3) {
        const o = n(t3, r3);
        i(e3, o, r3);
      }
      e2.exports = outputJsonSync;
    }, 410: (e2, t2, r2) => {
      "use strict";
      const { stringify: n } = r2(208);
      const { outputFile: i } = r2(701);
      async function outputJson(e3, t3, r3 = {}) {
        const o = n(t3, r3);
        await i(e3, o, r3);
      }
      e2.exports = outputJson;
    }, 971: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromPromise;
      const { makeDir: i, makeDirSync: o } = r2(284);
      const c = n(i);
      e2.exports = { mkdirs: c, mkdirsSync: o, mkdirp: c, mkdirpSync: o, ensureDir: c, ensureDirSync: o };
    }, 284: (e2, t2, r2) => {
      "use strict";
      const n = r2(812);
      const { checkPath: i } = r2(216);
      const getMode = (e3) => {
        const t3 = { mode: 511 };
        if (typeof e3 === "number")
          return e3;
        return { ...t3, ...e3 }.mode;
      };
      e2.exports.makeDir = async (e3, t3) => {
        i(e3);
        return n.mkdir(e3, { mode: getMode(t3), recursive: true });
      };
      e2.exports.makeDirSync = (e3, t3) => {
        i(e3);
        return n.mkdirSync(e3, { mode: getMode(t3), recursive: true });
      };
    }, 216: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      e2.exports.checkPath = function checkPath(e3) {
        if (process.platform === "win32") {
          const t3 = /[<>:"|?*]/.test(e3.replace(n.parse(e3).root, ""));
          if (t3) {
            const t4 = new Error(`Path contains invalid characters: ${e3}`);
            t4.code = "EINVAL";
            throw t4;
          }
        }
      };
    }, 511: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      e2.exports = { move: n(r2(795)), moveSync: r2(429) };
    }, 429: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(17);
      const o = r2(2).copySync;
      const c = r2(95).removeSync;
      const s = r2(971).mkdirpSync;
      const a = r2(883);
      function moveSync(e3, t3, r3) {
        r3 = r3 || {};
        const n2 = r3.overwrite || r3.clobber || false;
        const { srcStat: o2, isChangingCase: c2 = false } = a.checkPathsSync(e3, t3, "move", r3);
        a.checkParentPathsSync(e3, o2, t3, "move");
        if (!isParentRoot(t3))
          s(i.dirname(t3));
        return doRename(e3, t3, n2, c2);
      }
      function isParentRoot(e3) {
        const t3 = i.dirname(e3);
        const r3 = i.parse(t3);
        return r3.root === t3;
      }
      function doRename(e3, t3, r3, i2) {
        if (i2)
          return rename(e3, t3, r3);
        if (r3) {
          c(t3);
          return rename(e3, t3, r3);
        }
        if (n.existsSync(t3))
          throw new Error("dest already exists.");
        return rename(e3, t3, r3);
      }
      function rename(e3, t3, r3) {
        try {
          n.renameSync(e3, t3);
        } catch (n2) {
          if (n2.code !== "EXDEV")
            throw n2;
          return moveAcrossDevice(e3, t3, r3);
        }
      }
      function moveAcrossDevice(e3, t3, r3) {
        const n2 = { overwrite: r3, errorOnExist: true };
        o(e3, t3, n2);
        return c(e3);
      }
      e2.exports = moveSync;
    }, 795: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(17);
      const o = r2(2).copy;
      const c = r2(95).remove;
      const s = r2(971).mkdirp;
      const a = r2(725).pathExists;
      const u = r2(883);
      function move(e3, t3, r3, n2) {
        if (typeof r3 === "function") {
          n2 = r3;
          r3 = {};
        }
        const o2 = r3.overwrite || r3.clobber || false;
        u.checkPaths(e3, t3, "move", r3, (r4, c2) => {
          if (r4)
            return n2(r4);
          const { srcStat: a2, isChangingCase: f = false } = c2;
          u.checkParentPaths(e3, a2, t3, "move", (r5) => {
            if (r5)
              return n2(r5);
            if (isParentRoot(t3))
              return doRename(e3, t3, o2, f, n2);
            s(i.dirname(t3), (r6) => {
              if (r6)
                return n2(r6);
              return doRename(e3, t3, o2, f, n2);
            });
          });
        });
      }
      function isParentRoot(e3) {
        const t3 = i.dirname(e3);
        const r3 = i.parse(t3);
        return r3.root === t3;
      }
      function doRename(e3, t3, r3, n2, i2) {
        if (n2)
          return rename(e3, t3, r3, i2);
        if (r3) {
          return c(t3, (n3) => {
            if (n3)
              return i2(n3);
            return rename(e3, t3, r3, i2);
          });
        }
        a(t3, (n3, o2) => {
          if (n3)
            return i2(n3);
          if (o2)
            return i2(new Error("dest already exists."));
          return rename(e3, t3, r3, i2);
        });
      }
      function rename(e3, t3, r3, i2) {
        n.rename(e3, t3, (n2) => {
          if (!n2)
            return i2();
          if (n2.code !== "EXDEV")
            return i2(n2);
          return moveAcrossDevice(e3, t3, r3, i2);
        });
      }
      function moveAcrossDevice(e3, t3, r3, n2) {
        const i2 = { overwrite: r3, errorOnExist: true };
        o(e3, t3, i2, (t4) => {
          if (t4)
            return n2(t4);
          return c(e3, n2);
        });
      }
      e2.exports = move;
    }, 701: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromCallback;
      const i = r2(127);
      const o = r2(17);
      const c = r2(971);
      const s = r2(725).pathExists;
      function outputFile(e3, t3, r3, n2) {
        if (typeof r3 === "function") {
          n2 = r3;
          r3 = "utf8";
        }
        const a = o.dirname(e3);
        s(a, (o2, s2) => {
          if (o2)
            return n2(o2);
          if (s2)
            return i.writeFile(e3, t3, r3, n2);
          c.mkdirs(a, (o3) => {
            if (o3)
              return n2(o3);
            i.writeFile(e3, t3, r3, n2);
          });
        });
      }
      function outputFileSync(e3, ...t3) {
        const r3 = o.dirname(e3);
        if (i.existsSync(r3)) {
          return i.writeFileSync(e3, ...t3);
        }
        c.mkdirsSync(r3);
        i.writeFileSync(e3, ...t3);
      }
      e2.exports = { outputFile: n(outputFile), outputFileSync };
    }, 725: (e2, t2, r2) => {
      "use strict";
      const n = r2(5).fromPromise;
      const i = r2(812);
      function pathExists(e3) {
        return i.access(e3).then(() => true).catch(() => false);
      }
      e2.exports = { pathExists: n(pathExists), pathExistsSync: i.existsSync };
    }, 95: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(5).fromCallback;
      const o = r2(193);
      function remove(e3, t3) {
        if (n.rm)
          return n.rm(e3, { recursive: true, force: true }, t3);
        o(e3, t3);
      }
      function removeSync(e3) {
        if (n.rmSync)
          return n.rmSync(e3, { recursive: true, force: true });
        o.sync(e3);
      }
      e2.exports = { remove: i(remove), removeSync };
    }, 193: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      const i = r2(17);
      const o = r2(491);
      const c = process.platform === "win32";
      function defaults(e3) {
        const t3 = ["unlink", "chmod", "stat", "lstat", "rmdir", "readdir"];
        t3.forEach((t4) => {
          e3[t4] = e3[t4] || n[t4];
          t4 = t4 + "Sync";
          e3[t4] = e3[t4] || n[t4];
        });
        e3.maxBusyTries = e3.maxBusyTries || 3;
      }
      function rimraf(e3, t3, r3) {
        let n2 = 0;
        if (typeof t3 === "function") {
          r3 = t3;
          t3 = {};
        }
        o(e3, "rimraf: missing path");
        o.strictEqual(typeof e3, "string", "rimraf: path should be a string");
        o.strictEqual(typeof r3, "function", "rimraf: callback function required");
        o(t3, "rimraf: invalid options argument provided");
        o.strictEqual(typeof t3, "object", "rimraf: options should be object");
        defaults(t3);
        rimraf_(e3, t3, function CB(i2) {
          if (i2) {
            if ((i2.code === "EBUSY" || i2.code === "ENOTEMPTY" || i2.code === "EPERM") && n2 < t3.maxBusyTries) {
              n2++;
              const r4 = n2 * 100;
              return setTimeout(() => rimraf_(e3, t3, CB), r4);
            }
            if (i2.code === "ENOENT")
              i2 = null;
          }
          r3(i2);
        });
      }
      function rimraf_(e3, t3, r3) {
        o(e3);
        o(t3);
        o(typeof r3 === "function");
        t3.lstat(e3, (n2, i2) => {
          if (n2 && n2.code === "ENOENT") {
            return r3(null);
          }
          if (n2 && n2.code === "EPERM" && c) {
            return fixWinEPERM(e3, t3, n2, r3);
          }
          if (i2 && i2.isDirectory()) {
            return rmdir(e3, t3, n2, r3);
          }
          t3.unlink(e3, (n3) => {
            if (n3) {
              if (n3.code === "ENOENT") {
                return r3(null);
              }
              if (n3.code === "EPERM") {
                return c ? fixWinEPERM(e3, t3, n3, r3) : rmdir(e3, t3, n3, r3);
              }
              if (n3.code === "EISDIR") {
                return rmdir(e3, t3, n3, r3);
              }
            }
            return r3(n3);
          });
        });
      }
      function fixWinEPERM(e3, t3, r3, n2) {
        o(e3);
        o(t3);
        o(typeof n2 === "function");
        t3.chmod(e3, 438, (i2) => {
          if (i2) {
            n2(i2.code === "ENOENT" ? null : r3);
          } else {
            t3.stat(e3, (i3, o2) => {
              if (i3) {
                n2(i3.code === "ENOENT" ? null : r3);
              } else if (o2.isDirectory()) {
                rmdir(e3, t3, r3, n2);
              } else {
                t3.unlink(e3, n2);
              }
            });
          }
        });
      }
      function fixWinEPERMSync(e3, t3, r3) {
        let n2;
        o(e3);
        o(t3);
        try {
          t3.chmodSync(e3, 438);
        } catch (e4) {
          if (e4.code === "ENOENT") {
            return;
          } else {
            throw r3;
          }
        }
        try {
          n2 = t3.statSync(e3);
        } catch (e4) {
          if (e4.code === "ENOENT") {
            return;
          } else {
            throw r3;
          }
        }
        if (n2.isDirectory()) {
          rmdirSync(e3, t3, r3);
        } else {
          t3.unlinkSync(e3);
        }
      }
      function rmdir(e3, t3, r3, n2) {
        o(e3);
        o(t3);
        o(typeof n2 === "function");
        t3.rmdir(e3, (i2) => {
          if (i2 && (i2.code === "ENOTEMPTY" || i2.code === "EEXIST" || i2.code === "EPERM")) {
            rmkids(e3, t3, n2);
          } else if (i2 && i2.code === "ENOTDIR") {
            n2(r3);
          } else {
            n2(i2);
          }
        });
      }
      function rmkids(e3, t3, r3) {
        o(e3);
        o(t3);
        o(typeof r3 === "function");
        t3.readdir(e3, (n2, o2) => {
          if (n2)
            return r3(n2);
          let c2 = o2.length;
          let s;
          if (c2 === 0)
            return t3.rmdir(e3, r3);
          o2.forEach((n3) => {
            rimraf(i.join(e3, n3), t3, (n4) => {
              if (s) {
                return;
              }
              if (n4)
                return r3(s = n4);
              if (--c2 === 0) {
                t3.rmdir(e3, r3);
              }
            });
          });
        });
      }
      function rimrafSync(e3, t3) {
        let r3;
        t3 = t3 || {};
        defaults(t3);
        o(e3, "rimraf: missing path");
        o.strictEqual(typeof e3, "string", "rimraf: path should be a string");
        o(t3, "rimraf: missing options");
        o.strictEqual(typeof t3, "object", "rimraf: options should be object");
        try {
          r3 = t3.lstatSync(e3);
        } catch (r4) {
          if (r4.code === "ENOENT") {
            return;
          }
          if (r4.code === "EPERM" && c) {
            fixWinEPERMSync(e3, t3, r4);
          }
        }
        try {
          if (r3 && r3.isDirectory()) {
            rmdirSync(e3, t3, null);
          } else {
            t3.unlinkSync(e3);
          }
        } catch (r4) {
          if (r4.code === "ENOENT") {
            return;
          } else if (r4.code === "EPERM") {
            return c ? fixWinEPERMSync(e3, t3, r4) : rmdirSync(e3, t3, r4);
          } else if (r4.code !== "EISDIR") {
            throw r4;
          }
          rmdirSync(e3, t3, r4);
        }
      }
      function rmdirSync(e3, t3, r3) {
        o(e3);
        o(t3);
        try {
          t3.rmdirSync(e3);
        } catch (n2) {
          if (n2.code === "ENOTDIR") {
            throw r3;
          } else if (n2.code === "ENOTEMPTY" || n2.code === "EEXIST" || n2.code === "EPERM") {
            rmkidsSync(e3, t3);
          } else if (n2.code !== "ENOENT") {
            throw n2;
          }
        }
      }
      function rmkidsSync(e3, t3) {
        o(e3);
        o(t3);
        t3.readdirSync(e3).forEach((r3) => rimrafSync(i.join(e3, r3), t3));
        if (c) {
          const r3 = Date.now();
          do {
            try {
              const r4 = t3.rmdirSync(e3, t3);
              return r4;
            } catch {
            }
          } while (Date.now() - r3 < 500);
        } else {
          const r3 = t3.rmdirSync(e3, t3);
          return r3;
        }
      }
      e2.exports = rimraf;
      rimraf.sync = rimrafSync;
    }, 883: (e2, t2, r2) => {
      "use strict";
      const n = r2(812);
      const i = r2(17);
      const o = r2(837);
      function getStats(e3, t3, r3) {
        const i2 = r3.dereference ? (e4) => n.stat(e4, { bigint: true }) : (e4) => n.lstat(e4, { bigint: true });
        return Promise.all([i2(e3), i2(t3).catch((e4) => {
          if (e4.code === "ENOENT")
            return null;
          throw e4;
        })]).then(([e4, t4]) => ({ srcStat: e4, destStat: t4 }));
      }
      function getStatsSync(e3, t3, r3) {
        let i2;
        const o2 = r3.dereference ? (e4) => n.statSync(e4, { bigint: true }) : (e4) => n.lstatSync(e4, { bigint: true });
        const c = o2(e3);
        try {
          i2 = o2(t3);
        } catch (e4) {
          if (e4.code === "ENOENT")
            return { srcStat: c, destStat: null };
          throw e4;
        }
        return { srcStat: c, destStat: i2 };
      }
      function checkPaths(e3, t3, r3, n2, c) {
        o.callbackify(getStats)(e3, t3, n2, (n3, o2) => {
          if (n3)
            return c(n3);
          const { srcStat: s, destStat: a } = o2;
          if (a) {
            if (areIdentical(s, a)) {
              const n4 = i.basename(e3);
              const o3 = i.basename(t3);
              if (r3 === "move" && n4 !== o3 && n4.toLowerCase() === o3.toLowerCase()) {
                return c(null, { srcStat: s, destStat: a, isChangingCase: true });
              }
              return c(new Error("Source and destination must not be the same."));
            }
            if (s.isDirectory() && !a.isDirectory()) {
              return c(new Error(`Cannot overwrite non-directory '${t3}' with directory '${e3}'.`));
            }
            if (!s.isDirectory() && a.isDirectory()) {
              return c(new Error(`Cannot overwrite directory '${t3}' with non-directory '${e3}'.`));
            }
          }
          if (s.isDirectory() && isSrcSubdir(e3, t3)) {
            return c(new Error(errMsg(e3, t3, r3)));
          }
          return c(null, { srcStat: s, destStat: a });
        });
      }
      function checkPathsSync(e3, t3, r3, n2) {
        const { srcStat: o2, destStat: c } = getStatsSync(e3, t3, n2);
        if (c) {
          if (areIdentical(o2, c)) {
            const n3 = i.basename(e3);
            const s = i.basename(t3);
            if (r3 === "move" && n3 !== s && n3.toLowerCase() === s.toLowerCase()) {
              return { srcStat: o2, destStat: c, isChangingCase: true };
            }
            throw new Error("Source and destination must not be the same.");
          }
          if (o2.isDirectory() && !c.isDirectory()) {
            throw new Error(`Cannot overwrite non-directory '${t3}' with directory '${e3}'.`);
          }
          if (!o2.isDirectory() && c.isDirectory()) {
            throw new Error(`Cannot overwrite directory '${t3}' with non-directory '${e3}'.`);
          }
        }
        if (o2.isDirectory() && isSrcSubdir(e3, t3)) {
          throw new Error(errMsg(e3, t3, r3));
        }
        return { srcStat: o2, destStat: c };
      }
      function checkParentPaths(e3, t3, r3, o2, c) {
        const s = i.resolve(i.dirname(e3));
        const a = i.resolve(i.dirname(r3));
        if (a === s || a === i.parse(a).root)
          return c();
        n.stat(a, { bigint: true }, (n2, i2) => {
          if (n2) {
            if (n2.code === "ENOENT")
              return c();
            return c(n2);
          }
          if (areIdentical(t3, i2)) {
            return c(new Error(errMsg(e3, r3, o2)));
          }
          return checkParentPaths(e3, t3, a, o2, c);
        });
      }
      function checkParentPathsSync(e3, t3, r3, o2) {
        const c = i.resolve(i.dirname(e3));
        const s = i.resolve(i.dirname(r3));
        if (s === c || s === i.parse(s).root)
          return;
        let a;
        try {
          a = n.statSync(s, { bigint: true });
        } catch (e4) {
          if (e4.code === "ENOENT")
            return;
          throw e4;
        }
        if (areIdentical(t3, a)) {
          throw new Error(errMsg(e3, r3, o2));
        }
        return checkParentPathsSync(e3, t3, s, o2);
      }
      function areIdentical(e3, t3) {
        return t3.ino && t3.dev && t3.ino === e3.ino && t3.dev === e3.dev;
      }
      function isSrcSubdir(e3, t3) {
        const r3 = i.resolve(e3).split(i.sep).filter((e4) => e4);
        const n2 = i.resolve(t3).split(i.sep).filter((e4) => e4);
        return r3.reduce((e4, t4, r4) => e4 && n2[r4] === t4, true);
      }
      function errMsg(e3, t3, r3) {
        return `Cannot ${r3} '${e3}' to a subdirectory of itself, '${t3}'.`;
      }
      e2.exports = { checkPaths, checkPathsSync, checkParentPaths, checkParentPathsSync, isSrcSubdir, areIdentical };
    }, 309: (e2, t2, r2) => {
      "use strict";
      const n = r2(127);
      function utimesMillis(e3, t3, r3, i) {
        n.open(e3, "r+", (e4, o) => {
          if (e4)
            return i(e4);
          n.futimes(o, t3, r3, (e5) => {
            n.close(o, (t4) => {
              if (i)
                i(e5 || t4);
            });
          });
        });
      }
      function utimesMillisSync(e3, t3, r3) {
        const i = n.openSync(e3, "r+");
        n.futimesSync(i, t3, r3);
        return n.closeSync(i);
      }
      e2.exports = { utimesMillis, utimesMillisSync };
    }, 132: (e2) => {
      "use strict";
      e2.exports = clone2;
      var t2 = Object.getPrototypeOf || function(e3) {
        return e3.__proto__;
      };
      function clone2(e3) {
        if (e3 === null || typeof e3 !== "object")
          return e3;
        if (e3 instanceof Object)
          var r2 = { __proto__: t2(e3) };
        else
          var r2 = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(e3).forEach(function(t3) {
          Object.defineProperty(r2, t3, Object.getOwnPropertyDescriptor(e3, t3));
        });
        return r2;
      }
    }, 127: (e2, t2, r2) => {
      var n = r2(147);
      var i = r2(367);
      var o = r2(876);
      var c = r2(132);
      var s = r2(837);
      var a;
      var u;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        a = Symbol.for("graceful-fs.queue");
        u = Symbol.for("graceful-fs.previous");
      } else {
        a = "___graceful-fs.queue";
        u = "___graceful-fs.previous";
      }
      function noop() {
      }
      function publishQueue(e3, t3) {
        Object.defineProperty(e3, a, { get: function() {
          return t3;
        } });
      }
      var f = noop;
      if (s.debuglog)
        f = s.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        f = function() {
          var e3 = s.format.apply(s, arguments);
          e3 = "GFS4: " + e3.split(/\n/).join("\nGFS4: ");
          console.error(e3);
        };
      if (!n[a]) {
        var l = global[a] || [];
        publishQueue(n, l);
        n.close = function(e3) {
          function close(t3, r3) {
            return e3.call(n, t3, function(e4) {
              if (!e4) {
                resetQueue();
              }
              if (typeof r3 === "function")
                r3.apply(this, arguments);
            });
          }
          Object.defineProperty(close, u, { value: e3 });
          return close;
        }(n.close);
        n.closeSync = function(e3) {
          function closeSync(t3) {
            e3.apply(n, arguments);
            resetQueue();
          }
          Object.defineProperty(closeSync, u, { value: e3 });
          return closeSync;
        }(n.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function() {
            f(n[a]);
            r2(491).equal(n[a].length, 0);
          });
        }
      }
      if (!global[a]) {
        publishQueue(global, n[a]);
      }
      e2.exports = patch(c(n));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !n.__patched) {
        e2.exports = patch(n);
        n.__patched = true;
      }
      function patch(e3) {
        i(e3);
        e3.gracefulify = patch;
        e3.createReadStream = createReadStream;
        e3.createWriteStream = createWriteStream;
        var t3 = e3.readFile;
        e3.readFile = readFile2;
        function readFile2(e4, r4, n3) {
          if (typeof r4 === "function")
            n3 = r4, r4 = null;
          return go$readFile(e4, r4, n3);
          function go$readFile(e5, r5, n4, i2) {
            return t3(e5, r5, function(t4) {
              if (t4 && (t4.code === "EMFILE" || t4.code === "ENFILE"))
                enqueue([go$readFile, [e5, r5, n4], t4, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        var r3 = e3.writeFile;
        e3.writeFile = writeFile;
        function writeFile(e4, t4, n3, i2) {
          if (typeof n3 === "function")
            i2 = n3, n3 = null;
          return go$writeFile(e4, t4, n3, i2);
          function go$writeFile(e5, t5, n4, i3, o2) {
            return r3(e5, t5, n4, function(r4) {
              if (r4 && (r4.code === "EMFILE" || r4.code === "ENFILE"))
                enqueue([go$writeFile, [e5, t5, n4, i3], r4, o2 || Date.now(), Date.now()]);
              else {
                if (typeof i3 === "function")
                  i3.apply(this, arguments);
              }
            });
          }
        }
        var n2 = e3.appendFile;
        if (n2)
          e3.appendFile = appendFile;
        function appendFile(e4, t4, r4, i2) {
          if (typeof r4 === "function")
            i2 = r4, r4 = null;
          return go$appendFile(e4, t4, r4, i2);
          function go$appendFile(e5, t5, r5, i3, o2) {
            return n2(e5, t5, r5, function(n3) {
              if (n3 && (n3.code === "EMFILE" || n3.code === "ENFILE"))
                enqueue([go$appendFile, [e5, t5, r5, i3], n3, o2 || Date.now(), Date.now()]);
              else {
                if (typeof i3 === "function")
                  i3.apply(this, arguments);
              }
            });
          }
        }
        var c2 = e3.copyFile;
        if (c2)
          e3.copyFile = copyFile;
        function copyFile(e4, t4, r4, n3) {
          if (typeof r4 === "function") {
            n3 = r4;
            r4 = 0;
          }
          return go$copyFile(e4, t4, r4, n3);
          function go$copyFile(e5, t5, r5, n4, i2) {
            return c2(e5, t5, r5, function(o2) {
              if (o2 && (o2.code === "EMFILE" || o2.code === "ENFILE"))
                enqueue([go$copyFile, [e5, t5, r5, n4], o2, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        var s2 = e3.readdir;
        e3.readdir = readdir;
        var a2 = /^v[0-5]\./;
        function readdir(e4, t4, r4) {
          if (typeof t4 === "function")
            r4 = t4, t4 = null;
          var n3 = a2.test(process.version) ? function go$readdir(e5, t5, r5, n4) {
            return s2(e5, fs$readdirCallback(e5, t5, r5, n4));
          } : function go$readdir(e5, t5, r5, n4) {
            return s2(e5, t5, fs$readdirCallback(e5, t5, r5, n4));
          };
          return n3(e4, t4, r4);
          function fs$readdirCallback(e5, t5, r5, i2) {
            return function(o2, c3) {
              if (o2 && (o2.code === "EMFILE" || o2.code === "ENFILE"))
                enqueue([n3, [e5, t5, r5], o2, i2 || Date.now(), Date.now()]);
              else {
                if (c3 && c3.sort)
                  c3.sort();
                if (typeof r5 === "function")
                  r5.call(this, o2, c3);
              }
            };
          }
        }
        if (process.version.substr(0, 4) === "v0.8") {
          var u2 = o(e3);
          ReadStream = u2.ReadStream;
          WriteStream = u2.WriteStream;
        }
        var f2 = e3.ReadStream;
        if (f2) {
          ReadStream.prototype = Object.create(f2.prototype);
          ReadStream.prototype.open = ReadStream$open;
        }
        var l2 = e3.WriteStream;
        if (l2) {
          WriteStream.prototype = Object.create(l2.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(e3, "ReadStream", { get: function() {
          return ReadStream;
        }, set: function(e4) {
          ReadStream = e4;
        }, enumerable: true, configurable: true });
        Object.defineProperty(e3, "WriteStream", { get: function() {
          return WriteStream;
        }, set: function(e4) {
          WriteStream = e4;
        }, enumerable: true, configurable: true });
        var y2 = ReadStream;
        Object.defineProperty(e3, "FileReadStream", { get: function() {
          return y2;
        }, set: function(e4) {
          y2 = e4;
        }, enumerable: true, configurable: true });
        var d = WriteStream;
        Object.defineProperty(e3, "FileWriteStream", { get: function() {
          return d;
        }, set: function(e4) {
          d = e4;
        }, enumerable: true, configurable: true });
        function ReadStream(e4, t4) {
          if (this instanceof ReadStream)
            return f2.apply(this, arguments), this;
          else
            return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
        }
        function ReadStream$open() {
          var e4 = this;
          open(e4.path, e4.flags, e4.mode, function(t4, r4) {
            if (t4) {
              if (e4.autoClose)
                e4.destroy();
              e4.emit("error", t4);
            } else {
              e4.fd = r4;
              e4.emit("open", r4);
              e4.read();
            }
          });
        }
        function WriteStream(e4, t4) {
          if (this instanceof WriteStream)
            return l2.apply(this, arguments), this;
          else
            return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
        }
        function WriteStream$open() {
          var e4 = this;
          open(e4.path, e4.flags, e4.mode, function(t4, r4) {
            if (t4) {
              e4.destroy();
              e4.emit("error", t4);
            } else {
              e4.fd = r4;
              e4.emit("open", r4);
            }
          });
        }
        function createReadStream(t4, r4) {
          return new e3.ReadStream(t4, r4);
        }
        function createWriteStream(t4, r4) {
          return new e3.WriteStream(t4, r4);
        }
        var m = e3.open;
        e3.open = open;
        function open(e4, t4, r4, n3) {
          if (typeof r4 === "function")
            n3 = r4, r4 = null;
          return go$open(e4, t4, r4, n3);
          function go$open(e5, t5, r5, n4, i2) {
            return m(e5, t5, r5, function(o2, c3) {
              if (o2 && (o2.code === "EMFILE" || o2.code === "ENFILE"))
                enqueue([go$open, [e5, t5, r5, n4], o2, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        return e3;
      }
      function enqueue(e3) {
        f("ENQUEUE", e3[0].name, e3[1]);
        n[a].push(e3);
        retry();
      }
      var y;
      function resetQueue() {
        var e3 = Date.now();
        for (var t3 = 0; t3 < n[a].length; ++t3) {
          if (n[a][t3].length > 2) {
            n[a][t3][3] = e3;
            n[a][t3][4] = e3;
          }
        }
        retry();
      }
      function retry() {
        clearTimeout(y);
        y = void 0;
        if (n[a].length === 0)
          return;
        var e3 = n[a].shift();
        var t3 = e3[0];
        var r3 = e3[1];
        var i2 = e3[2];
        var o2 = e3[3];
        var c2 = e3[4];
        if (o2 === void 0) {
          f("RETRY", t3.name, r3);
          t3.apply(null, r3);
        } else if (Date.now() - o2 >= 6e4) {
          f("TIMEOUT", t3.name, r3);
          var s2 = r3.pop();
          if (typeof s2 === "function")
            s2.call(null, i2);
        } else {
          var u2 = Date.now() - c2;
          var l2 = Math.max(c2 - o2, 1);
          var d = Math.min(l2 * 1.2, 100);
          if (u2 >= d) {
            f("RETRY", t3.name, r3);
            t3.apply(null, r3.concat([o2]));
          } else {
            n[a].push(e3);
          }
        }
        if (y === void 0) {
          y = setTimeout(retry, 0);
        }
      }
    }, 876: (e2, t2, r2) => {
      var n = r2(781).Stream;
      e2.exports = legacy;
      function legacy(e3) {
        return { ReadStream, WriteStream };
        function ReadStream(t3, r3) {
          if (!(this instanceof ReadStream))
            return new ReadStream(t3, r3);
          n.call(this);
          var i = this;
          this.path = t3;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          r3 = r3 || {};
          var o = Object.keys(r3);
          for (var c = 0, s = o.length; c < s; c++) {
            var a = o[c];
            this[a] = r3[a];
          }
          if (this.encoding)
            this.setEncoding(this.encoding);
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.end === void 0) {
              this.end = Infinity;
            } else if (typeof this.end !== "number") {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function() {
              i._read();
            });
            return;
          }
          e3.open(this.path, this.flags, this.mode, function(e4, t4) {
            if (e4) {
              i.emit("error", e4);
              i.readable = false;
              return;
            }
            i.fd = t4;
            i.emit("open", t4);
            i._read();
          });
        }
        function WriteStream(t3, r3) {
          if (!(this instanceof WriteStream))
            return new WriteStream(t3, r3);
          n.call(this);
          this.path = t3;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          r3 = r3 || {};
          var i = Object.keys(r3);
          for (var o = 0, c = i.length; o < c; o++) {
            var s = i[o];
            this[s] = r3[s];
          }
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = e3.open;
            this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
            this.flush();
          }
        }
      }
    }, 367: (e2, t2, r2) => {
      var n = r2(57);
      var i = process.cwd;
      var o = null;
      var c = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function() {
        if (!o)
          o = i.call(process);
        return o;
      };
      try {
        process.cwd();
      } catch (e3) {
      }
      if (typeof process.chdir === "function") {
        var s = process.chdir;
        process.chdir = function(e3) {
          o = null;
          s.call(process, e3);
        };
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(process.chdir, s);
      }
      e2.exports = patch;
      function patch(e3) {
        if (n.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
          patchLchmod(e3);
        }
        if (!e3.lutimes) {
          patchLutimes(e3);
        }
        e3.chown = chownFix(e3.chown);
        e3.fchown = chownFix(e3.fchown);
        e3.lchown = chownFix(e3.lchown);
        e3.chmod = chmodFix(e3.chmod);
        e3.fchmod = chmodFix(e3.fchmod);
        e3.lchmod = chmodFix(e3.lchmod);
        e3.chownSync = chownFixSync(e3.chownSync);
        e3.fchownSync = chownFixSync(e3.fchownSync);
        e3.lchownSync = chownFixSync(e3.lchownSync);
        e3.chmodSync = chmodFixSync(e3.chmodSync);
        e3.fchmodSync = chmodFixSync(e3.fchmodSync);
        e3.lchmodSync = chmodFixSync(e3.lchmodSync);
        e3.stat = statFix(e3.stat);
        e3.fstat = statFix(e3.fstat);
        e3.lstat = statFix(e3.lstat);
        e3.statSync = statFixSync(e3.statSync);
        e3.fstatSync = statFixSync(e3.fstatSync);
        e3.lstatSync = statFixSync(e3.lstatSync);
        if (e3.chmod && !e3.lchmod) {
          e3.lchmod = function(e4, t3, r3) {
            if (r3)
              process.nextTick(r3);
          };
          e3.lchmodSync = function() {
          };
        }
        if (e3.chown && !e3.lchown) {
          e3.lchown = function(e4, t3, r3, n2) {
            if (n2)
              process.nextTick(n2);
          };
          e3.lchownSync = function() {
          };
        }
        if (c === "win32") {
          e3.rename = typeof e3.rename !== "function" ? e3.rename : function(t3) {
            function rename(r3, n2, i2) {
              var o2 = Date.now();
              var c2 = 0;
              t3(r3, n2, function CB(s2) {
                if (s2 && (s2.code === "EACCES" || s2.code === "EPERM") && Date.now() - o2 < 6e4) {
                  setTimeout(function() {
                    e3.stat(n2, function(e4, o3) {
                      if (e4 && e4.code === "ENOENT")
                        t3(r3, n2, CB);
                      else
                        i2(s2);
                    });
                  }, c2);
                  if (c2 < 100)
                    c2 += 10;
                  return;
                }
                if (i2)
                  i2(s2);
              });
            }
            if (Object.setPrototypeOf)
              Object.setPrototypeOf(rename, t3);
            return rename;
          }(e3.rename);
        }
        e3.read = typeof e3.read !== "function" ? e3.read : function(t3) {
          function read2(r3, n2, i2, o2, c2, s2) {
            var a;
            if (s2 && typeof s2 === "function") {
              var u = 0;
              a = function(f, l, y) {
                if (f && f.code === "EAGAIN" && u < 10) {
                  u++;
                  return t3.call(e3, r3, n2, i2, o2, c2, a);
                }
                s2.apply(this, arguments);
              };
            }
            return t3.call(e3, r3, n2, i2, o2, c2, a);
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(read2, t3);
          return read2;
        }(e3.read);
        e3.readSync = typeof e3.readSync !== "function" ? e3.readSync : function(t3) {
          return function(r3, n2, i2, o2, c2) {
            var s2 = 0;
            while (true) {
              try {
                return t3.call(e3, r3, n2, i2, o2, c2);
              } catch (e4) {
                if (e4.code === "EAGAIN" && s2 < 10) {
                  s2++;
                  continue;
                }
                throw e4;
              }
            }
          };
        }(e3.readSync);
        function patchLchmod(e4) {
          e4.lchmod = function(t3, r3, i2) {
            e4.open(t3, n.O_WRONLY | n.O_SYMLINK, r3, function(t4, n2) {
              if (t4) {
                if (i2)
                  i2(t4);
                return;
              }
              e4.fchmod(n2, r3, function(t5) {
                e4.close(n2, function(e5) {
                  if (i2)
                    i2(t5 || e5);
                });
              });
            });
          };
          e4.lchmodSync = function(t3, r3) {
            var i2 = e4.openSync(t3, n.O_WRONLY | n.O_SYMLINK, r3);
            var o2 = true;
            var c2;
            try {
              c2 = e4.fchmodSync(i2, r3);
              o2 = false;
            } finally {
              if (o2) {
                try {
                  e4.closeSync(i2);
                } catch (e5) {
                }
              } else {
                e4.closeSync(i2);
              }
            }
            return c2;
          };
        }
        function patchLutimes(e4) {
          if (n.hasOwnProperty("O_SYMLINK") && e4.futimes) {
            e4.lutimes = function(t3, r3, i2, o2) {
              e4.open(t3, n.O_SYMLINK, function(t4, n2) {
                if (t4) {
                  if (o2)
                    o2(t4);
                  return;
                }
                e4.futimes(n2, r3, i2, function(t5) {
                  e4.close(n2, function(e5) {
                    if (o2)
                      o2(t5 || e5);
                  });
                });
              });
            };
            e4.lutimesSync = function(t3, r3, i2) {
              var o2 = e4.openSync(t3, n.O_SYMLINK);
              var c2;
              var s2 = true;
              try {
                c2 = e4.futimesSync(o2, r3, i2);
                s2 = false;
              } finally {
                if (s2) {
                  try {
                    e4.closeSync(o2);
                  } catch (e5) {
                  }
                } else {
                  e4.closeSync(o2);
                }
              }
              return c2;
            };
          } else if (e4.futimes) {
            e4.lutimes = function(e5, t3, r3, n2) {
              if (n2)
                process.nextTick(n2);
            };
            e4.lutimesSync = function() {
            };
          }
        }
        function chmodFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            return t3.call(e3, r3, n2, function(e4) {
              if (chownErOk(e4))
                e4 = null;
              if (i2)
                i2.apply(this, arguments);
            });
          };
        }
        function chmodFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2) {
            try {
              return t3.call(e3, r3, n2);
            } catch (e4) {
              if (!chownErOk(e4))
                throw e4;
            }
          };
        }
        function chownFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2, o2) {
            return t3.call(e3, r3, n2, i2, function(e4) {
              if (chownErOk(e4))
                e4 = null;
              if (o2)
                o2.apply(this, arguments);
            });
          };
        }
        function chownFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            try {
              return t3.call(e3, r3, n2, i2);
            } catch (e4) {
              if (!chownErOk(e4))
                throw e4;
            }
          };
        }
        function statFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            if (typeof n2 === "function") {
              i2 = n2;
              n2 = null;
            }
            function callback(e4, t4) {
              if (t4) {
                if (t4.uid < 0)
                  t4.uid += 4294967296;
                if (t4.gid < 0)
                  t4.gid += 4294967296;
              }
              if (i2)
                i2.apply(this, arguments);
            }
            return n2 ? t3.call(e3, r3, n2, callback) : t3.call(e3, r3, callback);
          };
        }
        function statFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2) {
            var i2 = n2 ? t3.call(e3, r3, n2) : t3.call(e3, r3);
            if (i2) {
              if (i2.uid < 0)
                i2.uid += 4294967296;
              if (i2.gid < 0)
                i2.gid += 4294967296;
            }
            return i2;
          };
        }
        function chownErOk(e4) {
          if (!e4)
            return true;
          if (e4.code === "ENOSYS")
            return true;
          var t3 = !process.getuid || process.getuid() !== 0;
          if (t3) {
            if (e4.code === "EINVAL" || e4.code === "EPERM")
              return true;
          }
          return false;
        }
      }
    }, 654: (e2, t2, r2) => {
      let n;
      try {
        n = r2(127);
      } catch (e3) {
        n = r2(147);
      }
      const i = r2(5);
      const { stringify: o, stripBom: c } = r2(208);
      async function _readFile(e3, t3 = {}) {
        if (typeof t3 === "string") {
          t3 = { encoding: t3 };
        }
        const r3 = t3.fs || n;
        const o2 = "throws" in t3 ? t3.throws : true;
        let s2 = await i.fromCallback(r3.readFile)(e3, t3);
        s2 = c(s2);
        let a2;
        try {
          a2 = JSON.parse(s2, t3 ? t3.reviver : null);
        } catch (t4) {
          if (o2) {
            t4.message = `${e3}: ${t4.message}`;
            throw t4;
          } else {
            return null;
          }
        }
        return a2;
      }
      const s = i.fromPromise(_readFile);
      function readFileSync(e3, t3 = {}) {
        if (typeof t3 === "string") {
          t3 = { encoding: t3 };
        }
        const r3 = t3.fs || n;
        const i2 = "throws" in t3 ? t3.throws : true;
        try {
          let n2 = r3.readFileSync(e3, t3);
          n2 = c(n2);
          return JSON.parse(n2, t3.reviver);
        } catch (t4) {
          if (i2) {
            t4.message = `${e3}: ${t4.message}`;
            throw t4;
          } else {
            return null;
          }
        }
      }
      async function _writeFile(e3, t3, r3 = {}) {
        const c2 = r3.fs || n;
        const s2 = o(t3, r3);
        await i.fromCallback(c2.writeFile)(e3, s2, r3);
      }
      const a = i.fromPromise(_writeFile);
      function writeFileSync(e3, t3, r3 = {}) {
        const i2 = r3.fs || n;
        const c2 = o(t3, r3);
        return i2.writeFileSync(e3, c2, r3);
      }
      const u = { readFile: s, readFileSync, writeFile: a, writeFileSync };
      e2.exports = u;
    }, 208: (e2) => {
      function stringify(e3, { EOL: t2 = "\n", finalEOL: r2 = true, replacer: n = null, spaces: i } = {}) {
        const o = r2 ? t2 : "";
        const c = JSON.stringify(e3, n, i);
        return c.replace(/\n/g, t2) + o;
      }
      function stripBom(e3) {
        if (Buffer.isBuffer(e3))
          e3 = e3.toString("utf8");
        return e3.replace(/^\uFEFF/, "");
      }
      e2.exports = { stringify, stripBom };
    }, 5: (e2, t2) => {
      "use strict";
      t2.fromCallback = function(e3) {
        return Object.defineProperty(function(...t3) {
          if (typeof t3[t3.length - 1] === "function")
            e3.apply(this, t3);
          else {
            return new Promise((r2, n) => {
              e3.call(this, ...t3, (e4, t4) => e4 != null ? n(e4) : r2(t4));
            });
          }
        }, "name", { value: e3.name });
      };
      t2.fromPromise = function(e3) {
        return Object.defineProperty(function(...t3) {
          const r2 = t3[t3.length - 1];
          if (typeof r2 !== "function")
            return e3.apply(this, t3);
          else
            e3.apply(this, t3.slice(0, -1)).then((e4) => r2(null, e4), r2);
        }, "name", { value: e3.name });
      };
    }, 491: (e2) => {
      "use strict";
      e2.exports = __require("assert");
    }, 57: (e2) => {
      "use strict";
      e2.exports = __require("constants");
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    }, 781: (e2) => {
      "use strict";
      e2.exports = __require("stream");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var n = t[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var i = t[r2] = { exports: {} };
      var o = true;
      try {
        e[r2](i, i.exports, __nccwpck_require__);
        o = false;
      } finally {
        if (o)
          delete t[r2];
      }
      return i.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(81);
    module2.exports = r;
  })();
});
var require_chalk = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 44: (e2, t2, n2) => {
      "use strict";
      e2 = n2.nmd(e2);
      const wrapAnsi16 = (e3, t3) => (...n3) => {
        const r2 = e3(...n3);
        return `\x1B[${r2 + t3}m`;
      };
      const wrapAnsi256 = (e3, t3) => (...n3) => {
        const r2 = e3(...n3);
        return `\x1B[${38 + t3};5;${r2}m`;
      };
      const wrapAnsi16m = (e3, t3) => (...n3) => {
        const r2 = e3(...n3);
        return `\x1B[${38 + t3};2;${r2[0]};${r2[1]};${r2[2]}m`;
      };
      const ansi2ansi = (e3) => e3;
      const rgb2rgb = (e3, t3, n3) => [e3, t3, n3];
      const setLazyProperty = (e3, t3, n3) => {
        Object.defineProperty(e3, t3, { get: () => {
          const r2 = n3();
          Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true });
          return r2;
        }, enumerable: true, configurable: true });
      };
      let r;
      const makeDynamicStyles = (e3, t3, s, o) => {
        if (r === void 0) {
          r = n2(767);
        }
        const l = o ? 10 : 0;
        const c = {};
        for (const [n3, o2] of Object.entries(r)) {
          const r2 = n3 === "ansi16" ? "ansi" : n3;
          if (n3 === t3) {
            c[r2] = e3(s, l);
          } else if (typeof o2 === "object") {
            c[r2] = e3(o2[t3], l);
          }
        }
        return c;
      };
      function assembleStyles() {
        const e3 = /* @__PURE__ */ new Map();
        const t3 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        t3.color.gray = t3.color.blackBright;
        t3.bgColor.bgGray = t3.bgColor.bgBlackBright;
        t3.color.grey = t3.color.blackBright;
        t3.bgColor.bgGrey = t3.bgColor.bgBlackBright;
        for (const [n3, r2] of Object.entries(t3)) {
          for (const [n4, s] of Object.entries(r2)) {
            t3[n4] = { open: `\x1B[${s[0]}m`, close: `\x1B[${s[1]}m` };
            r2[n4] = t3[n4];
            e3.set(s[0], s[1]);
          }
          Object.defineProperty(t3, n3, { value: r2, enumerable: false });
        }
        Object.defineProperty(t3, "codes", { value: e3, enumerable: false });
        t3.color.close = "\x1B[39m";
        t3.bgColor.close = "\x1B[49m";
        setLazyProperty(t3.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(t3.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(t3.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(t3.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(t3.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(t3.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return t3;
      }
      Object.defineProperty(e2, "exports", { enumerable: true, get: assembleStyles });
    }, 584: (e2, t2, n2) => {
      "use strict";
      const r = n2(44);
      const { stdout: s, stderr: o } = n2(242);
      const { stringReplaceAll: l, stringEncaseCRLFWithFirstIndex: c } = n2(905);
      const { isArray: i } = Array;
      const a = ["ansi", "ansi", "ansi256", "ansi16m"];
      const u = /* @__PURE__ */ Object.create(null);
      const applyOptions = (e3, t3 = {}) => {
        if (t3.level && !(Number.isInteger(t3.level) && t3.level >= 0 && t3.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const n3 = s ? s.level : 0;
        e3.level = t3.level === void 0 ? n3 : t3.level;
      };
      class ChalkClass {
        constructor(e3) {
          return chalkFactory(e3);
        }
      }
      const chalkFactory = (e3) => {
        const t3 = {};
        applyOptions(t3, e3);
        t3.template = (...e4) => chalkTag(t3.template, ...e4);
        Object.setPrototypeOf(t3, Chalk.prototype);
        Object.setPrototypeOf(t3.template, t3);
        t3.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        t3.template.Instance = ChalkClass;
        return t3.template;
      };
      function Chalk(e3) {
        return chalkFactory(e3);
      }
      for (const [e3, t3] of Object.entries(r)) {
        u[e3] = { get() {
          const n3 = createBuilder(this, createStyler(t3.open, t3.close, this._styler), this._isEmpty);
          Object.defineProperty(this, e3, { value: n3 });
          return n3;
        } };
      }
      u.visible = { get() {
        const e3 = createBuilder(this, this._styler, true);
        Object.defineProperty(this, "visible", { value: e3 });
        return e3;
      } };
      const h = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const e3 of h) {
        u[e3] = { get() {
          const { level: t3 } = this;
          return function(...n3) {
            const s2 = createStyler(r.color[a[t3]][e3](...n3), r.color.close, this._styler);
            return createBuilder(this, s2, this._isEmpty);
          };
        } };
      }
      for (const e3 of h) {
        const t3 = "bg" + e3[0].toUpperCase() + e3.slice(1);
        u[t3] = { get() {
          const { level: t4 } = this;
          return function(...n3) {
            const s2 = createStyler(r.bgColor[a[t4]][e3](...n3), r.bgColor.close, this._styler);
            return createBuilder(this, s2, this._isEmpty);
          };
        } };
      }
      const f = Object.defineProperties(() => {
      }, { ...u, level: { enumerable: true, get() {
        return this._generator.level;
      }, set(e3) {
        this._generator.level = e3;
      } } });
      const createStyler = (e3, t3, n3) => {
        let r2;
        let s2;
        if (n3 === void 0) {
          r2 = e3;
          s2 = t3;
        } else {
          r2 = n3.openAll + e3;
          s2 = t3 + n3.closeAll;
        }
        return { open: e3, close: t3, openAll: r2, closeAll: s2, parent: n3 };
      };
      const createBuilder = (e3, t3, n3) => {
        const builder = (...e4) => {
          if (i(e4[0]) && i(e4[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...e4));
          }
          return applyStyle(builder, e4.length === 1 ? "" + e4[0] : e4.join(" "));
        };
        Object.setPrototypeOf(builder, f);
        builder._generator = e3;
        builder._styler = t3;
        builder._isEmpty = n3;
        return builder;
      };
      const applyStyle = (e3, t3) => {
        if (e3.level <= 0 || !t3) {
          return e3._isEmpty ? "" : t3;
        }
        let n3 = e3._styler;
        if (n3 === void 0) {
          return t3;
        }
        const { openAll: r2, closeAll: s2 } = n3;
        if (t3.indexOf("\x1B") !== -1) {
          while (n3 !== void 0) {
            t3 = l(t3, n3.close, n3.open);
            n3 = n3.parent;
          }
        }
        const o2 = t3.indexOf("\n");
        if (o2 !== -1) {
          t3 = c(t3, s2, r2, o2);
        }
        return r2 + t3 + s2;
      };
      let g;
      const chalkTag = (e3, ...t3) => {
        const [r2] = t3;
        if (!i(r2) || !i(r2.raw)) {
          return t3.join(" ");
        }
        const s2 = t3.slice(1);
        const o2 = [r2.raw[0]];
        for (let e4 = 1; e4 < r2.length; e4++) {
          o2.push(String(s2[e4 - 1]).replace(/[{}\\]/g, "\\$&"), String(r2.raw[e4]));
        }
        if (g === void 0) {
          g = n2(654);
        }
        return g(e3, o2.join(""));
      };
      Object.defineProperties(Chalk.prototype, u);
      const b = Chalk();
      b.supportsColor = s;
      b.stderr = Chalk({ level: o ? o.level : 0 });
      b.stderr.supportsColor = o;
      e2.exports = b;
    }, 654: (e2) => {
      "use strict";
      const t2 = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      const n2 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      const r = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      const s = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      const o = /* @__PURE__ */ new Map([["n", "\n"], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
      function unescape(e3) {
        const t3 = e3[0] === "u";
        const n3 = e3[1] === "{";
        if (t3 && !n3 && e3.length === 5 || e3[0] === "x" && e3.length === 3) {
          return String.fromCharCode(parseInt(e3.slice(1), 16));
        }
        if (t3 && n3) {
          return String.fromCodePoint(parseInt(e3.slice(2, -1), 16));
        }
        return o.get(e3) || e3;
      }
      function parseArguments(e3, t3) {
        const n3 = [];
        const o2 = t3.trim().split(/\s*,\s*/g);
        let l;
        for (const t4 of o2) {
          const o3 = Number(t4);
          if (!Number.isNaN(o3)) {
            n3.push(o3);
          } else if (l = t4.match(r)) {
            n3.push(l[2].replace(s, (e4, t5, n4) => t5 ? unescape(t5) : n4));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${t4} (in style '${e3}')`);
          }
        }
        return n3;
      }
      function parseStyle(e3) {
        n2.lastIndex = 0;
        const t3 = [];
        let r2;
        while ((r2 = n2.exec(e3)) !== null) {
          const e4 = r2[1];
          if (r2[2]) {
            const n3 = parseArguments(e4, r2[2]);
            t3.push([e4].concat(n3));
          } else {
            t3.push([e4]);
          }
        }
        return t3;
      }
      function buildStyle(e3, t3) {
        const n3 = {};
        for (const e4 of t3) {
          for (const t4 of e4.styles) {
            n3[t4[0]] = e4.inverse ? null : t4.slice(1);
          }
        }
        let r2 = e3;
        for (const [e4, t4] of Object.entries(n3)) {
          if (!Array.isArray(t4)) {
            continue;
          }
          if (!(e4 in r2)) {
            throw new Error(`Unknown Chalk style: ${e4}`);
          }
          r2 = t4.length > 0 ? r2[e4](...t4) : r2[e4];
        }
        return r2;
      }
      e2.exports = (e3, n3) => {
        const r2 = [];
        const s2 = [];
        let o2 = [];
        n3.replace(t2, (t3, n4, l, c, i, a) => {
          if (n4) {
            o2.push(unescape(n4));
          } else if (c) {
            const t4 = o2.join("");
            o2 = [];
            s2.push(r2.length === 0 ? t4 : buildStyle(e3, r2)(t4));
            r2.push({ inverse: l, styles: parseStyle(c) });
          } else if (i) {
            if (r2.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            s2.push(buildStyle(e3, r2)(o2.join("")));
            o2 = [];
            r2.pop();
          } else {
            o2.push(a);
          }
        });
        s2.push(o2.join(""));
        if (r2.length > 0) {
          const e4 = `Chalk template literal is missing ${r2.length} closing bracket${r2.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(e4);
        }
        return s2.join("");
      };
    }, 905: (e2) => {
      "use strict";
      const stringReplaceAll = (e3, t2, n2) => {
        let r = e3.indexOf(t2);
        if (r === -1) {
          return e3;
        }
        const s = t2.length;
        let o = 0;
        let l = "";
        do {
          l += e3.substr(o, r - o) + t2 + n2;
          o = r + s;
          r = e3.indexOf(t2, o);
        } while (r !== -1);
        l += e3.substr(o);
        return l;
      };
      const stringEncaseCRLFWithFirstIndex = (e3, t2, n2, r) => {
        let s = 0;
        let o = "";
        do {
          const l = e3[r - 1] === "\r";
          o += e3.substr(s, (l ? r - 1 : r) - s) + t2 + (l ? "\r\n" : "\n") + n2;
          s = r + 1;
          r = e3.indexOf("\n", s);
        } while (r !== -1);
        o += e3.substr(s);
        return o;
      };
      e2.exports = { stringReplaceAll, stringEncaseCRLFWithFirstIndex };
    }, 226: (e2, t2, n2) => {
      const r = n2(866);
      const s = {};
      for (const e3 of Object.keys(r)) {
        s[r[e3]] = e3;
      }
      const o = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
      e2.exports = o;
      for (const e3 of Object.keys(o)) {
        if (!("channels" in o[e3])) {
          throw new Error("missing channels property: " + e3);
        }
        if (!("labels" in o[e3])) {
          throw new Error("missing channel labels property: " + e3);
        }
        if (o[e3].labels.length !== o[e3].channels) {
          throw new Error("channel and label counts mismatch: " + e3);
        }
        const { channels: t3, labels: n3 } = o[e3];
        delete o[e3].channels;
        delete o[e3].labels;
        Object.defineProperty(o[e3], "channels", { value: t3 });
        Object.defineProperty(o[e3], "labels", { value: n3 });
      }
      o.rgb.hsl = function(e3) {
        const t3 = e3[0] / 255;
        const n3 = e3[1] / 255;
        const r2 = e3[2] / 255;
        const s2 = Math.min(t3, n3, r2);
        const o2 = Math.max(t3, n3, r2);
        const l = o2 - s2;
        let c;
        let i;
        if (o2 === s2) {
          c = 0;
        } else if (t3 === o2) {
          c = (n3 - r2) / l;
        } else if (n3 === o2) {
          c = 2 + (r2 - t3) / l;
        } else if (r2 === o2) {
          c = 4 + (t3 - n3) / l;
        }
        c = Math.min(c * 60, 360);
        if (c < 0) {
          c += 360;
        }
        const a = (s2 + o2) / 2;
        if (o2 === s2) {
          i = 0;
        } else if (a <= 0.5) {
          i = l / (o2 + s2);
        } else {
          i = l / (2 - o2 - s2);
        }
        return [c, i * 100, a * 100];
      };
      o.rgb.hsv = function(e3) {
        let t3;
        let n3;
        let r2;
        let s2;
        let o2;
        const l = e3[0] / 255;
        const c = e3[1] / 255;
        const i = e3[2] / 255;
        const a = Math.max(l, c, i);
        const u = a - Math.min(l, c, i);
        const diffc = function(e4) {
          return (a - e4) / 6 / u + 1 / 2;
        };
        if (u === 0) {
          s2 = 0;
          o2 = 0;
        } else {
          o2 = u / a;
          t3 = diffc(l);
          n3 = diffc(c);
          r2 = diffc(i);
          if (l === a) {
            s2 = r2 - n3;
          } else if (c === a) {
            s2 = 1 / 3 + t3 - r2;
          } else if (i === a) {
            s2 = 2 / 3 + n3 - t3;
          }
          if (s2 < 0) {
            s2 += 1;
          } else if (s2 > 1) {
            s2 -= 1;
          }
        }
        return [s2 * 360, o2 * 100, a * 100];
      };
      o.rgb.hwb = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1];
        let r2 = e3[2];
        const s2 = o.rgb.hsl(e3)[0];
        const l = 1 / 255 * Math.min(t3, Math.min(n3, r2));
        r2 = 1 - 1 / 255 * Math.max(t3, Math.max(n3, r2));
        return [s2, l * 100, r2 * 100];
      };
      o.rgb.cmyk = function(e3) {
        const t3 = e3[0] / 255;
        const n3 = e3[1] / 255;
        const r2 = e3[2] / 255;
        const s2 = Math.min(1 - t3, 1 - n3, 1 - r2);
        const o2 = (1 - t3 - s2) / (1 - s2) || 0;
        const l = (1 - n3 - s2) / (1 - s2) || 0;
        const c = (1 - r2 - s2) / (1 - s2) || 0;
        return [o2 * 100, l * 100, c * 100, s2 * 100];
      };
      function comparativeDistance(e3, t3) {
        return (e3[0] - t3[0]) ** 2 + (e3[1] - t3[1]) ** 2 + (e3[2] - t3[2]) ** 2;
      }
      o.rgb.keyword = function(e3) {
        const t3 = s[e3];
        if (t3) {
          return t3;
        }
        let n3 = Infinity;
        let o2;
        for (const t4 of Object.keys(r)) {
          const s2 = r[t4];
          const l = comparativeDistance(e3, s2);
          if (l < n3) {
            n3 = l;
            o2 = t4;
          }
        }
        return o2;
      };
      o.keyword.rgb = function(e3) {
        return r[e3];
      };
      o.rgb.xyz = function(e3) {
        let t3 = e3[0] / 255;
        let n3 = e3[1] / 255;
        let r2 = e3[2] / 255;
        t3 = t3 > 0.04045 ? ((t3 + 0.055) / 1.055) ** 2.4 : t3 / 12.92;
        n3 = n3 > 0.04045 ? ((n3 + 0.055) / 1.055) ** 2.4 : n3 / 12.92;
        r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
        const s2 = t3 * 0.4124 + n3 * 0.3576 + r2 * 0.1805;
        const o2 = t3 * 0.2126 + n3 * 0.7152 + r2 * 0.0722;
        const l = t3 * 0.0193 + n3 * 0.1192 + r2 * 0.9505;
        return [s2 * 100, o2 * 100, l * 100];
      };
      o.rgb.lab = function(e3) {
        const t3 = o.rgb.xyz(e3);
        let n3 = t3[0];
        let r2 = t3[1];
        let s2 = t3[2];
        n3 /= 95.047;
        r2 /= 100;
        s2 /= 108.883;
        n3 = n3 > 8856e-6 ? n3 ** (1 / 3) : 7.787 * n3 + 16 / 116;
        r2 = r2 > 8856e-6 ? r2 ** (1 / 3) : 7.787 * r2 + 16 / 116;
        s2 = s2 > 8856e-6 ? s2 ** (1 / 3) : 7.787 * s2 + 16 / 116;
        const l = 116 * r2 - 16;
        const c = 500 * (n3 - r2);
        const i = 200 * (r2 - s2);
        return [l, c, i];
      };
      o.hsl.rgb = function(e3) {
        const t3 = e3[0] / 360;
        const n3 = e3[1] / 100;
        const r2 = e3[2] / 100;
        let s2;
        let o2;
        let l;
        if (n3 === 0) {
          l = r2 * 255;
          return [l, l, l];
        }
        if (r2 < 0.5) {
          s2 = r2 * (1 + n3);
        } else {
          s2 = r2 + n3 - r2 * n3;
        }
        const c = 2 * r2 - s2;
        const i = [0, 0, 0];
        for (let e4 = 0; e4 < 3; e4++) {
          o2 = t3 + 1 / 3 * -(e4 - 1);
          if (o2 < 0) {
            o2++;
          }
          if (o2 > 1) {
            o2--;
          }
          if (6 * o2 < 1) {
            l = c + (s2 - c) * 6 * o2;
          } else if (2 * o2 < 1) {
            l = s2;
          } else if (3 * o2 < 2) {
            l = c + (s2 - c) * (2 / 3 - o2) * 6;
          } else {
            l = c;
          }
          i[e4] = l * 255;
        }
        return i;
      };
      o.hsl.hsv = function(e3) {
        const t3 = e3[0];
        let n3 = e3[1] / 100;
        let r2 = e3[2] / 100;
        let s2 = n3;
        const o2 = Math.max(r2, 0.01);
        r2 *= 2;
        n3 *= r2 <= 1 ? r2 : 2 - r2;
        s2 *= o2 <= 1 ? o2 : 2 - o2;
        const l = (r2 + n3) / 2;
        const c = r2 === 0 ? 2 * s2 / (o2 + s2) : 2 * n3 / (r2 + n3);
        return [t3, c * 100, l * 100];
      };
      o.hsv.rgb = function(e3) {
        const t3 = e3[0] / 60;
        const n3 = e3[1] / 100;
        let r2 = e3[2] / 100;
        const s2 = Math.floor(t3) % 6;
        const o2 = t3 - Math.floor(t3);
        const l = 255 * r2 * (1 - n3);
        const c = 255 * r2 * (1 - n3 * o2);
        const i = 255 * r2 * (1 - n3 * (1 - o2));
        r2 *= 255;
        switch (s2) {
          case 0:
            return [r2, i, l];
          case 1:
            return [c, r2, l];
          case 2:
            return [l, r2, i];
          case 3:
            return [l, c, r2];
          case 4:
            return [i, l, r2];
          case 5:
            return [r2, l, c];
        }
      };
      o.hsv.hsl = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1] / 100;
        const r2 = e3[2] / 100;
        const s2 = Math.max(r2, 0.01);
        let o2;
        let l;
        l = (2 - n3) * r2;
        const c = (2 - n3) * s2;
        o2 = n3 * s2;
        o2 /= c <= 1 ? c : 2 - c;
        o2 = o2 || 0;
        l /= 2;
        return [t3, o2 * 100, l * 100];
      };
      o.hwb.rgb = function(e3) {
        const t3 = e3[0] / 360;
        let n3 = e3[1] / 100;
        let r2 = e3[2] / 100;
        const s2 = n3 + r2;
        let o2;
        if (s2 > 1) {
          n3 /= s2;
          r2 /= s2;
        }
        const l = Math.floor(6 * t3);
        const c = 1 - r2;
        o2 = 6 * t3 - l;
        if ((l & 1) !== 0) {
          o2 = 1 - o2;
        }
        const i = n3 + o2 * (c - n3);
        let a;
        let u;
        let h;
        switch (l) {
          default:
          case 6:
          case 0:
            a = c;
            u = i;
            h = n3;
            break;
          case 1:
            a = i;
            u = c;
            h = n3;
            break;
          case 2:
            a = n3;
            u = c;
            h = i;
            break;
          case 3:
            a = n3;
            u = i;
            h = c;
            break;
          case 4:
            a = i;
            u = n3;
            h = c;
            break;
          case 5:
            a = c;
            u = n3;
            h = i;
            break;
        }
        return [a * 255, u * 255, h * 255];
      };
      o.cmyk.rgb = function(e3) {
        const t3 = e3[0] / 100;
        const n3 = e3[1] / 100;
        const r2 = e3[2] / 100;
        const s2 = e3[3] / 100;
        const o2 = 1 - Math.min(1, t3 * (1 - s2) + s2);
        const l = 1 - Math.min(1, n3 * (1 - s2) + s2);
        const c = 1 - Math.min(1, r2 * (1 - s2) + s2);
        return [o2 * 255, l * 255, c * 255];
      };
      o.xyz.rgb = function(e3) {
        const t3 = e3[0] / 100;
        const n3 = e3[1] / 100;
        const r2 = e3[2] / 100;
        let s2;
        let o2;
        let l;
        s2 = t3 * 3.2406 + n3 * -1.5372 + r2 * -0.4986;
        o2 = t3 * -0.9689 + n3 * 1.8758 + r2 * 0.0415;
        l = t3 * 0.0557 + n3 * -0.204 + r2 * 1.057;
        s2 = s2 > 31308e-7 ? 1.055 * s2 ** (1 / 2.4) - 0.055 : s2 * 12.92;
        o2 = o2 > 31308e-7 ? 1.055 * o2 ** (1 / 2.4) - 0.055 : o2 * 12.92;
        l = l > 31308e-7 ? 1.055 * l ** (1 / 2.4) - 0.055 : l * 12.92;
        s2 = Math.min(Math.max(0, s2), 1);
        o2 = Math.min(Math.max(0, o2), 1);
        l = Math.min(Math.max(0, l), 1);
        return [s2 * 255, o2 * 255, l * 255];
      };
      o.xyz.lab = function(e3) {
        let t3 = e3[0];
        let n3 = e3[1];
        let r2 = e3[2];
        t3 /= 95.047;
        n3 /= 100;
        r2 /= 108.883;
        t3 = t3 > 8856e-6 ? t3 ** (1 / 3) : 7.787 * t3 + 16 / 116;
        n3 = n3 > 8856e-6 ? n3 ** (1 / 3) : 7.787 * n3 + 16 / 116;
        r2 = r2 > 8856e-6 ? r2 ** (1 / 3) : 7.787 * r2 + 16 / 116;
        const s2 = 116 * n3 - 16;
        const o2 = 500 * (t3 - n3);
        const l = 200 * (n3 - r2);
        return [s2, o2, l];
      };
      o.lab.xyz = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1];
        const r2 = e3[2];
        let s2;
        let o2;
        let l;
        o2 = (t3 + 16) / 116;
        s2 = n3 / 500 + o2;
        l = o2 - r2 / 200;
        const c = o2 ** 3;
        const i = s2 ** 3;
        const a = l ** 3;
        o2 = c > 8856e-6 ? c : (o2 - 16 / 116) / 7.787;
        s2 = i > 8856e-6 ? i : (s2 - 16 / 116) / 7.787;
        l = a > 8856e-6 ? a : (l - 16 / 116) / 7.787;
        s2 *= 95.047;
        o2 *= 100;
        l *= 108.883;
        return [s2, o2, l];
      };
      o.lab.lch = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1];
        const r2 = e3[2];
        let s2;
        const o2 = Math.atan2(r2, n3);
        s2 = o2 * 360 / 2 / Math.PI;
        if (s2 < 0) {
          s2 += 360;
        }
        const l = Math.sqrt(n3 * n3 + r2 * r2);
        return [t3, l, s2];
      };
      o.lch.lab = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1];
        const r2 = e3[2];
        const s2 = r2 / 360 * 2 * Math.PI;
        const o2 = n3 * Math.cos(s2);
        const l = n3 * Math.sin(s2);
        return [t3, o2, l];
      };
      o.rgb.ansi16 = function(e3, t3 = null) {
        const [n3, r2, s2] = e3;
        let l = t3 === null ? o.rgb.hsv(e3)[2] : t3;
        l = Math.round(l / 50);
        if (l === 0) {
          return 30;
        }
        let c = 30 + (Math.round(s2 / 255) << 2 | Math.round(r2 / 255) << 1 | Math.round(n3 / 255));
        if (l === 2) {
          c += 60;
        }
        return c;
      };
      o.hsv.ansi16 = function(e3) {
        return o.rgb.ansi16(o.hsv.rgb(e3), e3[2]);
      };
      o.rgb.ansi256 = function(e3) {
        const t3 = e3[0];
        const n3 = e3[1];
        const r2 = e3[2];
        if (t3 === n3 && n3 === r2) {
          if (t3 < 8) {
            return 16;
          }
          if (t3 > 248) {
            return 231;
          }
          return Math.round((t3 - 8) / 247 * 24) + 232;
        }
        const s2 = 16 + 36 * Math.round(t3 / 255 * 5) + 6 * Math.round(n3 / 255 * 5) + Math.round(r2 / 255 * 5);
        return s2;
      };
      o.ansi16.rgb = function(e3) {
        let t3 = e3 % 10;
        if (t3 === 0 || t3 === 7) {
          if (e3 > 50) {
            t3 += 3.5;
          }
          t3 = t3 / 10.5 * 255;
          return [t3, t3, t3];
        }
        const n3 = (~~(e3 > 50) + 1) * 0.5;
        const r2 = (t3 & 1) * n3 * 255;
        const s2 = (t3 >> 1 & 1) * n3 * 255;
        const o2 = (t3 >> 2 & 1) * n3 * 255;
        return [r2, s2, o2];
      };
      o.ansi256.rgb = function(e3) {
        if (e3 >= 232) {
          const t4 = (e3 - 232) * 10 + 8;
          return [t4, t4, t4];
        }
        e3 -= 16;
        let t3;
        const n3 = Math.floor(e3 / 36) / 5 * 255;
        const r2 = Math.floor((t3 = e3 % 36) / 6) / 5 * 255;
        const s2 = t3 % 6 / 5 * 255;
        return [n3, r2, s2];
      };
      o.rgb.hex = function(e3) {
        const t3 = ((Math.round(e3[0]) & 255) << 16) + ((Math.round(e3[1]) & 255) << 8) + (Math.round(e3[2]) & 255);
        const n3 = t3.toString(16).toUpperCase();
        return "000000".substring(n3.length) + n3;
      };
      o.hex.rgb = function(e3) {
        const t3 = e3.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!t3) {
          return [0, 0, 0];
        }
        let n3 = t3[0];
        if (t3[0].length === 3) {
          n3 = n3.split("").map((e4) => e4 + e4).join("");
        }
        const r2 = parseInt(n3, 16);
        const s2 = r2 >> 16 & 255;
        const o2 = r2 >> 8 & 255;
        const l = r2 & 255;
        return [s2, o2, l];
      };
      o.rgb.hcg = function(e3) {
        const t3 = e3[0] / 255;
        const n3 = e3[1] / 255;
        const r2 = e3[2] / 255;
        const s2 = Math.max(Math.max(t3, n3), r2);
        const o2 = Math.min(Math.min(t3, n3), r2);
        const l = s2 - o2;
        let c;
        let i;
        if (l < 1) {
          c = o2 / (1 - l);
        } else {
          c = 0;
        }
        if (l <= 0) {
          i = 0;
        } else if (s2 === t3) {
          i = (n3 - r2) / l % 6;
        } else if (s2 === n3) {
          i = 2 + (r2 - t3) / l;
        } else {
          i = 4 + (t3 - n3) / l;
        }
        i /= 6;
        i %= 1;
        return [i * 360, l * 100, c * 100];
      };
      o.hsl.hcg = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = n3 < 0.5 ? 2 * t3 * n3 : 2 * t3 * (1 - n3);
        let s2 = 0;
        if (r2 < 1) {
          s2 = (n3 - 0.5 * r2) / (1 - r2);
        }
        return [e3[0], r2 * 100, s2 * 100];
      };
      o.hsv.hcg = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = t3 * n3;
        let s2 = 0;
        if (r2 < 1) {
          s2 = (n3 - r2) / (1 - r2);
        }
        return [e3[0], r2 * 100, s2 * 100];
      };
      o.hcg.rgb = function(e3) {
        const t3 = e3[0] / 360;
        const n3 = e3[1] / 100;
        const r2 = e3[2] / 100;
        if (n3 === 0) {
          return [r2 * 255, r2 * 255, r2 * 255];
        }
        const s2 = [0, 0, 0];
        const o2 = t3 % 1 * 6;
        const l = o2 % 1;
        const c = 1 - l;
        let i = 0;
        switch (Math.floor(o2)) {
          case 0:
            s2[0] = 1;
            s2[1] = l;
            s2[2] = 0;
            break;
          case 1:
            s2[0] = c;
            s2[1] = 1;
            s2[2] = 0;
            break;
          case 2:
            s2[0] = 0;
            s2[1] = 1;
            s2[2] = l;
            break;
          case 3:
            s2[0] = 0;
            s2[1] = c;
            s2[2] = 1;
            break;
          case 4:
            s2[0] = l;
            s2[1] = 0;
            s2[2] = 1;
            break;
          default:
            s2[0] = 1;
            s2[1] = 0;
            s2[2] = c;
        }
        i = (1 - n3) * r2;
        return [(n3 * s2[0] + i) * 255, (n3 * s2[1] + i) * 255, (n3 * s2[2] + i) * 255];
      };
      o.hcg.hsv = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = t3 + n3 * (1 - t3);
        let s2 = 0;
        if (r2 > 0) {
          s2 = t3 / r2;
        }
        return [e3[0], s2 * 100, r2 * 100];
      };
      o.hcg.hsl = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = n3 * (1 - t3) + 0.5 * t3;
        let s2 = 0;
        if (r2 > 0 && r2 < 0.5) {
          s2 = t3 / (2 * r2);
        } else if (r2 >= 0.5 && r2 < 1) {
          s2 = t3 / (2 * (1 - r2));
        }
        return [e3[0], s2 * 100, r2 * 100];
      };
      o.hcg.hwb = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = t3 + n3 * (1 - t3);
        return [e3[0], (r2 - t3) * 100, (1 - r2) * 100];
      };
      o.hwb.hcg = function(e3) {
        const t3 = e3[1] / 100;
        const n3 = e3[2] / 100;
        const r2 = 1 - n3;
        const s2 = r2 - t3;
        let o2 = 0;
        if (s2 < 1) {
          o2 = (r2 - s2) / (1 - s2);
        }
        return [e3[0], s2 * 100, o2 * 100];
      };
      o.apple.rgb = function(e3) {
        return [e3[0] / 65535 * 255, e3[1] / 65535 * 255, e3[2] / 65535 * 255];
      };
      o.rgb.apple = function(e3) {
        return [e3[0] / 255 * 65535, e3[1] / 255 * 65535, e3[2] / 255 * 65535];
      };
      o.gray.rgb = function(e3) {
        return [e3[0] / 100 * 255, e3[0] / 100 * 255, e3[0] / 100 * 255];
      };
      o.gray.hsl = function(e3) {
        return [0, 0, e3[0]];
      };
      o.gray.hsv = o.gray.hsl;
      o.gray.hwb = function(e3) {
        return [0, 100, e3[0]];
      };
      o.gray.cmyk = function(e3) {
        return [0, 0, 0, e3[0]];
      };
      o.gray.lab = function(e3) {
        return [e3[0], 0, 0];
      };
      o.gray.hex = function(e3) {
        const t3 = Math.round(e3[0] / 100 * 255) & 255;
        const n3 = (t3 << 16) + (t3 << 8) + t3;
        const r2 = n3.toString(16).toUpperCase();
        return "000000".substring(r2.length) + r2;
      };
      o.rgb.gray = function(e3) {
        const t3 = (e3[0] + e3[1] + e3[2]) / 3;
        return [t3 / 255 * 100];
      };
    }, 767: (e2, t2, n2) => {
      const r = n2(226);
      const s = n2(392);
      const o = {};
      const l = Object.keys(r);
      function wrapRaw(e3) {
        const wrappedFn = function(...t3) {
          const n3 = t3[0];
          if (n3 === void 0 || n3 === null) {
            return n3;
          }
          if (n3.length > 1) {
            t3 = n3;
          }
          return e3(t3);
        };
        if ("conversion" in e3) {
          wrappedFn.conversion = e3.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(e3) {
        const wrappedFn = function(...t3) {
          const n3 = t3[0];
          if (n3 === void 0 || n3 === null) {
            return n3;
          }
          if (n3.length > 1) {
            t3 = n3;
          }
          const r2 = e3(t3);
          if (typeof r2 === "object") {
            for (let e4 = r2.length, t4 = 0; t4 < e4; t4++) {
              r2[t4] = Math.round(r2[t4]);
            }
          }
          return r2;
        };
        if ("conversion" in e3) {
          wrappedFn.conversion = e3.conversion;
        }
        return wrappedFn;
      }
      l.forEach((e3) => {
        o[e3] = {};
        Object.defineProperty(o[e3], "channels", { value: r[e3].channels });
        Object.defineProperty(o[e3], "labels", { value: r[e3].labels });
        const t3 = s(e3);
        const n3 = Object.keys(t3);
        n3.forEach((n4) => {
          const r2 = t3[n4];
          o[e3][n4] = wrapRounded(r2);
          o[e3][n4].raw = wrapRaw(r2);
        });
      });
      e2.exports = o;
    }, 392: (e2, t2, n2) => {
      const r = n2(226);
      function buildGraph() {
        const e3 = {};
        const t3 = Object.keys(r);
        for (let n3 = t3.length, r2 = 0; r2 < n3; r2++) {
          e3[t3[r2]] = { distance: -1, parent: null };
        }
        return e3;
      }
      function deriveBFS(e3) {
        const t3 = buildGraph();
        const n3 = [e3];
        t3[e3].distance = 0;
        while (n3.length) {
          const e4 = n3.pop();
          const s = Object.keys(r[e4]);
          for (let r2 = s.length, o = 0; o < r2; o++) {
            const r3 = s[o];
            const l = t3[r3];
            if (l.distance === -1) {
              l.distance = t3[e4].distance + 1;
              l.parent = e4;
              n3.unshift(r3);
            }
          }
        }
        return t3;
      }
      function link(e3, t3) {
        return function(n3) {
          return t3(e3(n3));
        };
      }
      function wrapConversion(e3, t3) {
        const n3 = [t3[e3].parent, e3];
        let s = r[t3[e3].parent][e3];
        let o = t3[e3].parent;
        while (t3[o].parent) {
          n3.unshift(t3[o].parent);
          s = link(r[t3[o].parent][o], s);
          o = t3[o].parent;
        }
        s.conversion = n3;
        return s;
      }
      e2.exports = function(e3) {
        const t3 = deriveBFS(e3);
        const n3 = {};
        const r2 = Object.keys(t3);
        for (let e4 = r2.length, s = 0; s < e4; s++) {
          const e5 = r2[s];
          const o = t3[e5];
          if (o.parent === null) {
            continue;
          }
          n3[e5] = wrapConversion(e5, t3);
        }
        return n3;
      };
    }, 866: (e2) => {
      "use strict";
      e2.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
    }, 975: (e2) => {
      "use strict";
      e2.exports = (e3, t2 = process.argv) => {
        const n2 = e3.startsWith("-") ? "" : e3.length === 1 ? "-" : "--";
        const r = t2.indexOf(n2 + e3);
        const s = t2.indexOf("--");
        return r !== -1 && (s === -1 || r < s);
      };
    }, 242: (e2, t2, n2) => {
      "use strict";
      const r = n2(37);
      const s = n2(224);
      const o = n2(975);
      const { env: l } = process;
      let c;
      if (o("no-color") || o("no-colors") || o("color=false") || o("color=never")) {
        c = 0;
      } else if (o("color") || o("colors") || o("color=true") || o("color=always")) {
        c = 1;
      }
      if ("FORCE_COLOR" in l) {
        if (l.FORCE_COLOR === "true") {
          c = 1;
        } else if (l.FORCE_COLOR === "false") {
          c = 0;
        } else {
          c = l.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(l.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(e3) {
        if (e3 === 0) {
          return false;
        }
        return { level: e3, hasBasic: true, has256: e3 >= 2, has16m: e3 >= 3 };
      }
      function supportsColor(e3, t3) {
        if (c === 0) {
          return 0;
        }
        if (o("color=16m") || o("color=full") || o("color=truecolor")) {
          return 3;
        }
        if (o("color=256")) {
          return 2;
        }
        if (e3 && !t3 && c === void 0) {
          return 0;
        }
        const n3 = c || 0;
        if (l.TERM === "dumb") {
          return n3;
        }
        if (process.platform === "win32") {
          const e4 = r.release().split(".");
          if (Number(e4[0]) >= 10 && Number(e4[2]) >= 10586) {
            return Number(e4[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in l) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((e4) => e4 in l) || l.CI_NAME === "codeship") {
            return 1;
          }
          return n3;
        }
        if ("TEAMCITY_VERSION" in l) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(l.TEAMCITY_VERSION) ? 1 : 0;
        }
        if (l.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in l) {
          const e4 = parseInt((l.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (l.TERM_PROGRAM) {
            case "iTerm.app":
              return e4 >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(l.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(l.TERM)) {
          return 1;
        }
        if ("COLORTERM" in l) {
          return 1;
        }
        return n3;
      }
      function getSupportLevel(e3) {
        const t3 = supportsColor(e3, e3 && e3.isTTY);
        return translateLevel(t3);
      }
      e2.exports = { supportsColor: getSupportLevel, stdout: translateLevel(supportsColor(true, s.isatty(1))), stderr: translateLevel(supportsColor(true, s.isatty(2))) };
    }, 37: (e2) => {
      "use strict";
      e2.exports = __require("os");
    }, 224: (e2) => {
      "use strict";
      e2.exports = __require("tty");
    } };
    var t = {};
    function __nccwpck_require__(n2) {
      var r = t[n2];
      if (r !== void 0) {
        return r.exports;
      }
      var s = t[n2] = { id: n2, loaded: false, exports: {} };
      var o = true;
      try {
        e[n2](s, s.exports, __nccwpck_require__);
        o = false;
      } finally {
        if (o)
          delete t[n2];
      }
      s.loaded = true;
      return s.exports;
    }
    (() => {
      __nccwpck_require__.nmd = (e2) => {
        e2.paths = [];
        if (!e2.children)
          e2.children = [];
        return e2;
      };
    })();
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var n = __nccwpck_require__(584);
    module2.exports = n;
  })();
});
var require_strip_ansi = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 275: (e2) => {
      e2.exports = ({ onlyFirst: e3 = false } = {}) => {
        const r2 = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
        return new RegExp(r2, e3 ? void 0 : "g");
      };
    }, 647: (e2, r2, _2) => {
      const t = _2(275);
      e2.exports = (e3) => typeof e3 === "string" ? e3.replace(t(), "") : e3;
    } };
    var r = {};
    function __nccwpck_require__(_2) {
      var t = r[_2];
      if (t !== void 0) {
        return t.exports;
      }
      var a = r[_2] = { exports: {} };
      var n = true;
      try {
        e[_2](a, a.exports, __nccwpck_require__);
        n = false;
      } finally {
        if (n)
          delete r[_2];
      }
      return a.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var _ = __nccwpck_require__(647);
    module2.exports = _;
  })();
});
var require_ora = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 695: (e2, t2, r2) => {
      "use strict";
      const { Buffer: i } = r2(300);
      const n = Symbol.for("BufferList");
      function BufferList(e3) {
        if (!(this instanceof BufferList)) {
          return new BufferList(e3);
        }
        BufferList._init.call(this, e3);
      }
      BufferList._init = function _init(e3) {
        Object.defineProperty(this, n, { value: true });
        this._bufs = [];
        this.length = 0;
        if (e3) {
          this.append(e3);
        }
      };
      BufferList.prototype._new = function _new(e3) {
        return new BufferList(e3);
      };
      BufferList.prototype._offset = function _offset(e3) {
        if (e3 === 0) {
          return [0, 0];
        }
        let t3 = 0;
        for (let r3 = 0; r3 < this._bufs.length; r3++) {
          const i2 = t3 + this._bufs[r3].length;
          if (e3 < i2 || r3 === this._bufs.length - 1) {
            return [r3, e3 - t3];
          }
          t3 = i2;
        }
      };
      BufferList.prototype._reverseOffset = function(e3) {
        const t3 = e3[0];
        let r3 = e3[1];
        for (let e4 = 0; e4 < t3; e4++) {
          r3 += this._bufs[e4].length;
        }
        return r3;
      };
      BufferList.prototype.get = function get(e3) {
        if (e3 > this.length || e3 < 0) {
          return void 0;
        }
        const t3 = this._offset(e3);
        return this._bufs[t3[0]][t3[1]];
      };
      BufferList.prototype.slice = function slice(e3, t3) {
        if (typeof e3 === "number" && e3 < 0) {
          e3 += this.length;
        }
        if (typeof t3 === "number" && t3 < 0) {
          t3 += this.length;
        }
        return this.copy(null, 0, e3, t3);
      };
      BufferList.prototype.copy = function copy(e3, t3, r3, n2) {
        if (typeof r3 !== "number" || r3 < 0) {
          r3 = 0;
        }
        if (typeof n2 !== "number" || n2 > this.length) {
          n2 = this.length;
        }
        if (r3 >= this.length) {
          return e3 || i.alloc(0);
        }
        if (n2 <= 0) {
          return e3 || i.alloc(0);
        }
        const copy2 = !!e3;
        const s = this._offset(r3);
        const a = n2 - r3;
        let o = a;
        let f = copy2 && t3 || 0;
        let l = s[1];
        if (r3 === 0 && n2 === this.length) {
          if (!copy2) {
            return this._bufs.length === 1 ? this._bufs[0] : i.concat(this._bufs, this.length);
          }
          for (let t4 = 0; t4 < this._bufs.length; t4++) {
            this._bufs[t4].copy(e3, f);
            f += this._bufs[t4].length;
          }
          return e3;
        }
        if (o <= this._bufs[s[0]].length - l) {
          return copy2 ? this._bufs[s[0]].copy(e3, t3, l, l + o) : this._bufs[s[0]].slice(l, l + o);
        }
        if (!copy2) {
          e3 = i.allocUnsafe(a);
        }
        for (let t4 = s[0]; t4 < this._bufs.length; t4++) {
          const r4 = this._bufs[t4].length - l;
          if (o > r4) {
            this._bufs[t4].copy(e3, f, l);
            f += r4;
          } else {
            this._bufs[t4].copy(e3, f, l, l + o);
            f += r4;
            break;
          }
          o -= r4;
          if (l) {
            l = 0;
          }
        }
        if (e3.length > f)
          return e3.slice(0, f);
        return e3;
      };
      BufferList.prototype.shallowSlice = function shallowSlice(e3, t3) {
        e3 = e3 || 0;
        t3 = typeof t3 !== "number" ? this.length : t3;
        if (e3 < 0) {
          e3 += this.length;
        }
        if (t3 < 0) {
          t3 += this.length;
        }
        if (e3 === t3) {
          return this._new();
        }
        const r3 = this._offset(e3);
        const i2 = this._offset(t3);
        const n2 = this._bufs.slice(r3[0], i2[0] + 1);
        if (i2[1] === 0) {
          n2.pop();
        } else {
          n2[n2.length - 1] = n2[n2.length - 1].slice(0, i2[1]);
        }
        if (r3[1] !== 0) {
          n2[0] = n2[0].slice(r3[1]);
        }
        return this._new(n2);
      };
      BufferList.prototype.toString = function toString(e3, t3, r3) {
        return this.slice(t3, r3).toString(e3);
      };
      BufferList.prototype.consume = function consume(e3) {
        e3 = Math.trunc(e3);
        if (Number.isNaN(e3) || e3 <= 0)
          return this;
        while (this._bufs.length) {
          if (e3 >= this._bufs[0].length) {
            e3 -= this._bufs[0].length;
            this.length -= this._bufs[0].length;
            this._bufs.shift();
          } else {
            this._bufs[0] = this._bufs[0].slice(e3);
            this.length -= e3;
            break;
          }
        }
        return this;
      };
      BufferList.prototype.duplicate = function duplicate() {
        const e3 = this._new();
        for (let t3 = 0; t3 < this._bufs.length; t3++) {
          e3.append(this._bufs[t3]);
        }
        return e3;
      };
      BufferList.prototype.append = function append(e3) {
        if (e3 == null) {
          return this;
        }
        if (e3.buffer) {
          this._appendBuffer(i.from(e3.buffer, e3.byteOffset, e3.byteLength));
        } else if (Array.isArray(e3)) {
          for (let t3 = 0; t3 < e3.length; t3++) {
            this.append(e3[t3]);
          }
        } else if (this._isBufferList(e3)) {
          for (let t3 = 0; t3 < e3._bufs.length; t3++) {
            this.append(e3._bufs[t3]);
          }
        } else {
          if (typeof e3 === "number") {
            e3 = e3.toString();
          }
          this._appendBuffer(i.from(e3));
        }
        return this;
      };
      BufferList.prototype._appendBuffer = function appendBuffer(e3) {
        this._bufs.push(e3);
        this.length += e3.length;
      };
      BufferList.prototype.indexOf = function(e3, t3, r3) {
        if (r3 === void 0 && typeof t3 === "string") {
          r3 = t3;
          t3 = void 0;
        }
        if (typeof e3 === "function" || Array.isArray(e3)) {
          throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
        } else if (typeof e3 === "number") {
          e3 = i.from([e3]);
        } else if (typeof e3 === "string") {
          e3 = i.from(e3, r3);
        } else if (this._isBufferList(e3)) {
          e3 = e3.slice();
        } else if (Array.isArray(e3.buffer)) {
          e3 = i.from(e3.buffer, e3.byteOffset, e3.byteLength);
        } else if (!i.isBuffer(e3)) {
          e3 = i.from(e3);
        }
        t3 = Number(t3 || 0);
        if (isNaN(t3)) {
          t3 = 0;
        }
        if (t3 < 0) {
          t3 = this.length + t3;
        }
        if (t3 < 0) {
          t3 = 0;
        }
        if (e3.length === 0) {
          return t3 > this.length ? this.length : t3;
        }
        const n2 = this._offset(t3);
        let s = n2[0];
        let a = n2[1];
        for (; s < this._bufs.length; s++) {
          const t4 = this._bufs[s];
          while (a < t4.length) {
            const r4 = t4.length - a;
            if (r4 >= e3.length) {
              const r5 = t4.indexOf(e3, a);
              if (r5 !== -1) {
                return this._reverseOffset([s, r5]);
              }
              a = t4.length - e3.length + 1;
            } else {
              const t5 = this._reverseOffset([s, a]);
              if (this._match(t5, e3)) {
                return t5;
              }
              a++;
            }
          }
          a = 0;
        }
        return -1;
      };
      BufferList.prototype._match = function(e3, t3) {
        if (this.length - e3 < t3.length) {
          return false;
        }
        for (let r3 = 0; r3 < t3.length; r3++) {
          if (this.get(e3 + r3) !== t3[r3]) {
            return false;
          }
        }
        return true;
      };
      (function() {
        const e3 = { readDoubleBE: 8, readDoubleLE: 8, readFloatBE: 4, readFloatLE: 4, readInt32BE: 4, readInt32LE: 4, readUInt32BE: 4, readUInt32LE: 4, readInt16BE: 2, readInt16LE: 2, readUInt16BE: 2, readUInt16LE: 2, readInt8: 1, readUInt8: 1, readIntBE: null, readIntLE: null, readUIntBE: null, readUIntLE: null };
        for (const t3 in e3) {
          (function(t4) {
            if (e3[t4] === null) {
              BufferList.prototype[t4] = function(e4, r3) {
                return this.slice(e4, e4 + r3)[t4](0, r3);
              };
            } else {
              BufferList.prototype[t4] = function(r3 = 0) {
                return this.slice(r3, r3 + e3[t4])[t4](0);
              };
            }
          })(t3);
        }
      })();
      BufferList.prototype._isBufferList = function _isBufferList(e3) {
        return e3 instanceof BufferList || BufferList.isBufferList(e3);
      };
      BufferList.isBufferList = function isBufferList(e3) {
        return e3 != null && e3[n];
      };
      e2.exports = BufferList;
    }, 49: (e2, t2, r2) => {
      "use strict";
      const i = r2(505).Duplex;
      const n = r2(315);
      const s = r2(695);
      function BufferListStream(e3) {
        if (!(this instanceof BufferListStream)) {
          return new BufferListStream(e3);
        }
        if (typeof e3 === "function") {
          this._callback = e3;
          const t3 = function piper(e4) {
            if (this._callback) {
              this._callback(e4);
              this._callback = null;
            }
          }.bind(this);
          this.on("pipe", function onPipe(e4) {
            e4.on("error", t3);
          });
          this.on("unpipe", function onUnpipe(e4) {
            e4.removeListener("error", t3);
          });
          e3 = null;
        }
        s._init.call(this, e3);
        i.call(this);
      }
      n(BufferListStream, i);
      Object.assign(BufferListStream.prototype, s.prototype);
      BufferListStream.prototype._new = function _new(e3) {
        return new BufferListStream(e3);
      };
      BufferListStream.prototype._write = function _write(e3, t3, r3) {
        this._appendBuffer(e3);
        if (typeof r3 === "function") {
          r3();
        }
      };
      BufferListStream.prototype._read = function _read(e3) {
        if (!this.length) {
          return this.push(null);
        }
        e3 = Math.min(e3, this.length);
        this.push(this.slice(0, e3));
        this.consume(e3);
      };
      BufferListStream.prototype.end = function end(e3) {
        i.prototype.end.call(this, e3);
        if (this._callback) {
          this._callback(null, this.slice());
          this._callback = null;
        }
      };
      BufferListStream.prototype._destroy = function _destroy(e3, t3) {
        this._bufs.length = 0;
        this.length = 0;
        t3(e3);
      };
      BufferListStream.prototype._isBufferList = function _isBufferList(e3) {
        return e3 instanceof BufferListStream || e3 instanceof s || BufferListStream.isBufferList(e3);
      };
      BufferListStream.isBufferList = s.isBufferList;
      e2.exports = BufferListStream;
      e2.exports.BufferListStream = BufferListStream;
      e2.exports.BufferList = s;
    }, 805: (e2, t2, r2) => {
      "use strict";
      const i = r2(598);
      let n = false;
      t2.show = (e3 = process.stderr) => {
        if (!e3.isTTY) {
          return;
        }
        n = false;
        e3.write("\x1B[?25h");
      };
      t2.hide = (e3 = process.stderr) => {
        if (!e3.isTTY) {
          return;
        }
        i();
        n = true;
        e3.write("\x1B[?25l");
      };
      t2.toggle = (e3, r3) => {
        if (e3 !== void 0) {
          n = e3;
        }
        if (n) {
          t2.show(r3);
        } else {
          t2.hide(r3);
        }
      };
    }, 414: (e2, t2, r2) => {
      "use strict";
      const i = Object.assign({}, r2(32));
      const n = Object.keys(i);
      Object.defineProperty(i, "random", { get() {
        const e3 = Math.floor(Math.random() * n.length);
        const t3 = n[e3];
        return i[t3];
      } });
      e2.exports = i;
    }, 332: (e2) => {
      var t2 = function() {
        "use strict";
        function clone2(e3, t3, r2, i) {
          var n;
          if (typeof t3 === "object") {
            r2 = t3.depth;
            i = t3.prototype;
            n = t3.filter;
            t3 = t3.circular;
          }
          var s = [];
          var a = [];
          var o = typeof Buffer != "undefined";
          if (typeof t3 == "undefined")
            t3 = true;
          if (typeof r2 == "undefined")
            r2 = Infinity;
          function _clone(e4, r3) {
            if (e4 === null)
              return null;
            if (r3 == 0)
              return e4;
            var n2;
            var f;
            if (typeof e4 != "object") {
              return e4;
            }
            if (clone2.__isArray(e4)) {
              n2 = [];
            } else if (clone2.__isRegExp(e4)) {
              n2 = new RegExp(e4.source, __getRegExpFlags(e4));
              if (e4.lastIndex)
                n2.lastIndex = e4.lastIndex;
            } else if (clone2.__isDate(e4)) {
              n2 = new Date(e4.getTime());
            } else if (o && Buffer.isBuffer(e4)) {
              if (Buffer.allocUnsafe) {
                n2 = Buffer.allocUnsafe(e4.length);
              } else {
                n2 = new Buffer(e4.length);
              }
              e4.copy(n2);
              return n2;
            } else {
              if (typeof i == "undefined") {
                f = Object.getPrototypeOf(e4);
                n2 = Object.create(f);
              } else {
                n2 = Object.create(i);
                f = i;
              }
            }
            if (t3) {
              var l = s.indexOf(e4);
              if (l != -1) {
                return a[l];
              }
              s.push(e4);
              a.push(n2);
            }
            for (var u in e4) {
              var h;
              if (f) {
                h = Object.getOwnPropertyDescriptor(f, u);
              }
              if (h && h.set == null) {
                continue;
              }
              n2[u] = _clone(e4[u], r3 - 1);
            }
            return n2;
          }
          return _clone(e3, r2);
        }
        clone2.clonePrototype = function clonePrototype(e3) {
          if (e3 === null)
            return null;
          var c = function() {
          };
          c.prototype = e3;
          return new c();
        };
        function __objToStr(e3) {
          return Object.prototype.toString.call(e3);
        }
        clone2.__objToStr = __objToStr;
        function __isDate(e3) {
          return typeof e3 === "object" && __objToStr(e3) === "[object Date]";
        }
        clone2.__isDate = __isDate;
        function __isArray(e3) {
          return typeof e3 === "object" && __objToStr(e3) === "[object Array]";
        }
        clone2.__isArray = __isArray;
        function __isRegExp(e3) {
          return typeof e3 === "object" && __objToStr(e3) === "[object RegExp]";
        }
        clone2.__isRegExp = __isRegExp;
        function __getRegExpFlags(e3) {
          var t3 = "";
          if (e3.global)
            t3 += "g";
          if (e3.ignoreCase)
            t3 += "i";
          if (e3.multiline)
            t3 += "m";
          return t3;
        }
        clone2.__getRegExpFlags = __getRegExpFlags;
        return clone2;
      }();
      if (e2.exports) {
        e2.exports = t2;
      }
    }, 906: (e2, t2, r2) => {
      var i = r2(332);
      e2.exports = function(e3, t3) {
        e3 = e3 || {};
        Object.keys(t3).forEach(function(r3) {
          if (typeof e3[r3] === "undefined") {
            e3[r3] = i(t3[r3]);
          }
        });
        return e3;
      };
    }, 315: (e2, t2, r2) => {
      try {
        var i = r2(837);
        if (typeof i.inherits !== "function")
          throw "";
        e2.exports = i.inherits;
      } catch (t3) {
        e2.exports = r2(494);
      }
    }, 494: (e2) => {
      if (typeof Object.create === "function") {
        e2.exports = function inherits(e3, t2) {
          if (t2) {
            e3.super_ = t2;
            e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } });
          }
        };
      } else {
        e2.exports = function inherits(e3, t2) {
          if (t2) {
            e3.super_ = t2;
            var TempCtor = function() {
            };
            TempCtor.prototype = t2.prototype;
            e3.prototype = new TempCtor();
            e3.prototype.constructor = e3;
          }
        };
      }
    }, 520: (e2) => {
      "use strict";
      e2.exports = ({ stream: e3 = process.stdout } = {}) => Boolean(e3 && e3.isTTY && process.env.TERM !== "dumb" && !("CI" in process.env));
    }, 457: (e2) => {
      "use strict";
      e2.exports = () => {
        if (process.platform !== "win32") {
          return true;
        }
        return Boolean(process.env.CI) || Boolean(process.env.WT_SESSION) || process.env.TERM_PROGRAM === "vscode" || process.env.TERM === "xterm-256color" || process.env.TERM === "alacritty";
      };
    }, 59: (e2, t2, r2) => {
      "use strict";
      const i = r2(234);
      const n = r2(457);
      const s = { info: i.blue("\u2139"), success: i.green("\u2714"), warning: i.yellow("\u26A0"), error: i.red("\u2716") };
      const a = { info: i.blue("i"), success: i.green("\u221A"), warning: i.yellow("\u203C"), error: i.red("\xD7") };
      e2.exports = n() ? s : a;
    }, 693: (e2) => {
      "use strict";
      const mimicFn = (e3, t2) => {
        for (const r2 of Reflect.ownKeys(t2)) {
          Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
        }
        return e3;
      };
      e2.exports = mimicFn;
      e2.exports["default"] = mimicFn;
    }, 591: (e2, t2, r2) => {
      "use strict";
      const i = r2(693);
      const n = /* @__PURE__ */ new WeakMap();
      const onetime = (e3, t3 = {}) => {
        if (typeof e3 !== "function") {
          throw new TypeError("Expected a function");
        }
        let r3;
        let s = 0;
        const a = e3.displayName || e3.name || "<anonymous>";
        const onetime2 = function(...i2) {
          n.set(onetime2, ++s);
          if (s === 1) {
            r3 = e3.apply(this, i2);
            e3 = null;
          } else if (t3.throw === true) {
            throw new Error(`Function \`${a}\` can only be called once`);
          }
          return r3;
        };
        i(onetime2, e3);
        n.set(onetime2, s);
        return onetime2;
      };
      e2.exports = onetime;
      e2.exports["default"] = onetime;
      e2.exports.callCount = (e3) => {
        if (!n.has(e3)) {
          throw new Error(`The given function \`${e3.name}\` is not wrapped by the \`onetime\` package`);
        }
        return n.get(e3);
      };
    }, 942: (e2, t2, r2) => {
      "use strict";
      const i = r2(521);
      const n = r2(234);
      const s = r2(805);
      const a = r2(414);
      const o = r2(59);
      const f = r2(286);
      const l = r2(74);
      const u = r2(520);
      const h = r2(457);
      const { BufferListStream: d } = r2(49);
      const p = Symbol("text");
      const _ = Symbol("prefixText");
      const b = 3;
      class StdinDiscarder {
        constructor() {
          this.requests = 0;
          this.mutedStream = new d();
          this.mutedStream.pipe(process.stdout);
          const e3 = this;
          this.ourEmit = function(t3, r3, ...i2) {
            const { stdin: n2 } = process;
            if (e3.requests > 0 || n2.emit === e3.ourEmit) {
              if (t3 === "keypress") {
                return;
              }
              if (t3 === "data" && r3.includes(b)) {
                process.emit("SIGINT");
              }
              Reflect.apply(e3.oldEmit, this, [t3, r3, ...i2]);
            } else {
              Reflect.apply(process.stdin.emit, this, [t3, r3, ...i2]);
            }
          };
        }
        start() {
          this.requests++;
          if (this.requests === 1) {
            this.realStart();
          }
        }
        stop() {
          if (this.requests <= 0) {
            throw new Error("`stop` called more times than `start`");
          }
          this.requests--;
          if (this.requests === 0) {
            this.realStop();
          }
        }
        realStart() {
          if (process.platform === "win32") {
            return;
          }
          this.rl = i.createInterface({ input: process.stdin, output: this.mutedStream });
          this.rl.on("SIGINT", () => {
            if (process.listenerCount("SIGINT") === 0) {
              process.emit("SIGINT");
            } else {
              this.rl.close();
              process.kill(process.pid, "SIGINT");
            }
          });
        }
        realStop() {
          if (process.platform === "win32") {
            return;
          }
          this.rl.close();
          this.rl = void 0;
        }
      }
      let g;
      class Ora {
        constructor(e3) {
          if (!g) {
            g = new StdinDiscarder();
          }
          if (typeof e3 === "string") {
            e3 = { text: e3 };
          }
          this.options = { text: "", color: "cyan", stream: process.stderr, discardStdin: true, ...e3 };
          this.spinner = this.options.spinner;
          this.color = this.options.color;
          this.hideCursor = this.options.hideCursor !== false;
          this.interval = this.options.interval || this.spinner.interval || 100;
          this.stream = this.options.stream;
          this.id = void 0;
          this.isEnabled = typeof this.options.isEnabled === "boolean" ? this.options.isEnabled : u({ stream: this.stream });
          this.isSilent = typeof this.options.isSilent === "boolean" ? this.options.isSilent : false;
          this.text = this.options.text;
          this.prefixText = this.options.prefixText;
          this.linesToClear = 0;
          this.indent = this.options.indent;
          this.discardStdin = this.options.discardStdin;
          this.isDiscardingStdin = false;
        }
        get indent() {
          return this._indent;
        }
        set indent(e3 = 0) {
          if (!(e3 >= 0 && Number.isInteger(e3))) {
            throw new Error("The `indent` option must be an integer from 0 and up");
          }
          this._indent = e3;
        }
        _updateInterval(e3) {
          if (e3 !== void 0) {
            this.interval = e3;
          }
        }
        get spinner() {
          return this._spinner;
        }
        set spinner(e3) {
          this.frameIndex = 0;
          if (typeof e3 === "object") {
            if (e3.frames === void 0) {
              throw new Error("The given spinner must have a `frames` property");
            }
            this._spinner = e3;
          } else if (!h()) {
            this._spinner = a.line;
          } else if (e3 === void 0) {
            this._spinner = a.dots;
          } else if (e3 !== "default" && a[e3]) {
            this._spinner = a[e3];
          } else {
            throw new Error(`There is no built-in spinner named '${e3}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
          }
          this._updateInterval(this._spinner.interval);
        }
        get text() {
          return this[p];
        }
        set text(e3) {
          this[p] = e3;
          this.updateLineCount();
        }
        get prefixText() {
          return this[_];
        }
        set prefixText(e3) {
          this[_] = e3;
          this.updateLineCount();
        }
        get isSpinning() {
          return this.id !== void 0;
        }
        getFullPrefixText(e3 = this[_], t3 = " ") {
          if (typeof e3 === "string") {
            return e3 + t3;
          }
          if (typeof e3 === "function") {
            return e3() + t3;
          }
          return "";
        }
        updateLineCount() {
          const e3 = this.stream.columns || 80;
          const t3 = this.getFullPrefixText(this.prefixText, "-");
          this.lineCount = 0;
          for (const r3 of f(t3 + "--" + this[p]).split("\n")) {
            this.lineCount += Math.max(1, Math.ceil(l(r3) / e3));
          }
        }
        get isEnabled() {
          return this._isEnabled && !this.isSilent;
        }
        set isEnabled(e3) {
          if (typeof e3 !== "boolean") {
            throw new TypeError("The `isEnabled` option must be a boolean");
          }
          this._isEnabled = e3;
        }
        get isSilent() {
          return this._isSilent;
        }
        set isSilent(e3) {
          if (typeof e3 !== "boolean") {
            throw new TypeError("The `isSilent` option must be a boolean");
          }
          this._isSilent = e3;
        }
        frame() {
          const { frames: e3 } = this.spinner;
          let t3 = e3[this.frameIndex];
          if (this.color) {
            t3 = n[this.color](t3);
          }
          this.frameIndex = ++this.frameIndex % e3.length;
          const r3 = typeof this.prefixText === "string" && this.prefixText !== "" ? this.prefixText + " " : "";
          const i2 = typeof this.text === "string" ? " " + this.text : "";
          return r3 + t3 + i2;
        }
        clear() {
          if (!this.isEnabled || !this.stream.isTTY) {
            return this;
          }
          for (let e3 = 0; e3 < this.linesToClear; e3++) {
            if (e3 > 0) {
              this.stream.moveCursor(0, -1);
            }
            this.stream.clearLine();
            this.stream.cursorTo(this.indent);
          }
          this.linesToClear = 0;
          return this;
        }
        render() {
          if (this.isSilent) {
            return this;
          }
          this.clear();
          this.stream.write(this.frame());
          this.linesToClear = this.lineCount;
          return this;
        }
        start(e3) {
          if (e3) {
            this.text = e3;
          }
          if (this.isSilent) {
            return this;
          }
          if (!this.isEnabled) {
            if (this.text) {
              this.stream.write(`- ${this.text}
`);
            }
            return this;
          }
          if (this.isSpinning) {
            return this;
          }
          if (this.hideCursor) {
            s.hide(this.stream);
          }
          if (this.discardStdin && process.stdin.isTTY) {
            this.isDiscardingStdin = true;
            g.start();
          }
          this.render();
          this.id = setInterval(this.render.bind(this), this.interval);
          return this;
        }
        stop() {
          if (!this.isEnabled) {
            return this;
          }
          clearInterval(this.id);
          this.id = void 0;
          this.frameIndex = 0;
          this.clear();
          if (this.hideCursor) {
            s.show(this.stream);
          }
          if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {
            g.stop();
            this.isDiscardingStdin = false;
          }
          return this;
        }
        succeed(e3) {
          return this.stopAndPersist({ symbol: o.success, text: e3 });
        }
        fail(e3) {
          return this.stopAndPersist({ symbol: o.error, text: e3 });
        }
        warn(e3) {
          return this.stopAndPersist({ symbol: o.warning, text: e3 });
        }
        info(e3) {
          return this.stopAndPersist({ symbol: o.info, text: e3 });
        }
        stopAndPersist(e3 = {}) {
          if (this.isSilent) {
            return this;
          }
          const t3 = e3.prefixText || this.prefixText;
          const r3 = e3.text || this.text;
          const i2 = typeof r3 === "string" ? " " + r3 : "";
          this.stop();
          this.stream.write(`${this.getFullPrefixText(t3, " ")}${e3.symbol || " "}${i2}
`);
          return this;
        }
      }
      const oraFactory = function(e3) {
        return new Ora(e3);
      };
      e2.exports = oraFactory;
      e2.exports.promise = (e3, t3) => {
        if (typeof e3.then !== "function") {
          throw new TypeError("Parameter `action` must be a Promise");
        }
        const r3 = new Ora(t3);
        r3.start();
        (async () => {
          try {
            await e3;
            r3.succeed();
          } catch {
            r3.fail();
          }
        })();
        return r3;
      };
    }, 959: (e2) => {
      "use strict";
      const t2 = {};
      function createErrorType(e3, r2, i) {
        if (!i) {
          i = Error;
        }
        function getMessage(e4, t3, i2) {
          if (typeof r2 === "string") {
            return r2;
          } else {
            return r2(e4, t3, i2);
          }
        }
        class NodeError extends i {
          constructor(e4, t3, r3) {
            super(getMessage(e4, t3, r3));
          }
        }
        NodeError.prototype.name = i.name;
        NodeError.prototype.code = e3;
        t2[e3] = NodeError;
      }
      function oneOf(e3, t3) {
        if (Array.isArray(e3)) {
          const r2 = e3.length;
          e3 = e3.map((e4) => String(e4));
          if (r2 > 2) {
            return `one of ${t3} ${e3.slice(0, r2 - 1).join(", ")}, or ` + e3[r2 - 1];
          } else if (r2 === 2) {
            return `one of ${t3} ${e3[0]} or ${e3[1]}`;
          } else {
            return `of ${t3} ${e3[0]}`;
          }
        } else {
          return `of ${t3} ${String(e3)}`;
        }
      }
      function startsWith(e3, t3, r2) {
        return e3.substr(!r2 || r2 < 0 ? 0 : +r2, t3.length) === t3;
      }
      function endsWith(e3, t3, r2) {
        if (r2 === void 0 || r2 > e3.length) {
          r2 = e3.length;
        }
        return e3.substring(r2 - t3.length, r2) === t3;
      }
      function includes(e3, t3, r2) {
        if (typeof r2 !== "number") {
          r2 = 0;
        }
        if (r2 + t3.length > e3.length) {
          return false;
        } else {
          return e3.indexOf(t3, r2) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(e3, t3) {
        return 'The value "' + t3 + '" is invalid for option "' + e3 + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(e3, t3, r2) {
        let i;
        if (typeof t3 === "string" && startsWith(t3, "not ")) {
          i = "must not be";
          t3 = t3.replace(/^not /, "");
        } else {
          i = "must be";
        }
        let n;
        if (endsWith(e3, " argument")) {
          n = `The ${e3} ${i} ${oneOf(t3, "type")}`;
        } else {
          const r3 = includes(e3, ".") ? "property" : "argument";
          n = `The "${e3}" ${r3} ${i} ${oneOf(t3, "type")}`;
        }
        n += `. Received type ${typeof r2}`;
        return n;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(e3) {
        return "The " + e3 + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(e3) {
        return "Cannot call " + e3 + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(e3) {
        return "Unknown encoding: " + e3;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      e2.exports.q = t2;
    }, 548: (e2, t2, r2) => {
      "use strict";
      var i = Object.keys || function(e3) {
        var t3 = [];
        for (var r3 in e3) {
          t3.push(r3);
        }
        return t3;
      };
      e2.exports = Duplex;
      var n = r2(852);
      var s = r2(379);
      r2(315)(Duplex, n);
      {
        var a = i(s.prototype);
        for (var o = 0; o < a.length; o++) {
          var f = a[o];
          if (!Duplex.prototype[f])
            Duplex.prototype[f] = s.prototype[f];
        }
      }
      function Duplex(e3) {
        if (!(this instanceof Duplex))
          return new Duplex(e3);
        n.call(this, e3);
        s.call(this, e3);
        this.allowHalfOpen = true;
        if (e3) {
          if (e3.readable === false)
            this.readable = false;
          if (e3.writable === false)
            this.writable = false;
          if (e3.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", { enumerable: false, get: function get() {
        return this._writableState.highWaterMark;
      } });
      Object.defineProperty(Duplex.prototype, "writableBuffer", { enumerable: false, get: function get() {
        return this._writableState && this._writableState.getBuffer();
      } });
      Object.defineProperty(Duplex.prototype, "writableLength", { enumerable: false, get: function get() {
        return this._writableState.length;
      } });
      function onend() {
        if (this._writableState.ended)
          return;
        process.nextTick(onEndNT, this);
      }
      function onEndNT(e3) {
        e3.end();
      }
      Object.defineProperty(Duplex.prototype, "destroyed", { enumerable: false, get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      }, set: function set(e3) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = e3;
        this._writableState.destroyed = e3;
      } });
    }, 184: (e2, t2, r2) => {
      "use strict";
      e2.exports = PassThrough2;
      var i = r2(770);
      r2(315)(PassThrough2, i);
      function PassThrough2(e3) {
        if (!(this instanceof PassThrough2))
          return new PassThrough2(e3);
        i.call(this, e3);
      }
      PassThrough2.prototype._transform = function(e3, t3, r3) {
        r3(null, e3);
      };
    }, 852: (e2, t2, r2) => {
      "use strict";
      e2.exports = Readable2;
      var i;
      Readable2.ReadableState = ReadableState;
      var n = r2(361).EventEmitter;
      var s = function EElistenerCount(e3, t3) {
        return e3.listeners(t3).length;
      };
      var a = r2(604);
      var o = r2(300).Buffer;
      var f = global.Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(e3) {
        return o.from(e3);
      }
      function _isUint8Array(e3) {
        return o.isBuffer(e3) || e3 instanceof f;
      }
      var l = r2(837);
      var u;
      if (l && l.debuglog) {
        u = l.debuglog("stream");
      } else {
        u = function debug() {
        };
      }
      var h = r2(706);
      var d = r2(97);
      var p = r2(841), _ = p.getHighWaterMark;
      var b = r2(959).q, g = b.ERR_INVALID_ARG_TYPE, y = b.ERR_STREAM_PUSH_AFTER_EOF, m = b.ERR_METHOD_NOT_IMPLEMENTED, v = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var w;
      var S;
      var R;
      r2(315)(Readable2, a);
      var E = d.errorOrDestroy;
      var x = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(e3, t3, r3) {
        if (typeof e3.prependListener === "function")
          return e3.prependListener(t3, r3);
        if (!e3._events || !e3._events[t3])
          e3.on(t3, r3);
        else if (Array.isArray(e3._events[t3]))
          e3._events[t3].unshift(r3);
        else
          e3._events[t3] = [r3, e3._events[t3]];
      }
      function ReadableState(e3, t3, n2) {
        i = i || r2(548);
        e3 = e3 || {};
        if (typeof n2 !== "boolean")
          n2 = t3 instanceof i;
        this.objectMode = !!e3.objectMode;
        if (n2)
          this.objectMode = this.objectMode || !!e3.readableObjectMode;
        this.highWaterMark = _(this, e3, "readableHighWaterMark", n2);
        this.buffer = new h();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = e3.emitClose !== false;
        this.autoDestroy = !!e3.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = e3.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (e3.encoding) {
          if (!w)
            w = r2(259).s;
          this.decoder = new w(e3.encoding);
          this.encoding = e3.encoding;
        }
      }
      function Readable2(e3) {
        i = i || r2(548);
        if (!(this instanceof Readable2))
          return new Readable2(e3);
        var t3 = this instanceof i;
        this._readableState = new ReadableState(e3, this, t3);
        this.readable = true;
        if (e3) {
          if (typeof e3.read === "function")
            this._read = e3.read;
          if (typeof e3.destroy === "function")
            this._destroy = e3.destroy;
        }
        a.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", { enumerable: false, get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      }, set: function set(e3) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = e3;
      } });
      Readable2.prototype.destroy = d.destroy;
      Readable2.prototype._undestroy = d.undestroy;
      Readable2.prototype._destroy = function(e3, t3) {
        t3(e3);
      };
      Readable2.prototype.push = function(e3, t3) {
        var r3 = this._readableState;
        var i2;
        if (!r3.objectMode) {
          if (typeof e3 === "string") {
            t3 = t3 || r3.defaultEncoding;
            if (t3 !== r3.encoding) {
              e3 = o.from(e3, t3);
              t3 = "";
            }
            i2 = true;
          }
        } else {
          i2 = true;
        }
        return readableAddChunk(this, e3, t3, false, i2);
      };
      Readable2.prototype.unshift = function(e3) {
        return readableAddChunk(this, e3, null, true, false);
      };
      function readableAddChunk(e3, t3, r3, i2, n2) {
        u("readableAddChunk", t3);
        var s2 = e3._readableState;
        if (t3 === null) {
          s2.reading = false;
          onEofChunk(e3, s2);
        } else {
          var a2;
          if (!n2)
            a2 = chunkInvalid(s2, t3);
          if (a2) {
            E(e3, a2);
          } else if (s2.objectMode || t3 && t3.length > 0) {
            if (typeof t3 !== "string" && !s2.objectMode && Object.getPrototypeOf(t3) !== o.prototype) {
              t3 = _uint8ArrayToBuffer(t3);
            }
            if (i2) {
              if (s2.endEmitted)
                E(e3, new v());
              else
                addChunk(e3, s2, t3, true);
            } else if (s2.ended) {
              E(e3, new y());
            } else if (s2.destroyed) {
              return false;
            } else {
              s2.reading = false;
              if (s2.decoder && !r3) {
                t3 = s2.decoder.write(t3);
                if (s2.objectMode || t3.length !== 0)
                  addChunk(e3, s2, t3, false);
                else
                  maybeReadMore(e3, s2);
              } else {
                addChunk(e3, s2, t3, false);
              }
            }
          } else if (!i2) {
            s2.reading = false;
            maybeReadMore(e3, s2);
          }
        }
        return !s2.ended && (s2.length < s2.highWaterMark || s2.length === 0);
      }
      function addChunk(e3, t3, r3, i2) {
        if (t3.flowing && t3.length === 0 && !t3.sync) {
          t3.awaitDrain = 0;
          e3.emit("data", r3);
        } else {
          t3.length += t3.objectMode ? 1 : r3.length;
          if (i2)
            t3.buffer.unshift(r3);
          else
            t3.buffer.push(r3);
          if (t3.needReadable)
            emitReadable(e3);
        }
        maybeReadMore(e3, t3);
      }
      function chunkInvalid(e3, t3) {
        var r3;
        if (!_isUint8Array(t3) && typeof t3 !== "string" && t3 !== void 0 && !e3.objectMode) {
          r3 = new g("chunk", ["string", "Buffer", "Uint8Array"], t3);
        }
        return r3;
      }
      Readable2.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function(e3) {
        if (!w)
          w = r2(259).s;
        var t3 = new w(e3);
        this._readableState.decoder = t3;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var i2 = this._readableState.buffer.head;
        var n2 = "";
        while (i2 !== null) {
          n2 += t3.write(i2.data);
          i2 = i2.next;
        }
        this._readableState.buffer.clear();
        if (n2 !== "")
          this._readableState.buffer.push(n2);
        this._readableState.length = n2.length;
        return this;
      };
      var T = 1073741824;
      function computeNewHighWaterMark(e3) {
        if (e3 >= T) {
          e3 = T;
        } else {
          e3--;
          e3 |= e3 >>> 1;
          e3 |= e3 >>> 2;
          e3 |= e3 >>> 4;
          e3 |= e3 >>> 8;
          e3 |= e3 >>> 16;
          e3++;
        }
        return e3;
      }
      function howMuchToRead(e3, t3) {
        if (e3 <= 0 || t3.length === 0 && t3.ended)
          return 0;
        if (t3.objectMode)
          return 1;
        if (e3 !== e3) {
          if (t3.flowing && t3.length)
            return t3.buffer.head.data.length;
          else
            return t3.length;
        }
        if (e3 > t3.highWaterMark)
          t3.highWaterMark = computeNewHighWaterMark(e3);
        if (e3 <= t3.length)
          return e3;
        if (!t3.ended) {
          t3.needReadable = true;
          return 0;
        }
        return t3.length;
      }
      Readable2.prototype.read = function(e3) {
        u("read", e3);
        e3 = parseInt(e3, 10);
        var t3 = this._readableState;
        var r3 = e3;
        if (e3 !== 0)
          t3.emittedReadable = false;
        if (e3 === 0 && t3.needReadable && ((t3.highWaterMark !== 0 ? t3.length >= t3.highWaterMark : t3.length > 0) || t3.ended)) {
          u("read: emitReadable", t3.length, t3.ended);
          if (t3.length === 0 && t3.ended)
            endReadable(this);
          else
            emitReadable(this);
          return null;
        }
        e3 = howMuchToRead(e3, t3);
        if (e3 === 0 && t3.ended) {
          if (t3.length === 0)
            endReadable(this);
          return null;
        }
        var i2 = t3.needReadable;
        u("need readable", i2);
        if (t3.length === 0 || t3.length - e3 < t3.highWaterMark) {
          i2 = true;
          u("length less than watermark", i2);
        }
        if (t3.ended || t3.reading) {
          i2 = false;
          u("reading or ended", i2);
        } else if (i2) {
          u("do read");
          t3.reading = true;
          t3.sync = true;
          if (t3.length === 0)
            t3.needReadable = true;
          this._read(t3.highWaterMark);
          t3.sync = false;
          if (!t3.reading)
            e3 = howMuchToRead(r3, t3);
        }
        var n2;
        if (e3 > 0)
          n2 = fromList(e3, t3);
        else
          n2 = null;
        if (n2 === null) {
          t3.needReadable = t3.length <= t3.highWaterMark;
          e3 = 0;
        } else {
          t3.length -= e3;
          t3.awaitDrain = 0;
        }
        if (t3.length === 0) {
          if (!t3.ended)
            t3.needReadable = true;
          if (r3 !== e3 && t3.ended)
            endReadable(this);
        }
        if (n2 !== null)
          this.emit("data", n2);
        return n2;
      };
      function onEofChunk(e3, t3) {
        u("onEofChunk");
        if (t3.ended)
          return;
        if (t3.decoder) {
          var r3 = t3.decoder.end();
          if (r3 && r3.length) {
            t3.buffer.push(r3);
            t3.length += t3.objectMode ? 1 : r3.length;
          }
        }
        t3.ended = true;
        if (t3.sync) {
          emitReadable(e3);
        } else {
          t3.needReadable = false;
          if (!t3.emittedReadable) {
            t3.emittedReadable = true;
            emitReadable_(e3);
          }
        }
      }
      function emitReadable(e3) {
        var t3 = e3._readableState;
        u("emitReadable", t3.needReadable, t3.emittedReadable);
        t3.needReadable = false;
        if (!t3.emittedReadable) {
          u("emitReadable", t3.flowing);
          t3.emittedReadable = true;
          process.nextTick(emitReadable_, e3);
        }
      }
      function emitReadable_(e3) {
        var t3 = e3._readableState;
        u("emitReadable_", t3.destroyed, t3.length, t3.ended);
        if (!t3.destroyed && (t3.length || t3.ended)) {
          e3.emit("readable");
          t3.emittedReadable = false;
        }
        t3.needReadable = !t3.flowing && !t3.ended && t3.length <= t3.highWaterMark;
        flow(e3);
      }
      function maybeReadMore(e3, t3) {
        if (!t3.readingMore) {
          t3.readingMore = true;
          process.nextTick(maybeReadMore_, e3, t3);
        }
      }
      function maybeReadMore_(e3, t3) {
        while (!t3.reading && !t3.ended && (t3.length < t3.highWaterMark || t3.flowing && t3.length === 0)) {
          var r3 = t3.length;
          u("maybeReadMore read 0");
          e3.read(0);
          if (r3 === t3.length)
            break;
        }
        t3.readingMore = false;
      }
      Readable2.prototype._read = function(e3) {
        E(this, new m("_read()"));
      };
      Readable2.prototype.pipe = function(e3, t3) {
        var r3 = this;
        var i2 = this._readableState;
        switch (i2.pipesCount) {
          case 0:
            i2.pipes = e3;
            break;
          case 1:
            i2.pipes = [i2.pipes, e3];
            break;
          default:
            i2.pipes.push(e3);
            break;
        }
        i2.pipesCount += 1;
        u("pipe count=%d opts=%j", i2.pipesCount, t3);
        var n2 = (!t3 || t3.end !== false) && e3 !== process.stdout && e3 !== process.stderr;
        var a2 = n2 ? onend : unpipe;
        if (i2.endEmitted)
          process.nextTick(a2);
        else
          r3.once("end", a2);
        e3.on("unpipe", onunpipe);
        function onunpipe(e4, t4) {
          u("onunpipe");
          if (e4 === r3) {
            if (t4 && t4.hasUnpiped === false) {
              t4.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          u("onend");
          e3.end();
        }
        var o2 = pipeOnDrain(r3);
        e3.on("drain", o2);
        var f2 = false;
        function cleanup() {
          u("cleanup");
          e3.removeListener("close", onclose);
          e3.removeListener("finish", onfinish);
          e3.removeListener("drain", o2);
          e3.removeListener("error", onerror);
          e3.removeListener("unpipe", onunpipe);
          r3.removeListener("end", onend);
          r3.removeListener("end", unpipe);
          r3.removeListener("data", ondata);
          f2 = true;
          if (i2.awaitDrain && (!e3._writableState || e3._writableState.needDrain))
            o2();
        }
        r3.on("data", ondata);
        function ondata(t4) {
          u("ondata");
          var n3 = e3.write(t4);
          u("dest.write", n3);
          if (n3 === false) {
            if ((i2.pipesCount === 1 && i2.pipes === e3 || i2.pipesCount > 1 && indexOf(i2.pipes, e3) !== -1) && !f2) {
              u("false write response, pause", i2.awaitDrain);
              i2.awaitDrain++;
            }
            r3.pause();
          }
        }
        function onerror(t4) {
          u("onerror", t4);
          unpipe();
          e3.removeListener("error", onerror);
          if (s(e3, "error") === 0)
            E(e3, t4);
        }
        prependListener(e3, "error", onerror);
        function onclose() {
          e3.removeListener("finish", onfinish);
          unpipe();
        }
        e3.once("close", onclose);
        function onfinish() {
          u("onfinish");
          e3.removeListener("close", onclose);
          unpipe();
        }
        e3.once("finish", onfinish);
        function unpipe() {
          u("unpipe");
          r3.unpipe(e3);
        }
        e3.emit("pipe", r3);
        if (!i2.flowing) {
          u("pipe resume");
          r3.resume();
        }
        return e3;
      };
      function pipeOnDrain(e3) {
        return function pipeOnDrainFunctionResult() {
          var t3 = e3._readableState;
          u("pipeOnDrain", t3.awaitDrain);
          if (t3.awaitDrain)
            t3.awaitDrain--;
          if (t3.awaitDrain === 0 && s(e3, "data")) {
            t3.flowing = true;
            flow(e3);
          }
        };
      }
      Readable2.prototype.unpipe = function(e3) {
        var t3 = this._readableState;
        var r3 = { hasUnpiped: false };
        if (t3.pipesCount === 0)
          return this;
        if (t3.pipesCount === 1) {
          if (e3 && e3 !== t3.pipes)
            return this;
          if (!e3)
            e3 = t3.pipes;
          t3.pipes = null;
          t3.pipesCount = 0;
          t3.flowing = false;
          if (e3)
            e3.emit("unpipe", this, r3);
          return this;
        }
        if (!e3) {
          var i2 = t3.pipes;
          var n2 = t3.pipesCount;
          t3.pipes = null;
          t3.pipesCount = 0;
          t3.flowing = false;
          for (var s2 = 0; s2 < n2; s2++) {
            i2[s2].emit("unpipe", this, { hasUnpiped: false });
          }
          return this;
        }
        var a2 = indexOf(t3.pipes, e3);
        if (a2 === -1)
          return this;
        t3.pipes.splice(a2, 1);
        t3.pipesCount -= 1;
        if (t3.pipesCount === 1)
          t3.pipes = t3.pipes[0];
        e3.emit("unpipe", this, r3);
        return this;
      };
      Readable2.prototype.on = function(e3, t3) {
        var r3 = a.prototype.on.call(this, e3, t3);
        var i2 = this._readableState;
        if (e3 === "data") {
          i2.readableListening = this.listenerCount("readable") > 0;
          if (i2.flowing !== false)
            this.resume();
        } else if (e3 === "readable") {
          if (!i2.endEmitted && !i2.readableListening) {
            i2.readableListening = i2.needReadable = true;
            i2.flowing = false;
            i2.emittedReadable = false;
            u("on readable", i2.length, i2.reading);
            if (i2.length) {
              emitReadable(this);
            } else if (!i2.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return r3;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      Readable2.prototype.removeListener = function(e3, t3) {
        var r3 = a.prototype.removeListener.call(this, e3, t3);
        if (e3 === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return r3;
      };
      Readable2.prototype.removeAllListeners = function(e3) {
        var t3 = a.prototype.removeAllListeners.apply(this, arguments);
        if (e3 === "readable" || e3 === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return t3;
      };
      function updateReadableListening(e3) {
        var t3 = e3._readableState;
        t3.readableListening = e3.listenerCount("readable") > 0;
        if (t3.resumeScheduled && !t3.paused) {
          t3.flowing = true;
        } else if (e3.listenerCount("data") > 0) {
          e3.resume();
        }
      }
      function nReadingNextTick(e3) {
        u("readable nexttick read 0");
        e3.read(0);
      }
      Readable2.prototype.resume = function() {
        var e3 = this._readableState;
        if (!e3.flowing) {
          u("resume");
          e3.flowing = !e3.readableListening;
          resume(this, e3);
        }
        e3.paused = false;
        return this;
      };
      function resume(e3, t3) {
        if (!t3.resumeScheduled) {
          t3.resumeScheduled = true;
          process.nextTick(resume_, e3, t3);
        }
      }
      function resume_(e3, t3) {
        u("resume", t3.reading);
        if (!t3.reading) {
          e3.read(0);
        }
        t3.resumeScheduled = false;
        e3.emit("resume");
        flow(e3);
        if (t3.flowing && !t3.reading)
          e3.read(0);
      }
      Readable2.prototype.pause = function() {
        u("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          u("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(e3) {
        var t3 = e3._readableState;
        u("flow", t3.flowing);
        while (t3.flowing && e3.read() !== null) {
        }
      }
      Readable2.prototype.wrap = function(e3) {
        var t3 = this;
        var r3 = this._readableState;
        var i2 = false;
        e3.on("end", function() {
          u("wrapped end");
          if (r3.decoder && !r3.ended) {
            var e4 = r3.decoder.end();
            if (e4 && e4.length)
              t3.push(e4);
          }
          t3.push(null);
        });
        e3.on("data", function(n3) {
          u("wrapped data");
          if (r3.decoder)
            n3 = r3.decoder.write(n3);
          if (r3.objectMode && (n3 === null || n3 === void 0))
            return;
          else if (!r3.objectMode && (!n3 || !n3.length))
            return;
          var s3 = t3.push(n3);
          if (!s3) {
            i2 = true;
            e3.pause();
          }
        });
        for (var n2 in e3) {
          if (this[n2] === void 0 && typeof e3[n2] === "function") {
            this[n2] = function methodWrap(t4) {
              return function methodWrapReturnFunction() {
                return e3[t4].apply(e3, arguments);
              };
            }(n2);
          }
        }
        for (var s2 = 0; s2 < x.length; s2++) {
          e3.on(x[s2], this.emit.bind(this, x[s2]));
        }
        this._read = function(t4) {
          u("wrapped _read", t4);
          if (i2) {
            i2 = false;
            e3.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable2.prototype[Symbol.asyncIterator] = function() {
          if (S === void 0) {
            S = r2(243);
          }
          return S(this);
        };
      }
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", { enumerable: false, get: function get() {
        return this._readableState.highWaterMark;
      } });
      Object.defineProperty(Readable2.prototype, "readableBuffer", { enumerable: false, get: function get() {
        return this._readableState && this._readableState.buffer;
      } });
      Object.defineProperty(Readable2.prototype, "readableFlowing", { enumerable: false, get: function get() {
        return this._readableState.flowing;
      }, set: function set(e3) {
        if (this._readableState) {
          this._readableState.flowing = e3;
        }
      } });
      Readable2._fromList = fromList;
      Object.defineProperty(Readable2.prototype, "readableLength", { enumerable: false, get: function get() {
        return this._readableState.length;
      } });
      function fromList(e3, t3) {
        if (t3.length === 0)
          return null;
        var r3;
        if (t3.objectMode)
          r3 = t3.buffer.shift();
        else if (!e3 || e3 >= t3.length) {
          if (t3.decoder)
            r3 = t3.buffer.join("");
          else if (t3.buffer.length === 1)
            r3 = t3.buffer.first();
          else
            r3 = t3.buffer.concat(t3.length);
          t3.buffer.clear();
        } else {
          r3 = t3.buffer.consume(e3, t3.decoder);
        }
        return r3;
      }
      function endReadable(e3) {
        var t3 = e3._readableState;
        u("endReadable", t3.endEmitted);
        if (!t3.endEmitted) {
          t3.ended = true;
          process.nextTick(endReadableNT, t3, e3);
        }
      }
      function endReadableNT(e3, t3) {
        u("endReadableNT", e3.endEmitted, e3.length);
        if (!e3.endEmitted && e3.length === 0) {
          e3.endEmitted = true;
          t3.readable = false;
          t3.emit("end");
          if (e3.autoDestroy) {
            var r3 = t3._writableState;
            if (!r3 || r3.autoDestroy && r3.finished) {
              t3.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable2.from = function(e3, t3) {
          if (R === void 0) {
            R = r2(668);
          }
          return R(Readable2, e3, t3);
        };
      }
      function indexOf(e3, t3) {
        for (var r3 = 0, i2 = e3.length; r3 < i2; r3++) {
          if (e3[r3] === t3)
            return r3;
        }
        return -1;
      }
    }, 770: (e2, t2, r2) => {
      "use strict";
      e2.exports = Transform;
      var i = r2(959).q, n = i.ERR_METHOD_NOT_IMPLEMENTED, s = i.ERR_MULTIPLE_CALLBACK, a = i.ERR_TRANSFORM_ALREADY_TRANSFORMING, o = i.ERR_TRANSFORM_WITH_LENGTH_0;
      var f = r2(548);
      r2(315)(Transform, f);
      function afterTransform(e3, t3) {
        var r3 = this._transformState;
        r3.transforming = false;
        var i2 = r3.writecb;
        if (i2 === null) {
          return this.emit("error", new s());
        }
        r3.writechunk = null;
        r3.writecb = null;
        if (t3 != null)
          this.push(t3);
        i2(e3);
        var n2 = this._readableState;
        n2.reading = false;
        if (n2.needReadable || n2.length < n2.highWaterMark) {
          this._read(n2.highWaterMark);
        }
      }
      function Transform(e3) {
        if (!(this instanceof Transform))
          return new Transform(e3);
        f.call(this, e3);
        this._transformState = { afterTransform: afterTransform.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (e3) {
          if (typeof e3.transform === "function")
            this._transform = e3.transform;
          if (typeof e3.flush === "function")
            this._flush = e3.flush;
        }
        this.on("prefinish", prefinish);
      }
      function prefinish() {
        var e3 = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(t3, r3) {
            done(e3, t3, r3);
          });
        } else {
          done(this, null, null);
        }
      }
      Transform.prototype.push = function(e3, t3) {
        this._transformState.needTransform = false;
        return f.prototype.push.call(this, e3, t3);
      };
      Transform.prototype._transform = function(e3, t3, r3) {
        r3(new n("_transform()"));
      };
      Transform.prototype._write = function(e3, t3, r3) {
        var i2 = this._transformState;
        i2.writecb = r3;
        i2.writechunk = e3;
        i2.writeencoding = t3;
        if (!i2.transforming) {
          var n2 = this._readableState;
          if (i2.needTransform || n2.needReadable || n2.length < n2.highWaterMark)
            this._read(n2.highWaterMark);
        }
      };
      Transform.prototype._read = function(e3) {
        var t3 = this._transformState;
        if (t3.writechunk !== null && !t3.transforming) {
          t3.transforming = true;
          this._transform(t3.writechunk, t3.writeencoding, t3.afterTransform);
        } else {
          t3.needTransform = true;
        }
      };
      Transform.prototype._destroy = function(e3, t3) {
        f.prototype._destroy.call(this, e3, function(e4) {
          t3(e4);
        });
      };
      function done(e3, t3, r3) {
        if (t3)
          return e3.emit("error", t3);
        if (r3 != null)
          e3.push(r3);
        if (e3._writableState.length)
          throw new o();
        if (e3._transformState.transforming)
          throw new a();
        return e3.push(null);
      }
    }, 379: (e2, t2, r2) => {
      "use strict";
      e2.exports = Writable;
      function WriteReq(e3, t3, r3) {
        this.chunk = e3;
        this.encoding = t3;
        this.callback = r3;
        this.next = null;
      }
      function CorkedRequest(e3) {
        var t3 = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(t3, e3);
        };
      }
      var i;
      Writable.WritableState = WritableState;
      var n = { deprecate: r2(125) };
      var s = r2(604);
      var a = r2(300).Buffer;
      var o = global.Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(e3) {
        return a.from(e3);
      }
      function _isUint8Array(e3) {
        return a.isBuffer(e3) || e3 instanceof o;
      }
      var f = r2(97);
      var l = r2(841), u = l.getHighWaterMark;
      var h = r2(959).q, d = h.ERR_INVALID_ARG_TYPE, p = h.ERR_METHOD_NOT_IMPLEMENTED, _ = h.ERR_MULTIPLE_CALLBACK, b = h.ERR_STREAM_CANNOT_PIPE, g = h.ERR_STREAM_DESTROYED, y = h.ERR_STREAM_NULL_VALUES, m = h.ERR_STREAM_WRITE_AFTER_END, v = h.ERR_UNKNOWN_ENCODING;
      var w = f.errorOrDestroy;
      r2(315)(Writable, s);
      function nop() {
      }
      function WritableState(e3, t3, n2) {
        i = i || r2(548);
        e3 = e3 || {};
        if (typeof n2 !== "boolean")
          n2 = t3 instanceof i;
        this.objectMode = !!e3.objectMode;
        if (n2)
          this.objectMode = this.objectMode || !!e3.writableObjectMode;
        this.highWaterMark = u(this, e3, "writableHighWaterMark", n2);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var s2 = e3.decodeStrings === false;
        this.decodeStrings = !s2;
        this.defaultEncoding = e3.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(e4) {
          onwrite(t3, e4);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = e3.emitClose !== false;
        this.autoDestroy = !!e3.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var e3 = this.bufferedRequest;
        var t3 = [];
        while (e3) {
          t3.push(e3);
          e3 = e3.next;
        }
        return t3;
      };
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", { get: n.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
        } catch (e3) {
        }
      })();
      var S;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        S = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, { value: function value(e3) {
          if (S.call(this, e3))
            return true;
          if (this !== Writable)
            return false;
          return e3 && e3._writableState instanceof WritableState;
        } });
      } else {
        S = function realHasInstance(e3) {
          return e3 instanceof this;
        };
      }
      function Writable(e3) {
        i = i || r2(548);
        var t3 = this instanceof i;
        if (!t3 && !S.call(Writable, this))
          return new Writable(e3);
        this._writableState = new WritableState(e3, this, t3);
        this.writable = true;
        if (e3) {
          if (typeof e3.write === "function")
            this._write = e3.write;
          if (typeof e3.writev === "function")
            this._writev = e3.writev;
          if (typeof e3.destroy === "function")
            this._destroy = e3.destroy;
          if (typeof e3.final === "function")
            this._final = e3.final;
        }
        s.call(this);
      }
      Writable.prototype.pipe = function() {
        w(this, new b());
      };
      function writeAfterEnd(e3, t3) {
        var r3 = new m();
        w(e3, r3);
        process.nextTick(t3, r3);
      }
      function validChunk(e3, t3, r3, i2) {
        var n2;
        if (r3 === null) {
          n2 = new y();
        } else if (typeof r3 !== "string" && !t3.objectMode) {
          n2 = new d("chunk", ["string", "Buffer"], r3);
        }
        if (n2) {
          w(e3, n2);
          process.nextTick(i2, n2);
          return false;
        }
        return true;
      }
      Writable.prototype.write = function(e3, t3, r3) {
        var i2 = this._writableState;
        var n2 = false;
        var s2 = !i2.objectMode && _isUint8Array(e3);
        if (s2 && !a.isBuffer(e3)) {
          e3 = _uint8ArrayToBuffer(e3);
        }
        if (typeof t3 === "function") {
          r3 = t3;
          t3 = null;
        }
        if (s2)
          t3 = "buffer";
        else if (!t3)
          t3 = i2.defaultEncoding;
        if (typeof r3 !== "function")
          r3 = nop;
        if (i2.ending)
          writeAfterEnd(this, r3);
        else if (s2 || validChunk(this, i2, e3, r3)) {
          i2.pendingcb++;
          n2 = writeOrBuffer(this, i2, s2, e3, t3, r3);
        }
        return n2;
      };
      Writable.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function() {
        var e3 = this._writableState;
        if (e3.corked) {
          e3.corked--;
          if (!e3.writing && !e3.corked && !e3.bufferProcessing && e3.bufferedRequest)
            clearBuffer(this, e3);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(e3) {
        if (typeof e3 === "string")
          e3 = e3.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e3 + "").toLowerCase()) > -1))
          throw new v(e3);
        this._writableState.defaultEncoding = e3;
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableBuffer", { enumerable: false, get: function get() {
        return this._writableState && this._writableState.getBuffer();
      } });
      function decodeChunk(e3, t3, r3) {
        if (!e3.objectMode && e3.decodeStrings !== false && typeof t3 === "string") {
          t3 = a.from(t3, r3);
        }
        return t3;
      }
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", { enumerable: false, get: function get() {
        return this._writableState.highWaterMark;
      } });
      function writeOrBuffer(e3, t3, r3, i2, n2, s2) {
        if (!r3) {
          var a2 = decodeChunk(t3, i2, n2);
          if (i2 !== a2) {
            r3 = true;
            n2 = "buffer";
            i2 = a2;
          }
        }
        var o2 = t3.objectMode ? 1 : i2.length;
        t3.length += o2;
        var f2 = t3.length < t3.highWaterMark;
        if (!f2)
          t3.needDrain = true;
        if (t3.writing || t3.corked) {
          var l2 = t3.lastBufferedRequest;
          t3.lastBufferedRequest = { chunk: i2, encoding: n2, isBuf: r3, callback: s2, next: null };
          if (l2) {
            l2.next = t3.lastBufferedRequest;
          } else {
            t3.bufferedRequest = t3.lastBufferedRequest;
          }
          t3.bufferedRequestCount += 1;
        } else {
          doWrite(e3, t3, false, o2, i2, n2, s2);
        }
        return f2;
      }
      function doWrite(e3, t3, r3, i2, n2, s2, a2) {
        t3.writelen = i2;
        t3.writecb = a2;
        t3.writing = true;
        t3.sync = true;
        if (t3.destroyed)
          t3.onwrite(new g("write"));
        else if (r3)
          e3._writev(n2, t3.onwrite);
        else
          e3._write(n2, s2, t3.onwrite);
        t3.sync = false;
      }
      function onwriteError(e3, t3, r3, i2, n2) {
        --t3.pendingcb;
        if (r3) {
          process.nextTick(n2, i2);
          process.nextTick(finishMaybe, e3, t3);
          e3._writableState.errorEmitted = true;
          w(e3, i2);
        } else {
          n2(i2);
          e3._writableState.errorEmitted = true;
          w(e3, i2);
          finishMaybe(e3, t3);
        }
      }
      function onwriteStateUpdate(e3) {
        e3.writing = false;
        e3.writecb = null;
        e3.length -= e3.writelen;
        e3.writelen = 0;
      }
      function onwrite(e3, t3) {
        var r3 = e3._writableState;
        var i2 = r3.sync;
        var n2 = r3.writecb;
        if (typeof n2 !== "function")
          throw new _();
        onwriteStateUpdate(r3);
        if (t3)
          onwriteError(e3, r3, i2, t3, n2);
        else {
          var s2 = needFinish(r3) || e3.destroyed;
          if (!s2 && !r3.corked && !r3.bufferProcessing && r3.bufferedRequest) {
            clearBuffer(e3, r3);
          }
          if (i2) {
            process.nextTick(afterWrite, e3, r3, s2, n2);
          } else {
            afterWrite(e3, r3, s2, n2);
          }
        }
      }
      function afterWrite(e3, t3, r3, i2) {
        if (!r3)
          onwriteDrain(e3, t3);
        t3.pendingcb--;
        i2();
        finishMaybe(e3, t3);
      }
      function onwriteDrain(e3, t3) {
        if (t3.length === 0 && t3.needDrain) {
          t3.needDrain = false;
          e3.emit("drain");
        }
      }
      function clearBuffer(e3, t3) {
        t3.bufferProcessing = true;
        var r3 = t3.bufferedRequest;
        if (e3._writev && r3 && r3.next) {
          var i2 = t3.bufferedRequestCount;
          var n2 = new Array(i2);
          var s2 = t3.corkedRequestsFree;
          s2.entry = r3;
          var a2 = 0;
          var o2 = true;
          while (r3) {
            n2[a2] = r3;
            if (!r3.isBuf)
              o2 = false;
            r3 = r3.next;
            a2 += 1;
          }
          n2.allBuffers = o2;
          doWrite(e3, t3, true, t3.length, n2, "", s2.finish);
          t3.pendingcb++;
          t3.lastBufferedRequest = null;
          if (s2.next) {
            t3.corkedRequestsFree = s2.next;
            s2.next = null;
          } else {
            t3.corkedRequestsFree = new CorkedRequest(t3);
          }
          t3.bufferedRequestCount = 0;
        } else {
          while (r3) {
            var f2 = r3.chunk;
            var l2 = r3.encoding;
            var u2 = r3.callback;
            var h2 = t3.objectMode ? 1 : f2.length;
            doWrite(e3, t3, false, h2, f2, l2, u2);
            r3 = r3.next;
            t3.bufferedRequestCount--;
            if (t3.writing) {
              break;
            }
          }
          if (r3 === null)
            t3.lastBufferedRequest = null;
        }
        t3.bufferedRequest = r3;
        t3.bufferProcessing = false;
      }
      Writable.prototype._write = function(e3, t3, r3) {
        r3(new p("_write()"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(e3, t3, r3) {
        var i2 = this._writableState;
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
          t3 = null;
        } else if (typeof t3 === "function") {
          r3 = t3;
          t3 = null;
        }
        if (e3 !== null && e3 !== void 0)
          this.write(e3, t3);
        if (i2.corked) {
          i2.corked = 1;
          this.uncork();
        }
        if (!i2.ending)
          endWritable(this, i2, r3);
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableLength", { enumerable: false, get: function get() {
        return this._writableState.length;
      } });
      function needFinish(e3) {
        return e3.ending && e3.length === 0 && e3.bufferedRequest === null && !e3.finished && !e3.writing;
      }
      function callFinal(e3, t3) {
        e3._final(function(r3) {
          t3.pendingcb--;
          if (r3) {
            w(e3, r3);
          }
          t3.prefinished = true;
          e3.emit("prefinish");
          finishMaybe(e3, t3);
        });
      }
      function prefinish(e3, t3) {
        if (!t3.prefinished && !t3.finalCalled) {
          if (typeof e3._final === "function" && !t3.destroyed) {
            t3.pendingcb++;
            t3.finalCalled = true;
            process.nextTick(callFinal, e3, t3);
          } else {
            t3.prefinished = true;
            e3.emit("prefinish");
          }
        }
      }
      function finishMaybe(e3, t3) {
        var r3 = needFinish(t3);
        if (r3) {
          prefinish(e3, t3);
          if (t3.pendingcb === 0) {
            t3.finished = true;
            e3.emit("finish");
            if (t3.autoDestroy) {
              var i2 = e3._readableState;
              if (!i2 || i2.autoDestroy && i2.endEmitted) {
                e3.destroy();
              }
            }
          }
        }
        return r3;
      }
      function endWritable(e3, t3, r3) {
        t3.ending = true;
        finishMaybe(e3, t3);
        if (r3) {
          if (t3.finished)
            process.nextTick(r3);
          else
            e3.once("finish", r3);
        }
        t3.ended = true;
        e3.writable = false;
      }
      function onCorkedFinish(e3, t3, r3) {
        var i2 = e3.entry;
        e3.entry = null;
        while (i2) {
          var n2 = i2.callback;
          t3.pendingcb--;
          n2(r3);
          i2 = i2.next;
        }
        t3.corkedRequestsFree.next = e3;
      }
      Object.defineProperty(Writable.prototype, "destroyed", { enumerable: false, get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      }, set: function set(e3) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = e3;
      } });
      Writable.prototype.destroy = f.destroy;
      Writable.prototype._undestroy = f.undestroy;
      Writable.prototype._destroy = function(e3, t3) {
        t3(e3);
      };
    }, 243: (e2, t2, r2) => {
      "use strict";
      var i;
      function _defineProperty3(e3, t3, r3) {
        if (t3 in e3) {
          Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true, writable: true });
        } else {
          e3[t3] = r3;
        }
        return e3;
      }
      var n = r2(641);
      var s = Symbol("lastResolve");
      var a = Symbol("lastReject");
      var o = Symbol("error");
      var f = Symbol("ended");
      var l = Symbol("lastPromise");
      var u = Symbol("handlePromise");
      var h = Symbol("stream");
      function createIterResult(e3, t3) {
        return { value: e3, done: t3 };
      }
      function readAndResolve(e3) {
        var t3 = e3[s];
        if (t3 !== null) {
          var r3 = e3[h].read();
          if (r3 !== null) {
            e3[l] = null;
            e3[s] = null;
            e3[a] = null;
            t3(createIterResult(r3, false));
          }
        }
      }
      function onReadable(e3) {
        process.nextTick(readAndResolve, e3);
      }
      function wrapForNext(e3, t3) {
        return function(r3, i2) {
          e3.then(function() {
            if (t3[f]) {
              r3(createIterResult(void 0, true));
              return;
            }
            t3[u](r3, i2);
          }, i2);
        };
      }
      var d = Object.getPrototypeOf(function() {
      });
      var p = Object.setPrototypeOf((i = { get stream() {
        return this[h];
      }, next: function next() {
        var e3 = this;
        var t3 = this[o];
        if (t3 !== null) {
          return Promise.reject(t3);
        }
        if (this[f]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[h].destroyed) {
          return new Promise(function(t4, r4) {
            process.nextTick(function() {
              if (e3[o]) {
                r4(e3[o]);
              } else {
                t4(createIterResult(void 0, true));
              }
            });
          });
        }
        var r3 = this[l];
        var i2;
        if (r3) {
          i2 = new Promise(wrapForNext(r3, this));
        } else {
          var n2 = this[h].read();
          if (n2 !== null) {
            return Promise.resolve(createIterResult(n2, false));
          }
          i2 = new Promise(this[u]);
        }
        this[l] = i2;
        return i2;
      } }, _defineProperty3(i, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty3(i, "return", function _return() {
        var e3 = this;
        return new Promise(function(t3, r3) {
          e3[h].destroy(null, function(e4) {
            if (e4) {
              r3(e4);
              return;
            }
            t3(createIterResult(void 0, true));
          });
        });
      }), i), d);
      var _ = function createReadableStreamAsyncIterator(e3) {
        var t3;
        var r3 = Object.create(p, (t3 = {}, _defineProperty3(t3, h, { value: e3, writable: true }), _defineProperty3(t3, s, { value: null, writable: true }), _defineProperty3(t3, a, { value: null, writable: true }), _defineProperty3(t3, o, { value: null, writable: true }), _defineProperty3(t3, f, { value: e3._readableState.endEmitted, writable: true }), _defineProperty3(t3, u, { value: function value(e4, t4) {
          var i2 = r3[h].read();
          if (i2) {
            r3[l] = null;
            r3[s] = null;
            r3[a] = null;
            e4(createIterResult(i2, false));
          } else {
            r3[s] = e4;
            r3[a] = t4;
          }
        }, writable: true }), t3));
        r3[l] = null;
        n(e3, function(e4) {
          if (e4 && e4.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var t4 = r3[a];
            if (t4 !== null) {
              r3[l] = null;
              r3[s] = null;
              r3[a] = null;
              t4(e4);
            }
            r3[o] = e4;
            return;
          }
          var i2 = r3[s];
          if (i2 !== null) {
            r3[l] = null;
            r3[s] = null;
            r3[a] = null;
            i2(createIterResult(void 0, true));
          }
          r3[f] = true;
        });
        e3.on("readable", onReadable.bind(null, r3));
        return r3;
      };
      e2.exports = _;
    }, 706: (e2, t2, r2) => {
      "use strict";
      function ownKeys3(e3, t3) {
        var r3 = Object.keys(e3);
        if (Object.getOwnPropertySymbols) {
          var i2 = Object.getOwnPropertySymbols(e3);
          if (t3)
            i2 = i2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            });
          r3.push.apply(r3, i2);
        }
        return r3;
      }
      function _objectSpread(e3) {
        for (var t3 = 1; t3 < arguments.length; t3++) {
          var r3 = arguments[t3] != null ? arguments[t3] : {};
          if (t3 % 2) {
            ownKeys3(Object(r3), true).forEach(function(t4) {
              _defineProperty3(e3, t4, r3[t4]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3));
          } else {
            ownKeys3(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
        }
        return e3;
      }
      function _defineProperty3(e3, t3, r3) {
        if (t3 in e3) {
          Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true, writable: true });
        } else {
          e3[t3] = r3;
        }
        return e3;
      }
      function _classCallCheck2(e3, t3) {
        if (!(e3 instanceof t3)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(e3, t3) {
        for (var r3 = 0; r3 < t3.length; r3++) {
          var i2 = t3[r3];
          i2.enumerable = i2.enumerable || false;
          i2.configurable = true;
          if ("value" in i2)
            i2.writable = true;
          Object.defineProperty(e3, i2.key, i2);
        }
      }
      function _createClass(e3, t3, r3) {
        if (t3)
          _defineProperties(e3.prototype, t3);
        if (r3)
          _defineProperties(e3, r3);
        return e3;
      }
      var i = r2(300), n = i.Buffer;
      var s = r2(837), a = s.inspect;
      var o = a && a.custom || "inspect";
      function copyBuffer(e3, t3, r3) {
        n.prototype.copy.call(e3, t3, r3);
      }
      e2.exports = function() {
        function BufferList() {
          _classCallCheck2(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList, [{ key: "push", value: function push(e3) {
          var t3 = { data: e3, next: null };
          if (this.length > 0)
            this.tail.next = t3;
          else
            this.head = t3;
          this.tail = t3;
          ++this.length;
        } }, { key: "unshift", value: function unshift(e3) {
          var t3 = { data: e3, next: this.head };
          if (this.length === 0)
            this.tail = t3;
          this.head = t3;
          ++this.length;
        } }, { key: "shift", value: function shift() {
          if (this.length === 0)
            return;
          var e3 = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return e3;
        } }, { key: "clear", value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        } }, { key: "join", value: function join(e3) {
          if (this.length === 0)
            return "";
          var t3 = this.head;
          var r3 = "" + t3.data;
          while (t3 = t3.next) {
            r3 += e3 + t3.data;
          }
          return r3;
        } }, { key: "concat", value: function concat(e3) {
          if (this.length === 0)
            return n.alloc(0);
          var t3 = n.allocUnsafe(e3 >>> 0);
          var r3 = this.head;
          var i2 = 0;
          while (r3) {
            copyBuffer(r3.data, t3, i2);
            i2 += r3.data.length;
            r3 = r3.next;
          }
          return t3;
        } }, { key: "consume", value: function consume(e3, t3) {
          var r3;
          if (e3 < this.head.data.length) {
            r3 = this.head.data.slice(0, e3);
            this.head.data = this.head.data.slice(e3);
          } else if (e3 === this.head.data.length) {
            r3 = this.shift();
          } else {
            r3 = t3 ? this._getString(e3) : this._getBuffer(e3);
          }
          return r3;
        } }, { key: "first", value: function first() {
          return this.head.data;
        } }, { key: "_getString", value: function _getString(e3) {
          var t3 = this.head;
          var r3 = 1;
          var i2 = t3.data;
          e3 -= i2.length;
          while (t3 = t3.next) {
            var n2 = t3.data;
            var s2 = e3 > n2.length ? n2.length : e3;
            if (s2 === n2.length)
              i2 += n2;
            else
              i2 += n2.slice(0, e3);
            e3 -= s2;
            if (e3 === 0) {
              if (s2 === n2.length) {
                ++r3;
                if (t3.next)
                  this.head = t3.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = t3;
                t3.data = n2.slice(s2);
              }
              break;
            }
            ++r3;
          }
          this.length -= r3;
          return i2;
        } }, { key: "_getBuffer", value: function _getBuffer(e3) {
          var t3 = n.allocUnsafe(e3);
          var r3 = this.head;
          var i2 = 1;
          r3.data.copy(t3);
          e3 -= r3.data.length;
          while (r3 = r3.next) {
            var s2 = r3.data;
            var a2 = e3 > s2.length ? s2.length : e3;
            s2.copy(t3, t3.length - e3, 0, a2);
            e3 -= a2;
            if (e3 === 0) {
              if (a2 === s2.length) {
                ++i2;
                if (r3.next)
                  this.head = r3.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = r3;
                r3.data = s2.slice(a2);
              }
              break;
            }
            ++i2;
          }
          this.length -= i2;
          return t3;
        } }, { key: o, value: function value(e3, t3) {
          return a(this, _objectSpread({}, t3, { depth: 0, customInspect: false }));
        } }]);
        return BufferList;
      }();
    }, 97: (e2) => {
      "use strict";
      function destroy(e3, t2) {
        var r2 = this;
        var i = this._readableState && this._readableState.destroyed;
        var n = this._writableState && this._writableState.destroyed;
        if (i || n) {
          if (t2) {
            t2(e3);
          } else if (e3) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, e3);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, e3);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(e3 || null, function(e4) {
          if (!t2 && e4) {
            if (!r2._writableState) {
              process.nextTick(emitErrorAndCloseNT, r2, e4);
            } else if (!r2._writableState.errorEmitted) {
              r2._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, r2, e4);
            } else {
              process.nextTick(emitCloseNT, r2);
            }
          } else if (t2) {
            process.nextTick(emitCloseNT, r2);
            t2(e4);
          } else {
            process.nextTick(emitCloseNT, r2);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(e3, t2) {
        emitErrorNT(e3, t2);
        emitCloseNT(e3);
      }
      function emitCloseNT(e3) {
        if (e3._writableState && !e3._writableState.emitClose)
          return;
        if (e3._readableState && !e3._readableState.emitClose)
          return;
        e3.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(e3, t2) {
        e3.emit("error", t2);
      }
      function errorOrDestroy(e3, t2) {
        var r2 = e3._readableState;
        var i = e3._writableState;
        if (r2 && r2.autoDestroy || i && i.autoDestroy)
          e3.destroy(t2);
        else
          e3.emit("error", t2);
      }
      e2.exports = { destroy, undestroy, errorOrDestroy };
    }, 641: (e2, t2, r2) => {
      "use strict";
      var i = r2(959).q.ERR_STREAM_PREMATURE_CLOSE;
      function once2(e3) {
        var t3 = false;
        return function() {
          if (t3)
            return;
          t3 = true;
          for (var r3 = arguments.length, i2 = new Array(r3), n = 0; n < r3; n++) {
            i2[n] = arguments[n];
          }
          e3.apply(this, i2);
        };
      }
      function noop() {
      }
      function isRequest2(e3) {
        return e3.setHeader && typeof e3.abort === "function";
      }
      function eos(e3, t3, r3) {
        if (typeof t3 === "function")
          return eos(e3, null, t3);
        if (!t3)
          t3 = {};
        r3 = once2(r3 || noop);
        var n = t3.readable || t3.readable !== false && e3.readable;
        var s = t3.writable || t3.writable !== false && e3.writable;
        var a = function onlegacyfinish() {
          if (!e3.writable)
            f();
        };
        var o = e3._writableState && e3._writableState.finished;
        var f = function onfinish() {
          s = false;
          o = true;
          if (!n)
            r3.call(e3);
        };
        var l = e3._readableState && e3._readableState.endEmitted;
        var u = function onend() {
          n = false;
          l = true;
          if (!s)
            r3.call(e3);
        };
        var h = function onerror(t4) {
          r3.call(e3, t4);
        };
        var d = function onclose() {
          var t4;
          if (n && !l) {
            if (!e3._readableState || !e3._readableState.ended)
              t4 = new i();
            return r3.call(e3, t4);
          }
          if (s && !o) {
            if (!e3._writableState || !e3._writableState.ended)
              t4 = new i();
            return r3.call(e3, t4);
          }
        };
        var p = function onrequest() {
          e3.req.on("finish", f);
        };
        if (isRequest2(e3)) {
          e3.on("complete", f);
          e3.on("abort", d);
          if (e3.req)
            p();
          else
            e3.on("request", p);
        } else if (s && !e3._writableState) {
          e3.on("end", a);
          e3.on("close", a);
        }
        e3.on("end", u);
        e3.on("finish", f);
        if (t3.error !== false)
          e3.on("error", h);
        e3.on("close", d);
        return function() {
          e3.removeListener("complete", f);
          e3.removeListener("abort", d);
          e3.removeListener("request", p);
          if (e3.req)
            e3.req.removeListener("finish", f);
          e3.removeListener("end", a);
          e3.removeListener("close", a);
          e3.removeListener("finish", f);
          e3.removeListener("end", u);
          e3.removeListener("error", h);
          e3.removeListener("close", d);
        };
      }
      e2.exports = eos;
    }, 668: (e2, t2, r2) => {
      "use strict";
      function asyncGeneratorStep2(e3, t3, r3, i2, n, s, a) {
        try {
          var o = e3[s](a);
          var f = o.value;
        } catch (e4) {
          r3(e4);
          return;
        }
        if (o.done) {
          t3(f);
        } else {
          Promise.resolve(f).then(i2, n);
        }
      }
      function _asyncToGenerator2(e3) {
        return function() {
          var t3 = this, r3 = arguments;
          return new Promise(function(i2, n) {
            var s = e3.apply(t3, r3);
            function _next(e4) {
              asyncGeneratorStep2(s, i2, n, _next, _throw, "next", e4);
            }
            function _throw(e4) {
              asyncGeneratorStep2(s, i2, n, _next, _throw, "throw", e4);
            }
            _next(void 0);
          });
        };
      }
      function ownKeys3(e3, t3) {
        var r3 = Object.keys(e3);
        if (Object.getOwnPropertySymbols) {
          var i2 = Object.getOwnPropertySymbols(e3);
          if (t3)
            i2 = i2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            });
          r3.push.apply(r3, i2);
        }
        return r3;
      }
      function _objectSpread(e3) {
        for (var t3 = 1; t3 < arguments.length; t3++) {
          var r3 = arguments[t3] != null ? arguments[t3] : {};
          if (t3 % 2) {
            ownKeys3(Object(r3), true).forEach(function(t4) {
              _defineProperty3(e3, t4, r3[t4]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3));
          } else {
            ownKeys3(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
        }
        return e3;
      }
      function _defineProperty3(e3, t3, r3) {
        if (t3 in e3) {
          Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true, writable: true });
        } else {
          e3[t3] = r3;
        }
        return e3;
      }
      var i = r2(959).q.ERR_INVALID_ARG_TYPE;
      function from(e3, t3, r3) {
        var n;
        if (t3 && typeof t3.next === "function") {
          n = t3;
        } else if (t3 && t3[Symbol.asyncIterator])
          n = t3[Symbol.asyncIterator]();
        else if (t3 && t3[Symbol.iterator])
          n = t3[Symbol.iterator]();
        else
          throw new i("iterable", ["Iterable"], t3);
        var s = new e3(_objectSpread({ objectMode: true }, r3));
        var a = false;
        s._read = function() {
          if (!a) {
            a = true;
            next();
          }
        };
        function next() {
          return _next2.apply(this, arguments);
        }
        function _next2() {
          _next2 = _asyncToGenerator2(function* () {
            try {
              var e4 = yield n.next(), t4 = e4.value, r4 = e4.done;
              if (r4) {
                s.push(null);
              } else if (s.push(yield t4)) {
                next();
              } else {
                a = false;
              }
            } catch (e5) {
              s.destroy(e5);
            }
          });
          return _next2.apply(this, arguments);
        }
        return s;
      }
      e2.exports = from;
    }, 899: (e2, t2, r2) => {
      "use strict";
      var i;
      function once2(e3) {
        var t3 = false;
        return function() {
          if (t3)
            return;
          t3 = true;
          e3.apply(void 0, arguments);
        };
      }
      var n = r2(959).q, s = n.ERR_MISSING_ARGS, a = n.ERR_STREAM_DESTROYED;
      function noop(e3) {
        if (e3)
          throw e3;
      }
      function isRequest2(e3) {
        return e3.setHeader && typeof e3.abort === "function";
      }
      function destroyer(e3, t3, n2, s2) {
        s2 = once2(s2);
        var o = false;
        e3.on("close", function() {
          o = true;
        });
        if (i === void 0)
          i = r2(641);
        i(e3, { readable: t3, writable: n2 }, function(e4) {
          if (e4)
            return s2(e4);
          o = true;
          s2();
        });
        var f = false;
        return function(t4) {
          if (o)
            return;
          if (f)
            return;
          f = true;
          if (isRequest2(e3))
            return e3.abort();
          if (typeof e3.destroy === "function")
            return e3.destroy();
          s2(t4 || new a("pipe"));
        };
      }
      function call(e3) {
        e3();
      }
      function pipe(e3, t3) {
        return e3.pipe(t3);
      }
      function popCallback(e3) {
        if (!e3.length)
          return noop;
        if (typeof e3[e3.length - 1] !== "function")
          return noop;
        return e3.pop();
      }
      function pipeline() {
        for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) {
          t3[r3] = arguments[r3];
        }
        var i2 = popCallback(t3);
        if (Array.isArray(t3[0]))
          t3 = t3[0];
        if (t3.length < 2) {
          throw new s("streams");
        }
        var n2;
        var a2 = t3.map(function(e4, r4) {
          var s2 = r4 < t3.length - 1;
          var o = r4 > 0;
          return destroyer(e4, s2, o, function(e5) {
            if (!n2)
              n2 = e5;
            if (e5)
              a2.forEach(call);
            if (s2)
              return;
            a2.forEach(call);
            i2(n2);
          });
        });
        return t3.reduce(pipe);
      }
      e2.exports = pipeline;
    }, 841: (e2, t2, r2) => {
      "use strict";
      var i = r2(959).q.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(e3, t3, r3) {
        return e3.highWaterMark != null ? e3.highWaterMark : t3 ? e3[r3] : null;
      }
      function getHighWaterMark(e3, t3, r3, n) {
        var s = highWaterMarkFrom(t3, n, r3);
        if (s != null) {
          if (!(isFinite(s) && Math.floor(s) === s) || s < 0) {
            var a = n ? r3 : "highWaterMark";
            throw new i(a, s);
          }
          return Math.floor(s);
        }
        return e3.objectMode ? 16 : 16 * 1024;
      }
      e2.exports = { getHighWaterMark };
    }, 604: (e2, t2, r2) => {
      e2.exports = r2(781);
    }, 505: (e2, t2, r2) => {
      var i = r2(781);
      if (process.env.READABLE_STREAM === "disable" && i) {
        e2.exports = i.Readable;
        Object.assign(e2.exports, i);
        e2.exports.Stream = i;
      } else {
        t2 = e2.exports = r2(852);
        t2.Stream = i || t2;
        t2.Readable = t2;
        t2.Writable = r2(379);
        t2.Duplex = r2(548);
        t2.Transform = r2(770);
        t2.PassThrough = r2(184);
        t2.finished = r2(641);
        t2.pipeline = r2(899);
      }
    }, 598: (e2, t2, r2) => {
      "use strict";
      const i = r2(591);
      const n = r2(160);
      e2.exports = i(() => {
        n(() => {
          process.stderr.write("\x1B[?25h");
        }, { alwaysLast: true });
      });
    }, 105: (e2, t2, r2) => {
      var i = r2(300);
      var n = i.Buffer;
      function copyProps(e3, t3) {
        for (var r3 in e3) {
          t3[r3] = e3[r3];
        }
      }
      if (n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow) {
        e2.exports = i;
      } else {
        copyProps(i, t2);
        t2.Buffer = SafeBuffer;
      }
      function SafeBuffer(e3, t3, r3) {
        return n(e3, t3, r3);
      }
      SafeBuffer.prototype = Object.create(n.prototype);
      copyProps(n, SafeBuffer);
      SafeBuffer.from = function(e3, t3, r3) {
        if (typeof e3 === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return n(e3, t3, r3);
      };
      SafeBuffer.alloc = function(e3, t3, r3) {
        if (typeof e3 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var i2 = n(e3);
        if (t3 !== void 0) {
          if (typeof r3 === "string") {
            i2.fill(t3, r3);
          } else {
            i2.fill(t3);
          }
        } else {
          i2.fill(0);
        }
        return i2;
      };
      SafeBuffer.allocUnsafe = function(e3) {
        if (typeof e3 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return n(e3);
      };
      SafeBuffer.allocUnsafeSlow = function(e3) {
        if (typeof e3 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return i.SlowBuffer(e3);
      };
    }, 160: (e2, t2, r2) => {
      var i = global.process;
      const processOk = function(e3) {
        return e3 && typeof e3 === "object" && typeof e3.removeListener === "function" && typeof e3.emit === "function" && typeof e3.reallyExit === "function" && typeof e3.listeners === "function" && typeof e3.kill === "function" && typeof e3.pid === "number" && typeof e3.on === "function";
      };
      if (!processOk(i)) {
        e2.exports = function() {
        };
      } else {
        var n = r2(491);
        var s = r2(87);
        var a = /^win/i.test(i.platform);
        var o = r2(361);
        if (typeof o !== "function") {
          o = o.EventEmitter;
        }
        var f;
        if (i.__signal_exit_emitter__) {
          f = i.__signal_exit_emitter__;
        } else {
          f = i.__signal_exit_emitter__ = new o();
          f.count = 0;
          f.emitted = {};
        }
        if (!f.infinite) {
          f.setMaxListeners(Infinity);
          f.infinite = true;
        }
        e2.exports = function(e3, t3) {
          if (!processOk(global.process)) {
            return;
          }
          n.equal(typeof e3, "function", "a callback must be provided for exit handler");
          if (d === false) {
            p();
          }
          var r3 = "exit";
          if (t3 && t3.alwaysLast) {
            r3 = "afterexit";
          }
          var remove = function() {
            f.removeListener(r3, e3);
            if (f.listeners("exit").length === 0 && f.listeners("afterexit").length === 0) {
              l();
            }
          };
          f.on(r3, e3);
          return remove;
        };
        var l = function unload() {
          if (!d || !processOk(global.process)) {
            return;
          }
          d = false;
          s.forEach(function(e3) {
            try {
              i.removeListener(e3, h[e3]);
            } catch (e4) {
            }
          });
          i.emit = g;
          i.reallyExit = _;
          f.count -= 1;
        };
        e2.exports.unload = l;
        var u = function emit(e3, t3, r3) {
          if (f.emitted[e3]) {
            return;
          }
          f.emitted[e3] = true;
          f.emit(e3, t3, r3);
        };
        var h = {};
        s.forEach(function(e3) {
          h[e3] = function listener() {
            if (!processOk(global.process)) {
              return;
            }
            var t3 = i.listeners(e3);
            if (t3.length === f.count) {
              l();
              u("exit", null, e3);
              u("afterexit", null, e3);
              if (a && e3 === "SIGHUP") {
                e3 = "SIGINT";
              }
              i.kill(i.pid, e3);
            }
          };
        });
        e2.exports.signals = function() {
          return s;
        };
        var d = false;
        var p = function load() {
          if (d || !processOk(global.process)) {
            return;
          }
          d = true;
          f.count += 1;
          s = s.filter(function(e3) {
            try {
              i.on(e3, h[e3]);
              return true;
            } catch (e4) {
              return false;
            }
          });
          i.emit = y;
          i.reallyExit = b;
        };
        e2.exports.load = p;
        var _ = i.reallyExit;
        var b = function processReallyExit(e3) {
          if (!processOk(global.process)) {
            return;
          }
          i.exitCode = e3 || 0;
          u("exit", i.exitCode, null);
          u("afterexit", i.exitCode, null);
          _.call(i, i.exitCode);
        };
        var g = i.emit;
        var y = function processEmit(e3, t3) {
          if (e3 === "exit" && processOk(global.process)) {
            if (t3 !== void 0) {
              i.exitCode = t3;
            }
            var r3 = g.apply(this, arguments);
            u("exit", i.exitCode, null);
            u("afterexit", i.exitCode, null);
            return r3;
          } else {
            return g.apply(this, arguments);
          }
        };
      }
    }, 87: (e2) => {
      e2.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
      if (process.platform !== "win32") {
        e2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
      }
      if (process.platform === "linux") {
        e2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
      }
    }, 259: (e2, t2, r2) => {
      "use strict";
      var i = r2(105).Buffer;
      var n = i.isEncoding || function(e3) {
        e3 = "" + e3;
        switch (e3 && e3.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(e3) {
        if (!e3)
          return "utf8";
        var t3;
        while (true) {
          switch (e3) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return e3;
            default:
              if (t3)
                return;
              e3 = ("" + e3).toLowerCase();
              t3 = true;
          }
        }
      }
      function normalizeEncoding(e3) {
        var t3 = _normalizeEncoding(e3);
        if (typeof t3 !== "string" && (i.isEncoding === n || !n(e3)))
          throw new Error("Unknown encoding: " + e3);
        return t3 || e3;
      }
      t2.s = StringDecoder;
      function StringDecoder(e3) {
        this.encoding = normalizeEncoding(e3);
        var t3;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            t3 = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            t3 = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            t3 = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = i.allocUnsafe(t3);
      }
      StringDecoder.prototype.write = function(e3) {
        if (e3.length === 0)
          return "";
        var t3;
        var r3;
        if (this.lastNeed) {
          t3 = this.fillLast(e3);
          if (t3 === void 0)
            return "";
          r3 = this.lastNeed;
          this.lastNeed = 0;
        } else {
          r3 = 0;
        }
        if (r3 < e3.length)
          return t3 ? t3 + this.text(e3, r3) : this.text(e3, r3);
        return t3 || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function(e3) {
        if (this.lastNeed <= e3.length) {
          e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e3.length);
        this.lastNeed -= e3.length;
      };
      function utf8CheckByte(e3) {
        if (e3 <= 127)
          return 0;
        else if (e3 >> 5 === 6)
          return 2;
        else if (e3 >> 4 === 14)
          return 3;
        else if (e3 >> 3 === 30)
          return 4;
        return e3 >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(e3, t3, r3) {
        var i2 = t3.length - 1;
        if (i2 < r3)
          return 0;
        var n2 = utf8CheckByte(t3[i2]);
        if (n2 >= 0) {
          if (n2 > 0)
            e3.lastNeed = n2 - 1;
          return n2;
        }
        if (--i2 < r3 || n2 === -2)
          return 0;
        n2 = utf8CheckByte(t3[i2]);
        if (n2 >= 0) {
          if (n2 > 0)
            e3.lastNeed = n2 - 2;
          return n2;
        }
        if (--i2 < r3 || n2 === -2)
          return 0;
        n2 = utf8CheckByte(t3[i2]);
        if (n2 >= 0) {
          if (n2 > 0) {
            if (n2 === 2)
              n2 = 0;
            else
              e3.lastNeed = n2 - 3;
          }
          return n2;
        }
        return 0;
      }
      function utf8CheckExtraBytes(e3, t3, r3) {
        if ((t3[0] & 192) !== 128) {
          e3.lastNeed = 0;
          return "\uFFFD";
        }
        if (e3.lastNeed > 1 && t3.length > 1) {
          if ((t3[1] & 192) !== 128) {
            e3.lastNeed = 1;
            return "\uFFFD";
          }
          if (e3.lastNeed > 2 && t3.length > 2) {
            if ((t3[2] & 192) !== 128) {
              e3.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(e3) {
        var t3 = this.lastTotal - this.lastNeed;
        var r3 = utf8CheckExtraBytes(this, e3, t3);
        if (r3 !== void 0)
          return r3;
        if (this.lastNeed <= e3.length) {
          e3.copy(this.lastChar, t3, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        e3.copy(this.lastChar, t3, 0, e3.length);
        this.lastNeed -= e3.length;
      }
      function utf8Text(e3, t3) {
        var r3 = utf8CheckIncomplete(this, e3, t3);
        if (!this.lastNeed)
          return e3.toString("utf8", t3);
        this.lastTotal = r3;
        var i2 = e3.length - (r3 - this.lastNeed);
        e3.copy(this.lastChar, 0, i2);
        return e3.toString("utf8", t3, i2);
      }
      function utf8End(e3) {
        var t3 = e3 && e3.length ? this.write(e3) : "";
        if (this.lastNeed)
          return t3 + "\uFFFD";
        return t3;
      }
      function utf16Text(e3, t3) {
        if ((e3.length - t3) % 2 === 0) {
          var r3 = e3.toString("utf16le", t3);
          if (r3) {
            var i2 = r3.charCodeAt(r3.length - 1);
            if (i2 >= 55296 && i2 <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = e3[e3.length - 2];
              this.lastChar[1] = e3[e3.length - 1];
              return r3.slice(0, -1);
            }
          }
          return r3;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = e3[e3.length - 1];
        return e3.toString("utf16le", t3, e3.length - 1);
      }
      function utf16End(e3) {
        var t3 = e3 && e3.length ? this.write(e3) : "";
        if (this.lastNeed) {
          var r3 = this.lastTotal - this.lastNeed;
          return t3 + this.lastChar.toString("utf16le", 0, r3);
        }
        return t3;
      }
      function base64Text(e3, t3) {
        var r3 = (e3.length - t3) % 3;
        if (r3 === 0)
          return e3.toString("base64", t3);
        this.lastNeed = 3 - r3;
        this.lastTotal = 3;
        if (r3 === 1) {
          this.lastChar[0] = e3[e3.length - 1];
        } else {
          this.lastChar[0] = e3[e3.length - 2];
          this.lastChar[1] = e3[e3.length - 1];
        }
        return e3.toString("base64", t3, e3.length - r3);
      }
      function base64End(e3) {
        var t3 = e3 && e3.length ? this.write(e3) : "";
        if (this.lastNeed)
          return t3 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return t3;
      }
      function simpleWrite(e3) {
        return e3.toString(this.encoding);
      }
      function simpleEnd(e3) {
        return e3 && e3.length ? this.write(e3) : "";
      }
    }, 125: (e2, t2, r2) => {
      e2.exports = r2(837).deprecate;
    }, 70: (e2) => {
      e2.exports = [[768, 879], [1155, 1158], [1160, 1161], [1425, 1469], [1471, 1471], [1473, 1474], [1476, 1477], [1479, 1479], [1536, 1539], [1552, 1557], [1611, 1630], [1648, 1648], [1750, 1764], [1767, 1768], [1770, 1773], [1807, 1807], [1809, 1809], [1840, 1866], [1958, 1968], [2027, 2035], [2305, 2306], [2364, 2364], [2369, 2376], [2381, 2381], [2385, 2388], [2402, 2403], [2433, 2433], [2492, 2492], [2497, 2500], [2509, 2509], [2530, 2531], [2561, 2562], [2620, 2620], [2625, 2626], [2631, 2632], [2635, 2637], [2672, 2673], [2689, 2690], [2748, 2748], [2753, 2757], [2759, 2760], [2765, 2765], [2786, 2787], [2817, 2817], [2876, 2876], [2879, 2879], [2881, 2883], [2893, 2893], [2902, 2902], [2946, 2946], [3008, 3008], [3021, 3021], [3134, 3136], [3142, 3144], [3146, 3149], [3157, 3158], [3260, 3260], [3263, 3263], [3270, 3270], [3276, 3277], [3298, 3299], [3393, 3395], [3405, 3405], [3530, 3530], [3538, 3540], [3542, 3542], [3633, 3633], [3636, 3642], [3655, 3662], [3761, 3761], [3764, 3769], [3771, 3772], [3784, 3789], [3864, 3865], [3893, 3893], [3895, 3895], [3897, 3897], [3953, 3966], [3968, 3972], [3974, 3975], [3984, 3991], [3993, 4028], [4038, 4038], [4141, 4144], [4146, 4146], [4150, 4151], [4153, 4153], [4184, 4185], [4448, 4607], [4959, 4959], [5906, 5908], [5938, 5940], [5970, 5971], [6002, 6003], [6068, 6069], [6071, 6077], [6086, 6086], [6089, 6099], [6109, 6109], [6155, 6157], [6313, 6313], [6432, 6434], [6439, 6440], [6450, 6450], [6457, 6459], [6679, 6680], [6912, 6915], [6964, 6964], [6966, 6970], [6972, 6972], [6978, 6978], [7019, 7027], [7616, 7626], [7678, 7679], [8203, 8207], [8234, 8238], [8288, 8291], [8298, 8303], [8400, 8431], [12330, 12335], [12441, 12442], [43014, 43014], [43019, 43019], [43045, 43046], [64286, 64286], [65024, 65039], [65056, 65059], [65279, 65279], [65529, 65531], [68097, 68099], [68101, 68102], [68108, 68111], [68152, 68154], [68159, 68159], [119143, 119145], [119155, 119170], [119173, 119179], [119210, 119213], [119362, 119364], [917505, 917505], [917536, 917631], [917760, 917999]];
    }, 74: (e2, t2, r2) => {
      "use strict";
      var i = r2(906);
      var n = r2(70);
      var s = { nul: 0, control: 0 };
      e2.exports = function wcwidth2(e3) {
        return wcswidth(e3, s);
      };
      e2.exports.config = function(e3) {
        e3 = i(e3 || {}, s);
        return function wcwidth2(t3) {
          return wcswidth(t3, e3);
        };
      };
      function wcswidth(e3, t3) {
        if (typeof e3 !== "string")
          return wcwidth(e3, t3);
        var r3 = 0;
        for (var i2 = 0; i2 < e3.length; i2++) {
          var n2 = wcwidth(e3.charCodeAt(i2), t3);
          if (n2 < 0)
            return -1;
          r3 += n2;
        }
        return r3;
      }
      function wcwidth(e3, t3) {
        if (e3 === 0)
          return t3.nul;
        if (e3 < 32 || e3 >= 127 && e3 < 160)
          return t3.control;
        if (bisearch(e3))
          return 0;
        return 1 + (e3 >= 4352 && (e3 <= 4447 || e3 == 9001 || e3 == 9002 || e3 >= 11904 && e3 <= 42191 && e3 != 12351 || e3 >= 44032 && e3 <= 55203 || e3 >= 63744 && e3 <= 64255 || e3 >= 65040 && e3 <= 65049 || e3 >= 65072 && e3 <= 65135 || e3 >= 65280 && e3 <= 65376 || e3 >= 65504 && e3 <= 65510 || e3 >= 131072 && e3 <= 196605 || e3 >= 196608 && e3 <= 262141));
      }
      function bisearch(e3) {
        var t3 = 0;
        var r3 = n.length - 1;
        var i2;
        if (e3 < n[0][0] || e3 > n[r3][1])
          return false;
        while (r3 >= t3) {
          i2 = Math.floor((t3 + r3) / 2);
          if (e3 > n[i2][1])
            t3 = i2 + 1;
          else if (e3 < n[i2][0])
            r3 = i2 - 1;
          else
            return true;
        }
        return false;
      }
    }, 234: (e2) => {
      "use strict";
      e2.exports = require_chalk();
    }, 286: (e2) => {
      "use strict";
      e2.exports = require_strip_ansi();
    }, 491: (e2) => {
      "use strict";
      e2.exports = __require("assert");
    }, 300: (e2) => {
      "use strict";
      e2.exports = __require("buffer");
    }, 361: (e2) => {
      "use strict";
      e2.exports = __require("events");
    }, 521: (e2) => {
      "use strict";
      e2.exports = __require("readline");
    }, 781: (e2) => {
      "use strict";
      e2.exports = __require("stream");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    }, 32: (e2) => {
      "use strict";
      e2.exports = JSON.parse('{"dots":{"interval":80,"frames":["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"]},"dots2":{"interval":80,"frames":["\u28FE","\u28FD","\u28FB","\u28BF","\u287F","\u28DF","\u28EF","\u28F7"]},"dots3":{"interval":80,"frames":["\u280B","\u2819","\u281A","\u281E","\u2816","\u2826","\u2834","\u2832","\u2833","\u2813"]},"dots4":{"interval":80,"frames":["\u2804","\u2806","\u2807","\u280B","\u2819","\u2838","\u2830","\u2820","\u2830","\u2838","\u2819","\u280B","\u2807","\u2806"]},"dots5":{"interval":80,"frames":["\u280B","\u2819","\u281A","\u2812","\u2802","\u2802","\u2812","\u2832","\u2834","\u2826","\u2816","\u2812","\u2810","\u2810","\u2812","\u2813","\u280B"]},"dots6":{"interval":80,"frames":["\u2801","\u2809","\u2819","\u281A","\u2812","\u2802","\u2802","\u2812","\u2832","\u2834","\u2824","\u2804","\u2804","\u2824","\u2834","\u2832","\u2812","\u2802","\u2802","\u2812","\u281A","\u2819","\u2809","\u2801"]},"dots7":{"interval":80,"frames":["\u2808","\u2809","\u280B","\u2813","\u2812","\u2810","\u2810","\u2812","\u2816","\u2826","\u2824","\u2820","\u2820","\u2824","\u2826","\u2816","\u2812","\u2810","\u2810","\u2812","\u2813","\u280B","\u2809","\u2808"]},"dots8":{"interval":80,"frames":["\u2801","\u2801","\u2809","\u2819","\u281A","\u2812","\u2802","\u2802","\u2812","\u2832","\u2834","\u2824","\u2804","\u2804","\u2824","\u2820","\u2820","\u2824","\u2826","\u2816","\u2812","\u2810","\u2810","\u2812","\u2813","\u280B","\u2809","\u2808","\u2808"]},"dots9":{"interval":80,"frames":["\u28B9","\u28BA","\u28BC","\u28F8","\u28C7","\u2867","\u2857","\u284F"]},"dots10":{"interval":80,"frames":["\u2884","\u2882","\u2881","\u2841","\u2848","\u2850","\u2860"]},"dots11":{"interval":100,"frames":["\u2801","\u2802","\u2804","\u2840","\u2880","\u2820","\u2810","\u2808"]},"dots12":{"interval":80,"frames":["\u2880\u2800","\u2840\u2800","\u2804\u2800","\u2882\u2800","\u2842\u2800","\u2805\u2800","\u2883\u2800","\u2843\u2800","\u280D\u2800","\u288B\u2800","\u284B\u2800","\u280D\u2801","\u288B\u2801","\u284B\u2801","\u280D\u2809","\u280B\u2809","\u280B\u2809","\u2809\u2819","\u2809\u2819","\u2809\u2829","\u2808\u2899","\u2808\u2859","\u2888\u2829","\u2840\u2899","\u2804\u2859","\u2882\u2829","\u2842\u2898","\u2805\u2858","\u2883\u2828","\u2843\u2890","\u280D\u2850","\u288B\u2820","\u284B\u2880","\u280D\u2841","\u288B\u2801","\u284B\u2801","\u280D\u2809","\u280B\u2809","\u280B\u2809","\u2809\u2819","\u2809\u2819","\u2809\u2829","\u2808\u2899","\u2808\u2859","\u2808\u2829","\u2800\u2899","\u2800\u2859","\u2800\u2829","\u2800\u2898","\u2800\u2858","\u2800\u2828","\u2800\u2890","\u2800\u2850","\u2800\u2820","\u2800\u2880","\u2800\u2840"]},"dots8Bit":{"interval":80,"frames":["\u2800","\u2801","\u2802","\u2803","\u2804","\u2805","\u2806","\u2807","\u2840","\u2841","\u2842","\u2843","\u2844","\u2845","\u2846","\u2847","\u2808","\u2809","\u280A","\u280B","\u280C","\u280D","\u280E","\u280F","\u2848","\u2849","\u284A","\u284B","\u284C","\u284D","\u284E","\u284F","\u2810","\u2811","\u2812","\u2813","\u2814","\u2815","\u2816","\u2817","\u2850","\u2851","\u2852","\u2853","\u2854","\u2855","\u2856","\u2857","\u2818","\u2819","\u281A","\u281B","\u281C","\u281D","\u281E","\u281F","\u2858","\u2859","\u285A","\u285B","\u285C","\u285D","\u285E","\u285F","\u2820","\u2821","\u2822","\u2823","\u2824","\u2825","\u2826","\u2827","\u2860","\u2861","\u2862","\u2863","\u2864","\u2865","\u2866","\u2867","\u2828","\u2829","\u282A","\u282B","\u282C","\u282D","\u282E","\u282F","\u2868","\u2869","\u286A","\u286B","\u286C","\u286D","\u286E","\u286F","\u2830","\u2831","\u2832","\u2833","\u2834","\u2835","\u2836","\u2837","\u2870","\u2871","\u2872","\u2873","\u2874","\u2875","\u2876","\u2877","\u2838","\u2839","\u283A","\u283B","\u283C","\u283D","\u283E","\u283F","\u2878","\u2879","\u287A","\u287B","\u287C","\u287D","\u287E","\u287F","\u2880","\u2881","\u2882","\u2883","\u2884","\u2885","\u2886","\u2887","\u28C0","\u28C1","\u28C2","\u28C3","\u28C4","\u28C5","\u28C6","\u28C7","\u2888","\u2889","\u288A","\u288B","\u288C","\u288D","\u288E","\u288F","\u28C8","\u28C9","\u28CA","\u28CB","\u28CC","\u28CD","\u28CE","\u28CF","\u2890","\u2891","\u2892","\u2893","\u2894","\u2895","\u2896","\u2897","\u28D0","\u28D1","\u28D2","\u28D3","\u28D4","\u28D5","\u28D6","\u28D7","\u2898","\u2899","\u289A","\u289B","\u289C","\u289D","\u289E","\u289F","\u28D8","\u28D9","\u28DA","\u28DB","\u28DC","\u28DD","\u28DE","\u28DF","\u28A0","\u28A1","\u28A2","\u28A3","\u28A4","\u28A5","\u28A6","\u28A7","\u28E0","\u28E1","\u28E2","\u28E3","\u28E4","\u28E5","\u28E6","\u28E7","\u28A8","\u28A9","\u28AA","\u28AB","\u28AC","\u28AD","\u28AE","\u28AF","\u28E8","\u28E9","\u28EA","\u28EB","\u28EC","\u28ED","\u28EE","\u28EF","\u28B0","\u28B1","\u28B2","\u28B3","\u28B4","\u28B5","\u28B6","\u28B7","\u28F0","\u28F1","\u28F2","\u28F3","\u28F4","\u28F5","\u28F6","\u28F7","\u28B8","\u28B9","\u28BA","\u28BB","\u28BC","\u28BD","\u28BE","\u28BF","\u28F8","\u28F9","\u28FA","\u28FB","\u28FC","\u28FD","\u28FE","\u28FF"]},"line":{"interval":130,"frames":["-","\\\\","|","/"]},"line2":{"interval":100,"frames":["\u2802","-","\u2013","\u2014","\u2013","-"]},"pipe":{"interval":100,"frames":["\u2524","\u2518","\u2534","\u2514","\u251C","\u250C","\u252C","\u2510"]},"simpleDots":{"interval":400,"frames":[".  ",".. ","...","   "]},"simpleDotsScrolling":{"interval":200,"frames":[".  ",".. ","..."," ..","  .","   "]},"star":{"interval":70,"frames":["\u2736","\u2738","\u2739","\u273A","\u2739","\u2737"]},"star2":{"interval":80,"frames":["+","x","*"]},"flip":{"interval":70,"frames":["_","_","_","-","`","`","\'","\xB4","-","_","_","_"]},"hamburger":{"interval":100,"frames":["\u2631","\u2632","\u2634"]},"growVertical":{"interval":120,"frames":["\u2581","\u2583","\u2584","\u2585","\u2586","\u2587","\u2586","\u2585","\u2584","\u2583"]},"growHorizontal":{"interval":120,"frames":["\u258F","\u258E","\u258D","\u258C","\u258B","\u258A","\u2589","\u258A","\u258B","\u258C","\u258D","\u258E"]},"balloon":{"interval":140,"frames":[" ",".","o","O","@","*"," "]},"balloon2":{"interval":120,"frames":[".","o","O","\xB0","O","o","."]},"noise":{"interval":100,"frames":["\u2593","\u2592","\u2591"]},"bounce":{"interval":120,"frames":["\u2801","\u2802","\u2804","\u2802"]},"boxBounce":{"interval":120,"frames":["\u2596","\u2598","\u259D","\u2597"]},"boxBounce2":{"interval":100,"frames":["\u258C","\u2580","\u2590","\u2584"]},"triangle":{"interval":50,"frames":["\u25E2","\u25E3","\u25E4","\u25E5"]},"arc":{"interval":100,"frames":["\u25DC","\u25E0","\u25DD","\u25DE","\u25E1","\u25DF"]},"circle":{"interval":120,"frames":["\u25E1","\u2299","\u25E0"]},"squareCorners":{"interval":180,"frames":["\u25F0","\u25F3","\u25F2","\u25F1"]},"circleQuarters":{"interval":120,"frames":["\u25F4","\u25F7","\u25F6","\u25F5"]},"circleHalves":{"interval":50,"frames":["\u25D0","\u25D3","\u25D1","\u25D2"]},"squish":{"interval":100,"frames":["\u256B","\u256A"]},"toggle":{"interval":250,"frames":["\u22B6","\u22B7"]},"toggle2":{"interval":80,"frames":["\u25AB","\u25AA"]},"toggle3":{"interval":120,"frames":["\u25A1","\u25A0"]},"toggle4":{"interval":100,"frames":["\u25A0","\u25A1","\u25AA","\u25AB"]},"toggle5":{"interval":100,"frames":["\u25AE","\u25AF"]},"toggle6":{"interval":300,"frames":["\u101D","\u1040"]},"toggle7":{"interval":80,"frames":["\u29BE","\u29BF"]},"toggle8":{"interval":100,"frames":["\u25CD","\u25CC"]},"toggle9":{"interval":100,"frames":["\u25C9","\u25CE"]},"toggle10":{"interval":100,"frames":["\u3282","\u3280","\u3281"]},"toggle11":{"interval":50,"frames":["\u29C7","\u29C6"]},"toggle12":{"interval":120,"frames":["\u2617","\u2616"]},"toggle13":{"interval":80,"frames":["=","*","-"]},"arrow":{"interval":100,"frames":["\u2190","\u2196","\u2191","\u2197","\u2192","\u2198","\u2193","\u2199"]},"arrow2":{"interval":80,"frames":["\u2B06\uFE0F ","\u2197\uFE0F ","\u27A1\uFE0F ","\u2198\uFE0F ","\u2B07\uFE0F ","\u2199\uFE0F ","\u2B05\uFE0F ","\u2196\uFE0F "]},"arrow3":{"interval":120,"frames":["\u25B9\u25B9\u25B9\u25B9\u25B9","\u25B8\u25B9\u25B9\u25B9\u25B9","\u25B9\u25B8\u25B9\u25B9\u25B9","\u25B9\u25B9\u25B8\u25B9\u25B9","\u25B9\u25B9\u25B9\u25B8\u25B9","\u25B9\u25B9\u25B9\u25B9\u25B8"]},"bouncingBar":{"interval":80,"frames":["[    ]","[=   ]","[==  ]","[=== ]","[ ===]","[  ==]","[   =]","[    ]","[   =]","[  ==]","[ ===]","[====]","[=== ]","[==  ]","[=   ]"]},"bouncingBall":{"interval":80,"frames":["( \u25CF    )","(  \u25CF   )","(   \u25CF  )","(    \u25CF )","(     \u25CF)","(    \u25CF )","(   \u25CF  )","(  \u25CF   )","( \u25CF    )","(\u25CF     )"]},"smiley":{"interval":200,"frames":["\u{1F604} ","\u{1F61D} "]},"monkey":{"interval":300,"frames":["\u{1F648} ","\u{1F648} ","\u{1F649} ","\u{1F64A} "]},"hearts":{"interval":100,"frames":["\u{1F49B} ","\u{1F499} ","\u{1F49C} ","\u{1F49A} ","\u2764\uFE0F "]},"clock":{"interval":100,"frames":["\u{1F55B} ","\u{1F550} ","\u{1F551} ","\u{1F552} ","\u{1F553} ","\u{1F554} ","\u{1F555} ","\u{1F556} ","\u{1F557} ","\u{1F558} ","\u{1F559} ","\u{1F55A} "]},"earth":{"interval":180,"frames":["\u{1F30D} ","\u{1F30E} ","\u{1F30F} "]},"material":{"interval":17,"frames":["\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581","\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581","\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581","\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581","\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581","\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588","\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588","\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588","\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588","\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588","\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588","\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581","\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581","\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581","\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581"]},"moon":{"interval":80,"frames":["\u{1F311} ","\u{1F312} ","\u{1F313} ","\u{1F314} ","\u{1F315} ","\u{1F316} ","\u{1F317} ","\u{1F318} "]},"runner":{"interval":140,"frames":["\u{1F6B6} ","\u{1F3C3} "]},"pong":{"interval":80,"frames":["\u2590\u2802       \u258C","\u2590\u2808       \u258C","\u2590 \u2802      \u258C","\u2590 \u2820      \u258C","\u2590  \u2840     \u258C","\u2590  \u2820     \u258C","\u2590   \u2802    \u258C","\u2590   \u2808    \u258C","\u2590    \u2802   \u258C","\u2590    \u2820   \u258C","\u2590     \u2840  \u258C","\u2590     \u2820  \u258C","\u2590      \u2802 \u258C","\u2590      \u2808 \u258C","\u2590       \u2802\u258C","\u2590       \u2820\u258C","\u2590       \u2840\u258C","\u2590      \u2820 \u258C","\u2590      \u2802 \u258C","\u2590     \u2808  \u258C","\u2590     \u2802  \u258C","\u2590    \u2820   \u258C","\u2590    \u2840   \u258C","\u2590   \u2820    \u258C","\u2590   \u2802    \u258C","\u2590  \u2808     \u258C","\u2590  \u2802     \u258C","\u2590 \u2820      \u258C","\u2590 \u2840      \u258C","\u2590\u2820       \u258C"]},"shark":{"interval":120,"frames":["\u2590|\\\\____________\u258C","\u2590_|\\\\___________\u258C","\u2590__|\\\\__________\u258C","\u2590___|\\\\_________\u258C","\u2590____|\\\\________\u258C","\u2590_____|\\\\_______\u258C","\u2590______|\\\\______\u258C","\u2590_______|\\\\_____\u258C","\u2590________|\\\\____\u258C","\u2590_________|\\\\___\u258C","\u2590__________|\\\\__\u258C","\u2590___________|\\\\_\u258C","\u2590____________|\\\\\u258C","\u2590____________/|\u258C","\u2590___________/|_\u258C","\u2590__________/|__\u258C","\u2590_________/|___\u258C","\u2590________/|____\u258C","\u2590_______/|_____\u258C","\u2590______/|______\u258C","\u2590_____/|_______\u258C","\u2590____/|________\u258C","\u2590___/|_________\u258C","\u2590__/|__________\u258C","\u2590_/|___________\u258C","\u2590/|____________\u258C"]},"dqpb":{"interval":100,"frames":["d","q","p","b"]},"weather":{"interval":100,"frames":["\u2600\uFE0F ","\u2600\uFE0F ","\u2600\uFE0F ","\u{1F324} ","\u26C5\uFE0F ","\u{1F325} ","\u2601\uFE0F ","\u{1F327} ","\u{1F328} ","\u{1F327} ","\u{1F328} ","\u{1F327} ","\u{1F328} ","\u26C8 ","\u{1F328} ","\u{1F327} ","\u{1F328} ","\u2601\uFE0F ","\u{1F325} ","\u26C5\uFE0F ","\u{1F324} ","\u2600\uFE0F ","\u2600\uFE0F "]},"christmas":{"interval":400,"frames":["\u{1F332}","\u{1F384}"]},"grenade":{"interval":80,"frames":["\u060C  ","\u2032  "," \xB4 "," \u203E ","  \u2E0C","  \u2E0A","  |","  \u204E","  \u2055"," \u0DF4 ","  \u2053","   ","   ","   "]},"point":{"interval":125,"frames":["\u2219\u2219\u2219","\u25CF\u2219\u2219","\u2219\u25CF\u2219","\u2219\u2219\u25CF","\u2219\u2219\u2219"]},"layer":{"interval":150,"frames":["-","=","\u2261"]},"betaWave":{"interval":80,"frames":["\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2","\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2","\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2","\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2","\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2","\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2","\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1"]},"fingerDance":{"interval":160,"frames":["\u{1F918} ","\u{1F91F} ","\u{1F596} ","\u270B ","\u{1F91A} ","\u{1F446} "]},"fistBump":{"interval":80,"frames":["\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ","\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ","\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ","\u3000\u{1F91C}\u3000\u3000\u{1F91B}\u3000 ","\u3000\u3000\u{1F91C}\u{1F91B}\u3000\u3000 ","\u3000\u{1F91C}\u2728\u{1F91B}\u3000\u3000 ","\u{1F91C}\u3000\u2728\u3000\u{1F91B}\u3000 "]},"soccerHeader":{"interval":80,"frames":[" \u{1F9D1}\u26BD\uFE0F       \u{1F9D1} ","\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} ","\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ","\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ","\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ","\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ","\u{1F9D1}       \u26BD\uFE0F\u{1F9D1}  ","\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ","\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ","\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ","\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ","\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} "]},"mindblown":{"interval":160,"frames":["\u{1F610} ","\u{1F610} ","\u{1F62E} ","\u{1F62E} ","\u{1F626} ","\u{1F626} ","\u{1F627} ","\u{1F627} ","\u{1F92F} ","\u{1F4A5} ","\u2728 ","\u3000 ","\u3000 ","\u3000 "]},"speaker":{"interval":160,"frames":["\u{1F508} ","\u{1F509} ","\u{1F50A} ","\u{1F509} "]},"orangePulse":{"interval":100,"frames":["\u{1F538} ","\u{1F536} ","\u{1F7E0} ","\u{1F7E0} ","\u{1F536} "]},"bluePulse":{"interval":100,"frames":["\u{1F539} ","\u{1F537} ","\u{1F535} ","\u{1F535} ","\u{1F537} "]},"orangeBluePulse":{"interval":100,"frames":["\u{1F538} ","\u{1F536} ","\u{1F7E0} ","\u{1F7E0} ","\u{1F536} ","\u{1F539} ","\u{1F537} ","\u{1F535} ","\u{1F535} ","\u{1F537} "]},"timeTravel":{"interval":100,"frames":["\u{1F55B} ","\u{1F55A} ","\u{1F559} ","\u{1F558} ","\u{1F557} ","\u{1F556} ","\u{1F555} ","\u{1F554} ","\u{1F553} ","\u{1F552} ","\u{1F551} ","\u{1F550} "]},"aesthetic":{"interval":80,"frames":["\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1","\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1","\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1","\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1","\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1","\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1","\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0","\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1"]}}');
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var i = t[r2];
      if (i !== void 0) {
        return i.exports;
      }
      var n = t[r2] = { exports: {} };
      var s = true;
      try {
        e[r2](n, n.exports, __nccwpck_require__);
        s = false;
      } finally {
        if (s)
          delete t[r2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(942);
    module2.exports = r;
  })();
});
var require_glob = __commonJSMin((exports, module2) => {
  (() => {
    var t = { 155: (t2) => {
      "use strict";
      t2.exports = balanced;
      function balanced(t3, e2, r2) {
        if (t3 instanceof RegExp)
          t3 = maybeMatch(t3, r2);
        if (e2 instanceof RegExp)
          e2 = maybeMatch(e2, r2);
        var i = range(t3, e2, r2);
        return i && { start: i[0], end: i[1], pre: r2.slice(0, i[0]), body: r2.slice(i[0] + t3.length, i[1]), post: r2.slice(i[1] + e2.length) };
      }
      function maybeMatch(t3, e2) {
        var r2 = e2.match(t3);
        return r2 ? r2[0] : null;
      }
      balanced.range = range;
      function range(t3, e2, r2) {
        var i, a, n, s, o;
        var c = r2.indexOf(t3);
        var h = r2.indexOf(e2, c + 1);
        var l = c;
        if (c >= 0 && h > 0) {
          if (t3 === e2) {
            return [c, h];
          }
          i = [];
          n = r2.length;
          while (l >= 0 && !o) {
            if (l == c) {
              i.push(l);
              c = r2.indexOf(t3, l + 1);
            } else if (i.length == 1) {
              o = [i.pop(), h];
            } else {
              a = i.pop();
              if (a < n) {
                n = a;
                s = h;
              }
              h = r2.indexOf(e2, l + 1);
            }
            l = c < h && c >= 0 ? c : h;
          }
          if (i.length) {
            o = [n, s];
          }
        }
        return o;
      }
    }, 847: (t2, e2, r2) => {
      var i = r2(62);
      var a = r2(155);
      t2.exports = expandTop;
      var n = "\0SLASH" + Math.random() + "\0";
      var s = "\0OPEN" + Math.random() + "\0";
      var o = "\0CLOSE" + Math.random() + "\0";
      var c = "\0COMMA" + Math.random() + "\0";
      var h = "\0PERIOD" + Math.random() + "\0";
      function numeric(t3) {
        return parseInt(t3, 10) == t3 ? parseInt(t3, 10) : t3.charCodeAt(0);
      }
      function escapeBraces(t3) {
        return t3.split("\\\\").join(n).split("\\{").join(s).split("\\}").join(o).split("\\,").join(c).split("\\.").join(h);
      }
      function unescapeBraces(t3) {
        return t3.split(n).join("\\").split(s).join("{").split(o).join("}").split(c).join(",").split(h).join(".");
      }
      function parseCommaParts(t3) {
        if (!t3)
          return [""];
        var e3 = [];
        var r3 = a("{", "}", t3);
        if (!r3)
          return t3.split(",");
        var i2 = r3.pre;
        var n2 = r3.body;
        var s2 = r3.post;
        var o2 = i2.split(",");
        o2[o2.length - 1] += "{" + n2 + "}";
        var c2 = parseCommaParts(s2);
        if (s2.length) {
          o2[o2.length - 1] += c2.shift();
          o2.push.apply(o2, c2);
        }
        e3.push.apply(e3, o2);
        return e3;
      }
      function expandTop(t3) {
        if (!t3)
          return [];
        if (t3.substr(0, 2) === "{}") {
          t3 = "\\{\\}" + t3.substr(2);
        }
        return expand2(escapeBraces(t3), true).map(unescapeBraces);
      }
      function identity(t3) {
        return t3;
      }
      function embrace(t3) {
        return "{" + t3 + "}";
      }
      function isPadded(t3) {
        return /^-?0\d/.test(t3);
      }
      function lte(t3, e3) {
        return t3 <= e3;
      }
      function gte(t3, e3) {
        return t3 >= e3;
      }
      function expand2(t3, e3) {
        var r3 = [];
        var n2 = a("{", "}", t3);
        if (!n2 || /\$$/.test(n2.pre))
          return [t3];
        var s2 = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(n2.body);
        var c2 = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(n2.body);
        var h2 = s2 || c2;
        var l = n2.body.indexOf(",") >= 0;
        if (!h2 && !l) {
          if (n2.post.match(/,.*\}/)) {
            t3 = n2.pre + "{" + n2.body + o + n2.post;
            return expand2(t3);
          }
          return [t3];
        }
        var u;
        if (h2) {
          u = n2.body.split(/\.\./);
        } else {
          u = parseCommaParts(n2.body);
          if (u.length === 1) {
            u = expand2(u[0], false).map(embrace);
            if (u.length === 1) {
              var p = n2.post.length ? expand2(n2.post, false) : [""];
              return p.map(function(t4) {
                return n2.pre + u[0] + t4;
              });
            }
          }
        }
        var v = n2.pre;
        var p = n2.post.length ? expand2(n2.post, false) : [""];
        var d;
        if (h2) {
          var m = numeric(u[0]);
          var b = numeric(u[1]);
          var g = Math.max(u[0].length, u[1].length);
          var y = u.length == 3 ? Math.abs(numeric(u[2])) : 1;
          var _ = lte;
          var w = b < m;
          if (w) {
            y *= -1;
            _ = gte;
          }
          var k = u.some(isPadded);
          d = [];
          for (var S = m; _(S, b); S += y) {
            var E;
            if (c2) {
              E = String.fromCharCode(S);
              if (E === "\\")
                E = "";
            } else {
              E = String(S);
              if (k) {
                var O = g - E.length;
                if (O > 0) {
                  var x = new Array(O + 1).join("0");
                  if (S < 0)
                    E = "-" + x + E.slice(1);
                  else
                    E = x + E;
                }
              }
            }
            d.push(E);
          }
        } else {
          d = i(u, function(t4) {
            return expand2(t4, false);
          });
        }
        for (var A = 0; A < d.length; A++) {
          for (var G = 0; G < p.length; G++) {
            var j = v + d[A] + p[G];
            if (!e3 || h2 || j)
              r3.push(j);
          }
        }
        return r3;
      }
    }, 62: (t2) => {
      t2.exports = function(t3, r2) {
        var i = [];
        for (var a = 0; a < t3.length; a++) {
          var n = r2(t3[a], a);
          if (e2(n))
            i.push.apply(i, n);
          else
            i.push(n);
        }
        return i;
      };
      var e2 = Array.isArray || function(t3) {
        return Object.prototype.toString.call(t3) === "[object Array]";
      };
    }, 737: (t2, e2, r2) => {
      t2.exports = realpath;
      realpath.realpath = realpath;
      realpath.sync = realpathSync;
      realpath.realpathSync = realpathSync;
      realpath.monkeypatch = monkeypatch;
      realpath.unmonkeypatch = unmonkeypatch;
      var i = r2(147);
      var a = i.realpath;
      var n = i.realpathSync;
      var s = process.version;
      var o = /^v[0-5]\./.test(s);
      var c = r2(613);
      function newError(t3) {
        return t3 && t3.syscall === "realpath" && (t3.code === "ELOOP" || t3.code === "ENOMEM" || t3.code === "ENAMETOOLONG");
      }
      function realpath(t3, e3, r3) {
        if (o) {
          return a(t3, e3, r3);
        }
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
        }
        a(t3, e3, function(i2, a2) {
          if (newError(i2)) {
            c.realpath(t3, e3, r3);
          } else {
            r3(i2, a2);
          }
        });
      }
      function realpathSync(t3, e3) {
        if (o) {
          return n(t3, e3);
        }
        try {
          return n(t3, e3);
        } catch (r3) {
          if (newError(r3)) {
            return c.realpathSync(t3, e3);
          } else {
            throw r3;
          }
        }
      }
      function monkeypatch() {
        i.realpath = realpath;
        i.realpathSync = realpathSync;
      }
      function unmonkeypatch() {
        i.realpath = a;
        i.realpathSync = n;
      }
    }, 613: (t2, e2, r2) => {
      var i = r2(17);
      var a = process.platform === "win32";
      var n = r2(147);
      var s = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
      function rethrow() {
        var t3;
        if (s) {
          var e3 = new Error();
          t3 = debugCallback;
        } else
          t3 = missingCallback;
        return t3;
        function debugCallback(t4) {
          if (t4) {
            e3.message = t4.message;
            t4 = e3;
            missingCallback(t4);
          }
        }
        function missingCallback(t4) {
          if (t4) {
            if (process.throwDeprecation)
              throw t4;
            else if (!process.noDeprecation) {
              var e4 = "fs: missing callback " + (t4.stack || t4.message);
              if (process.traceDeprecation)
                console.trace(e4);
              else
                console.error(e4);
            }
          }
        }
      }
      function maybeCallback(t3) {
        return typeof t3 === "function" ? t3 : rethrow();
      }
      var o = i.normalize;
      if (a) {
        var c = /(.*?)(?:[\/\\]+|$)/g;
      } else {
        var c = /(.*?)(?:[\/]+|$)/g;
      }
      if (a) {
        var h = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
      } else {
        var h = /^[\/]*/;
      }
      e2.realpathSync = function realpathSync(t3, e3) {
        t3 = i.resolve(t3);
        if (e3 && Object.prototype.hasOwnProperty.call(e3, t3)) {
          return e3[t3];
        }
        var r3 = t3, s2 = {}, o2 = {};
        var l;
        var u;
        var p;
        var v;
        start();
        function start() {
          var e4 = h.exec(t3);
          l = e4[0].length;
          u = e4[0];
          p = e4[0];
          v = "";
          if (a && !o2[p]) {
            n.lstatSync(p);
            o2[p] = true;
          }
        }
        while (l < t3.length) {
          c.lastIndex = l;
          var d = c.exec(t3);
          v = u;
          u += d[0];
          p = v + d[1];
          l = c.lastIndex;
          if (o2[p] || e3 && e3[p] === p) {
            continue;
          }
          var m;
          if (e3 && Object.prototype.hasOwnProperty.call(e3, p)) {
            m = e3[p];
          } else {
            var b = n.lstatSync(p);
            if (!b.isSymbolicLink()) {
              o2[p] = true;
              if (e3)
                e3[p] = p;
              continue;
            }
            var g = null;
            if (!a) {
              var y = b.dev.toString(32) + ":" + b.ino.toString(32);
              if (s2.hasOwnProperty(y)) {
                g = s2[y];
              }
            }
            if (g === null) {
              n.statSync(p);
              g = n.readlinkSync(p);
            }
            m = i.resolve(v, g);
            if (e3)
              e3[p] = m;
            if (!a)
              s2[y] = g;
          }
          t3 = i.resolve(m, t3.slice(l));
          start();
        }
        if (e3)
          e3[r3] = t3;
        return t3;
      };
      e2.realpath = function realpath(t3, e3, r3) {
        if (typeof r3 !== "function") {
          r3 = maybeCallback(e3);
          e3 = null;
        }
        t3 = i.resolve(t3);
        if (e3 && Object.prototype.hasOwnProperty.call(e3, t3)) {
          return process.nextTick(r3.bind(null, null, e3[t3]));
        }
        var s2 = t3, o2 = {}, l = {};
        var u;
        var p;
        var v;
        var d;
        start();
        function start() {
          var e4 = h.exec(t3);
          u = e4[0].length;
          p = e4[0];
          v = e4[0];
          d = "";
          if (a && !l[v]) {
            n.lstat(v, function(t4) {
              if (t4)
                return r3(t4);
              l[v] = true;
              LOOP();
            });
          } else {
            process.nextTick(LOOP);
          }
        }
        function LOOP() {
          if (u >= t3.length) {
            if (e3)
              e3[s2] = t3;
            return r3(null, t3);
          }
          c.lastIndex = u;
          var i2 = c.exec(t3);
          d = p;
          p += i2[0];
          v = d + i2[1];
          u = c.lastIndex;
          if (l[v] || e3 && e3[v] === v) {
            return process.nextTick(LOOP);
          }
          if (e3 && Object.prototype.hasOwnProperty.call(e3, v)) {
            return gotResolvedLink(e3[v]);
          }
          return n.lstat(v, gotStat);
        }
        function gotStat(t4, i2) {
          if (t4)
            return r3(t4);
          if (!i2.isSymbolicLink()) {
            l[v] = true;
            if (e3)
              e3[v] = v;
            return process.nextTick(LOOP);
          }
          if (!a) {
            var s3 = i2.dev.toString(32) + ":" + i2.ino.toString(32);
            if (o2.hasOwnProperty(s3)) {
              return gotTarget(null, o2[s3], v);
            }
          }
          n.stat(v, function(t5) {
            if (t5)
              return r3(t5);
            n.readlink(v, function(t6, e4) {
              if (!a)
                o2[s3] = e4;
              gotTarget(t6, e4);
            });
          });
        }
        function gotTarget(t4, a2, n2) {
          if (t4)
            return r3(t4);
          var s3 = i.resolve(d, a2);
          if (e3)
            e3[n2] = s3;
          gotResolvedLink(s3);
        }
        function gotResolvedLink(e4) {
          t3 = i.resolve(e4, t3.slice(u));
          start();
        }
      };
    }, 875: (t2, e2, r2) => {
      e2.setopts = setopts;
      e2.ownProp = ownProp;
      e2.makeAbs = makeAbs;
      e2.finish = finish;
      e2.mark = mark;
      e2.isIgnored = isIgnored;
      e2.childrenIgnored = childrenIgnored;
      function ownProp(t3, e3) {
        return Object.prototype.hasOwnProperty.call(t3, e3);
      }
      var i = r2(147);
      var a = r2(17);
      var n = r2(435);
      var s = r2(249);
      var o = n.Minimatch;
      function alphasort(t3, e3) {
        return t3.localeCompare(e3, "en");
      }
      function setupIgnores(t3, e3) {
        t3.ignore = e3.ignore || [];
        if (!Array.isArray(t3.ignore))
          t3.ignore = [t3.ignore];
        if (t3.ignore.length) {
          t3.ignore = t3.ignore.map(ignoreMap);
        }
      }
      function ignoreMap(t3) {
        var e3 = null;
        if (t3.slice(-3) === "/**") {
          var r3 = t3.replace(/(\/\*\*)+$/, "");
          e3 = new o(r3, { dot: true });
        }
        return { matcher: new o(t3, { dot: true }), gmatcher: e3 };
      }
      function setopts(t3, e3, r3) {
        if (!r3)
          r3 = {};
        if (r3.matchBase && e3.indexOf("/") === -1) {
          if (r3.noglobstar) {
            throw new Error("base matching requires globstar");
          }
          e3 = "**/" + e3;
        }
        t3.silent = !!r3.silent;
        t3.pattern = e3;
        t3.strict = r3.strict !== false;
        t3.realpath = !!r3.realpath;
        t3.realpathCache = r3.realpathCache || /* @__PURE__ */ Object.create(null);
        t3.follow = !!r3.follow;
        t3.dot = !!r3.dot;
        t3.mark = !!r3.mark;
        t3.nodir = !!r3.nodir;
        if (t3.nodir)
          t3.mark = true;
        t3.sync = !!r3.sync;
        t3.nounique = !!r3.nounique;
        t3.nonull = !!r3.nonull;
        t3.nosort = !!r3.nosort;
        t3.nocase = !!r3.nocase;
        t3.stat = !!r3.stat;
        t3.noprocess = !!r3.noprocess;
        t3.absolute = !!r3.absolute;
        t3.fs = r3.fs || i;
        t3.maxLength = r3.maxLength || Infinity;
        t3.cache = r3.cache || /* @__PURE__ */ Object.create(null);
        t3.statCache = r3.statCache || /* @__PURE__ */ Object.create(null);
        t3.symlinks = r3.symlinks || /* @__PURE__ */ Object.create(null);
        setupIgnores(t3, r3);
        t3.changedCwd = false;
        var n2 = process.cwd();
        if (!ownProp(r3, "cwd"))
          t3.cwd = n2;
        else {
          t3.cwd = a.resolve(r3.cwd);
          t3.changedCwd = t3.cwd !== n2;
        }
        t3.root = r3.root || a.resolve(t3.cwd, "/");
        t3.root = a.resolve(t3.root);
        if (process.platform === "win32")
          t3.root = t3.root.replace(/\\/g, "/");
        t3.cwdAbs = s(t3.cwd) ? t3.cwd : makeAbs(t3, t3.cwd);
        if (process.platform === "win32")
          t3.cwdAbs = t3.cwdAbs.replace(/\\/g, "/");
        t3.nomount = !!r3.nomount;
        r3.nonegate = true;
        r3.nocomment = true;
        t3.minimatch = new o(e3, r3);
        t3.options = t3.minimatch.options;
      }
      function finish(t3) {
        var e3 = t3.nounique;
        var r3 = e3 ? [] : /* @__PURE__ */ Object.create(null);
        for (var i2 = 0, a2 = t3.matches.length; i2 < a2; i2++) {
          var n2 = t3.matches[i2];
          if (!n2 || Object.keys(n2).length === 0) {
            if (t3.nonull) {
              var s2 = t3.minimatch.globSet[i2];
              if (e3)
                r3.push(s2);
              else
                r3[s2] = true;
            }
          } else {
            var o2 = Object.keys(n2);
            if (e3)
              r3.push.apply(r3, o2);
            else
              o2.forEach(function(t4) {
                r3[t4] = true;
              });
          }
        }
        if (!e3)
          r3 = Object.keys(r3);
        if (!t3.nosort)
          r3 = r3.sort(alphasort);
        if (t3.mark) {
          for (var i2 = 0; i2 < r3.length; i2++) {
            r3[i2] = t3._mark(r3[i2]);
          }
          if (t3.nodir) {
            r3 = r3.filter(function(e4) {
              var r4 = !/\/$/.test(e4);
              var i3 = t3.cache[e4] || t3.cache[makeAbs(t3, e4)];
              if (r4 && i3)
                r4 = i3 !== "DIR" && !Array.isArray(i3);
              return r4;
            });
          }
        }
        if (t3.ignore.length)
          r3 = r3.filter(function(e4) {
            return !isIgnored(t3, e4);
          });
        t3.found = r3;
      }
      function mark(t3, e3) {
        var r3 = makeAbs(t3, e3);
        var i2 = t3.cache[r3];
        var a2 = e3;
        if (i2) {
          var n2 = i2 === "DIR" || Array.isArray(i2);
          var s2 = e3.slice(-1) === "/";
          if (n2 && !s2)
            a2 += "/";
          else if (!n2 && s2)
            a2 = a2.slice(0, -1);
          if (a2 !== e3) {
            var o2 = makeAbs(t3, a2);
            t3.statCache[o2] = t3.statCache[r3];
            t3.cache[o2] = t3.cache[r3];
          }
        }
        return a2;
      }
      function makeAbs(t3, e3) {
        var r3 = e3;
        if (e3.charAt(0) === "/") {
          r3 = a.join(t3.root, e3);
        } else if (s(e3) || e3 === "") {
          r3 = e3;
        } else if (t3.changedCwd) {
          r3 = a.resolve(t3.cwd, e3);
        } else {
          r3 = a.resolve(e3);
        }
        if (process.platform === "win32")
          r3 = r3.replace(/\\/g, "/");
        return r3;
      }
      function isIgnored(t3, e3) {
        if (!t3.ignore.length)
          return false;
        return t3.ignore.some(function(t4) {
          return t4.matcher.match(e3) || !!(t4.gmatcher && t4.gmatcher.match(e3));
        });
      }
      function childrenIgnored(t3, e3) {
        if (!t3.ignore.length)
          return false;
        return t3.ignore.some(function(t4) {
          return !!(t4.gmatcher && t4.gmatcher.match(e3));
        });
      }
    }, 978: (t2, e2, r2) => {
      t2.exports = glob;
      var i = r2(737);
      var a = r2(435);
      var n = a.Minimatch;
      var s = r2(315);
      var o = r2(361).EventEmitter;
      var c = r2(17);
      var h = r2(491);
      var l = r2(249);
      var u = r2(19);
      var p = r2(875);
      var v = p.setopts;
      var d = p.ownProp;
      var m = r2(900);
      var b = r2(837);
      var g = p.childrenIgnored;
      var y = p.isIgnored;
      var _ = r2(556);
      function glob(t3, e3, r3) {
        if (typeof e3 === "function")
          r3 = e3, e3 = {};
        if (!e3)
          e3 = {};
        if (e3.sync) {
          if (r3)
            throw new TypeError("callback provided to sync glob");
          return u(t3, e3);
        }
        return new Glob(t3, e3, r3);
      }
      glob.sync = u;
      var w = glob.GlobSync = u.GlobSync;
      glob.glob = glob;
      function extend(t3, e3) {
        if (e3 === null || typeof e3 !== "object") {
          return t3;
        }
        var r3 = Object.keys(e3);
        var i2 = r3.length;
        while (i2--) {
          t3[r3[i2]] = e3[r3[i2]];
        }
        return t3;
      }
      glob.hasMagic = function(t3, e3) {
        var r3 = extend({}, e3);
        r3.noprocess = true;
        var i2 = new Glob(t3, r3);
        var a2 = i2.minimatch.set;
        if (!t3)
          return false;
        if (a2.length > 1)
          return true;
        for (var n2 = 0; n2 < a2[0].length; n2++) {
          if (typeof a2[0][n2] !== "string")
            return true;
        }
        return false;
      };
      glob.Glob = Glob;
      s(Glob, o);
      function Glob(t3, e3, r3) {
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
        }
        if (e3 && e3.sync) {
          if (r3)
            throw new TypeError("callback provided to sync glob");
          return new w(t3, e3);
        }
        if (!(this instanceof Glob))
          return new Glob(t3, e3, r3);
        v(this, t3, e3);
        this._didRealPath = false;
        var i2 = this.minimatch.set.length;
        this.matches = new Array(i2);
        if (typeof r3 === "function") {
          r3 = _(r3);
          this.on("error", r3);
          this.on("end", function(t4) {
            r3(null, t4);
          });
        }
        var a2 = this;
        this._processing = 0;
        this._emitQueue = [];
        this._processQueue = [];
        this.paused = false;
        if (this.noprocess)
          return this;
        if (i2 === 0)
          return done();
        var n2 = true;
        for (var s2 = 0; s2 < i2; s2++) {
          this._process(this.minimatch.set[s2], s2, false, done);
        }
        n2 = false;
        function done() {
          --a2._processing;
          if (a2._processing <= 0) {
            if (n2) {
              process.nextTick(function() {
                a2._finish();
              });
            } else {
              a2._finish();
            }
          }
        }
      }
      Glob.prototype._finish = function() {
        h(this instanceof Glob);
        if (this.aborted)
          return;
        if (this.realpath && !this._didRealpath)
          return this._realpath();
        p.finish(this);
        this.emit("end", this.found);
      };
      Glob.prototype._realpath = function() {
        if (this._didRealpath)
          return;
        this._didRealpath = true;
        var t3 = this.matches.length;
        if (t3 === 0)
          return this._finish();
        var e3 = this;
        for (var r3 = 0; r3 < this.matches.length; r3++)
          this._realpathSet(r3, next);
        function next() {
          if (--t3 === 0)
            e3._finish();
        }
      };
      Glob.prototype._realpathSet = function(t3, e3) {
        var r3 = this.matches[t3];
        if (!r3)
          return e3();
        var a2 = Object.keys(r3);
        var n2 = this;
        var s2 = a2.length;
        if (s2 === 0)
          return e3();
        var o2 = this.matches[t3] = /* @__PURE__ */ Object.create(null);
        a2.forEach(function(r4, a3) {
          r4 = n2._makeAbs(r4);
          i.realpath(r4, n2.realpathCache, function(i2, a4) {
            if (!i2)
              o2[a4] = true;
            else if (i2.syscall === "stat")
              o2[r4] = true;
            else
              n2.emit("error", i2);
            if (--s2 === 0) {
              n2.matches[t3] = o2;
              e3();
            }
          });
        });
      };
      Glob.prototype._mark = function(t3) {
        return p.mark(this, t3);
      };
      Glob.prototype._makeAbs = function(t3) {
        return p.makeAbs(this, t3);
      };
      Glob.prototype.abort = function() {
        this.aborted = true;
        this.emit("abort");
      };
      Glob.prototype.pause = function() {
        if (!this.paused) {
          this.paused = true;
          this.emit("pause");
        }
      };
      Glob.prototype.resume = function() {
        if (this.paused) {
          this.emit("resume");
          this.paused = false;
          if (this._emitQueue.length) {
            var t3 = this._emitQueue.slice(0);
            this._emitQueue.length = 0;
            for (var e3 = 0; e3 < t3.length; e3++) {
              var r3 = t3[e3];
              this._emitMatch(r3[0], r3[1]);
            }
          }
          if (this._processQueue.length) {
            var i2 = this._processQueue.slice(0);
            this._processQueue.length = 0;
            for (var e3 = 0; e3 < i2.length; e3++) {
              var a2 = i2[e3];
              this._processing--;
              this._process(a2[0], a2[1], a2[2], a2[3]);
            }
          }
        }
      };
      Glob.prototype._process = function(t3, e3, r3, i2) {
        h(this instanceof Glob);
        h(typeof i2 === "function");
        if (this.aborted)
          return;
        this._processing++;
        if (this.paused) {
          this._processQueue.push([t3, e3, r3, i2]);
          return;
        }
        var n2 = 0;
        while (typeof t3[n2] === "string") {
          n2++;
        }
        var s2;
        switch (n2) {
          case t3.length:
            this._processSimple(t3.join("/"), e3, i2);
            return;
          case 0:
            s2 = null;
            break;
          default:
            s2 = t3.slice(0, n2).join("/");
            break;
        }
        var o2 = t3.slice(n2);
        var c2;
        if (s2 === null)
          c2 = ".";
        else if (l(s2) || l(t3.join("/"))) {
          if (!s2 || !l(s2))
            s2 = "/" + s2;
          c2 = s2;
        } else
          c2 = s2;
        var u2 = this._makeAbs(c2);
        if (g(this, c2))
          return i2();
        var p2 = o2[0] === a.GLOBSTAR;
        if (p2)
          this._processGlobStar(s2, c2, u2, o2, e3, r3, i2);
        else
          this._processReaddir(s2, c2, u2, o2, e3, r3, i2);
      };
      Glob.prototype._processReaddir = function(t3, e3, r3, i2, a2, n2, s2) {
        var o2 = this;
        this._readdir(r3, n2, function(c2, h2) {
          return o2._processReaddir2(t3, e3, r3, i2, a2, n2, h2, s2);
        });
      };
      Glob.prototype._processReaddir2 = function(t3, e3, r3, i2, a2, n2, s2, o2) {
        if (!s2)
          return o2();
        var h2 = i2[0];
        var l2 = !!this.minimatch.negate;
        var u2 = h2._glob;
        var p2 = this.dot || u2.charAt(0) === ".";
        var v2 = [];
        for (var d2 = 0; d2 < s2.length; d2++) {
          var m2 = s2[d2];
          if (m2.charAt(0) !== "." || p2) {
            var b2;
            if (l2 && !t3) {
              b2 = !m2.match(h2);
            } else {
              b2 = m2.match(h2);
            }
            if (b2)
              v2.push(m2);
          }
        }
        var g2 = v2.length;
        if (g2 === 0)
          return o2();
        if (i2.length === 1 && !this.mark && !this.stat) {
          if (!this.matches[a2])
            this.matches[a2] = /* @__PURE__ */ Object.create(null);
          for (var d2 = 0; d2 < g2; d2++) {
            var m2 = v2[d2];
            if (t3) {
              if (t3 !== "/")
                m2 = t3 + "/" + m2;
              else
                m2 = t3 + m2;
            }
            if (m2.charAt(0) === "/" && !this.nomount) {
              m2 = c.join(this.root, m2);
            }
            this._emitMatch(a2, m2);
          }
          return o2();
        }
        i2.shift();
        for (var d2 = 0; d2 < g2; d2++) {
          var m2 = v2[d2];
          var y2;
          if (t3) {
            if (t3 !== "/")
              m2 = t3 + "/" + m2;
            else
              m2 = t3 + m2;
          }
          this._process([m2].concat(i2), a2, n2, o2);
        }
        o2();
      };
      Glob.prototype._emitMatch = function(t3, e3) {
        if (this.aborted)
          return;
        if (y(this, e3))
          return;
        if (this.paused) {
          this._emitQueue.push([t3, e3]);
          return;
        }
        var r3 = l(e3) ? e3 : this._makeAbs(e3);
        if (this.mark)
          e3 = this._mark(e3);
        if (this.absolute)
          e3 = r3;
        if (this.matches[t3][e3])
          return;
        if (this.nodir) {
          var i2 = this.cache[r3];
          if (i2 === "DIR" || Array.isArray(i2))
            return;
        }
        this.matches[t3][e3] = true;
        var a2 = this.statCache[r3];
        if (a2)
          this.emit("stat", e3, a2);
        this.emit("match", e3);
      };
      Glob.prototype._readdirInGlobStar = function(t3, e3) {
        if (this.aborted)
          return;
        if (this.follow)
          return this._readdir(t3, false, e3);
        var r3 = "lstat\0" + t3;
        var i2 = this;
        var a2 = m(r3, lstatcb_);
        if (a2)
          i2.fs.lstat(t3, a2);
        function lstatcb_(r4, a3) {
          if (r4 && r4.code === "ENOENT")
            return e3();
          var n2 = a3 && a3.isSymbolicLink();
          i2.symlinks[t3] = n2;
          if (!n2 && a3 && !a3.isDirectory()) {
            i2.cache[t3] = "FILE";
            e3();
          } else
            i2._readdir(t3, false, e3);
        }
      };
      Glob.prototype._readdir = function(t3, e3, r3) {
        if (this.aborted)
          return;
        r3 = m("readdir\0" + t3 + "\0" + e3, r3);
        if (!r3)
          return;
        if (e3 && !d(this.symlinks, t3))
          return this._readdirInGlobStar(t3, r3);
        if (d(this.cache, t3)) {
          var i2 = this.cache[t3];
          if (!i2 || i2 === "FILE")
            return r3();
          if (Array.isArray(i2))
            return r3(null, i2);
        }
        var a2 = this;
        a2.fs.readdir(t3, readdirCb(this, t3, r3));
      };
      function readdirCb(t3, e3, r3) {
        return function(i2, a2) {
          if (i2)
            t3._readdirError(e3, i2, r3);
          else
            t3._readdirEntries(e3, a2, r3);
        };
      }
      Glob.prototype._readdirEntries = function(t3, e3, r3) {
        if (this.aborted)
          return;
        if (!this.mark && !this.stat) {
          for (var i2 = 0; i2 < e3.length; i2++) {
            var a2 = e3[i2];
            if (t3 === "/")
              a2 = t3 + a2;
            else
              a2 = t3 + "/" + a2;
            this.cache[a2] = true;
          }
        }
        this.cache[t3] = e3;
        return r3(null, e3);
      };
      Glob.prototype._readdirError = function(t3, e3, r3) {
        if (this.aborted)
          return;
        switch (e3.code) {
          case "ENOTSUP":
          case "ENOTDIR":
            var i2 = this._makeAbs(t3);
            this.cache[i2] = "FILE";
            if (i2 === this.cwdAbs) {
              var a2 = new Error(e3.code + " invalid cwd " + this.cwd);
              a2.path = this.cwd;
              a2.code = e3.code;
              this.emit("error", a2);
              this.abort();
            }
            break;
          case "ENOENT":
          case "ELOOP":
          case "ENAMETOOLONG":
          case "UNKNOWN":
            this.cache[this._makeAbs(t3)] = false;
            break;
          default:
            this.cache[this._makeAbs(t3)] = false;
            if (this.strict) {
              this.emit("error", e3);
              this.abort();
            }
            if (!this.silent)
              console.error("glob error", e3);
            break;
        }
        return r3();
      };
      Glob.prototype._processGlobStar = function(t3, e3, r3, i2, a2, n2, s2) {
        var o2 = this;
        this._readdir(r3, n2, function(c2, h2) {
          o2._processGlobStar2(t3, e3, r3, i2, a2, n2, h2, s2);
        });
      };
      Glob.prototype._processGlobStar2 = function(t3, e3, r3, i2, a2, n2, s2, o2) {
        if (!s2)
          return o2();
        var c2 = i2.slice(1);
        var h2 = t3 ? [t3] : [];
        var l2 = h2.concat(c2);
        this._process(l2, a2, false, o2);
        var u2 = this.symlinks[r3];
        var p2 = s2.length;
        if (u2 && n2)
          return o2();
        for (var v2 = 0; v2 < p2; v2++) {
          var d2 = s2[v2];
          if (d2.charAt(0) === "." && !this.dot)
            continue;
          var m2 = h2.concat(s2[v2], c2);
          this._process(m2, a2, true, o2);
          var b2 = h2.concat(s2[v2], i2);
          this._process(b2, a2, true, o2);
        }
        o2();
      };
      Glob.prototype._processSimple = function(t3, e3, r3) {
        var i2 = this;
        this._stat(t3, function(a2, n2) {
          i2._processSimple2(t3, e3, a2, n2, r3);
        });
      };
      Glob.prototype._processSimple2 = function(t3, e3, r3, i2, a2) {
        if (!this.matches[e3])
          this.matches[e3] = /* @__PURE__ */ Object.create(null);
        if (!i2)
          return a2();
        if (t3 && l(t3) && !this.nomount) {
          var n2 = /[\/\\]$/.test(t3);
          if (t3.charAt(0) === "/") {
            t3 = c.join(this.root, t3);
          } else {
            t3 = c.resolve(this.root, t3);
            if (n2)
              t3 += "/";
          }
        }
        if (process.platform === "win32")
          t3 = t3.replace(/\\/g, "/");
        this._emitMatch(e3, t3);
        a2();
      };
      Glob.prototype._stat = function(t3, e3) {
        var r3 = this._makeAbs(t3);
        var i2 = t3.slice(-1) === "/";
        if (t3.length > this.maxLength)
          return e3();
        if (!this.stat && d(this.cache, r3)) {
          var a2 = this.cache[r3];
          if (Array.isArray(a2))
            a2 = "DIR";
          if (!i2 || a2 === "DIR")
            return e3(null, a2);
          if (i2 && a2 === "FILE")
            return e3();
        }
        var n2;
        var s2 = this.statCache[r3];
        if (s2 !== void 0) {
          if (s2 === false)
            return e3(null, s2);
          else {
            var o2 = s2.isDirectory() ? "DIR" : "FILE";
            if (i2 && o2 === "FILE")
              return e3();
            else
              return e3(null, o2, s2);
          }
        }
        var c2 = this;
        var h2 = m("stat\0" + r3, lstatcb_);
        if (h2)
          c2.fs.lstat(r3, h2);
        function lstatcb_(i3, a3) {
          if (a3 && a3.isSymbolicLink()) {
            return c2.fs.stat(r3, function(i4, n3) {
              if (i4)
                c2._stat2(t3, r3, null, a3, e3);
              else
                c2._stat2(t3, r3, i4, n3, e3);
            });
          } else {
            c2._stat2(t3, r3, i3, a3, e3);
          }
        }
      };
      Glob.prototype._stat2 = function(t3, e3, r3, i2, a2) {
        if (r3 && (r3.code === "ENOENT" || r3.code === "ENOTDIR")) {
          this.statCache[e3] = false;
          return a2();
        }
        var n2 = t3.slice(-1) === "/";
        this.statCache[e3] = i2;
        if (e3.slice(-1) === "/" && i2 && !i2.isDirectory())
          return a2(null, false, i2);
        var s2 = true;
        if (i2)
          s2 = i2.isDirectory() ? "DIR" : "FILE";
        this.cache[e3] = this.cache[e3] || s2;
        if (n2 && s2 === "FILE")
          return a2();
        return a2(null, s2, i2);
      };
    }, 19: (t2, e2, r2) => {
      t2.exports = globSync;
      globSync.GlobSync = GlobSync;
      var i = r2(737);
      var a = r2(435);
      var n = a.Minimatch;
      var s = r2(978).Glob;
      var o = r2(837);
      var c = r2(17);
      var h = r2(491);
      var l = r2(249);
      var u = r2(875);
      var p = u.setopts;
      var v = u.ownProp;
      var d = u.childrenIgnored;
      var m = u.isIgnored;
      function globSync(t3, e3) {
        if (typeof e3 === "function" || arguments.length === 3)
          throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
        return new GlobSync(t3, e3).found;
      }
      function GlobSync(t3, e3) {
        if (!t3)
          throw new Error("must provide pattern");
        if (typeof e3 === "function" || arguments.length === 3)
          throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
        if (!(this instanceof GlobSync))
          return new GlobSync(t3, e3);
        p(this, t3, e3);
        if (this.noprocess)
          return this;
        var r3 = this.minimatch.set.length;
        this.matches = new Array(r3);
        for (var i2 = 0; i2 < r3; i2++) {
          this._process(this.minimatch.set[i2], i2, false);
        }
        this._finish();
      }
      GlobSync.prototype._finish = function() {
        h(this instanceof GlobSync);
        if (this.realpath) {
          var t3 = this;
          this.matches.forEach(function(e3, r3) {
            var a2 = t3.matches[r3] = /* @__PURE__ */ Object.create(null);
            for (var n2 in e3) {
              try {
                n2 = t3._makeAbs(n2);
                var s2 = i.realpathSync(n2, t3.realpathCache);
                a2[s2] = true;
              } catch (e4) {
                if (e4.syscall === "stat")
                  a2[t3._makeAbs(n2)] = true;
                else
                  throw e4;
              }
            }
          });
        }
        u.finish(this);
      };
      GlobSync.prototype._process = function(t3, e3, r3) {
        h(this instanceof GlobSync);
        var i2 = 0;
        while (typeof t3[i2] === "string") {
          i2++;
        }
        var n2;
        switch (i2) {
          case t3.length:
            this._processSimple(t3.join("/"), e3);
            return;
          case 0:
            n2 = null;
            break;
          default:
            n2 = t3.slice(0, i2).join("/");
            break;
        }
        var s2 = t3.slice(i2);
        var o2;
        if (n2 === null)
          o2 = ".";
        else if (l(n2) || l(t3.join("/"))) {
          if (!n2 || !l(n2))
            n2 = "/" + n2;
          o2 = n2;
        } else
          o2 = n2;
        var c2 = this._makeAbs(o2);
        if (d(this, o2))
          return;
        var u2 = s2[0] === a.GLOBSTAR;
        if (u2)
          this._processGlobStar(n2, o2, c2, s2, e3, r3);
        else
          this._processReaddir(n2, o2, c2, s2, e3, r3);
      };
      GlobSync.prototype._processReaddir = function(t3, e3, r3, i2, a2, n2) {
        var s2 = this._readdir(r3, n2);
        if (!s2)
          return;
        var o2 = i2[0];
        var h2 = !!this.minimatch.negate;
        var l2 = o2._glob;
        var u2 = this.dot || l2.charAt(0) === ".";
        var p2 = [];
        for (var v2 = 0; v2 < s2.length; v2++) {
          var d2 = s2[v2];
          if (d2.charAt(0) !== "." || u2) {
            var m2;
            if (h2 && !t3) {
              m2 = !d2.match(o2);
            } else {
              m2 = d2.match(o2);
            }
            if (m2)
              p2.push(d2);
          }
        }
        var b = p2.length;
        if (b === 0)
          return;
        if (i2.length === 1 && !this.mark && !this.stat) {
          if (!this.matches[a2])
            this.matches[a2] = /* @__PURE__ */ Object.create(null);
          for (var v2 = 0; v2 < b; v2++) {
            var d2 = p2[v2];
            if (t3) {
              if (t3.slice(-1) !== "/")
                d2 = t3 + "/" + d2;
              else
                d2 = t3 + d2;
            }
            if (d2.charAt(0) === "/" && !this.nomount) {
              d2 = c.join(this.root, d2);
            }
            this._emitMatch(a2, d2);
          }
          return;
        }
        i2.shift();
        for (var v2 = 0; v2 < b; v2++) {
          var d2 = p2[v2];
          var g;
          if (t3)
            g = [t3, d2];
          else
            g = [d2];
          this._process(g.concat(i2), a2, n2);
        }
      };
      GlobSync.prototype._emitMatch = function(t3, e3) {
        if (m(this, e3))
          return;
        var r3 = this._makeAbs(e3);
        if (this.mark)
          e3 = this._mark(e3);
        if (this.absolute) {
          e3 = r3;
        }
        if (this.matches[t3][e3])
          return;
        if (this.nodir) {
          var i2 = this.cache[r3];
          if (i2 === "DIR" || Array.isArray(i2))
            return;
        }
        this.matches[t3][e3] = true;
        if (this.stat)
          this._stat(e3);
      };
      GlobSync.prototype._readdirInGlobStar = function(t3) {
        if (this.follow)
          return this._readdir(t3, false);
        var e3;
        var r3;
        var i2;
        try {
          r3 = this.fs.lstatSync(t3);
        } catch (t4) {
          if (t4.code === "ENOENT") {
            return null;
          }
        }
        var a2 = r3 && r3.isSymbolicLink();
        this.symlinks[t3] = a2;
        if (!a2 && r3 && !r3.isDirectory())
          this.cache[t3] = "FILE";
        else
          e3 = this._readdir(t3, false);
        return e3;
      };
      GlobSync.prototype._readdir = function(t3, e3) {
        var r3;
        if (e3 && !v(this.symlinks, t3))
          return this._readdirInGlobStar(t3);
        if (v(this.cache, t3)) {
          var i2 = this.cache[t3];
          if (!i2 || i2 === "FILE")
            return null;
          if (Array.isArray(i2))
            return i2;
        }
        try {
          return this._readdirEntries(t3, this.fs.readdirSync(t3));
        } catch (e4) {
          this._readdirError(t3, e4);
          return null;
        }
      };
      GlobSync.prototype._readdirEntries = function(t3, e3) {
        if (!this.mark && !this.stat) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var i2 = e3[r3];
            if (t3 === "/")
              i2 = t3 + i2;
            else
              i2 = t3 + "/" + i2;
            this.cache[i2] = true;
          }
        }
        this.cache[t3] = e3;
        return e3;
      };
      GlobSync.prototype._readdirError = function(t3, e3) {
        switch (e3.code) {
          case "ENOTSUP":
          case "ENOTDIR":
            var r3 = this._makeAbs(t3);
            this.cache[r3] = "FILE";
            if (r3 === this.cwdAbs) {
              var i2 = new Error(e3.code + " invalid cwd " + this.cwd);
              i2.path = this.cwd;
              i2.code = e3.code;
              throw i2;
            }
            break;
          case "ENOENT":
          case "ELOOP":
          case "ENAMETOOLONG":
          case "UNKNOWN":
            this.cache[this._makeAbs(t3)] = false;
            break;
          default:
            this.cache[this._makeAbs(t3)] = false;
            if (this.strict)
              throw e3;
            if (!this.silent)
              console.error("glob error", e3);
            break;
        }
      };
      GlobSync.prototype._processGlobStar = function(t3, e3, r3, i2, a2, n2) {
        var s2 = this._readdir(r3, n2);
        if (!s2)
          return;
        var o2 = i2.slice(1);
        var c2 = t3 ? [t3] : [];
        var h2 = c2.concat(o2);
        this._process(h2, a2, false);
        var l2 = s2.length;
        var u2 = this.symlinks[r3];
        if (u2 && n2)
          return;
        for (var p2 = 0; p2 < l2; p2++) {
          var v2 = s2[p2];
          if (v2.charAt(0) === "." && !this.dot)
            continue;
          var d2 = c2.concat(s2[p2], o2);
          this._process(d2, a2, true);
          var m2 = c2.concat(s2[p2], i2);
          this._process(m2, a2, true);
        }
      };
      GlobSync.prototype._processSimple = function(t3, e3) {
        var r3 = this._stat(t3);
        if (!this.matches[e3])
          this.matches[e3] = /* @__PURE__ */ Object.create(null);
        if (!r3)
          return;
        if (t3 && l(t3) && !this.nomount) {
          var i2 = /[\/\\]$/.test(t3);
          if (t3.charAt(0) === "/") {
            t3 = c.join(this.root, t3);
          } else {
            t3 = c.resolve(this.root, t3);
            if (i2)
              t3 += "/";
          }
        }
        if (process.platform === "win32")
          t3 = t3.replace(/\\/g, "/");
        this._emitMatch(e3, t3);
      };
      GlobSync.prototype._stat = function(t3) {
        var e3 = this._makeAbs(t3);
        var r3 = t3.slice(-1) === "/";
        if (t3.length > this.maxLength)
          return false;
        if (!this.stat && v(this.cache, e3)) {
          var i2 = this.cache[e3];
          if (Array.isArray(i2))
            i2 = "DIR";
          if (!r3 || i2 === "DIR")
            return i2;
          if (r3 && i2 === "FILE")
            return false;
        }
        var a2;
        var n2 = this.statCache[e3];
        if (!n2) {
          var s2;
          try {
            s2 = this.fs.lstatSync(e3);
          } catch (t4) {
            if (t4 && (t4.code === "ENOENT" || t4.code === "ENOTDIR")) {
              this.statCache[e3] = false;
              return false;
            }
          }
          if (s2 && s2.isSymbolicLink()) {
            try {
              n2 = this.fs.statSync(e3);
            } catch (t4) {
              n2 = s2;
            }
          } else {
            n2 = s2;
          }
        }
        this.statCache[e3] = n2;
        var i2 = true;
        if (n2)
          i2 = n2.isDirectory() ? "DIR" : "FILE";
        this.cache[e3] = this.cache[e3] || i2;
        if (r3 && i2 === "FILE")
          return false;
        return i2;
      };
      GlobSync.prototype._mark = function(t3) {
        return u.mark(this, t3);
      };
      GlobSync.prototype._makeAbs = function(t3) {
        return u.makeAbs(this, t3);
      };
    }, 900: (t2, e2, r2) => {
      var i = r2(928);
      var a = /* @__PURE__ */ Object.create(null);
      var n = r2(556);
      t2.exports = i(inflight);
      function inflight(t3, e3) {
        if (a[t3]) {
          a[t3].push(e3);
          return null;
        } else {
          a[t3] = [e3];
          return makeres(t3);
        }
      }
      function makeres(t3) {
        return n(function RES() {
          var e3 = a[t3];
          var r3 = e3.length;
          var i2 = slice(arguments);
          try {
            for (var n2 = 0; n2 < r3; n2++) {
              e3[n2].apply(null, i2);
            }
          } finally {
            if (e3.length > r3) {
              e3.splice(0, r3);
              process.nextTick(function() {
                RES.apply(null, i2);
              });
            } else {
              delete a[t3];
            }
          }
        });
      }
      function slice(t3) {
        var e3 = t3.length;
        var r3 = [];
        for (var i2 = 0; i2 < e3; i2++)
          r3[i2] = t3[i2];
        return r3;
      }
    }, 315: (t2, e2, r2) => {
      try {
        var i = r2(837);
        if (typeof i.inherits !== "function")
          throw "";
        t2.exports = i.inherits;
      } catch (e3) {
        t2.exports = r2(959);
      }
    }, 959: (t2) => {
      if (typeof Object.create === "function") {
        t2.exports = function inherits(t3, e2) {
          if (e2) {
            t3.super_ = e2;
            t3.prototype = Object.create(e2.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } });
          }
        };
      } else {
        t2.exports = function inherits(t3, e2) {
          if (e2) {
            t3.super_ = e2;
            var TempCtor = function() {
            };
            TempCtor.prototype = e2.prototype;
            t3.prototype = new TempCtor();
            t3.prototype.constructor = t3;
          }
        };
      }
    }, 435: (t2, e2, r2) => {
      t2.exports = minimatch;
      minimatch.Minimatch = Minimatch;
      var i = { sep: "/" };
      try {
        i = r2(17);
      } catch (t3) {
      }
      var a = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
      var n = r2(847);
      var s = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } };
      var o = "[^/]";
      var c = o + "*?";
      var h = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
      var l = "(?:(?!(?:\\/|^)\\.).)*?";
      var u = charSet("().*{}+?[]^$\\!");
      function charSet(t3) {
        return t3.split("").reduce(function(t4, e3) {
          t4[e3] = true;
          return t4;
        }, {});
      }
      var p = /\/+/;
      minimatch.filter = filter;
      function filter(t3, e3) {
        e3 = e3 || {};
        return function(r3, i2, a2) {
          return minimatch(r3, t3, e3);
        };
      }
      function ext(t3, e3) {
        t3 = t3 || {};
        e3 = e3 || {};
        var r3 = {};
        Object.keys(e3).forEach(function(t4) {
          r3[t4] = e3[t4];
        });
        Object.keys(t3).forEach(function(e4) {
          r3[e4] = t3[e4];
        });
        return r3;
      }
      minimatch.defaults = function(t3) {
        if (!t3 || !Object.keys(t3).length)
          return minimatch;
        var e3 = minimatch;
        var r3 = function minimatch2(r4, i2, a2) {
          return e3.minimatch(r4, i2, ext(t3, a2));
        };
        r3.Minimatch = function Minimatch2(r4, i2) {
          return new e3.Minimatch(r4, ext(t3, i2));
        };
        return r3;
      };
      Minimatch.defaults = function(t3) {
        if (!t3 || !Object.keys(t3).length)
          return Minimatch;
        return minimatch.defaults(t3).Minimatch;
      };
      function minimatch(t3, e3, r3) {
        if (typeof e3 !== "string") {
          throw new TypeError("glob pattern string required");
        }
        if (!r3)
          r3 = {};
        if (!r3.nocomment && e3.charAt(0) === "#") {
          return false;
        }
        if (e3.trim() === "")
          return t3 === "";
        return new Minimatch(e3, r3).match(t3);
      }
      function Minimatch(t3, e3) {
        if (!(this instanceof Minimatch)) {
          return new Minimatch(t3, e3);
        }
        if (typeof t3 !== "string") {
          throw new TypeError("glob pattern string required");
        }
        if (!e3)
          e3 = {};
        t3 = t3.trim();
        if (i.sep !== "/") {
          t3 = t3.split(i.sep).join("/");
        }
        this.options = e3;
        this.set = [];
        this.pattern = t3;
        this.regexp = null;
        this.negate = false;
        this.comment = false;
        this.empty = false;
        this.make();
      }
      Minimatch.prototype.debug = function() {
      };
      Minimatch.prototype.make = make;
      function make() {
        if (this._made)
          return;
        var t3 = this.pattern;
        var e3 = this.options;
        if (!e3.nocomment && t3.charAt(0) === "#") {
          this.comment = true;
          return;
        }
        if (!t3) {
          this.empty = true;
          return;
        }
        this.parseNegate();
        var r3 = this.globSet = this.braceExpand();
        if (e3.debug)
          this.debug = console.error;
        this.debug(this.pattern, r3);
        r3 = this.globParts = r3.map(function(t4) {
          return t4.split(p);
        });
        this.debug(this.pattern, r3);
        r3 = r3.map(function(t4, e4, r4) {
          return t4.map(this.parse, this);
        }, this);
        this.debug(this.pattern, r3);
        r3 = r3.filter(function(t4) {
          return t4.indexOf(false) === -1;
        });
        this.debug(this.pattern, r3);
        this.set = r3;
      }
      Minimatch.prototype.parseNegate = parseNegate;
      function parseNegate() {
        var t3 = this.pattern;
        var e3 = false;
        var r3 = this.options;
        var i2 = 0;
        if (r3.nonegate)
          return;
        for (var a2 = 0, n2 = t3.length; a2 < n2 && t3.charAt(a2) === "!"; a2++) {
          e3 = !e3;
          i2++;
        }
        if (i2)
          this.pattern = t3.substr(i2);
        this.negate = e3;
      }
      minimatch.braceExpand = function(t3, e3) {
        return braceExpand(t3, e3);
      };
      Minimatch.prototype.braceExpand = braceExpand;
      function braceExpand(t3, e3) {
        if (!e3) {
          if (this instanceof Minimatch) {
            e3 = this.options;
          } else {
            e3 = {};
          }
        }
        t3 = typeof t3 === "undefined" ? this.pattern : t3;
        if (typeof t3 === "undefined") {
          throw new TypeError("undefined pattern");
        }
        if (e3.nobrace || !t3.match(/\{.*\}/)) {
          return [t3];
        }
        return n(t3);
      }
      Minimatch.prototype.parse = parse4;
      var v = {};
      function parse4(t3, e3) {
        if (t3.length > 1024 * 64) {
          throw new TypeError("pattern is too long");
        }
        var r3 = this.options;
        if (!r3.noglobstar && t3 === "**")
          return a;
        if (t3 === "")
          return "";
        var i2 = "";
        var n2 = !!r3.nocase;
        var h2 = false;
        var l2 = [];
        var p2 = [];
        var d;
        var m = false;
        var b = -1;
        var g = -1;
        var y = t3.charAt(0) === "." ? "" : r3.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
        var _ = this;
        function clearStateChar() {
          if (d) {
            switch (d) {
              case "*":
                i2 += c;
                n2 = true;
                break;
              case "?":
                i2 += o;
                n2 = true;
                break;
              default:
                i2 += "\\" + d;
                break;
            }
            _.debug("clearStateChar %j %j", d, i2);
            d = false;
          }
        }
        for (var w = 0, k = t3.length, S; w < k && (S = t3.charAt(w)); w++) {
          this.debug("%s	%s %s %j", t3, w, i2, S);
          if (h2 && u[S]) {
            i2 += "\\" + S;
            h2 = false;
            continue;
          }
          switch (S) {
            case "/":
              return false;
            case "\\":
              clearStateChar();
              h2 = true;
              continue;
            case "?":
            case "*":
            case "+":
            case "@":
            case "!":
              this.debug("%s	%s %s %j <-- stateChar", t3, w, i2, S);
              if (m) {
                this.debug("  in class");
                if (S === "!" && w === g + 1)
                  S = "^";
                i2 += S;
                continue;
              }
              _.debug("call clearStateChar %j", d);
              clearStateChar();
              d = S;
              if (r3.noext)
                clearStateChar();
              continue;
            case "(":
              if (m) {
                i2 += "(";
                continue;
              }
              if (!d) {
                i2 += "\\(";
                continue;
              }
              l2.push({ type: d, start: w - 1, reStart: i2.length, open: s[d].open, close: s[d].close });
              i2 += d === "!" ? "(?:(?!(?:" : "(?:";
              this.debug("plType %j %j", d, i2);
              d = false;
              continue;
            case ")":
              if (m || !l2.length) {
                i2 += "\\)";
                continue;
              }
              clearStateChar();
              n2 = true;
              var E = l2.pop();
              i2 += E.close;
              if (E.type === "!") {
                p2.push(E);
              }
              E.reEnd = i2.length;
              continue;
            case "|":
              if (m || !l2.length || h2) {
                i2 += "\\|";
                h2 = false;
                continue;
              }
              clearStateChar();
              i2 += "|";
              continue;
            case "[":
              clearStateChar();
              if (m) {
                i2 += "\\" + S;
                continue;
              }
              m = true;
              g = w;
              b = i2.length;
              i2 += S;
              continue;
            case "]":
              if (w === g + 1 || !m) {
                i2 += "\\" + S;
                h2 = false;
                continue;
              }
              if (m) {
                var O = t3.substring(g + 1, w);
                try {
                  RegExp("[" + O + "]");
                } catch (t4) {
                  var x = this.parse(O, v);
                  i2 = i2.substr(0, b) + "\\[" + x[0] + "\\]";
                  n2 = n2 || x[1];
                  m = false;
                  continue;
                }
              }
              n2 = true;
              m = false;
              i2 += S;
              continue;
            default:
              clearStateChar();
              if (h2) {
                h2 = false;
              } else if (u[S] && !(S === "^" && m)) {
                i2 += "\\";
              }
              i2 += S;
          }
        }
        if (m) {
          O = t3.substr(g + 1);
          x = this.parse(O, v);
          i2 = i2.substr(0, b) + "\\[" + x[0];
          n2 = n2 || x[1];
        }
        for (E = l2.pop(); E; E = l2.pop()) {
          var A = i2.slice(E.reStart + E.open.length);
          this.debug("setting tail", i2, E);
          A = A.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(t4, e4, r4) {
            if (!r4) {
              r4 = "\\";
            }
            return e4 + e4 + r4 + "|";
          });
          this.debug("tail=%j\n   %s", A, A, E, i2);
          var G = E.type === "*" ? c : E.type === "?" ? o : "\\" + E.type;
          n2 = true;
          i2 = i2.slice(0, E.reStart) + G + "\\(" + A;
        }
        clearStateChar();
        if (h2) {
          i2 += "\\\\";
        }
        var j = false;
        switch (i2.charAt(0)) {
          case ".":
          case "[":
          case "(":
            j = true;
        }
        for (var I = p2.length - 1; I > -1; I--) {
          var M = p2[I];
          var C = i2.slice(0, M.reStart);
          var L = i2.slice(M.reStart, M.reEnd - 8);
          var R = i2.slice(M.reEnd - 8, M.reEnd);
          var T = i2.slice(M.reEnd);
          R += T;
          var N = C.split("(").length - 1;
          var P = T;
          for (w = 0; w < N; w++) {
            P = P.replace(/\)[+*?]?/, "");
          }
          T = P;
          var D = "";
          if (T === "" && e3 !== v) {
            D = "$";
          }
          var $ = C + L + T + D + R;
          i2 = $;
        }
        if (i2 !== "" && n2) {
          i2 = "(?=.)" + i2;
        }
        if (j) {
          i2 = y + i2;
        }
        if (e3 === v) {
          return [i2, n2];
        }
        if (!n2) {
          return globUnescape(t3);
        }
        var F = r3.nocase ? "i" : "";
        try {
          var q = new RegExp("^" + i2 + "$", F);
        } catch (t4) {
          return new RegExp("$.");
        }
        q._glob = t3;
        q._src = i2;
        return q;
      }
      minimatch.makeRe = function(t3, e3) {
        return new Minimatch(t3, e3 || {}).makeRe();
      };
      Minimatch.prototype.makeRe = makeRe;
      function makeRe() {
        if (this.regexp || this.regexp === false)
          return this.regexp;
        var t3 = this.set;
        if (!t3.length) {
          this.regexp = false;
          return this.regexp;
        }
        var e3 = this.options;
        var r3 = e3.noglobstar ? c : e3.dot ? h : l;
        var i2 = e3.nocase ? "i" : "";
        var n2 = t3.map(function(t4) {
          return t4.map(function(t5) {
            return t5 === a ? r3 : typeof t5 === "string" ? regExpEscape(t5) : t5._src;
          }).join("\\/");
        }).join("|");
        n2 = "^(?:" + n2 + ")$";
        if (this.negate)
          n2 = "^(?!" + n2 + ").*$";
        try {
          this.regexp = new RegExp(n2, i2);
        } catch (t4) {
          this.regexp = false;
        }
        return this.regexp;
      }
      minimatch.match = function(t3, e3, r3) {
        r3 = r3 || {};
        var i2 = new Minimatch(e3, r3);
        t3 = t3.filter(function(t4) {
          return i2.match(t4);
        });
        if (i2.options.nonull && !t3.length) {
          t3.push(e3);
        }
        return t3;
      };
      Minimatch.prototype.match = match;
      function match(t3, e3) {
        this.debug("match", t3, this.pattern);
        if (this.comment)
          return false;
        if (this.empty)
          return t3 === "";
        if (t3 === "/" && e3)
          return true;
        var r3 = this.options;
        if (i.sep !== "/") {
          t3 = t3.split(i.sep).join("/");
        }
        t3 = t3.split(p);
        this.debug(this.pattern, "split", t3);
        var a2 = this.set;
        this.debug(this.pattern, "set", a2);
        var n2;
        var s2;
        for (s2 = t3.length - 1; s2 >= 0; s2--) {
          n2 = t3[s2];
          if (n2)
            break;
        }
        for (s2 = 0; s2 < a2.length; s2++) {
          var o2 = a2[s2];
          var c2 = t3;
          if (r3.matchBase && o2.length === 1) {
            c2 = [n2];
          }
          var h2 = this.matchOne(c2, o2, e3);
          if (h2) {
            if (r3.flipNegate)
              return true;
            return !this.negate;
          }
        }
        if (r3.flipNegate)
          return false;
        return this.negate;
      }
      Minimatch.prototype.matchOne = function(t3, e3, r3) {
        var i2 = this.options;
        this.debug("matchOne", { this: this, file: t3, pattern: e3 });
        this.debug("matchOne", t3.length, e3.length);
        for (var n2 = 0, s2 = 0, o2 = t3.length, c2 = e3.length; n2 < o2 && s2 < c2; n2++, s2++) {
          this.debug("matchOne loop");
          var h2 = e3[s2];
          var l2 = t3[n2];
          this.debug(e3, h2, l2);
          if (h2 === false)
            return false;
          if (h2 === a) {
            this.debug("GLOBSTAR", [e3, h2, l2]);
            var u2 = n2;
            var p2 = s2 + 1;
            if (p2 === c2) {
              this.debug("** at the end");
              for (; n2 < o2; n2++) {
                if (t3[n2] === "." || t3[n2] === ".." || !i2.dot && t3[n2].charAt(0) === ".")
                  return false;
              }
              return true;
            }
            while (u2 < o2) {
              var v2 = t3[u2];
              this.debug("\nglobstar while", t3, u2, e3, p2, v2);
              if (this.matchOne(t3.slice(u2), e3.slice(p2), r3)) {
                this.debug("globstar found match!", u2, o2, v2);
                return true;
              } else {
                if (v2 === "." || v2 === ".." || !i2.dot && v2.charAt(0) === ".") {
                  this.debug("dot detected!", t3, u2, e3, p2);
                  break;
                }
                this.debug("globstar swallow a segment, and continue");
                u2++;
              }
            }
            if (r3) {
              this.debug("\n>>> no match, partial?", t3, u2, e3, p2);
              if (u2 === o2)
                return true;
            }
            return false;
          }
          var d;
          if (typeof h2 === "string") {
            if (i2.nocase) {
              d = l2.toLowerCase() === h2.toLowerCase();
            } else {
              d = l2 === h2;
            }
            this.debug("string match", h2, l2, d);
          } else {
            d = l2.match(h2);
            this.debug("pattern match", h2, l2, d);
          }
          if (!d)
            return false;
        }
        if (n2 === o2 && s2 === c2) {
          return true;
        } else if (n2 === o2) {
          return r3;
        } else if (s2 === c2) {
          var m = n2 === o2 - 1 && t3[n2] === "";
          return m;
        }
        throw new Error("wtf?");
      };
      function globUnescape(t3) {
        return t3.replace(/\\(.)/g, "$1");
      }
      function regExpEscape(t3) {
        return t3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }
    }, 556: (t2, e2, r2) => {
      var i = r2(928);
      t2.exports = i(once2);
      t2.exports.strict = i(onceStrict);
      once2.proto = once2(function() {
        Object.defineProperty(Function.prototype, "once", { value: function() {
          return once2(this);
        }, configurable: true });
        Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
          return onceStrict(this);
        }, configurable: true });
      });
      function once2(t3) {
        var f = function() {
          if (f.called)
            return f.value;
          f.called = true;
          return f.value = t3.apply(this, arguments);
        };
        f.called = false;
        return f;
      }
      function onceStrict(t3) {
        var f = function() {
          if (f.called)
            throw new Error(f.onceError);
          f.called = true;
          return f.value = t3.apply(this, arguments);
        };
        var e3 = t3.name || "Function wrapped with `once`";
        f.onceError = e3 + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
    }, 249: (t2) => {
      "use strict";
      function posix(t3) {
        return t3.charAt(0) === "/";
      }
      function win32(t3) {
        var e2 = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
        var r2 = e2.exec(t3);
        var i = r2[1] || "";
        var a = Boolean(i && i.charAt(1) !== ":");
        return Boolean(r2[2] || a);
      }
      t2.exports = process.platform === "win32" ? win32 : posix;
      t2.exports.posix = posix;
      t2.exports.win32 = win32;
    }, 928: (t2) => {
      t2.exports = wrappy;
      function wrappy(t3, e2) {
        if (t3 && e2)
          return wrappy(t3)(e2);
        if (typeof t3 !== "function")
          throw new TypeError("need wrapper function");
        Object.keys(t3).forEach(function(e3) {
          wrapper[e3] = t3[e3];
        });
        return wrapper;
        function wrapper() {
          var e3 = new Array(arguments.length);
          for (var r2 = 0; r2 < e3.length; r2++) {
            e3[r2] = arguments[r2];
          }
          var i = t3.apply(this, e3);
          var a = e3[e3.length - 1];
          if (typeof i === "function" && i !== a) {
            Object.keys(a).forEach(function(t4) {
              i[t4] = a[t4];
            });
          }
          return i;
        }
      }
    }, 491: (t2) => {
      "use strict";
      t2.exports = __require("assert");
    }, 361: (t2) => {
      "use strict";
      t2.exports = __require("events");
    }, 147: (t2) => {
      "use strict";
      t2.exports = __require("fs");
    }, 17: (t2) => {
      "use strict";
      t2.exports = __require("path");
    }, 837: (t2) => {
      "use strict";
      t2.exports = __require("util");
    } };
    var e = {};
    function __nccwpck_require__(r2) {
      var i = e[r2];
      if (i !== void 0) {
        return i.exports;
      }
      var a = e[r2] = { exports: {} };
      var n = true;
      try {
        t[r2](a, a.exports, __nccwpck_require__);
        n = false;
      } finally {
        if (n)
          delete e[r2];
      }
      return a.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(978);
    module2.exports = r;
  })();
});
var require_js_yaml = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 509: (e2, t2, r2) => {
      var i = r2(756);
      var n = r2(818);
      function renamed(e3, t3) {
        return function() {
          throw new Error("Function yaml." + e3 + " is removed in js-yaml 4. Use yaml." + t3 + " instead, which is now safe by default.");
        };
      }
      e2.exports.Type = r2(498);
      e2.exports.Schema = r2(915);
      e2.exports.FAILSAFE_SCHEMA = r2(9);
      e2.exports.JSON_SCHEMA = r2(854);
      e2.exports.CORE_SCHEMA = r2(645);
      e2.exports.DEFAULT_SCHEMA = r2(518);
      e2.exports.load = i.load;
      e2.exports.loadAll = i.loadAll;
      e2.exports.dump = n.dump;
      e2.exports.YAMLException = r2(574);
      e2.exports.types = { binary: r2(385), float: r2(650), map: r2(671), null: r2(336), pairs: r2(886), set: r2(938), timestamp: r2(413), bool: r2(568), int: r2(222), merge: r2(690), omap: r2(590), seq: r2(369), str: r2(299) };
      e2.exports.safeLoad = renamed("safeLoad", "load");
      e2.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
      e2.exports.safeDump = renamed("safeDump", "dump");
    }, 234: (e2) => {
      function isNothing(e3) {
        return typeof e3 === "undefined" || e3 === null;
      }
      function isObject2(e3) {
        return typeof e3 === "object" && e3 !== null;
      }
      function toArray(e3) {
        if (Array.isArray(e3))
          return e3;
        else if (isNothing(e3))
          return [];
        return [e3];
      }
      function extend(e3, t2) {
        var r2, i, n, a;
        if (t2) {
          a = Object.keys(t2);
          for (r2 = 0, i = a.length; r2 < i; r2 += 1) {
            n = a[r2];
            e3[n] = t2[n];
          }
        }
        return e3;
      }
      function repeat(e3, t2) {
        var r2 = "", i;
        for (i = 0; i < t2; i += 1) {
          r2 += e3;
        }
        return r2;
      }
      function isNegativeZero(e3) {
        return e3 === 0 && Number.NEGATIVE_INFINITY === 1 / e3;
      }
      e2.exports.isNothing = isNothing;
      e2.exports.isObject = isObject2;
      e2.exports.toArray = toArray;
      e2.exports.repeat = repeat;
      e2.exports.isNegativeZero = isNegativeZero;
      e2.exports.extend = extend;
    }, 818: (e2, t2, r2) => {
      var i = r2(234);
      var n = r2(574);
      var a = r2(518);
      var o = Object.prototype.toString;
      var l = Object.prototype.hasOwnProperty;
      var s = 65279;
      var c = 9;
      var u = 10;
      var p = 13;
      var f = 32;
      var d = 33;
      var h = 34;
      var m = 35;
      var g = 37;
      var v = 38;
      var w = 39;
      var y = 42;
      var S = 44;
      var A = 45;
      var b = 58;
      var x = 61;
      var k = 62;
      var E = 63;
      var _ = 64;
      var O = 91;
      var C = 93;
      var I = 96;
      var L = 123;
      var N = 124;
      var T = 125;
      var F = {};
      F[0] = "\\0";
      F[7] = "\\a";
      F[8] = "\\b";
      F[9] = "\\t";
      F[10] = "\\n";
      F[11] = "\\v";
      F[12] = "\\f";
      F[13] = "\\r";
      F[27] = "\\e";
      F[34] = '\\"';
      F[92] = "\\\\";
      F[133] = "\\N";
      F[160] = "\\_";
      F[8232] = "\\L";
      F[8233] = "\\P";
      var M = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
      var j = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
      function compileStyleMap(e3, t3) {
        var r3, i2, n2, a2, o2, s2, c2;
        if (t3 === null)
          return {};
        r3 = {};
        i2 = Object.keys(t3);
        for (n2 = 0, a2 = i2.length; n2 < a2; n2 += 1) {
          o2 = i2[n2];
          s2 = String(t3[o2]);
          if (o2.slice(0, 2) === "!!") {
            o2 = "tag:yaml.org,2002:" + o2.slice(2);
          }
          c2 = e3.compiledTypeMap["fallback"][o2];
          if (c2 && l.call(c2.styleAliases, s2)) {
            s2 = c2.styleAliases[s2];
          }
          r3[o2] = s2;
        }
        return r3;
      }
      function encodeHex(e3) {
        var t3, r3, a2;
        t3 = e3.toString(16).toUpperCase();
        if (e3 <= 255) {
          r3 = "x";
          a2 = 2;
        } else if (e3 <= 65535) {
          r3 = "u";
          a2 = 4;
        } else if (e3 <= 4294967295) {
          r3 = "U";
          a2 = 8;
        } else {
          throw new n("code point within a string may not be greater than 0xFFFFFFFF");
        }
        return "\\" + r3 + i.repeat("0", a2 - t3.length) + t3;
      }
      var Y = 1, P = 2;
      function State(e3) {
        this.schema = e3["schema"] || a;
        this.indent = Math.max(1, e3["indent"] || 2);
        this.noArrayIndent = e3["noArrayIndent"] || false;
        this.skipInvalid = e3["skipInvalid"] || false;
        this.flowLevel = i.isNothing(e3["flowLevel"]) ? -1 : e3["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, e3["styles"] || null);
        this.sortKeys = e3["sortKeys"] || false;
        this.lineWidth = e3["lineWidth"] || 80;
        this.noRefs = e3["noRefs"] || false;
        this.noCompatMode = e3["noCompatMode"] || false;
        this.condenseFlow = e3["condenseFlow"] || false;
        this.quotingType = e3["quotingType"] === '"' ? P : Y;
        this.forceQuotes = e3["forceQuotes"] || false;
        this.replacer = typeof e3["replacer"] === "function" ? e3["replacer"] : null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      function indentString(e3, t3) {
        var r3 = i.repeat(" ", t3), n2 = 0, a2 = -1, o2 = "", l2, s2 = e3.length;
        while (n2 < s2) {
          a2 = e3.indexOf("\n", n2);
          if (a2 === -1) {
            l2 = e3.slice(n2);
            n2 = s2;
          } else {
            l2 = e3.slice(n2, a2 + 1);
            n2 = a2 + 1;
          }
          if (l2.length && l2 !== "\n")
            o2 += r3;
          o2 += l2;
        }
        return o2;
      }
      function generateNextLine(e3, t3) {
        return "\n" + i.repeat(" ", e3.indent * t3);
      }
      function testImplicitResolving(e3, t3) {
        var r3, i2, n2;
        for (r3 = 0, i2 = e3.implicitTypes.length; r3 < i2; r3 += 1) {
          n2 = e3.implicitTypes[r3];
          if (n2.resolve(t3)) {
            return true;
          }
        }
        return false;
      }
      function isWhitespace(e3) {
        return e3 === f || e3 === c;
      }
      function isPrintable(e3) {
        return 32 <= e3 && e3 <= 126 || 161 <= e3 && e3 <= 55295 && e3 !== 8232 && e3 !== 8233 || 57344 <= e3 && e3 <= 65533 && e3 !== s || 65536 <= e3 && e3 <= 1114111;
      }
      function isNsCharOrWhitespace(e3) {
        return isPrintable(e3) && e3 !== s && e3 !== p && e3 !== u;
      }
      function isPlainSafe(e3, t3, r3) {
        var i2 = isNsCharOrWhitespace(e3);
        var n2 = i2 && !isWhitespace(e3);
        return (r3 ? i2 : i2 && e3 !== S && e3 !== O && e3 !== C && e3 !== L && e3 !== T) && e3 !== m && !(t3 === b && !n2) || isNsCharOrWhitespace(t3) && !isWhitespace(t3) && e3 === m || t3 === b && n2;
      }
      function isPlainSafeFirst(e3) {
        return isPrintable(e3) && e3 !== s && !isWhitespace(e3) && e3 !== A && e3 !== E && e3 !== b && e3 !== S && e3 !== O && e3 !== C && e3 !== L && e3 !== T && e3 !== m && e3 !== v && e3 !== y && e3 !== d && e3 !== N && e3 !== x && e3 !== k && e3 !== w && e3 !== h && e3 !== g && e3 !== _ && e3 !== I;
      }
      function isPlainSafeLast(e3) {
        return !isWhitespace(e3) && e3 !== b;
      }
      function codePointAt(e3, t3) {
        var r3 = e3.charCodeAt(t3), i2;
        if (r3 >= 55296 && r3 <= 56319 && t3 + 1 < e3.length) {
          i2 = e3.charCodeAt(t3 + 1);
          if (i2 >= 56320 && i2 <= 57343) {
            return (r3 - 55296) * 1024 + i2 - 56320 + 65536;
          }
        }
        return r3;
      }
      function needIndentIndicator(e3) {
        var t3 = /^\n* /;
        return t3.test(e3);
      }
      var W = 1, D = 2, B = 3, R = 4, q = 5;
      function chooseScalarStyle(e3, t3, r3, i2, n2, a2, o2, l2) {
        var s2;
        var c2 = 0;
        var p2 = null;
        var f2 = false;
        var d2 = false;
        var h2 = i2 !== -1;
        var m2 = -1;
        var g2 = isPlainSafeFirst(codePointAt(e3, 0)) && isPlainSafeLast(codePointAt(e3, e3.length - 1));
        if (t3 || o2) {
          for (s2 = 0; s2 < e3.length; c2 >= 65536 ? s2 += 2 : s2++) {
            c2 = codePointAt(e3, s2);
            if (!isPrintable(c2)) {
              return q;
            }
            g2 = g2 && isPlainSafe(c2, p2, l2);
            p2 = c2;
          }
        } else {
          for (s2 = 0; s2 < e3.length; c2 >= 65536 ? s2 += 2 : s2++) {
            c2 = codePointAt(e3, s2);
            if (c2 === u) {
              f2 = true;
              if (h2) {
                d2 = d2 || s2 - m2 - 1 > i2 && e3[m2 + 1] !== " ";
                m2 = s2;
              }
            } else if (!isPrintable(c2)) {
              return q;
            }
            g2 = g2 && isPlainSafe(c2, p2, l2);
            p2 = c2;
          }
          d2 = d2 || h2 && (s2 - m2 - 1 > i2 && e3[m2 + 1] !== " ");
        }
        if (!f2 && !d2) {
          if (g2 && !o2 && !n2(e3)) {
            return W;
          }
          return a2 === P ? q : D;
        }
        if (r3 > 9 && needIndentIndicator(e3)) {
          return q;
        }
        if (!o2) {
          return d2 ? R : B;
        }
        return a2 === P ? q : D;
      }
      function writeScalar(e3, t3, r3, i2, a2) {
        e3.dump = function() {
          if (t3.length === 0) {
            return e3.quotingType === P ? '""' : "''";
          }
          if (!e3.noCompatMode) {
            if (M.indexOf(t3) !== -1 || j.test(t3)) {
              return e3.quotingType === P ? '"' + t3 + '"' : "'" + t3 + "'";
            }
          }
          var o2 = e3.indent * Math.max(1, r3);
          var l2 = e3.lineWidth === -1 ? -1 : Math.max(Math.min(e3.lineWidth, 40), e3.lineWidth - o2);
          var s2 = i2 || e3.flowLevel > -1 && r3 >= e3.flowLevel;
          function testAmbiguity(t4) {
            return testImplicitResolving(e3, t4);
          }
          switch (chooseScalarStyle(t3, s2, e3.indent, l2, testAmbiguity, e3.quotingType, e3.forceQuotes && !i2, a2)) {
            case W:
              return t3;
            case D:
              return "'" + t3.replace(/'/g, "''") + "'";
            case B:
              return "|" + blockHeader(t3, e3.indent) + dropEndingNewline(indentString(t3, o2));
            case R:
              return ">" + blockHeader(t3, e3.indent) + dropEndingNewline(indentString(foldString(t3, l2), o2));
            case q:
              return '"' + escapeString(t3, l2) + '"';
            default:
              throw new n("impossible error: invalid scalar style");
          }
        }();
      }
      function blockHeader(e3, t3) {
        var r3 = needIndentIndicator(e3) ? String(t3) : "";
        var i2 = e3[e3.length - 1] === "\n";
        var n2 = i2 && (e3[e3.length - 2] === "\n" || e3 === "\n");
        var a2 = n2 ? "+" : i2 ? "" : "-";
        return r3 + a2 + "\n";
      }
      function dropEndingNewline(e3) {
        return e3[e3.length - 1] === "\n" ? e3.slice(0, -1) : e3;
      }
      function foldString(e3, t3) {
        var r3 = /(\n+)([^\n]*)/g;
        var i2 = function() {
          var i3 = e3.indexOf("\n");
          i3 = i3 !== -1 ? i3 : e3.length;
          r3.lastIndex = i3;
          return foldLine(e3.slice(0, i3), t3);
        }();
        var n2 = e3[0] === "\n" || e3[0] === " ";
        var a2;
        var o2;
        while (o2 = r3.exec(e3)) {
          var l2 = o2[1], s2 = o2[2];
          a2 = s2[0] === " ";
          i2 += l2 + (!n2 && !a2 && s2 !== "" ? "\n" : "") + foldLine(s2, t3);
          n2 = a2;
        }
        return i2;
      }
      function foldLine(e3, t3) {
        if (e3 === "" || e3[0] === " ")
          return e3;
        var r3 = / [^ ]/g;
        var i2;
        var n2 = 0, a2, o2 = 0, l2 = 0;
        var s2 = "";
        while (i2 = r3.exec(e3)) {
          l2 = i2.index;
          if (l2 - n2 > t3) {
            a2 = o2 > n2 ? o2 : l2;
            s2 += "\n" + e3.slice(n2, a2);
            n2 = a2 + 1;
          }
          o2 = l2;
        }
        s2 += "\n";
        if (e3.length - n2 > t3 && o2 > n2) {
          s2 += e3.slice(n2, o2) + "\n" + e3.slice(o2 + 1);
        } else {
          s2 += e3.slice(n2);
        }
        return s2.slice(1);
      }
      function escapeString(e3) {
        var t3 = "";
        var r3 = 0;
        var i2;
        for (var n2 = 0; n2 < e3.length; r3 >= 65536 ? n2 += 2 : n2++) {
          r3 = codePointAt(e3, n2);
          i2 = F[r3];
          if (!i2 && isPrintable(r3)) {
            t3 += e3[n2];
            if (r3 >= 65536)
              t3 += e3[n2 + 1];
          } else {
            t3 += i2 || encodeHex(r3);
          }
        }
        return t3;
      }
      function writeFlowSequence(e3, t3, r3) {
        var i2 = "", n2 = e3.tag, a2, o2, l2;
        for (a2 = 0, o2 = r3.length; a2 < o2; a2 += 1) {
          l2 = r3[a2];
          if (e3.replacer) {
            l2 = e3.replacer.call(r3, String(a2), l2);
          }
          if (writeNode(e3, t3, l2, false, false) || typeof l2 === "undefined" && writeNode(e3, t3, null, false, false)) {
            if (i2 !== "")
              i2 += "," + (!e3.condenseFlow ? " " : "");
            i2 += e3.dump;
          }
        }
        e3.tag = n2;
        e3.dump = "[" + i2 + "]";
      }
      function writeBlockSequence(e3, t3, r3, i2) {
        var n2 = "", a2 = e3.tag, o2, l2, s2;
        for (o2 = 0, l2 = r3.length; o2 < l2; o2 += 1) {
          s2 = r3[o2];
          if (e3.replacer) {
            s2 = e3.replacer.call(r3, String(o2), s2);
          }
          if (writeNode(e3, t3 + 1, s2, true, true, false, true) || typeof s2 === "undefined" && writeNode(e3, t3 + 1, null, true, true, false, true)) {
            if (!i2 || n2 !== "") {
              n2 += generateNextLine(e3, t3);
            }
            if (e3.dump && u === e3.dump.charCodeAt(0)) {
              n2 += "-";
            } else {
              n2 += "- ";
            }
            n2 += e3.dump;
          }
        }
        e3.tag = a2;
        e3.dump = n2 || "[]";
      }
      function writeFlowMapping(e3, t3, r3) {
        var i2 = "", n2 = e3.tag, a2 = Object.keys(r3), o2, l2, s2, c2, u2;
        for (o2 = 0, l2 = a2.length; o2 < l2; o2 += 1) {
          u2 = "";
          if (i2 !== "")
            u2 += ", ";
          if (e3.condenseFlow)
            u2 += '"';
          s2 = a2[o2];
          c2 = r3[s2];
          if (e3.replacer) {
            c2 = e3.replacer.call(r3, s2, c2);
          }
          if (!writeNode(e3, t3, s2, false, false)) {
            continue;
          }
          if (e3.dump.length > 1024)
            u2 += "? ";
          u2 += e3.dump + (e3.condenseFlow ? '"' : "") + ":" + (e3.condenseFlow ? "" : " ");
          if (!writeNode(e3, t3, c2, false, false)) {
            continue;
          }
          u2 += e3.dump;
          i2 += u2;
        }
        e3.tag = n2;
        e3.dump = "{" + i2 + "}";
      }
      function writeBlockMapping(e3, t3, r3, i2) {
        var a2 = "", o2 = e3.tag, l2 = Object.keys(r3), s2, c2, p2, f2, d2, h2;
        if (e3.sortKeys === true) {
          l2.sort();
        } else if (typeof e3.sortKeys === "function") {
          l2.sort(e3.sortKeys);
        } else if (e3.sortKeys) {
          throw new n("sortKeys must be a boolean or a function");
        }
        for (s2 = 0, c2 = l2.length; s2 < c2; s2 += 1) {
          h2 = "";
          if (!i2 || a2 !== "") {
            h2 += generateNextLine(e3, t3);
          }
          p2 = l2[s2];
          f2 = r3[p2];
          if (e3.replacer) {
            f2 = e3.replacer.call(r3, p2, f2);
          }
          if (!writeNode(e3, t3 + 1, p2, true, true, true)) {
            continue;
          }
          d2 = e3.tag !== null && e3.tag !== "?" || e3.dump && e3.dump.length > 1024;
          if (d2) {
            if (e3.dump && u === e3.dump.charCodeAt(0)) {
              h2 += "?";
            } else {
              h2 += "? ";
            }
          }
          h2 += e3.dump;
          if (d2) {
            h2 += generateNextLine(e3, t3);
          }
          if (!writeNode(e3, t3 + 1, f2, true, d2)) {
            continue;
          }
          if (e3.dump && u === e3.dump.charCodeAt(0)) {
            h2 += ":";
          } else {
            h2 += ": ";
          }
          h2 += e3.dump;
          a2 += h2;
        }
        e3.tag = o2;
        e3.dump = a2 || "{}";
      }
      function detectType(e3, t3, r3) {
        var i2, a2, s2, c2, u2, p2;
        a2 = r3 ? e3.explicitTypes : e3.implicitTypes;
        for (s2 = 0, c2 = a2.length; s2 < c2; s2 += 1) {
          u2 = a2[s2];
          if ((u2.instanceOf || u2.predicate) && (!u2.instanceOf || typeof t3 === "object" && t3 instanceof u2.instanceOf) && (!u2.predicate || u2.predicate(t3))) {
            if (r3) {
              if (u2.multi && u2.representName) {
                e3.tag = u2.representName(t3);
              } else {
                e3.tag = u2.tag;
              }
            } else {
              e3.tag = "?";
            }
            if (u2.represent) {
              p2 = e3.styleMap[u2.tag] || u2.defaultStyle;
              if (o.call(u2.represent) === "[object Function]") {
                i2 = u2.represent(t3, p2);
              } else if (l.call(u2.represent, p2)) {
                i2 = u2.represent[p2](t3, p2);
              } else {
                throw new n("!<" + u2.tag + '> tag resolver accepts not "' + p2 + '" style');
              }
              e3.dump = i2;
            }
            return true;
          }
        }
        return false;
      }
      function writeNode(e3, t3, r3, i2, a2, l2, s2) {
        e3.tag = null;
        e3.dump = r3;
        if (!detectType(e3, r3, false)) {
          detectType(e3, r3, true);
        }
        var c2 = o.call(e3.dump);
        var u2 = i2;
        var p2;
        if (i2) {
          i2 = e3.flowLevel < 0 || e3.flowLevel > t3;
        }
        var f2 = c2 === "[object Object]" || c2 === "[object Array]", d2, h2;
        if (f2) {
          d2 = e3.duplicates.indexOf(r3);
          h2 = d2 !== -1;
        }
        if (e3.tag !== null && e3.tag !== "?" || h2 || e3.indent !== 2 && t3 > 0) {
          a2 = false;
        }
        if (h2 && e3.usedDuplicates[d2]) {
          e3.dump = "*ref_" + d2;
        } else {
          if (f2 && h2 && !e3.usedDuplicates[d2]) {
            e3.usedDuplicates[d2] = true;
          }
          if (c2 === "[object Object]") {
            if (i2 && Object.keys(e3.dump).length !== 0) {
              writeBlockMapping(e3, t3, e3.dump, a2);
              if (h2) {
                e3.dump = "&ref_" + d2 + e3.dump;
              }
            } else {
              writeFlowMapping(e3, t3, e3.dump);
              if (h2) {
                e3.dump = "&ref_" + d2 + " " + e3.dump;
              }
            }
          } else if (c2 === "[object Array]") {
            if (i2 && e3.dump.length !== 0) {
              if (e3.noArrayIndent && !s2 && t3 > 0) {
                writeBlockSequence(e3, t3 - 1, e3.dump, a2);
              } else {
                writeBlockSequence(e3, t3, e3.dump, a2);
              }
              if (h2) {
                e3.dump = "&ref_" + d2 + e3.dump;
              }
            } else {
              writeFlowSequence(e3, t3, e3.dump);
              if (h2) {
                e3.dump = "&ref_" + d2 + " " + e3.dump;
              }
            }
          } else if (c2 === "[object String]") {
            if (e3.tag !== "?") {
              writeScalar(e3, e3.dump, t3, l2, u2);
            }
          } else if (c2 === "[object Undefined]") {
            return false;
          } else {
            if (e3.skipInvalid)
              return false;
            throw new n("unacceptable kind of an object to dump " + c2);
          }
          if (e3.tag !== null && e3.tag !== "?") {
            p2 = encodeURI(e3.tag[0] === "!" ? e3.tag.slice(1) : e3.tag).replace(/!/g, "%21");
            if (e3.tag[0] === "!") {
              p2 = "!" + p2;
            } else if (p2.slice(0, 18) === "tag:yaml.org,2002:") {
              p2 = "!!" + p2.slice(18);
            } else {
              p2 = "!<" + p2 + ">";
            }
            e3.dump = p2 + " " + e3.dump;
          }
        }
        return true;
      }
      function getDuplicateReferences(e3, t3) {
        var r3 = [], i2 = [], n2, a2;
        inspectNode(e3, r3, i2);
        for (n2 = 0, a2 = i2.length; n2 < a2; n2 += 1) {
          t3.duplicates.push(r3[i2[n2]]);
        }
        t3.usedDuplicates = new Array(a2);
      }
      function inspectNode(e3, t3, r3) {
        var i2, n2, a2;
        if (e3 !== null && typeof e3 === "object") {
          n2 = t3.indexOf(e3);
          if (n2 !== -1) {
            if (r3.indexOf(n2) === -1) {
              r3.push(n2);
            }
          } else {
            t3.push(e3);
            if (Array.isArray(e3)) {
              for (n2 = 0, a2 = e3.length; n2 < a2; n2 += 1) {
                inspectNode(e3[n2], t3, r3);
              }
            } else {
              i2 = Object.keys(e3);
              for (n2 = 0, a2 = i2.length; n2 < a2; n2 += 1) {
                inspectNode(e3[i2[n2]], t3, r3);
              }
            }
          }
        }
      }
      function dump(e3, t3) {
        t3 = t3 || {};
        var r3 = new State(t3);
        if (!r3.noRefs)
          getDuplicateReferences(e3, r3);
        var i2 = e3;
        if (r3.replacer) {
          i2 = r3.replacer.call({ "": i2 }, "", i2);
        }
        if (writeNode(r3, 0, i2, true, true))
          return r3.dump + "\n";
        return "";
      }
      e2.exports.dump = dump;
    }, 574: (e2) => {
      function formatError(e3, t2) {
        var r2 = "", i = e3.reason || "(unknown reason)";
        if (!e3.mark)
          return i;
        if (e3.mark.name) {
          r2 += 'in "' + e3.mark.name + '" ';
        }
        r2 += "(" + (e3.mark.line + 1) + ":" + (e3.mark.column + 1) + ")";
        if (!t2 && e3.mark.snippet) {
          r2 += "\n\n" + e3.mark.snippet;
        }
        return i + " " + r2;
      }
      function YAMLException(e3, t2) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = e3;
        this.mark = t2;
        this.message = formatError(this, false);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      YAMLException.prototype = Object.create(Error.prototype);
      YAMLException.prototype.constructor = YAMLException;
      YAMLException.prototype.toString = function toString(e3) {
        return this.name + ": " + formatError(this, e3);
      };
      e2.exports = YAMLException;
    }, 756: (e2, t2, r2) => {
      var i = r2(234);
      var n = r2(574);
      var a = r2(80);
      var o = r2(518);
      var l = Object.prototype.hasOwnProperty;
      var s = 1;
      var c = 2;
      var u = 3;
      var p = 4;
      var f = 1;
      var d = 2;
      var h = 3;
      var m = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var g = /[\x85\u2028\u2029]/;
      var v = /[,\[\]\{\}]/;
      var w = /^(?:!|!!|![a-z\-]+!)$/i;
      var y = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(e3) {
        return Object.prototype.toString.call(e3);
      }
      function is_EOL(e3) {
        return e3 === 10 || e3 === 13;
      }
      function is_WHITE_SPACE(e3) {
        return e3 === 9 || e3 === 32;
      }
      function is_WS_OR_EOL(e3) {
        return e3 === 9 || e3 === 32 || e3 === 10 || e3 === 13;
      }
      function is_FLOW_INDICATOR(e3) {
        return e3 === 44 || e3 === 91 || e3 === 93 || e3 === 123 || e3 === 125;
      }
      function fromHexCode(e3) {
        var t3;
        if (48 <= e3 && e3 <= 57) {
          return e3 - 48;
        }
        t3 = e3 | 32;
        if (97 <= t3 && t3 <= 102) {
          return t3 - 97 + 10;
        }
        return -1;
      }
      function escapedHexLen(e3) {
        if (e3 === 120) {
          return 2;
        }
        if (e3 === 117) {
          return 4;
        }
        if (e3 === 85) {
          return 8;
        }
        return 0;
      }
      function fromDecimalCode(e3) {
        if (48 <= e3 && e3 <= 57) {
          return e3 - 48;
        }
        return -1;
      }
      function simpleEscapeSequence(e3) {
        return e3 === 48 ? "\0" : e3 === 97 ? "\x07" : e3 === 98 ? "\b" : e3 === 116 ? "	" : e3 === 9 ? "	" : e3 === 110 ? "\n" : e3 === 118 ? "\v" : e3 === 102 ? "\f" : e3 === 114 ? "\r" : e3 === 101 ? "\x1B" : e3 === 32 ? " " : e3 === 34 ? '"' : e3 === 47 ? "/" : e3 === 92 ? "\\" : e3 === 78 ? "\x85" : e3 === 95 ? "\xA0" : e3 === 76 ? "\u2028" : e3 === 80 ? "\u2029" : "";
      }
      function charFromCodepoint(e3) {
        if (e3 <= 65535) {
          return String.fromCharCode(e3);
        }
        return String.fromCharCode((e3 - 65536 >> 10) + 55296, (e3 - 65536 & 1023) + 56320);
      }
      var S = new Array(256);
      var A = new Array(256);
      for (var b = 0; b < 256; b++) {
        S[b] = simpleEscapeSequence(b) ? 1 : 0;
        A[b] = simpleEscapeSequence(b);
      }
      function State(e3, t3) {
        this.input = e3;
        this.filename = t3["filename"] || null;
        this.schema = t3["schema"] || o;
        this.onWarning = t3["onWarning"] || null;
        this.legacy = t3["legacy"] || false;
        this.json = t3["json"] || false;
        this.listener = t3["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = e3.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.firstTabInLine = -1;
        this.documents = [];
      }
      function generateError(e3, t3) {
        var r3 = { name: e3.filename, buffer: e3.input.slice(0, -1), position: e3.position, line: e3.line, column: e3.position - e3.lineStart };
        r3.snippet = a(r3);
        return new n(t3, r3);
      }
      function throwError(e3, t3) {
        throw generateError(e3, t3);
      }
      function throwWarning(e3, t3) {
        if (e3.onWarning) {
          e3.onWarning.call(null, generateError(e3, t3));
        }
      }
      var x = { YAML: function handleYamlDirective(e3, t3, r3) {
        var i2, n2, a2;
        if (e3.version !== null) {
          throwError(e3, "duplication of %YAML directive");
        }
        if (r3.length !== 1) {
          throwError(e3, "YAML directive accepts exactly one argument");
        }
        i2 = /^([0-9]+)\.([0-9]+)$/.exec(r3[0]);
        if (i2 === null) {
          throwError(e3, "ill-formed argument of the YAML directive");
        }
        n2 = parseInt(i2[1], 10);
        a2 = parseInt(i2[2], 10);
        if (n2 !== 1) {
          throwError(e3, "unacceptable YAML version of the document");
        }
        e3.version = r3[0];
        e3.checkLineBreaks = a2 < 2;
        if (a2 !== 1 && a2 !== 2) {
          throwWarning(e3, "unsupported YAML version of the document");
        }
      }, TAG: function handleTagDirective(e3, t3, r3) {
        var i2, n2;
        if (r3.length !== 2) {
          throwError(e3, "TAG directive accepts exactly two arguments");
        }
        i2 = r3[0];
        n2 = r3[1];
        if (!w.test(i2)) {
          throwError(e3, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (l.call(e3.tagMap, i2)) {
          throwError(e3, 'there is a previously declared suffix for "' + i2 + '" tag handle');
        }
        if (!y.test(n2)) {
          throwError(e3, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          n2 = decodeURIComponent(n2);
        } catch (t4) {
          throwError(e3, "tag prefix is malformed: " + n2);
        }
        e3.tagMap[i2] = n2;
      } };
      function captureSegment(e3, t3, r3, i2) {
        var n2, a2, o2, l2;
        if (t3 < r3) {
          l2 = e3.input.slice(t3, r3);
          if (i2) {
            for (n2 = 0, a2 = l2.length; n2 < a2; n2 += 1) {
              o2 = l2.charCodeAt(n2);
              if (!(o2 === 9 || 32 <= o2 && o2 <= 1114111)) {
                throwError(e3, "expected valid JSON character");
              }
            }
          } else if (m.test(l2)) {
            throwError(e3, "the stream contains non-printable characters");
          }
          e3.result += l2;
        }
      }
      function mergeMappings(e3, t3, r3, n2) {
        var a2, o2, s2, c2;
        if (!i.isObject(r3)) {
          throwError(e3, "cannot merge mappings; the provided source object is unacceptable");
        }
        a2 = Object.keys(r3);
        for (s2 = 0, c2 = a2.length; s2 < c2; s2 += 1) {
          o2 = a2[s2];
          if (!l.call(t3, o2)) {
            t3[o2] = r3[o2];
            n2[o2] = true;
          }
        }
      }
      function storeMappingPair(e3, t3, r3, i2, n2, a2, o2, s2, c2) {
        var u2, p2;
        if (Array.isArray(n2)) {
          n2 = Array.prototype.slice.call(n2);
          for (u2 = 0, p2 = n2.length; u2 < p2; u2 += 1) {
            if (Array.isArray(n2[u2])) {
              throwError(e3, "nested arrays are not supported inside keys");
            }
            if (typeof n2 === "object" && _class(n2[u2]) === "[object Object]") {
              n2[u2] = "[object Object]";
            }
          }
        }
        if (typeof n2 === "object" && _class(n2) === "[object Object]") {
          n2 = "[object Object]";
        }
        n2 = String(n2);
        if (t3 === null) {
          t3 = {};
        }
        if (i2 === "tag:yaml.org,2002:merge") {
          if (Array.isArray(a2)) {
            for (u2 = 0, p2 = a2.length; u2 < p2; u2 += 1) {
              mergeMappings(e3, t3, a2[u2], r3);
            }
          } else {
            mergeMappings(e3, t3, a2, r3);
          }
        } else {
          if (!e3.json && !l.call(r3, n2) && l.call(t3, n2)) {
            e3.line = o2 || e3.line;
            e3.lineStart = s2 || e3.lineStart;
            e3.position = c2 || e3.position;
            throwError(e3, "duplicated mapping key");
          }
          if (n2 === "__proto__") {
            Object.defineProperty(t3, n2, { configurable: true, enumerable: true, writable: true, value: a2 });
          } else {
            t3[n2] = a2;
          }
          delete r3[n2];
        }
        return t3;
      }
      function readLineBreak(e3) {
        var t3;
        t3 = e3.input.charCodeAt(e3.position);
        if (t3 === 10) {
          e3.position++;
        } else if (t3 === 13) {
          e3.position++;
          if (e3.input.charCodeAt(e3.position) === 10) {
            e3.position++;
          }
        } else {
          throwError(e3, "a line break is expected");
        }
        e3.line += 1;
        e3.lineStart = e3.position;
        e3.firstTabInLine = -1;
      }
      function skipSeparationSpace(e3, t3, r3) {
        var i2 = 0, n2 = e3.input.charCodeAt(e3.position);
        while (n2 !== 0) {
          while (is_WHITE_SPACE(n2)) {
            if (n2 === 9 && e3.firstTabInLine === -1) {
              e3.firstTabInLine = e3.position;
            }
            n2 = e3.input.charCodeAt(++e3.position);
          }
          if (t3 && n2 === 35) {
            do {
              n2 = e3.input.charCodeAt(++e3.position);
            } while (n2 !== 10 && n2 !== 13 && n2 !== 0);
          }
          if (is_EOL(n2)) {
            readLineBreak(e3);
            n2 = e3.input.charCodeAt(e3.position);
            i2++;
            e3.lineIndent = 0;
            while (n2 === 32) {
              e3.lineIndent++;
              n2 = e3.input.charCodeAt(++e3.position);
            }
          } else {
            break;
          }
        }
        if (r3 !== -1 && i2 !== 0 && e3.lineIndent < r3) {
          throwWarning(e3, "deficient indentation");
        }
        return i2;
      }
      function testDocumentSeparator(e3) {
        var t3 = e3.position, r3;
        r3 = e3.input.charCodeAt(t3);
        if ((r3 === 45 || r3 === 46) && r3 === e3.input.charCodeAt(t3 + 1) && r3 === e3.input.charCodeAt(t3 + 2)) {
          t3 += 3;
          r3 = e3.input.charCodeAt(t3);
          if (r3 === 0 || is_WS_OR_EOL(r3)) {
            return true;
          }
        }
        return false;
      }
      function writeFoldedLines(e3, t3) {
        if (t3 === 1) {
          e3.result += " ";
        } else if (t3 > 1) {
          e3.result += i.repeat("\n", t3 - 1);
        }
      }
      function readPlainScalar(e3, t3, r3) {
        var i2, n2, a2, o2, l2, s2, c2, u2, p2 = e3.kind, f2 = e3.result, d2;
        d2 = e3.input.charCodeAt(e3.position);
        if (is_WS_OR_EOL(d2) || is_FLOW_INDICATOR(d2) || d2 === 35 || d2 === 38 || d2 === 42 || d2 === 33 || d2 === 124 || d2 === 62 || d2 === 39 || d2 === 34 || d2 === 37 || d2 === 64 || d2 === 96) {
          return false;
        }
        if (d2 === 63 || d2 === 45) {
          n2 = e3.input.charCodeAt(e3.position + 1);
          if (is_WS_OR_EOL(n2) || r3 && is_FLOW_INDICATOR(n2)) {
            return false;
          }
        }
        e3.kind = "scalar";
        e3.result = "";
        a2 = o2 = e3.position;
        l2 = false;
        while (d2 !== 0) {
          if (d2 === 58) {
            n2 = e3.input.charCodeAt(e3.position + 1);
            if (is_WS_OR_EOL(n2) || r3 && is_FLOW_INDICATOR(n2)) {
              break;
            }
          } else if (d2 === 35) {
            i2 = e3.input.charCodeAt(e3.position - 1);
            if (is_WS_OR_EOL(i2)) {
              break;
            }
          } else if (e3.position === e3.lineStart && testDocumentSeparator(e3) || r3 && is_FLOW_INDICATOR(d2)) {
            break;
          } else if (is_EOL(d2)) {
            s2 = e3.line;
            c2 = e3.lineStart;
            u2 = e3.lineIndent;
            skipSeparationSpace(e3, false, -1);
            if (e3.lineIndent >= t3) {
              l2 = true;
              d2 = e3.input.charCodeAt(e3.position);
              continue;
            } else {
              e3.position = o2;
              e3.line = s2;
              e3.lineStart = c2;
              e3.lineIndent = u2;
              break;
            }
          }
          if (l2) {
            captureSegment(e3, a2, o2, false);
            writeFoldedLines(e3, e3.line - s2);
            a2 = o2 = e3.position;
            l2 = false;
          }
          if (!is_WHITE_SPACE(d2)) {
            o2 = e3.position + 1;
          }
          d2 = e3.input.charCodeAt(++e3.position);
        }
        captureSegment(e3, a2, o2, false);
        if (e3.result) {
          return true;
        }
        e3.kind = p2;
        e3.result = f2;
        return false;
      }
      function readSingleQuotedScalar(e3, t3) {
        var r3, i2, n2;
        r3 = e3.input.charCodeAt(e3.position);
        if (r3 !== 39) {
          return false;
        }
        e3.kind = "scalar";
        e3.result = "";
        e3.position++;
        i2 = n2 = e3.position;
        while ((r3 = e3.input.charCodeAt(e3.position)) !== 0) {
          if (r3 === 39) {
            captureSegment(e3, i2, e3.position, true);
            r3 = e3.input.charCodeAt(++e3.position);
            if (r3 === 39) {
              i2 = e3.position;
              e3.position++;
              n2 = e3.position;
            } else {
              return true;
            }
          } else if (is_EOL(r3)) {
            captureSegment(e3, i2, n2, true);
            writeFoldedLines(e3, skipSeparationSpace(e3, false, t3));
            i2 = n2 = e3.position;
          } else if (e3.position === e3.lineStart && testDocumentSeparator(e3)) {
            throwError(e3, "unexpected end of the document within a single quoted scalar");
          } else {
            e3.position++;
            n2 = e3.position;
          }
        }
        throwError(e3, "unexpected end of the stream within a single quoted scalar");
      }
      function readDoubleQuotedScalar(e3, t3) {
        var r3, i2, n2, a2, o2, l2;
        l2 = e3.input.charCodeAt(e3.position);
        if (l2 !== 34) {
          return false;
        }
        e3.kind = "scalar";
        e3.result = "";
        e3.position++;
        r3 = i2 = e3.position;
        while ((l2 = e3.input.charCodeAt(e3.position)) !== 0) {
          if (l2 === 34) {
            captureSegment(e3, r3, e3.position, true);
            e3.position++;
            return true;
          } else if (l2 === 92) {
            captureSegment(e3, r3, e3.position, true);
            l2 = e3.input.charCodeAt(++e3.position);
            if (is_EOL(l2)) {
              skipSeparationSpace(e3, false, t3);
            } else if (l2 < 256 && S[l2]) {
              e3.result += A[l2];
              e3.position++;
            } else if ((o2 = escapedHexLen(l2)) > 0) {
              n2 = o2;
              a2 = 0;
              for (; n2 > 0; n2--) {
                l2 = e3.input.charCodeAt(++e3.position);
                if ((o2 = fromHexCode(l2)) >= 0) {
                  a2 = (a2 << 4) + o2;
                } else {
                  throwError(e3, "expected hexadecimal character");
                }
              }
              e3.result += charFromCodepoint(a2);
              e3.position++;
            } else {
              throwError(e3, "unknown escape sequence");
            }
            r3 = i2 = e3.position;
          } else if (is_EOL(l2)) {
            captureSegment(e3, r3, i2, true);
            writeFoldedLines(e3, skipSeparationSpace(e3, false, t3));
            r3 = i2 = e3.position;
          } else if (e3.position === e3.lineStart && testDocumentSeparator(e3)) {
            throwError(e3, "unexpected end of the document within a double quoted scalar");
          } else {
            e3.position++;
            i2 = e3.position;
          }
        }
        throwError(e3, "unexpected end of the stream within a double quoted scalar");
      }
      function readFlowCollection(e3, t3) {
        var r3 = true, i2, n2, a2, o2 = e3.tag, l2, c2 = e3.anchor, u2, p2, f2, d2, h2, m2 = /* @__PURE__ */ Object.create(null), g2, v2, w2, y2;
        y2 = e3.input.charCodeAt(e3.position);
        if (y2 === 91) {
          p2 = 93;
          h2 = false;
          l2 = [];
        } else if (y2 === 123) {
          p2 = 125;
          h2 = true;
          l2 = {};
        } else {
          return false;
        }
        if (e3.anchor !== null) {
          e3.anchorMap[e3.anchor] = l2;
        }
        y2 = e3.input.charCodeAt(++e3.position);
        while (y2 !== 0) {
          skipSeparationSpace(e3, true, t3);
          y2 = e3.input.charCodeAt(e3.position);
          if (y2 === p2) {
            e3.position++;
            e3.tag = o2;
            e3.anchor = c2;
            e3.kind = h2 ? "mapping" : "sequence";
            e3.result = l2;
            return true;
          } else if (!r3) {
            throwError(e3, "missed comma between flow collection entries");
          } else if (y2 === 44) {
            throwError(e3, "expected the node content, but found ','");
          }
          v2 = g2 = w2 = null;
          f2 = d2 = false;
          if (y2 === 63) {
            u2 = e3.input.charCodeAt(e3.position + 1);
            if (is_WS_OR_EOL(u2)) {
              f2 = d2 = true;
              e3.position++;
              skipSeparationSpace(e3, true, t3);
            }
          }
          i2 = e3.line;
          n2 = e3.lineStart;
          a2 = e3.position;
          composeNode(e3, t3, s, false, true);
          v2 = e3.tag;
          g2 = e3.result;
          skipSeparationSpace(e3, true, t3);
          y2 = e3.input.charCodeAt(e3.position);
          if ((d2 || e3.line === i2) && y2 === 58) {
            f2 = true;
            y2 = e3.input.charCodeAt(++e3.position);
            skipSeparationSpace(e3, true, t3);
            composeNode(e3, t3, s, false, true);
            w2 = e3.result;
          }
          if (h2) {
            storeMappingPair(e3, l2, m2, v2, g2, w2, i2, n2, a2);
          } else if (f2) {
            l2.push(storeMappingPair(e3, null, m2, v2, g2, w2, i2, n2, a2));
          } else {
            l2.push(g2);
          }
          skipSeparationSpace(e3, true, t3);
          y2 = e3.input.charCodeAt(e3.position);
          if (y2 === 44) {
            r3 = true;
            y2 = e3.input.charCodeAt(++e3.position);
          } else {
            r3 = false;
          }
        }
        throwError(e3, "unexpected end of the stream within a flow collection");
      }
      function readBlockScalar(e3, t3) {
        var r3, n2, a2 = f, o2 = false, l2 = false, s2 = t3, c2 = 0, u2 = false, p2, m2;
        m2 = e3.input.charCodeAt(e3.position);
        if (m2 === 124) {
          n2 = false;
        } else if (m2 === 62) {
          n2 = true;
        } else {
          return false;
        }
        e3.kind = "scalar";
        e3.result = "";
        while (m2 !== 0) {
          m2 = e3.input.charCodeAt(++e3.position);
          if (m2 === 43 || m2 === 45) {
            if (f === a2) {
              a2 = m2 === 43 ? h : d;
            } else {
              throwError(e3, "repeat of a chomping mode identifier");
            }
          } else if ((p2 = fromDecimalCode(m2)) >= 0) {
            if (p2 === 0) {
              throwError(e3, "bad explicit indentation width of a block scalar; it cannot be less than one");
            } else if (!l2) {
              s2 = t3 + p2 - 1;
              l2 = true;
            } else {
              throwError(e3, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(m2)) {
          do {
            m2 = e3.input.charCodeAt(++e3.position);
          } while (is_WHITE_SPACE(m2));
          if (m2 === 35) {
            do {
              m2 = e3.input.charCodeAt(++e3.position);
            } while (!is_EOL(m2) && m2 !== 0);
          }
        }
        while (m2 !== 0) {
          readLineBreak(e3);
          e3.lineIndent = 0;
          m2 = e3.input.charCodeAt(e3.position);
          while ((!l2 || e3.lineIndent < s2) && m2 === 32) {
            e3.lineIndent++;
            m2 = e3.input.charCodeAt(++e3.position);
          }
          if (!l2 && e3.lineIndent > s2) {
            s2 = e3.lineIndent;
          }
          if (is_EOL(m2)) {
            c2++;
            continue;
          }
          if (e3.lineIndent < s2) {
            if (a2 === h) {
              e3.result += i.repeat("\n", o2 ? 1 + c2 : c2);
            } else if (a2 === f) {
              if (o2) {
                e3.result += "\n";
              }
            }
            break;
          }
          if (n2) {
            if (is_WHITE_SPACE(m2)) {
              u2 = true;
              e3.result += i.repeat("\n", o2 ? 1 + c2 : c2);
            } else if (u2) {
              u2 = false;
              e3.result += i.repeat("\n", c2 + 1);
            } else if (c2 === 0) {
              if (o2) {
                e3.result += " ";
              }
            } else {
              e3.result += i.repeat("\n", c2);
            }
          } else {
            e3.result += i.repeat("\n", o2 ? 1 + c2 : c2);
          }
          o2 = true;
          l2 = true;
          c2 = 0;
          r3 = e3.position;
          while (!is_EOL(m2) && m2 !== 0) {
            m2 = e3.input.charCodeAt(++e3.position);
          }
          captureSegment(e3, r3, e3.position, false);
        }
        return true;
      }
      function readBlockSequence(e3, t3) {
        var r3, i2 = e3.tag, n2 = e3.anchor, a2 = [], o2, l2 = false, s2;
        if (e3.firstTabInLine !== -1)
          return false;
        if (e3.anchor !== null) {
          e3.anchorMap[e3.anchor] = a2;
        }
        s2 = e3.input.charCodeAt(e3.position);
        while (s2 !== 0) {
          if (e3.firstTabInLine !== -1) {
            e3.position = e3.firstTabInLine;
            throwError(e3, "tab characters must not be used in indentation");
          }
          if (s2 !== 45) {
            break;
          }
          o2 = e3.input.charCodeAt(e3.position + 1);
          if (!is_WS_OR_EOL(o2)) {
            break;
          }
          l2 = true;
          e3.position++;
          if (skipSeparationSpace(e3, true, -1)) {
            if (e3.lineIndent <= t3) {
              a2.push(null);
              s2 = e3.input.charCodeAt(e3.position);
              continue;
            }
          }
          r3 = e3.line;
          composeNode(e3, t3, u, false, true);
          a2.push(e3.result);
          skipSeparationSpace(e3, true, -1);
          s2 = e3.input.charCodeAt(e3.position);
          if ((e3.line === r3 || e3.lineIndent > t3) && s2 !== 0) {
            throwError(e3, "bad indentation of a sequence entry");
          } else if (e3.lineIndent < t3) {
            break;
          }
        }
        if (l2) {
          e3.tag = i2;
          e3.anchor = n2;
          e3.kind = "sequence";
          e3.result = a2;
          return true;
        }
        return false;
      }
      function readBlockMapping(e3, t3, r3) {
        var i2, n2, a2, o2, l2, s2, u2 = e3.tag, f2 = e3.anchor, d2 = {}, h2 = /* @__PURE__ */ Object.create(null), m2 = null, g2 = null, v2 = null, w2 = false, y2 = false, S2;
        if (e3.firstTabInLine !== -1)
          return false;
        if (e3.anchor !== null) {
          e3.anchorMap[e3.anchor] = d2;
        }
        S2 = e3.input.charCodeAt(e3.position);
        while (S2 !== 0) {
          if (!w2 && e3.firstTabInLine !== -1) {
            e3.position = e3.firstTabInLine;
            throwError(e3, "tab characters must not be used in indentation");
          }
          i2 = e3.input.charCodeAt(e3.position + 1);
          a2 = e3.line;
          if ((S2 === 63 || S2 === 58) && is_WS_OR_EOL(i2)) {
            if (S2 === 63) {
              if (w2) {
                storeMappingPair(e3, d2, h2, m2, g2, null, o2, l2, s2);
                m2 = g2 = v2 = null;
              }
              y2 = true;
              w2 = true;
              n2 = true;
            } else if (w2) {
              w2 = false;
              n2 = true;
            } else {
              throwError(e3, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
            }
            e3.position += 1;
            S2 = i2;
          } else {
            o2 = e3.line;
            l2 = e3.lineStart;
            s2 = e3.position;
            if (!composeNode(e3, r3, c, false, true)) {
              break;
            }
            if (e3.line === a2) {
              S2 = e3.input.charCodeAt(e3.position);
              while (is_WHITE_SPACE(S2)) {
                S2 = e3.input.charCodeAt(++e3.position);
              }
              if (S2 === 58) {
                S2 = e3.input.charCodeAt(++e3.position);
                if (!is_WS_OR_EOL(S2)) {
                  throwError(e3, "a whitespace character is expected after the key-value separator within a block mapping");
                }
                if (w2) {
                  storeMappingPair(e3, d2, h2, m2, g2, null, o2, l2, s2);
                  m2 = g2 = v2 = null;
                }
                y2 = true;
                w2 = false;
                n2 = false;
                m2 = e3.tag;
                g2 = e3.result;
              } else if (y2) {
                throwError(e3, "can not read an implicit mapping pair; a colon is missed");
              } else {
                e3.tag = u2;
                e3.anchor = f2;
                return true;
              }
            } else if (y2) {
              throwError(e3, "can not read a block mapping entry; a multiline key may not be an implicit key");
            } else {
              e3.tag = u2;
              e3.anchor = f2;
              return true;
            }
          }
          if (e3.line === a2 || e3.lineIndent > t3) {
            if (w2) {
              o2 = e3.line;
              l2 = e3.lineStart;
              s2 = e3.position;
            }
            if (composeNode(e3, t3, p, true, n2)) {
              if (w2) {
                g2 = e3.result;
              } else {
                v2 = e3.result;
              }
            }
            if (!w2) {
              storeMappingPair(e3, d2, h2, m2, g2, v2, o2, l2, s2);
              m2 = g2 = v2 = null;
            }
            skipSeparationSpace(e3, true, -1);
            S2 = e3.input.charCodeAt(e3.position);
          }
          if ((e3.line === a2 || e3.lineIndent > t3) && S2 !== 0) {
            throwError(e3, "bad indentation of a mapping entry");
          } else if (e3.lineIndent < t3) {
            break;
          }
        }
        if (w2) {
          storeMappingPair(e3, d2, h2, m2, g2, null, o2, l2, s2);
        }
        if (y2) {
          e3.tag = u2;
          e3.anchor = f2;
          e3.kind = "mapping";
          e3.result = d2;
        }
        return y2;
      }
      function readTagProperty(e3) {
        var t3, r3 = false, i2 = false, n2, a2, o2;
        o2 = e3.input.charCodeAt(e3.position);
        if (o2 !== 33)
          return false;
        if (e3.tag !== null) {
          throwError(e3, "duplication of a tag property");
        }
        o2 = e3.input.charCodeAt(++e3.position);
        if (o2 === 60) {
          r3 = true;
          o2 = e3.input.charCodeAt(++e3.position);
        } else if (o2 === 33) {
          i2 = true;
          n2 = "!!";
          o2 = e3.input.charCodeAt(++e3.position);
        } else {
          n2 = "!";
        }
        t3 = e3.position;
        if (r3) {
          do {
            o2 = e3.input.charCodeAt(++e3.position);
          } while (o2 !== 0 && o2 !== 62);
          if (e3.position < e3.length) {
            a2 = e3.input.slice(t3, e3.position);
            o2 = e3.input.charCodeAt(++e3.position);
          } else {
            throwError(e3, "unexpected end of the stream within a verbatim tag");
          }
        } else {
          while (o2 !== 0 && !is_WS_OR_EOL(o2)) {
            if (o2 === 33) {
              if (!i2) {
                n2 = e3.input.slice(t3 - 1, e3.position + 1);
                if (!w.test(n2)) {
                  throwError(e3, "named tag handle cannot contain such characters");
                }
                i2 = true;
                t3 = e3.position + 1;
              } else {
                throwError(e3, "tag suffix cannot contain exclamation marks");
              }
            }
            o2 = e3.input.charCodeAt(++e3.position);
          }
          a2 = e3.input.slice(t3, e3.position);
          if (v.test(a2)) {
            throwError(e3, "tag suffix cannot contain flow indicator characters");
          }
        }
        if (a2 && !y.test(a2)) {
          throwError(e3, "tag name cannot contain such characters: " + a2);
        }
        try {
          a2 = decodeURIComponent(a2);
        } catch (t4) {
          throwError(e3, "tag name is malformed: " + a2);
        }
        if (r3) {
          e3.tag = a2;
        } else if (l.call(e3.tagMap, n2)) {
          e3.tag = e3.tagMap[n2] + a2;
        } else if (n2 === "!") {
          e3.tag = "!" + a2;
        } else if (n2 === "!!") {
          e3.tag = "tag:yaml.org,2002:" + a2;
        } else {
          throwError(e3, 'undeclared tag handle "' + n2 + '"');
        }
        return true;
      }
      function readAnchorProperty(e3) {
        var t3, r3;
        r3 = e3.input.charCodeAt(e3.position);
        if (r3 !== 38)
          return false;
        if (e3.anchor !== null) {
          throwError(e3, "duplication of an anchor property");
        }
        r3 = e3.input.charCodeAt(++e3.position);
        t3 = e3.position;
        while (r3 !== 0 && !is_WS_OR_EOL(r3) && !is_FLOW_INDICATOR(r3)) {
          r3 = e3.input.charCodeAt(++e3.position);
        }
        if (e3.position === t3) {
          throwError(e3, "name of an anchor node must contain at least one character");
        }
        e3.anchor = e3.input.slice(t3, e3.position);
        return true;
      }
      function readAlias(e3) {
        var t3, r3, i2;
        i2 = e3.input.charCodeAt(e3.position);
        if (i2 !== 42)
          return false;
        i2 = e3.input.charCodeAt(++e3.position);
        t3 = e3.position;
        while (i2 !== 0 && !is_WS_OR_EOL(i2) && !is_FLOW_INDICATOR(i2)) {
          i2 = e3.input.charCodeAt(++e3.position);
        }
        if (e3.position === t3) {
          throwError(e3, "name of an alias node must contain at least one character");
        }
        r3 = e3.input.slice(t3, e3.position);
        if (!l.call(e3.anchorMap, r3)) {
          throwError(e3, 'unidentified alias "' + r3 + '"');
        }
        e3.result = e3.anchorMap[r3];
        skipSeparationSpace(e3, true, -1);
        return true;
      }
      function composeNode(e3, t3, r3, i2, n2) {
        var a2, o2, f2, d2 = 1, h2 = false, m2 = false, g2, v2, w2, y2, S2, A2;
        if (e3.listener !== null) {
          e3.listener("open", e3);
        }
        e3.tag = null;
        e3.anchor = null;
        e3.kind = null;
        e3.result = null;
        a2 = o2 = f2 = p === r3 || u === r3;
        if (i2) {
          if (skipSeparationSpace(e3, true, -1)) {
            h2 = true;
            if (e3.lineIndent > t3) {
              d2 = 1;
            } else if (e3.lineIndent === t3) {
              d2 = 0;
            } else if (e3.lineIndent < t3) {
              d2 = -1;
            }
          }
        }
        if (d2 === 1) {
          while (readTagProperty(e3) || readAnchorProperty(e3)) {
            if (skipSeparationSpace(e3, true, -1)) {
              h2 = true;
              f2 = a2;
              if (e3.lineIndent > t3) {
                d2 = 1;
              } else if (e3.lineIndent === t3) {
                d2 = 0;
              } else if (e3.lineIndent < t3) {
                d2 = -1;
              }
            } else {
              f2 = false;
            }
          }
        }
        if (f2) {
          f2 = h2 || n2;
        }
        if (d2 === 1 || p === r3) {
          if (s === r3 || c === r3) {
            S2 = t3;
          } else {
            S2 = t3 + 1;
          }
          A2 = e3.position - e3.lineStart;
          if (d2 === 1) {
            if (f2 && (readBlockSequence(e3, A2) || readBlockMapping(e3, A2, S2)) || readFlowCollection(e3, S2)) {
              m2 = true;
            } else {
              if (o2 && readBlockScalar(e3, S2) || readSingleQuotedScalar(e3, S2) || readDoubleQuotedScalar(e3, S2)) {
                m2 = true;
              } else if (readAlias(e3)) {
                m2 = true;
                if (e3.tag !== null || e3.anchor !== null) {
                  throwError(e3, "alias node should not have any properties");
                }
              } else if (readPlainScalar(e3, S2, s === r3)) {
                m2 = true;
                if (e3.tag === null) {
                  e3.tag = "?";
                }
              }
              if (e3.anchor !== null) {
                e3.anchorMap[e3.anchor] = e3.result;
              }
            }
          } else if (d2 === 0) {
            m2 = f2 && readBlockSequence(e3, A2);
          }
        }
        if (e3.tag === null) {
          if (e3.anchor !== null) {
            e3.anchorMap[e3.anchor] = e3.result;
          }
        } else if (e3.tag === "?") {
          if (e3.result !== null && e3.kind !== "scalar") {
            throwError(e3, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e3.kind + '"');
          }
          for (g2 = 0, v2 = e3.implicitTypes.length; g2 < v2; g2 += 1) {
            y2 = e3.implicitTypes[g2];
            if (y2.resolve(e3.result)) {
              e3.result = y2.construct(e3.result);
              e3.tag = y2.tag;
              if (e3.anchor !== null) {
                e3.anchorMap[e3.anchor] = e3.result;
              }
              break;
            }
          }
        } else if (e3.tag !== "!") {
          if (l.call(e3.typeMap[e3.kind || "fallback"], e3.tag)) {
            y2 = e3.typeMap[e3.kind || "fallback"][e3.tag];
          } else {
            y2 = null;
            w2 = e3.typeMap.multi[e3.kind || "fallback"];
            for (g2 = 0, v2 = w2.length; g2 < v2; g2 += 1) {
              if (e3.tag.slice(0, w2[g2].tag.length) === w2[g2].tag) {
                y2 = w2[g2];
                break;
              }
            }
          }
          if (!y2) {
            throwError(e3, "unknown tag !<" + e3.tag + ">");
          }
          if (e3.result !== null && y2.kind !== e3.kind) {
            throwError(e3, "unacceptable node kind for !<" + e3.tag + '> tag; it should be "' + y2.kind + '", not "' + e3.kind + '"');
          }
          if (!y2.resolve(e3.result, e3.tag)) {
            throwError(e3, "cannot resolve a node with !<" + e3.tag + "> explicit tag");
          } else {
            e3.result = y2.construct(e3.result, e3.tag);
            if (e3.anchor !== null) {
              e3.anchorMap[e3.anchor] = e3.result;
            }
          }
        }
        if (e3.listener !== null) {
          e3.listener("close", e3);
        }
        return e3.tag !== null || e3.anchor !== null || m2;
      }
      function readDocument(e3) {
        var t3 = e3.position, r3, i2, n2, a2 = false, o2;
        e3.version = null;
        e3.checkLineBreaks = e3.legacy;
        e3.tagMap = /* @__PURE__ */ Object.create(null);
        e3.anchorMap = /* @__PURE__ */ Object.create(null);
        while ((o2 = e3.input.charCodeAt(e3.position)) !== 0) {
          skipSeparationSpace(e3, true, -1);
          o2 = e3.input.charCodeAt(e3.position);
          if (e3.lineIndent > 0 || o2 !== 37) {
            break;
          }
          a2 = true;
          o2 = e3.input.charCodeAt(++e3.position);
          r3 = e3.position;
          while (o2 !== 0 && !is_WS_OR_EOL(o2)) {
            o2 = e3.input.charCodeAt(++e3.position);
          }
          i2 = e3.input.slice(r3, e3.position);
          n2 = [];
          if (i2.length < 1) {
            throwError(e3, "directive name must not be less than one character in length");
          }
          while (o2 !== 0) {
            while (is_WHITE_SPACE(o2)) {
              o2 = e3.input.charCodeAt(++e3.position);
            }
            if (o2 === 35) {
              do {
                o2 = e3.input.charCodeAt(++e3.position);
              } while (o2 !== 0 && !is_EOL(o2));
              break;
            }
            if (is_EOL(o2))
              break;
            r3 = e3.position;
            while (o2 !== 0 && !is_WS_OR_EOL(o2)) {
              o2 = e3.input.charCodeAt(++e3.position);
            }
            n2.push(e3.input.slice(r3, e3.position));
          }
          if (o2 !== 0)
            readLineBreak(e3);
          if (l.call(x, i2)) {
            x[i2](e3, i2, n2);
          } else {
            throwWarning(e3, 'unknown document directive "' + i2 + '"');
          }
        }
        skipSeparationSpace(e3, true, -1);
        if (e3.lineIndent === 0 && e3.input.charCodeAt(e3.position) === 45 && e3.input.charCodeAt(e3.position + 1) === 45 && e3.input.charCodeAt(e3.position + 2) === 45) {
          e3.position += 3;
          skipSeparationSpace(e3, true, -1);
        } else if (a2) {
          throwError(e3, "directives end mark is expected");
        }
        composeNode(e3, e3.lineIndent - 1, p, false, true);
        skipSeparationSpace(e3, true, -1);
        if (e3.checkLineBreaks && g.test(e3.input.slice(t3, e3.position))) {
          throwWarning(e3, "non-ASCII line breaks are interpreted as content");
        }
        e3.documents.push(e3.result);
        if (e3.position === e3.lineStart && testDocumentSeparator(e3)) {
          if (e3.input.charCodeAt(e3.position) === 46) {
            e3.position += 3;
            skipSeparationSpace(e3, true, -1);
          }
          return;
        }
        if (e3.position < e3.length - 1) {
          throwError(e3, "end of the stream or a document separator is expected");
        } else {
          return;
        }
      }
      function loadDocuments(e3, t3) {
        e3 = String(e3);
        t3 = t3 || {};
        if (e3.length !== 0) {
          if (e3.charCodeAt(e3.length - 1) !== 10 && e3.charCodeAt(e3.length - 1) !== 13) {
            e3 += "\n";
          }
          if (e3.charCodeAt(0) === 65279) {
            e3 = e3.slice(1);
          }
        }
        var r3 = new State(e3, t3);
        var i2 = e3.indexOf("\0");
        if (i2 !== -1) {
          r3.position = i2;
          throwError(r3, "null byte is not allowed in input");
        }
        r3.input += "\0";
        while (r3.input.charCodeAt(r3.position) === 32) {
          r3.lineIndent += 1;
          r3.position += 1;
        }
        while (r3.position < r3.length - 1) {
          readDocument(r3);
        }
        return r3.documents;
      }
      function loadAll(e3, t3, r3) {
        if (t3 !== null && typeof t3 === "object" && typeof r3 === "undefined") {
          r3 = t3;
          t3 = null;
        }
        var i2 = loadDocuments(e3, r3);
        if (typeof t3 !== "function") {
          return i2;
        }
        for (var n2 = 0, a2 = i2.length; n2 < a2; n2 += 1) {
          t3(i2[n2]);
        }
      }
      function load(e3, t3) {
        var r3 = loadDocuments(e3, t3);
        if (r3.length === 0) {
          return void 0;
        } else if (r3.length === 1) {
          return r3[0];
        }
        throw new n("expected a single document in the stream, but found more");
      }
      e2.exports.loadAll = loadAll;
      e2.exports.load = load;
    }, 915: (e2, t2, r2) => {
      var i = r2(574);
      var n = r2(498);
      function compileList(e3, t3) {
        var r3 = [];
        e3[t3].forEach(function(e4) {
          var t4 = r3.length;
          r3.forEach(function(r4, i2) {
            if (r4.tag === e4.tag && r4.kind === e4.kind && r4.multi === e4.multi) {
              t4 = i2;
            }
          });
          r3[t4] = e4;
        });
        return r3;
      }
      function compileMap() {
        var e3 = { scalar: {}, sequence: {}, mapping: {}, fallback: {}, multi: { scalar: [], sequence: [], mapping: [], fallback: [] } }, t3, r3;
        function collectType(t4) {
          if (t4.multi) {
            e3.multi[t4.kind].push(t4);
            e3.multi["fallback"].push(t4);
          } else {
            e3[t4.kind][t4.tag] = e3["fallback"][t4.tag] = t4;
          }
        }
        for (t3 = 0, r3 = arguments.length; t3 < r3; t3 += 1) {
          arguments[t3].forEach(collectType);
        }
        return e3;
      }
      function Schema(e3) {
        return this.extend(e3);
      }
      Schema.prototype.extend = function extend(e3) {
        var t3 = [];
        var r3 = [];
        if (e3 instanceof n) {
          r3.push(e3);
        } else if (Array.isArray(e3)) {
          r3 = r3.concat(e3);
        } else if (e3 && (Array.isArray(e3.implicit) || Array.isArray(e3.explicit))) {
          if (e3.implicit)
            t3 = t3.concat(e3.implicit);
          if (e3.explicit)
            r3 = r3.concat(e3.explicit);
        } else {
          throw new i("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
        }
        t3.forEach(function(e4) {
          if (!(e4 instanceof n)) {
            throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          }
          if (e4.loadKind && e4.loadKind !== "scalar") {
            throw new i("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }
          if (e4.multi) {
            throw new i("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
          }
        });
        r3.forEach(function(e4) {
          if (!(e4 instanceof n)) {
            throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          }
        });
        var a = Object.create(Schema.prototype);
        a.implicit = (this.implicit || []).concat(t3);
        a.explicit = (this.explicit || []).concat(r3);
        a.compiledImplicit = compileList(a, "implicit");
        a.compiledExplicit = compileList(a, "explicit");
        a.compiledTypeMap = compileMap(a.compiledImplicit, a.compiledExplicit);
        return a;
      };
      e2.exports = Schema;
    }, 645: (e2, t2, r2) => {
      e2.exports = r2(854);
    }, 518: (e2, t2, r2) => {
      e2.exports = r2(645).extend({ implicit: [r2(413), r2(690)], explicit: [r2(385), r2(590), r2(886), r2(938)] });
    }, 9: (e2, t2, r2) => {
      var i = r2(915);
      e2.exports = new i({ explicit: [r2(299), r2(369), r2(671)] });
    }, 854: (e2, t2, r2) => {
      e2.exports = r2(9).extend({ implicit: [r2(336), r2(568), r2(222), r2(650)] });
    }, 80: (e2, t2, r2) => {
      var i = r2(234);
      function getLine(e3, t3, r3, i2, n) {
        var a = "";
        var o = "";
        var l = Math.floor(n / 2) - 1;
        if (i2 - t3 > l) {
          a = " ... ";
          t3 = i2 - l + a.length;
        }
        if (r3 - i2 > l) {
          o = " ...";
          r3 = i2 + l - o.length;
        }
        return { str: a + e3.slice(t3, r3).replace(/\t/g, "\u2192") + o, pos: i2 - t3 + a.length };
      }
      function padStart(e3, t3) {
        return i.repeat(" ", t3 - e3.length) + e3;
      }
      function makeSnippet(e3, t3) {
        t3 = Object.create(t3 || null);
        if (!e3.buffer)
          return null;
        if (!t3.maxLength)
          t3.maxLength = 79;
        if (typeof t3.indent !== "number")
          t3.indent = 1;
        if (typeof t3.linesBefore !== "number")
          t3.linesBefore = 3;
        if (typeof t3.linesAfter !== "number")
          t3.linesAfter = 2;
        var r3 = /\r?\n|\r|\0/g;
        var n = [0];
        var a = [];
        var o;
        var l = -1;
        while (o = r3.exec(e3.buffer)) {
          a.push(o.index);
          n.push(o.index + o[0].length);
          if (e3.position <= o.index && l < 0) {
            l = n.length - 2;
          }
        }
        if (l < 0)
          l = n.length - 1;
        var s = "", c, u;
        var p = Math.min(e3.line + t3.linesAfter, a.length).toString().length;
        var f = t3.maxLength - (t3.indent + p + 3);
        for (c = 1; c <= t3.linesBefore; c++) {
          if (l - c < 0)
            break;
          u = getLine(e3.buffer, n[l - c], a[l - c], e3.position - (n[l] - n[l - c]), f);
          s = i.repeat(" ", t3.indent) + padStart((e3.line - c + 1).toString(), p) + " | " + u.str + "\n" + s;
        }
        u = getLine(e3.buffer, n[l], a[l], e3.position, f);
        s += i.repeat(" ", t3.indent) + padStart((e3.line + 1).toString(), p) + " | " + u.str + "\n";
        s += i.repeat("-", t3.indent + p + 3 + u.pos) + "^\n";
        for (c = 1; c <= t3.linesAfter; c++) {
          if (l + c >= a.length)
            break;
          u = getLine(e3.buffer, n[l + c], a[l + c], e3.position - (n[l] - n[l + c]), f);
          s += i.repeat(" ", t3.indent) + padStart((e3.line + c + 1).toString(), p) + " | " + u.str + "\n";
        }
        return s.replace(/\n$/, "");
      }
      e2.exports = makeSnippet;
    }, 498: (e2, t2, r2) => {
      var i = r2(574);
      var n = ["kind", "multi", "resolve", "construct", "instanceOf", "predicate", "represent", "representName", "defaultStyle", "styleAliases"];
      var a = ["scalar", "sequence", "mapping"];
      function compileStyleAliases(e3) {
        var t3 = {};
        if (e3 !== null) {
          Object.keys(e3).forEach(function(r3) {
            e3[r3].forEach(function(e4) {
              t3[String(e4)] = r3;
            });
          });
        }
        return t3;
      }
      function Type(e3, t3) {
        t3 = t3 || {};
        Object.keys(t3).forEach(function(t4) {
          if (n.indexOf(t4) === -1) {
            throw new i('Unknown option "' + t4 + '" is met in definition of "' + e3 + '" YAML type.');
          }
        });
        this.options = t3;
        this.tag = e3;
        this.kind = t3["kind"] || null;
        this.resolve = t3["resolve"] || function() {
          return true;
        };
        this.construct = t3["construct"] || function(e4) {
          return e4;
        };
        this.instanceOf = t3["instanceOf"] || null;
        this.predicate = t3["predicate"] || null;
        this.represent = t3["represent"] || null;
        this.representName = t3["representName"] || null;
        this.defaultStyle = t3["defaultStyle"] || null;
        this.multi = t3["multi"] || false;
        this.styleAliases = compileStyleAliases(t3["styleAliases"] || null);
        if (a.indexOf(this.kind) === -1) {
          throw new i('Unknown kind "' + this.kind + '" is specified for "' + e3 + '" YAML type.');
        }
      }
      e2.exports = Type;
    }, 385: (e2, t2, r2) => {
      var i = r2(498);
      var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
      function resolveYamlBinary(e3) {
        if (e3 === null)
          return false;
        var t3, r3, i2 = 0, a = e3.length, o = n;
        for (r3 = 0; r3 < a; r3++) {
          t3 = o.indexOf(e3.charAt(r3));
          if (t3 > 64)
            continue;
          if (t3 < 0)
            return false;
          i2 += 6;
        }
        return i2 % 8 === 0;
      }
      function constructYamlBinary(e3) {
        var t3, r3, i2 = e3.replace(/[\r\n=]/g, ""), a = i2.length, o = n, l = 0, s = [];
        for (t3 = 0; t3 < a; t3++) {
          if (t3 % 4 === 0 && t3) {
            s.push(l >> 16 & 255);
            s.push(l >> 8 & 255);
            s.push(l & 255);
          }
          l = l << 6 | o.indexOf(i2.charAt(t3));
        }
        r3 = a % 4 * 6;
        if (r3 === 0) {
          s.push(l >> 16 & 255);
          s.push(l >> 8 & 255);
          s.push(l & 255);
        } else if (r3 === 18) {
          s.push(l >> 10 & 255);
          s.push(l >> 2 & 255);
        } else if (r3 === 12) {
          s.push(l >> 4 & 255);
        }
        return new Uint8Array(s);
      }
      function representYamlBinary(e3) {
        var t3 = "", r3 = 0, i2, a, o = e3.length, l = n;
        for (i2 = 0; i2 < o; i2++) {
          if (i2 % 3 === 0 && i2) {
            t3 += l[r3 >> 18 & 63];
            t3 += l[r3 >> 12 & 63];
            t3 += l[r3 >> 6 & 63];
            t3 += l[r3 & 63];
          }
          r3 = (r3 << 8) + e3[i2];
        }
        a = o % 3;
        if (a === 0) {
          t3 += l[r3 >> 18 & 63];
          t3 += l[r3 >> 12 & 63];
          t3 += l[r3 >> 6 & 63];
          t3 += l[r3 & 63];
        } else if (a === 2) {
          t3 += l[r3 >> 10 & 63];
          t3 += l[r3 >> 4 & 63];
          t3 += l[r3 << 2 & 63];
          t3 += l[64];
        } else if (a === 1) {
          t3 += l[r3 >> 2 & 63];
          t3 += l[r3 << 4 & 63];
          t3 += l[64];
          t3 += l[64];
        }
        return t3;
      }
      function isBinary(e3) {
        return Object.prototype.toString.call(e3) === "[object Uint8Array]";
      }
      e2.exports = new i("tag:yaml.org,2002:binary", { kind: "scalar", resolve: resolveYamlBinary, construct: constructYamlBinary, predicate: isBinary, represent: representYamlBinary });
    }, 568: (e2, t2, r2) => {
      var i = r2(498);
      function resolveYamlBoolean(e3) {
        if (e3 === null)
          return false;
        var t3 = e3.length;
        return t3 === 4 && (e3 === "true" || e3 === "True" || e3 === "TRUE") || t3 === 5 && (e3 === "false" || e3 === "False" || e3 === "FALSE");
      }
      function constructYamlBoolean(e3) {
        return e3 === "true" || e3 === "True" || e3 === "TRUE";
      }
      function isBoolean(e3) {
        return Object.prototype.toString.call(e3) === "[object Boolean]";
      }
      e2.exports = new i("tag:yaml.org,2002:bool", { kind: "scalar", resolve: resolveYamlBoolean, construct: constructYamlBoolean, predicate: isBoolean, represent: { lowercase: function(e3) {
        return e3 ? "true" : "false";
      }, uppercase: function(e3) {
        return e3 ? "TRUE" : "FALSE";
      }, camelcase: function(e3) {
        return e3 ? "True" : "False";
      } }, defaultStyle: "lowercase" });
    }, 650: (e2, t2, r2) => {
      var i = r2(234);
      var n = r2(498);
      var a = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
      function resolveYamlFloat(e3) {
        if (e3 === null)
          return false;
        if (!a.test(e3) || e3[e3.length - 1] === "_") {
          return false;
        }
        return true;
      }
      function constructYamlFloat(e3) {
        var t3, r3;
        t3 = e3.replace(/_/g, "").toLowerCase();
        r3 = t3[0] === "-" ? -1 : 1;
        if ("+-".indexOf(t3[0]) >= 0) {
          t3 = t3.slice(1);
        }
        if (t3 === ".inf") {
          return r3 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
        } else if (t3 === ".nan") {
          return NaN;
        }
        return r3 * parseFloat(t3, 10);
      }
      var o = /^[-+]?[0-9]+e/;
      function representYamlFloat(e3, t3) {
        var r3;
        if (isNaN(e3)) {
          switch (t3) {
            case "lowercase":
              return ".nan";
            case "uppercase":
              return ".NAN";
            case "camelcase":
              return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === e3) {
          switch (t3) {
            case "lowercase":
              return ".inf";
            case "uppercase":
              return ".INF";
            case "camelcase":
              return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === e3) {
          switch (t3) {
            case "lowercase":
              return "-.inf";
            case "uppercase":
              return "-.INF";
            case "camelcase":
              return "-.Inf";
          }
        } else if (i.isNegativeZero(e3)) {
          return "-0.0";
        }
        r3 = e3.toString(10);
        return o.test(r3) ? r3.replace("e", ".e") : r3;
      }
      function isFloat(e3) {
        return Object.prototype.toString.call(e3) === "[object Number]" && (e3 % 1 !== 0 || i.isNegativeZero(e3));
      }
      e2.exports = new n("tag:yaml.org,2002:float", { kind: "scalar", resolve: resolveYamlFloat, construct: constructYamlFloat, predicate: isFloat, represent: representYamlFloat, defaultStyle: "lowercase" });
    }, 222: (e2, t2, r2) => {
      var i = r2(234);
      var n = r2(498);
      function isHexCode(e3) {
        return 48 <= e3 && e3 <= 57 || 65 <= e3 && e3 <= 70 || 97 <= e3 && e3 <= 102;
      }
      function isOctCode(e3) {
        return 48 <= e3 && e3 <= 55;
      }
      function isDecCode(e3) {
        return 48 <= e3 && e3 <= 57;
      }
      function resolveYamlInteger(e3) {
        if (e3 === null)
          return false;
        var t3 = e3.length, r3 = 0, i2 = false, n2;
        if (!t3)
          return false;
        n2 = e3[r3];
        if (n2 === "-" || n2 === "+") {
          n2 = e3[++r3];
        }
        if (n2 === "0") {
          if (r3 + 1 === t3)
            return true;
          n2 = e3[++r3];
          if (n2 === "b") {
            r3++;
            for (; r3 < t3; r3++) {
              n2 = e3[r3];
              if (n2 === "_")
                continue;
              if (n2 !== "0" && n2 !== "1")
                return false;
              i2 = true;
            }
            return i2 && n2 !== "_";
          }
          if (n2 === "x") {
            r3++;
            for (; r3 < t3; r3++) {
              n2 = e3[r3];
              if (n2 === "_")
                continue;
              if (!isHexCode(e3.charCodeAt(r3)))
                return false;
              i2 = true;
            }
            return i2 && n2 !== "_";
          }
          if (n2 === "o") {
            r3++;
            for (; r3 < t3; r3++) {
              n2 = e3[r3];
              if (n2 === "_")
                continue;
              if (!isOctCode(e3.charCodeAt(r3)))
                return false;
              i2 = true;
            }
            return i2 && n2 !== "_";
          }
        }
        if (n2 === "_")
          return false;
        for (; r3 < t3; r3++) {
          n2 = e3[r3];
          if (n2 === "_")
            continue;
          if (!isDecCode(e3.charCodeAt(r3))) {
            return false;
          }
          i2 = true;
        }
        if (!i2 || n2 === "_")
          return false;
        return true;
      }
      function constructYamlInteger(e3) {
        var t3 = e3, r3 = 1, i2;
        if (t3.indexOf("_") !== -1) {
          t3 = t3.replace(/_/g, "");
        }
        i2 = t3[0];
        if (i2 === "-" || i2 === "+") {
          if (i2 === "-")
            r3 = -1;
          t3 = t3.slice(1);
          i2 = t3[0];
        }
        if (t3 === "0")
          return 0;
        if (i2 === "0") {
          if (t3[1] === "b")
            return r3 * parseInt(t3.slice(2), 2);
          if (t3[1] === "x")
            return r3 * parseInt(t3.slice(2), 16);
          if (t3[1] === "o")
            return r3 * parseInt(t3.slice(2), 8);
        }
        return r3 * parseInt(t3, 10);
      }
      function isInteger(e3) {
        return Object.prototype.toString.call(e3) === "[object Number]" && (e3 % 1 === 0 && !i.isNegativeZero(e3));
      }
      e2.exports = new n("tag:yaml.org,2002:int", { kind: "scalar", resolve: resolveYamlInteger, construct: constructYamlInteger, predicate: isInteger, represent: { binary: function(e3) {
        return e3 >= 0 ? "0b" + e3.toString(2) : "-0b" + e3.toString(2).slice(1);
      }, octal: function(e3) {
        return e3 >= 0 ? "0o" + e3.toString(8) : "-0o" + e3.toString(8).slice(1);
      }, decimal: function(e3) {
        return e3.toString(10);
      }, hexadecimal: function(e3) {
        return e3 >= 0 ? "0x" + e3.toString(16).toUpperCase() : "-0x" + e3.toString(16).toUpperCase().slice(1);
      } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
    }, 671: (e2, t2, r2) => {
      var i = r2(498);
      e2.exports = new i("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e3) {
        return e3 !== null ? e3 : {};
      } });
    }, 690: (e2, t2, r2) => {
      var i = r2(498);
      function resolveYamlMerge(e3) {
        return e3 === "<<" || e3 === null;
      }
      e2.exports = new i("tag:yaml.org,2002:merge", { kind: "scalar", resolve: resolveYamlMerge });
    }, 336: (e2, t2, r2) => {
      var i = r2(498);
      function resolveYamlNull(e3) {
        if (e3 === null)
          return true;
        var t3 = e3.length;
        return t3 === 1 && e3 === "~" || t3 === 4 && (e3 === "null" || e3 === "Null" || e3 === "NULL");
      }
      function constructYamlNull() {
        return null;
      }
      function isNull(e3) {
        return e3 === null;
      }
      e2.exports = new i("tag:yaml.org,2002:null", { kind: "scalar", resolve: resolveYamlNull, construct: constructYamlNull, predicate: isNull, represent: { canonical: function() {
        return "~";
      }, lowercase: function() {
        return "null";
      }, uppercase: function() {
        return "NULL";
      }, camelcase: function() {
        return "Null";
      }, empty: function() {
        return "";
      } }, defaultStyle: "lowercase" });
    }, 590: (e2, t2, r2) => {
      var i = r2(498);
      var n = Object.prototype.hasOwnProperty;
      var a = Object.prototype.toString;
      function resolveYamlOmap(e3) {
        if (e3 === null)
          return true;
        var t3 = [], r3, i2, o, l, s, c = e3;
        for (r3 = 0, i2 = c.length; r3 < i2; r3 += 1) {
          o = c[r3];
          s = false;
          if (a.call(o) !== "[object Object]")
            return false;
          for (l in o) {
            if (n.call(o, l)) {
              if (!s)
                s = true;
              else
                return false;
            }
          }
          if (!s)
            return false;
          if (t3.indexOf(l) === -1)
            t3.push(l);
          else
            return false;
        }
        return true;
      }
      function constructYamlOmap(e3) {
        return e3 !== null ? e3 : [];
      }
      e2.exports = new i("tag:yaml.org,2002:omap", { kind: "sequence", resolve: resolveYamlOmap, construct: constructYamlOmap });
    }, 886: (e2, t2, r2) => {
      var i = r2(498);
      var n = Object.prototype.toString;
      function resolveYamlPairs(e3) {
        if (e3 === null)
          return true;
        var t3, r3, i2, a, o, l = e3;
        o = new Array(l.length);
        for (t3 = 0, r3 = l.length; t3 < r3; t3 += 1) {
          i2 = l[t3];
          if (n.call(i2) !== "[object Object]")
            return false;
          a = Object.keys(i2);
          if (a.length !== 1)
            return false;
          o[t3] = [a[0], i2[a[0]]];
        }
        return true;
      }
      function constructYamlPairs(e3) {
        if (e3 === null)
          return [];
        var t3, r3, i2, n2, a, o = e3;
        a = new Array(o.length);
        for (t3 = 0, r3 = o.length; t3 < r3; t3 += 1) {
          i2 = o[t3];
          n2 = Object.keys(i2);
          a[t3] = [n2[0], i2[n2[0]]];
        }
        return a;
      }
      e2.exports = new i("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: resolveYamlPairs, construct: constructYamlPairs });
    }, 369: (e2, t2, r2) => {
      var i = r2(498);
      e2.exports = new i("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e3) {
        return e3 !== null ? e3 : [];
      } });
    }, 938: (e2, t2, r2) => {
      var i = r2(498);
      var n = Object.prototype.hasOwnProperty;
      function resolveYamlSet(e3) {
        if (e3 === null)
          return true;
        var t3, r3 = e3;
        for (t3 in r3) {
          if (n.call(r3, t3)) {
            if (r3[t3] !== null)
              return false;
          }
        }
        return true;
      }
      function constructYamlSet(e3) {
        return e3 !== null ? e3 : {};
      }
      e2.exports = new i("tag:yaml.org,2002:set", { kind: "mapping", resolve: resolveYamlSet, construct: constructYamlSet });
    }, 299: (e2, t2, r2) => {
      var i = r2(498);
      e2.exports = new i("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e3) {
        return e3 !== null ? e3 : "";
      } });
    }, 413: (e2, t2, r2) => {
      var i = r2(498);
      var n = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
      var a = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
      function resolveYamlTimestamp(e3) {
        if (e3 === null)
          return false;
        if (n.exec(e3) !== null)
          return true;
        if (a.exec(e3) !== null)
          return true;
        return false;
      }
      function constructYamlTimestamp(e3) {
        var t3, r3, i2, o, l, s, c, u = 0, p = null, f, d, h;
        t3 = n.exec(e3);
        if (t3 === null)
          t3 = a.exec(e3);
        if (t3 === null)
          throw new Error("Date resolve error");
        r3 = +t3[1];
        i2 = +t3[2] - 1;
        o = +t3[3];
        if (!t3[4]) {
          return new Date(Date.UTC(r3, i2, o));
        }
        l = +t3[4];
        s = +t3[5];
        c = +t3[6];
        if (t3[7]) {
          u = t3[7].slice(0, 3);
          while (u.length < 3) {
            u += "0";
          }
          u = +u;
        }
        if (t3[9]) {
          f = +t3[10];
          d = +(t3[11] || 0);
          p = (f * 60 + d) * 6e4;
          if (t3[9] === "-")
            p = -p;
        }
        h = new Date(Date.UTC(r3, i2, o, l, s, c, u));
        if (p)
          h.setTime(h.getTime() - p);
        return h;
      }
      function representYamlTimestamp(e3) {
        return e3.toISOString();
      }
      e2.exports = new i("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: resolveYamlTimestamp, construct: constructYamlTimestamp, instanceOf: Date, represent: representYamlTimestamp });
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var i = t[r2];
      if (i !== void 0) {
        return i.exports;
      }
      var n = t[r2] = { exports: {} };
      var a = true;
      try {
        e[r2](n, n.exports, __nccwpck_require__);
        a = false;
      } finally {
        if (a)
          delete t[r2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(509);
    module2.exports = r;
  })();
});
var require_debug = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 20: (e2, t2, r2) => {
      t2.formatArgs = formatArgs;
      t2.save = save;
      t2.load = load;
      t2.useColors = useColors;
      t2.storage = localstorage();
      t2.destroy = (() => {
        let e3 = false;
        return () => {
          if (!e3) {
            e3 = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      })();
      t2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      function formatArgs(t3) {
        t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const r3 = "color: " + this.color;
        t3.splice(1, 0, r3, "color: inherit");
        let s2 = 0;
        let n = 0;
        t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
          if (e3 === "%%") {
            return;
          }
          s2++;
          if (e3 === "%c") {
            n = s2;
          }
        });
        t3.splice(n, 0, r3);
      }
      t2.log = console.debug || console.log || (() => {
      });
      function save(e3) {
        try {
          if (e3) {
            t2.storage.setItem("debug", e3);
          } else {
            t2.storage.removeItem("debug");
          }
        } catch (e4) {
        }
      }
      function load() {
        let e3;
        try {
          e3 = t2.storage.getItem("debug");
        } catch (e4) {
        }
        if (!e3 && typeof process !== "undefined" && "env" in process) {
          e3 = process.env.DEBUG;
        }
        return e3;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (e3) {
        }
      }
      e2.exports = r2(530)(t2);
      const { formatters: s } = e2.exports;
      s.j = function(e3) {
        try {
          return JSON.stringify(e3);
        } catch (e4) {
          return "[UnexpectedJSONParseError]: " + e4.message;
        }
      };
    }, 530: (e2, t2, r2) => {
      function setup(e3) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = r2(367);
        createDebug.destroy = destroy;
        Object.keys(e3).forEach((t3) => {
          createDebug[t3] = e3[t3];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(e4) {
          let t3 = 0;
          for (let r3 = 0; r3 < e4.length; r3++) {
            t3 = (t3 << 5) - t3 + e4.charCodeAt(r3);
            t3 |= 0;
          }
          return createDebug.colors[Math.abs(t3) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(e4) {
          let t3;
          let r3 = null;
          let s;
          let n;
          function debug(...e5) {
            if (!debug.enabled) {
              return;
            }
            const r4 = debug;
            const s2 = Number(new Date());
            const n2 = s2 - (t3 || s2);
            r4.diff = n2;
            r4.prev = t3;
            r4.curr = s2;
            t3 = s2;
            e5[0] = createDebug.coerce(e5[0]);
            if (typeof e5[0] !== "string") {
              e5.unshift("%O");
            }
            let o = 0;
            e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (t4, s3) => {
              if (t4 === "%%") {
                return "%";
              }
              o++;
              const n3 = createDebug.formatters[s3];
              if (typeof n3 === "function") {
                const s4 = e5[o];
                t4 = n3.call(r4, s4);
                e5.splice(o, 1);
                o--;
              }
              return t4;
            });
            createDebug.formatArgs.call(r4, e5);
            const a = r4.log || createDebug.log;
            a.apply(r4, e5);
          }
          debug.namespace = e4;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(e4);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => {
            if (r3 !== null) {
              return r3;
            }
            if (s !== createDebug.namespaces) {
              s = createDebug.namespaces;
              n = createDebug.enabled(e4);
            }
            return n;
          }, set: (e5) => {
            r3 = e5;
          } });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(e4, t3) {
          const r3 = createDebug(this.namespace + (typeof t3 === "undefined" ? ":" : t3) + e4);
          r3.log = this.log;
          return r3;
        }
        function enable(e4) {
          createDebug.save(e4);
          createDebug.namespaces = e4;
          createDebug.names = [];
          createDebug.skips = [];
          let t3;
          const r3 = (typeof e4 === "string" ? e4 : "").split(/[\s,]+/);
          const s = r3.length;
          for (t3 = 0; t3 < s; t3++) {
            if (!r3[t3]) {
              continue;
            }
            e4 = r3[t3].replace(/\*/g, ".*?");
            if (e4[0] === "-") {
              createDebug.skips.push(new RegExp("^" + e4.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + e4 + "$"));
            }
          }
        }
        function disable() {
          const e4 = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((e5) => "-" + e5)].join(",");
          createDebug.enable("");
          return e4;
        }
        function enabled(e4) {
          if (e4[e4.length - 1] === "*") {
            return true;
          }
          let t3;
          let r3;
          for (t3 = 0, r3 = createDebug.skips.length; t3 < r3; t3++) {
            if (createDebug.skips[t3].test(e4)) {
              return false;
            }
          }
          for (t3 = 0, r3 = createDebug.names.length; t3 < r3; t3++) {
            if (createDebug.names[t3].test(e4)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(e4) {
          return e4.toString().substring(2, e4.toString().length - 2).replace(/\.\*\?$/, "*");
        }
        function coerce(e4) {
          if (e4 instanceof Error) {
            return e4.stack || e4.message;
          }
          return e4;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      e2.exports = setup;
    }, 731: (e2, t2, r2) => {
      if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
        e2.exports = r2(20);
      } else {
        e2.exports = r2(689);
      }
    }, 689: (e2, t2, r2) => {
      const s = r2(224);
      const n = r2(837);
      t2.init = init;
      t2.log = log;
      t2.formatArgs = formatArgs;
      t2.save = save;
      t2.load = load;
      t2.useColors = useColors;
      t2.destroy = n.deprecate(() => {
      }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      t2.colors = [6, 2, 3, 4, 5, 1];
      try {
        const e3 = r2(242);
        if (e3 && (e3.stderr || e3).level >= 2) {
          t2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
        }
      } catch (e3) {
      }
      t2.inspectOpts = Object.keys(process.env).filter((e3) => /^debug_/i.test(e3)).reduce((e3, t3) => {
        const r3 = t3.substring(6).toLowerCase().replace(/_([a-z])/g, (e4, t4) => t4.toUpperCase());
        let s2 = process.env[t3];
        if (/^(yes|on|true|enabled)$/i.test(s2)) {
          s2 = true;
        } else if (/^(no|off|false|disabled)$/i.test(s2)) {
          s2 = false;
        } else if (s2 === "null") {
          s2 = null;
        } else {
          s2 = Number(s2);
        }
        e3[r3] = s2;
        return e3;
      }, {});
      function useColors() {
        return "colors" in t2.inspectOpts ? Boolean(t2.inspectOpts.colors) : s.isatty(process.stderr.fd);
      }
      function formatArgs(t3) {
        const { namespace: r3, useColors: s2 } = this;
        if (s2) {
          const s3 = this.color;
          const n2 = "\x1B[3" + (s3 < 8 ? s3 : "8;5;" + s3);
          const o2 = `  ${n2};1m${r3} \x1B[0m`;
          t3[0] = o2 + t3[0].split("\n").join("\n" + o2);
          t3.push(n2 + "m+" + e2.exports.humanize(this.diff) + "\x1B[0m");
        } else {
          t3[0] = getDate() + r3 + " " + t3[0];
        }
      }
      function getDate() {
        if (t2.inspectOpts.hideDate) {
          return "";
        }
        return new Date().toISOString() + " ";
      }
      function log(...e3) {
        return process.stderr.write(n.format(...e3) + "\n");
      }
      function save(e3) {
        if (e3) {
          process.env.DEBUG = e3;
        } else {
          delete process.env.DEBUG;
        }
      }
      function load() {
        return process.env.DEBUG;
      }
      function init(e3) {
        e3.inspectOpts = {};
        const r3 = Object.keys(t2.inspectOpts);
        for (let s2 = 0; s2 < r3.length; s2++) {
          e3.inspectOpts[r3[s2]] = t2.inspectOpts[r3[s2]];
        }
      }
      e2.exports = r2(530)(t2);
      const { formatters: o } = e2.exports;
      o.o = function(e3) {
        this.inspectOpts.colors = this.useColors;
        return n.inspect(e3, this.inspectOpts).split("\n").map((e4) => e4.trim()).join(" ");
      };
      o.O = function(e3) {
        this.inspectOpts.colors = this.useColors;
        return n.inspect(e3, this.inspectOpts);
      };
    }, 975: (e2) => {
      "use strict";
      e2.exports = (e3, t2 = process.argv) => {
        const r2 = e3.startsWith("-") ? "" : e3.length === 1 ? "-" : "--";
        const s = t2.indexOf(r2 + e3);
        const n = t2.indexOf("--");
        return s !== -1 && (n === -1 || s < n);
      };
    }, 367: (e2) => {
      var t2 = 1e3;
      var r2 = t2 * 60;
      var s = r2 * 60;
      var n = s * 24;
      var o = n * 7;
      var a = n * 365.25;
      e2.exports = function(e3, t3) {
        t3 = t3 || {};
        var r3 = typeof e3;
        if (r3 === "string" && e3.length > 0) {
          return parse4(e3);
        } else if (r3 === "number" && isFinite(e3)) {
          return t3.long ? fmtLong(e3) : fmtShort(e3);
        }
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e3));
      };
      function parse4(e3) {
        e3 = String(e3);
        if (e3.length > 100) {
          return;
        }
        var c = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e3);
        if (!c) {
          return;
        }
        var u = parseFloat(c[1]);
        var i = (c[2] || "ms").toLowerCase();
        switch (i) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return u * a;
          case "weeks":
          case "week":
          case "w":
            return u * o;
          case "days":
          case "day":
          case "d":
            return u * n;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return u * s;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return u * r2;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return u * t2;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return u;
          default:
            return void 0;
        }
      }
      function fmtShort(e3) {
        var o2 = Math.abs(e3);
        if (o2 >= n) {
          return Math.round(e3 / n) + "d";
        }
        if (o2 >= s) {
          return Math.round(e3 / s) + "h";
        }
        if (o2 >= r2) {
          return Math.round(e3 / r2) + "m";
        }
        if (o2 >= t2) {
          return Math.round(e3 / t2) + "s";
        }
        return e3 + "ms";
      }
      function fmtLong(e3) {
        var o2 = Math.abs(e3);
        if (o2 >= n) {
          return plural(e3, o2, n, "day");
        }
        if (o2 >= s) {
          return plural(e3, o2, s, "hour");
        }
        if (o2 >= r2) {
          return plural(e3, o2, r2, "minute");
        }
        if (o2 >= t2) {
          return plural(e3, o2, t2, "second");
        }
        return e3 + " ms";
      }
      function plural(e3, t3, r3, s2) {
        var n2 = t3 >= r3 * 1.5;
        return Math.round(e3 / r3) + " " + s2 + (n2 ? "s" : "");
      }
    }, 242: (e2, t2, r2) => {
      "use strict";
      const s = r2(37);
      const n = r2(224);
      const o = r2(975);
      const { env: a } = process;
      let c;
      if (o("no-color") || o("no-colors") || o("color=false") || o("color=never")) {
        c = 0;
      } else if (o("color") || o("colors") || o("color=true") || o("color=always")) {
        c = 1;
      }
      if ("FORCE_COLOR" in a) {
        if (a.FORCE_COLOR === "true") {
          c = 1;
        } else if (a.FORCE_COLOR === "false") {
          c = 0;
        } else {
          c = a.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(a.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(e3) {
        if (e3 === 0) {
          return false;
        }
        return { level: e3, hasBasic: true, has256: e3 >= 2, has16m: e3 >= 3 };
      }
      function supportsColor(e3, t3) {
        if (c === 0) {
          return 0;
        }
        if (o("color=16m") || o("color=full") || o("color=truecolor")) {
          return 3;
        }
        if (o("color=256")) {
          return 2;
        }
        if (e3 && !t3 && c === void 0) {
          return 0;
        }
        const r3 = c || 0;
        if (a.TERM === "dumb") {
          return r3;
        }
        if (process.platform === "win32") {
          const e4 = s.release().split(".");
          if (Number(e4[0]) >= 10 && Number(e4[2]) >= 10586) {
            return Number(e4[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in a) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((e4) => e4 in a) || a.CI_NAME === "codeship") {
            return 1;
          }
          return r3;
        }
        if ("TEAMCITY_VERSION" in a) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(a.TEAMCITY_VERSION) ? 1 : 0;
        }
        if (a.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in a) {
          const e4 = parseInt((a.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (a.TERM_PROGRAM) {
            case "iTerm.app":
              return e4 >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(a.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(a.TERM)) {
          return 1;
        }
        if ("COLORTERM" in a) {
          return 1;
        }
        return r3;
      }
      function getSupportLevel(e3) {
        const t3 = supportsColor(e3, e3 && e3.isTTY);
        return translateLevel(t3);
      }
      e2.exports = { supportsColor: getSupportLevel, stdout: translateLevel(supportsColor(true, n.isatty(1))), stderr: translateLevel(supportsColor(true, n.isatty(2))) };
    }, 37: (e2) => {
      "use strict";
      e2.exports = __require("os");
    }, 224: (e2) => {
      "use strict";
      e2.exports = __require("tty");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var s = t[r2];
      if (s !== void 0) {
        return s.exports;
      }
      var n = t[r2] = { exports: {} };
      var o = true;
      try {
        e[r2](n, n.exports, __nccwpck_require__);
        o = false;
      } finally {
        if (o)
          delete t[r2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(731);
    module2.exports = r;
  })();
});
var require_slash = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 398: (e2) => {
      e2.exports = (e3) => {
        const r2 = /^\\\\\?\\/.test(e3);
        const _2 = /[^\u0000-\u0080]+/.test(e3);
        if (r2 || _2) {
          return e3;
        }
        return e3.replace(/\\/g, "/");
      };
    } };
    var r = {};
    function __nccwpck_require__(_2) {
      var t = r[_2];
      if (t !== void 0) {
        return t.exports;
      }
      var u = r[_2] = { exports: {} };
      var a = true;
      try {
        e[_2](u, u.exports, __nccwpck_require__);
        a = false;
      } finally {
        if (a)
          delete r[_2];
      }
      return u.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var _ = __nccwpck_require__(398);
    module2.exports = _;
  })();
});
var require_execa2 = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 328: (e2, t2, n2) => {
      "use strict";
      const r = n2(81);
      const o = n2(529);
      const s = n2(170);
      function spawn2(e3, t3, n3) {
        const i = o(e3, t3, n3);
        const a = r.spawn(i.command, i.args, i.options);
        s.hookChildProcess(a, i);
        return a;
      }
      function spawnSync(e3, t3, n3) {
        const i = o(e3, t3, n3);
        const a = r.spawnSync(i.command, i.args, i.options);
        a.error = a.error || s.verifyENOENTSync(a.status, i);
        return a;
      }
      e2.exports = spawn2;
      e2.exports.spawn = spawn2;
      e2.exports.sync = spawnSync;
      e2.exports._parse = o;
      e2.exports._enoent = s;
    }, 170: (e2) => {
      "use strict";
      const t2 = process.platform === "win32";
      function notFoundError(e3, t3) {
        return Object.assign(new Error(`${t3} ${e3.command} ENOENT`), { code: "ENOENT", errno: "ENOENT", syscall: `${t3} ${e3.command}`, path: e3.command, spawnargs: e3.args });
      }
      function hookChildProcess(e3, n2) {
        if (!t2) {
          return;
        }
        const r = e3.emit;
        e3.emit = function(t3, o) {
          if (t3 === "exit") {
            const t4 = verifyENOENT(o, n2, "spawn");
            if (t4) {
              return r.call(e3, "error", t4);
            }
          }
          return r.apply(e3, arguments);
        };
      }
      function verifyENOENT(e3, n2) {
        if (t2 && e3 === 1 && !n2.file) {
          return notFoundError(n2.original, "spawn");
        }
        return null;
      }
      function verifyENOENTSync(e3, n2) {
        if (t2 && e3 === 1 && !n2.file) {
          return notFoundError(n2.original, "spawnSync");
        }
        return null;
      }
      e2.exports = { hookChildProcess, verifyENOENT, verifyENOENTSync, notFoundError };
    }, 529: (e2, t2, n2) => {
      "use strict";
      const r = n2(17);
      const o = n2(499);
      const s = n2(24);
      const i = n2(91);
      const a = process.platform === "win32";
      const c = /\.(?:com|exe)$/i;
      const d = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
      function detectShebang(e3) {
        e3.file = o(e3);
        const t3 = e3.file && i(e3.file);
        if (t3) {
          e3.args.unshift(e3.file);
          e3.command = t3;
          return o(e3);
        }
        return e3.file;
      }
      function parseNonShell(e3) {
        if (!a) {
          return e3;
        }
        const t3 = detectShebang(e3);
        const n3 = !c.test(t3);
        if (e3.options.forceShell || n3) {
          const n4 = d.test(t3);
          e3.command = r.normalize(e3.command);
          e3.command = s.command(e3.command);
          e3.args = e3.args.map((e4) => s.argument(e4, n4));
          const o2 = [e3.command].concat(e3.args).join(" ");
          e3.args = ["/d", "/s", "/c", `"${o2}"`];
          e3.command = process.env.comspec || "cmd.exe";
          e3.options.windowsVerbatimArguments = true;
        }
        return e3;
      }
      function parse4(e3, t3, n3) {
        if (t3 && !Array.isArray(t3)) {
          n3 = t3;
          t3 = null;
        }
        t3 = t3 ? t3.slice(0) : [];
        n3 = Object.assign({}, n3);
        const r2 = { command: e3, args: t3, options: n3, file: void 0, original: { command: e3, args: t3 } };
        return n3.shell ? r2 : parseNonShell(r2);
      }
      e2.exports = parse4;
    }, 24: (e2) => {
      "use strict";
      const t2 = /([()\][%!^"`<>&|;, *?])/g;
      function escapeCommand(e3) {
        e3 = e3.replace(t2, "^$1");
        return e3;
      }
      function escapeArgument(e3, n2) {
        e3 = `${e3}`;
        e3 = e3.replace(/(\\*)"/g, '$1$1\\"');
        e3 = e3.replace(/(\\*)$/, "$1$1");
        e3 = `"${e3}"`;
        e3 = e3.replace(t2, "^$1");
        if (n2) {
          e3 = e3.replace(t2, "^$1");
        }
        return e3;
      }
      e2.exports.command = escapeCommand;
      e2.exports.argument = escapeArgument;
    }, 91: (e2, t2, n2) => {
      "use strict";
      const r = n2(147);
      const o = n2(256);
      function readShebang(e3) {
        const t3 = 150;
        const n3 = Buffer.alloc(t3);
        let s;
        try {
          s = r.openSync(e3, "r");
          r.readSync(s, n3, 0, t3, 0);
          r.closeSync(s);
        } catch (e4) {
        }
        return o(n3.toString());
      }
      e2.exports = readShebang;
    }, 499: (e2, t2, n2) => {
      "use strict";
      const r = n2(17);
      const o = n2(85);
      const s = n2(460);
      function resolveCommandAttempt(e3, t3) {
        const n3 = e3.options.env || process.env;
        const i = process.cwd();
        const a = e3.options.cwd != null;
        const c = a && process.chdir !== void 0 && !process.chdir.disabled;
        if (c) {
          try {
            process.chdir(e3.options.cwd);
          } catch (e4) {
          }
        }
        let d;
        try {
          d = o.sync(e3.command, { path: n3[s({ env: n3 })], pathExt: t3 ? r.delimiter : void 0 });
        } catch (e4) {
        } finally {
          if (c) {
            process.chdir(i);
          }
        }
        if (d) {
          d = r.resolve(a ? e3.options.cwd : "", d);
        }
        return d;
      }
      function resolveCommand(e3) {
        return resolveCommandAttempt(e3) || resolveCommandAttempt(e3, true);
      }
      e2.exports = resolveCommand;
    }, 632: (e2, t2, n2) => {
      "use strict";
      const r = n2(17);
      const o = n2(81);
      const s = n2(328);
      const i = n2(133);
      const a = n2(136);
      const c = n2(591);
      const d = n2(324);
      const u = n2(166);
      const { spawnedKill: l, spawnedCancel: f, setupTimeout: p, validateTimeout: m, setExitHandler: g } = n2(878);
      const { handleInput: x, getSpawnedResult: h, makeAllStream: y, validateInputSync: b } = n2(533);
      const { mergePromise: S, getSpawnedPromise: v } = n2(210);
      const { joinCommand: w, parseCommand: E, getEscapedCommand: I } = n2(192);
      const T = 1e3 * 1e3 * 100;
      const getEnv = ({ env: e3, extendEnv: t3, preferLocal: n3, localDir: r2, execPath: o2 }) => {
        const s2 = t3 ? { ...process.env, ...e3 } : e3;
        if (n3) {
          return a.env({ env: s2, cwd: r2, execPath: o2 });
        }
        return s2;
      };
      const handleArguments = (e3, t3, n3 = {}) => {
        const o2 = s._parse(e3, t3, n3);
        e3 = o2.command;
        t3 = o2.args;
        n3 = o2.options;
        n3 = { maxBuffer: T, buffer: true, stripFinalNewline: true, extendEnv: true, preferLocal: false, localDir: n3.cwd || process.cwd(), execPath: process.execPath, encoding: "utf8", reject: true, cleanup: true, all: false, windowsHide: true, ...n3 };
        n3.env = getEnv(n3);
        n3.stdio = u(n3);
        if (process.platform === "win32" && r.basename(e3, ".exe") === "cmd") {
          t3.unshift("/q");
        }
        return { file: e3, args: t3, options: n3, parsed: o2 };
      };
      const handleOutput = (e3, t3, n3) => {
        if (typeof t3 !== "string" && !Buffer.isBuffer(t3)) {
          return n3 === void 0 ? void 0 : "";
        }
        if (e3.stripFinalNewline) {
          return i(t3);
        }
        return t3;
      };
      const execa6 = (e3, t3, n3) => {
        const r2 = handleArguments(e3, t3, n3);
        const s2 = w(e3, t3);
        const i2 = I(e3, t3);
        m(r2.options);
        let a2;
        try {
          a2 = o.spawn(r2.file, r2.args, r2.options);
        } catch (e4) {
          const t4 = new o.ChildProcess();
          const n4 = Promise.reject(d({ error: e4, stdout: "", stderr: "", all: "", command: s2, escapedCommand: i2, parsed: r2, timedOut: false, isCanceled: false, killed: false }));
          return S(t4, n4);
        }
        const u2 = v(a2);
        const b2 = p(a2, r2.options, u2);
        const E2 = g(a2, r2.options, b2);
        const T2 = { isCanceled: false };
        a2.kill = l.bind(null, a2.kill.bind(a2));
        a2.cancel = f.bind(null, a2, T2);
        const handlePromise = async () => {
          const [{ error: e4, exitCode: t4, signal: n4, timedOut: o2 }, c2, u3, l2] = await h(a2, r2.options, E2);
          const f2 = handleOutput(r2.options, c2);
          const p2 = handleOutput(r2.options, u3);
          const m2 = handleOutput(r2.options, l2);
          if (e4 || t4 !== 0 || n4 !== null) {
            const c3 = d({ error: e4, exitCode: t4, signal: n4, stdout: f2, stderr: p2, all: m2, command: s2, escapedCommand: i2, parsed: r2, timedOut: o2, isCanceled: T2.isCanceled, killed: a2.killed });
            if (!r2.options.reject) {
              return c3;
            }
            throw c3;
          }
          return { command: s2, escapedCommand: i2, exitCode: 0, stdout: f2, stderr: p2, all: m2, failed: false, timedOut: false, isCanceled: false, killed: false };
        };
        const C = c(handlePromise);
        x(a2, r2.options.input);
        a2.all = y(a2, r2.options);
        return S(a2, C);
      };
      e2.exports = execa6;
      e2.exports.sync = (e3, t3, n3) => {
        const r2 = handleArguments(e3, t3, n3);
        const s2 = w(e3, t3);
        const i2 = I(e3, t3);
        b(r2.options);
        let a2;
        try {
          a2 = o.spawnSync(r2.file, r2.args, r2.options);
        } catch (e4) {
          throw d({ error: e4, stdout: "", stderr: "", all: "", command: s2, escapedCommand: i2, parsed: r2, timedOut: false, isCanceled: false, killed: false });
        }
        const c2 = handleOutput(r2.options, a2.stdout, a2.error);
        const u2 = handleOutput(r2.options, a2.stderr, a2.error);
        if (a2.error || a2.status !== 0 || a2.signal !== null) {
          const e4 = d({ stdout: c2, stderr: u2, error: a2.error, signal: a2.signal, exitCode: a2.status, command: s2, escapedCommand: i2, parsed: r2, timedOut: a2.error && a2.error.code === "ETIMEDOUT", isCanceled: false, killed: a2.signal !== null });
          if (!r2.options.reject) {
            return e4;
          }
          throw e4;
        }
        return { command: s2, escapedCommand: i2, exitCode: 0, stdout: c2, stderr: u2, failed: false, timedOut: false, isCanceled: false, killed: false };
      };
      e2.exports.command = (e3, t3) => {
        const [n3, ...r2] = E(e3);
        return execa6(n3, r2, t3);
      };
      e2.exports.commandSync = (e3, t3) => {
        const [n3, ...r2] = E(e3);
        return execa6.sync(n3, r2, t3);
      };
      e2.exports.node = (e3, t3, n3 = {}) => {
        if (t3 && !Array.isArray(t3) && typeof t3 === "object") {
          n3 = t3;
          t3 = [];
        }
        const r2 = u.node(n3);
        const o2 = process.execArgv.filter((e4) => !e4.startsWith("--inspect"));
        const { nodePath: s2 = process.execPath, nodeOptions: i2 = o2 } = n3;
        return execa6(s2, [...i2, e3, ...Array.isArray(t3) ? t3 : []], { ...n3, stdin: void 0, stdout: void 0, stderr: void 0, stdio: r2, shell: false });
      };
    }, 192: (e2) => {
      "use strict";
      const normalizeArgs = (e3, t3 = []) => {
        if (!Array.isArray(t3)) {
          return [e3];
        }
        return [e3, ...t3];
      };
      const t2 = /^[\w.-]+$/;
      const n2 = /"/g;
      const escapeArg = (e3) => {
        if (typeof e3 !== "string" || t2.test(e3)) {
          return e3;
        }
        return `"${e3.replace(n2, '\\"')}"`;
      };
      const joinCommand = (e3, t3) => normalizeArgs(e3, t3).join(" ");
      const getEscapedCommand = (e3, t3) => normalizeArgs(e3, t3).map((e4) => escapeArg(e4)).join(" ");
      const r = / +/g;
      const parseCommand = (e3) => {
        const t3 = [];
        for (const n3 of e3.trim().split(r)) {
          const e4 = t3[t3.length - 1];
          if (e4 && e4.endsWith("\\")) {
            t3[t3.length - 1] = `${e4.slice(0, -1)} ${n3}`;
          } else {
            t3.push(n3);
          }
        }
        return t3;
      };
      e2.exports = { joinCommand, getEscapedCommand, parseCommand };
    }, 324: (e2, t2, n2) => {
      "use strict";
      const { signalsByName: r } = n2(882);
      const getErrorPrefix = ({ timedOut: e3, timeout: t3, errorCode: n3, signal: r2, signalDescription: o, exitCode: s, isCanceled: i }) => {
        if (e3) {
          return `timed out after ${t3} milliseconds`;
        }
        if (i) {
          return "was canceled";
        }
        if (n3 !== void 0) {
          return `failed with ${n3}`;
        }
        if (r2 !== void 0) {
          return `was killed with ${r2} (${o})`;
        }
        if (s !== void 0) {
          return `failed with exit code ${s}`;
        }
        return "failed";
      };
      const makeError = ({ stdout: e3, stderr: t3, all: n3, error: o, signal: s, exitCode: i, command: a, escapedCommand: c, timedOut: d, isCanceled: u, killed: l, parsed: { options: { timeout: f } } }) => {
        i = i === null ? void 0 : i;
        s = s === null ? void 0 : s;
        const p = s === void 0 ? void 0 : r[s].description;
        const m = o && o.code;
        const g = getErrorPrefix({ timedOut: d, timeout: f, errorCode: m, signal: s, signalDescription: p, exitCode: i, isCanceled: u });
        const x = `Command ${g}: ${a}`;
        const h = Object.prototype.toString.call(o) === "[object Error]";
        const y = h ? `${x}
${o.message}` : x;
        const b = [y, t3, e3].filter(Boolean).join("\n");
        if (h) {
          o.originalMessage = o.message;
          o.message = b;
        } else {
          o = new Error(b);
        }
        o.shortMessage = y;
        o.command = a;
        o.escapedCommand = c;
        o.exitCode = i;
        o.signal = s;
        o.signalDescription = p;
        o.stdout = e3;
        o.stderr = t3;
        if (n3 !== void 0) {
          o.all = n3;
        }
        if ("bufferedData" in o) {
          delete o.bufferedData;
        }
        o.failed = true;
        o.timedOut = Boolean(d);
        o.isCanceled = u;
        o.killed = l && !d;
        return o;
      };
      e2.exports = makeError;
    }, 878: (e2, t2, n2) => {
      "use strict";
      const r = n2(37);
      const o = n2(160);
      const s = 1e3 * 5;
      const spawnedKill = (e3, t3 = "SIGTERM", n3 = {}) => {
        const r2 = e3(t3);
        setKillTimeout(e3, t3, n3, r2);
        return r2;
      };
      const setKillTimeout = (e3, t3, n3, r2) => {
        if (!shouldForceKill(t3, n3, r2)) {
          return;
        }
        const o2 = getForceKillAfterTimeout(n3);
        const s2 = setTimeout(() => {
          e3("SIGKILL");
        }, o2);
        if (s2.unref) {
          s2.unref();
        }
      };
      const shouldForceKill = (e3, { forceKillAfterTimeout: t3 }, n3) => isSigterm(e3) && t3 !== false && n3;
      const isSigterm = (e3) => e3 === r.constants.signals.SIGTERM || typeof e3 === "string" && e3.toUpperCase() === "SIGTERM";
      const getForceKillAfterTimeout = ({ forceKillAfterTimeout: e3 = true }) => {
        if (e3 === true) {
          return s;
        }
        if (!Number.isFinite(e3) || e3 < 0) {
          throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${e3}\` (${typeof e3})`);
        }
        return e3;
      };
      const spawnedCancel = (e3, t3) => {
        const n3 = e3.kill();
        if (n3) {
          t3.isCanceled = true;
        }
      };
      const timeoutKill = (e3, t3, n3) => {
        e3.kill(t3);
        n3(Object.assign(new Error("Timed out"), { timedOut: true, signal: t3 }));
      };
      const setupTimeout = (e3, { timeout: t3, killSignal: n3 = "SIGTERM" }, r2) => {
        if (t3 === 0 || t3 === void 0) {
          return r2;
        }
        let o2;
        const s2 = new Promise((r3, s3) => {
          o2 = setTimeout(() => {
            timeoutKill(e3, n3, s3);
          }, t3);
        });
        const i = r2.finally(() => {
          clearTimeout(o2);
        });
        return Promise.race([s2, i]);
      };
      const validateTimeout = ({ timeout: e3 }) => {
        if (e3 !== void 0 && (!Number.isFinite(e3) || e3 < 0)) {
          throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${e3}\` (${typeof e3})`);
        }
      };
      const setExitHandler = async (e3, { cleanup: t3, detached: n3 }, r2) => {
        if (!t3 || n3) {
          return r2;
        }
        const s2 = o(() => {
          e3.kill();
        });
        return r2.finally(() => {
          s2();
        });
      };
      e2.exports = { spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler };
    }, 210: (e2) => {
      "use strict";
      const t2 = (async () => {
      })().constructor.prototype;
      const n2 = ["then", "catch", "finally"].map((e3) => [e3, Reflect.getOwnPropertyDescriptor(t2, e3)]);
      const mergePromise = (e3, t3) => {
        for (const [r, o] of n2) {
          const n3 = typeof t3 === "function" ? (...e4) => Reflect.apply(o.value, t3(), e4) : o.value.bind(t3);
          Reflect.defineProperty(e3, r, { ...o, value: n3 });
        }
        return e3;
      };
      const getSpawnedPromise = (e3) => new Promise((t3, n3) => {
        e3.on("exit", (e4, n4) => {
          t3({ exitCode: e4, signal: n4 });
        });
        e3.on("error", (e4) => {
          n3(e4);
        });
        if (e3.stdin) {
          e3.stdin.on("error", (e4) => {
            n3(e4);
          });
        }
      });
      e2.exports = { mergePromise, getSpawnedPromise };
    }, 166: (e2) => {
      "use strict";
      const t2 = ["stdin", "stdout", "stderr"];
      const hasAlias = (e3) => t2.some((t3) => e3[t3] !== void 0);
      const normalizeStdio = (e3) => {
        if (!e3) {
          return;
        }
        const { stdio: n2 } = e3;
        if (n2 === void 0) {
          return t2.map((t3) => e3[t3]);
        }
        if (hasAlias(e3)) {
          throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${t2.map((e4) => `\`${e4}\``).join(", ")}`);
        }
        if (typeof n2 === "string") {
          return n2;
        }
        if (!Array.isArray(n2)) {
          throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof n2}\``);
        }
        const r = Math.max(n2.length, t2.length);
        return Array.from({ length: r }, (e4, t3) => n2[t3]);
      };
      e2.exports = normalizeStdio;
      e2.exports.node = (e3) => {
        const t3 = normalizeStdio(e3);
        if (t3 === "ipc") {
          return "ipc";
        }
        if (t3 === void 0 || typeof t3 === "string") {
          return [t3, t3, t3, "ipc"];
        }
        if (t3.includes("ipc")) {
          return t3;
        }
        return [...t3, "ipc"];
      };
    }, 533: (e2, t2, n2) => {
      "use strict";
      const r = n2(434);
      const o = n2(981);
      const s = n2(853);
      const handleInput = (e3, t3) => {
        if (t3 === void 0 || e3.stdin === void 0) {
          return;
        }
        if (r(t3)) {
          t3.pipe(e3.stdin);
        } else {
          e3.stdin.end(t3);
        }
      };
      const makeAllStream = (e3, { all: t3 }) => {
        if (!t3 || !e3.stdout && !e3.stderr) {
          return;
        }
        const n3 = s();
        if (e3.stdout) {
          n3.add(e3.stdout);
        }
        if (e3.stderr) {
          n3.add(e3.stderr);
        }
        return n3;
      };
      const getBufferedData = async (e3, t3) => {
        if (!e3) {
          return;
        }
        e3.destroy();
        try {
          return await t3;
        } catch (e4) {
          return e4.bufferedData;
        }
      };
      const getStreamPromise = (e3, { encoding: t3, buffer: n3, maxBuffer: r2 }) => {
        if (!e3 || !n3) {
          return;
        }
        if (t3) {
          return o(e3, { encoding: t3, maxBuffer: r2 });
        }
        return o.buffer(e3, { maxBuffer: r2 });
      };
      const getSpawnedResult = async ({ stdout: e3, stderr: t3, all: n3 }, { encoding: r2, buffer: o2, maxBuffer: s2 }, i) => {
        const a = getStreamPromise(e3, { encoding: r2, buffer: o2, maxBuffer: s2 });
        const c = getStreamPromise(t3, { encoding: r2, buffer: o2, maxBuffer: s2 });
        const d = getStreamPromise(n3, { encoding: r2, buffer: o2, maxBuffer: s2 * 2 });
        try {
          return await Promise.all([i, a, c, d]);
        } catch (r3) {
          return Promise.all([{ error: r3, signal: r3.signal, timedOut: r3.timedOut }, getBufferedData(e3, a), getBufferedData(t3, c), getBufferedData(n3, d)]);
        }
      };
      const validateInputSync = ({ input: e3 }) => {
        if (r(e3)) {
          throw new TypeError("The `input` option cannot be a stream in sync mode");
        }
      };
      e2.exports = { handleInput, makeAllStream, getSpawnedResult, validateInputSync };
    }, 782: (e2, t2, n2) => {
      "use strict";
      const { PassThrough: r } = n2(781);
      e2.exports = (e3) => {
        e3 = { ...e3 };
        const { array: t3 } = e3;
        let { encoding: n3 } = e3;
        const o = n3 === "buffer";
        let s = false;
        if (t3) {
          s = !(n3 || o);
        } else {
          n3 = n3 || "utf8";
        }
        if (o) {
          n3 = null;
        }
        const i = new r({ objectMode: s });
        if (n3) {
          i.setEncoding(n3);
        }
        let a = 0;
        const c = [];
        i.on("data", (e4) => {
          c.push(e4);
          if (s) {
            a = c.length;
          } else {
            a += e4.length;
          }
        });
        i.getBufferedValue = () => {
          if (t3) {
            return c;
          }
          return o ? Buffer.concat(c, a) : c.join("");
        };
        i.getBufferedLength = () => a;
        return i;
      };
    }, 981: (e2, t2, n2) => {
      "use strict";
      const { constants: r } = n2(300);
      const o = n2(781);
      const { promisify: s } = n2(837);
      const i = n2(782);
      const a = s(o.pipeline);
      class MaxBufferError extends Error {
        constructor() {
          super("maxBuffer exceeded");
          this.name = "MaxBufferError";
        }
      }
      async function getStream(e3, t3) {
        if (!e3) {
          throw new Error("Expected a stream");
        }
        t3 = { maxBuffer: Infinity, ...t3 };
        const { maxBuffer: n3 } = t3;
        const o2 = i(t3);
        await new Promise((t4, s2) => {
          const rejectPromise = (e4) => {
            if (e4 && o2.getBufferedLength() <= r.MAX_LENGTH) {
              e4.bufferedData = o2.getBufferedValue();
            }
            s2(e4);
          };
          (async () => {
            try {
              await a(e3, o2);
              t4();
            } catch (e4) {
              rejectPromise(e4);
            }
          })();
          o2.on("data", () => {
            if (o2.getBufferedLength() > n3) {
              rejectPromise(new MaxBufferError());
            }
          });
        });
        return o2.getBufferedValue();
      }
      e2.exports = getStream;
      e2.exports.buffer = (e3, t3) => getStream(e3, { ...t3, encoding: "buffer" });
      e2.exports.array = (e3, t3) => getStream(e3, { ...t3, array: true });
      e2.exports.MaxBufferError = MaxBufferError;
    }, 221: (e2, t2) => {
      "use strict";
      Object.defineProperty(t2, "__esModule", { value: true });
      t2.SIGNALS = void 0;
      const n2 = [{ name: "SIGHUP", number: 1, action: "terminate", description: "Terminal closed", standard: "posix" }, { name: "SIGINT", number: 2, action: "terminate", description: "User interruption with CTRL-C", standard: "ansi" }, { name: "SIGQUIT", number: 3, action: "core", description: "User interruption with CTRL-\\", standard: "posix" }, { name: "SIGILL", number: 4, action: "core", description: "Invalid machine instruction", standard: "ansi" }, { name: "SIGTRAP", number: 5, action: "core", description: "Debugger breakpoint", standard: "posix" }, { name: "SIGABRT", number: 6, action: "core", description: "Aborted", standard: "ansi" }, { name: "SIGIOT", number: 6, action: "core", description: "Aborted", standard: "bsd" }, { name: "SIGBUS", number: 7, action: "core", description: "Bus error due to misaligned, non-existing address or paging error", standard: "bsd" }, { name: "SIGEMT", number: 7, action: "terminate", description: "Command should be emulated but is not implemented", standard: "other" }, { name: "SIGFPE", number: 8, action: "core", description: "Floating point arithmetic error", standard: "ansi" }, { name: "SIGKILL", number: 9, action: "terminate", description: "Forced termination", standard: "posix", forced: true }, { name: "SIGUSR1", number: 10, action: "terminate", description: "Application-specific signal", standard: "posix" }, { name: "SIGSEGV", number: 11, action: "core", description: "Segmentation fault", standard: "ansi" }, { name: "SIGUSR2", number: 12, action: "terminate", description: "Application-specific signal", standard: "posix" }, { name: "SIGPIPE", number: 13, action: "terminate", description: "Broken pipe or socket", standard: "posix" }, { name: "SIGALRM", number: 14, action: "terminate", description: "Timeout or timer", standard: "posix" }, { name: "SIGTERM", number: 15, action: "terminate", description: "Termination", standard: "ansi" }, { name: "SIGSTKFLT", number: 16, action: "terminate", description: "Stack is empty or overflowed", standard: "other" }, { name: "SIGCHLD", number: 17, action: "ignore", description: "Child process terminated, paused or unpaused", standard: "posix" }, { name: "SIGCLD", number: 17, action: "ignore", description: "Child process terminated, paused or unpaused", standard: "other" }, { name: "SIGCONT", number: 18, action: "unpause", description: "Unpaused", standard: "posix", forced: true }, { name: "SIGSTOP", number: 19, action: "pause", description: "Paused", standard: "posix", forced: true }, { name: "SIGTSTP", number: 20, action: "pause", description: 'Paused using CTRL-Z or "suspend"', standard: "posix" }, { name: "SIGTTIN", number: 21, action: "pause", description: "Background process cannot read terminal input", standard: "posix" }, { name: "SIGBREAK", number: 21, action: "terminate", description: "User interruption with CTRL-BREAK", standard: "other" }, { name: "SIGTTOU", number: 22, action: "pause", description: "Background process cannot write to terminal output", standard: "posix" }, { name: "SIGURG", number: 23, action: "ignore", description: "Socket received out-of-band data", standard: "bsd" }, { name: "SIGXCPU", number: 24, action: "core", description: "Process timed out", standard: "bsd" }, { name: "SIGXFSZ", number: 25, action: "core", description: "File too big", standard: "bsd" }, { name: "SIGVTALRM", number: 26, action: "terminate", description: "Timeout or timer", standard: "bsd" }, { name: "SIGPROF", number: 27, action: "terminate", description: "Timeout or timer", standard: "bsd" }, { name: "SIGWINCH", number: 28, action: "ignore", description: "Terminal window size changed", standard: "bsd" }, { name: "SIGIO", number: 29, action: "terminate", description: "I/O is available", standard: "other" }, { name: "SIGPOLL", number: 29, action: "terminate", description: "Watched event", standard: "other" }, { name: "SIGINFO", number: 29, action: "ignore", description: "Request for process information", standard: "other" }, { name: "SIGPWR", number: 30, action: "terminate", description: "Device running out of power", standard: "systemv" }, { name: "SIGSYS", number: 31, action: "core", description: "Invalid system call", standard: "other" }, { name: "SIGUNUSED", number: 31, action: "terminate", description: "Invalid system call", standard: "other" }];
      t2.SIGNALS = n2;
    }, 882: (e2, t2, n2) => {
      "use strict";
      Object.defineProperty(t2, "__esModule", { value: true });
      t2.signalsByNumber = t2.signalsByName = void 0;
      var r = n2(37);
      var o = n2(922);
      var s = n2(840);
      const getSignalsByName = function() {
        const e3 = (0, o.getSignals)();
        return e3.reduce(getSignalByName, {});
      };
      const getSignalByName = function(e3, { name: t3, number: n3, description: r2, supported: o2, action: s2, forced: i2, standard: a2 }) {
        return { ...e3, [t3]: { name: t3, number: n3, description: r2, supported: o2, action: s2, forced: i2, standard: a2 } };
      };
      const i = getSignalsByName();
      t2.signalsByName = i;
      const getSignalsByNumber = function() {
        const e3 = (0, o.getSignals)();
        const t3 = s.SIGRTMAX + 1;
        const n3 = Array.from({ length: t3 }, (t4, n4) => getSignalByNumber(n4, e3));
        return Object.assign({}, ...n3);
      };
      const getSignalByNumber = function(e3, t3) {
        const n3 = findSignalByNumber(e3, t3);
        if (n3 === void 0) {
          return {};
        }
        const { name: r2, description: o2, supported: s2, action: i2, forced: a2, standard: c } = n3;
        return { [e3]: { name: r2, number: e3, description: o2, supported: s2, action: i2, forced: a2, standard: c } };
      };
      const findSignalByNumber = function(e3, t3) {
        const n3 = t3.find(({ name: t4 }) => r.constants.signals[t4] === e3);
        if (n3 !== void 0) {
          return n3;
        }
        return t3.find((t4) => t4.number === e3);
      };
      const a = getSignalsByNumber();
      t2.signalsByNumber = a;
    }, 840: (e2, t2) => {
      "use strict";
      Object.defineProperty(t2, "__esModule", { value: true });
      t2.SIGRTMAX = t2.getRealtimeSignals = void 0;
      const getRealtimeSignals = function() {
        const e3 = r - n2 + 1;
        return Array.from({ length: e3 }, getRealtimeSignal);
      };
      t2.getRealtimeSignals = getRealtimeSignals;
      const getRealtimeSignal = function(e3, t3) {
        return { name: `SIGRT${t3 + 1}`, number: n2 + t3, action: "terminate", description: "Application-specific signal (realtime)", standard: "posix" };
      };
      const n2 = 34;
      const r = 64;
      t2.SIGRTMAX = r;
    }, 922: (e2, t2, n2) => {
      "use strict";
      Object.defineProperty(t2, "__esModule", { value: true });
      t2.getSignals = void 0;
      var r = n2(37);
      var o = n2(221);
      var s = n2(840);
      const getSignals = function() {
        const e3 = (0, s.getRealtimeSignals)();
        const t3 = [...o.SIGNALS, ...e3].map(normalizeSignal);
        return t3;
      };
      t2.getSignals = getSignals;
      const normalizeSignal = function({ name: e3, number: t3, description: n3, action: o2, forced: s2 = false, standard: i }) {
        const { signals: { [e3]: a } } = r.constants;
        const c = a !== void 0;
        const d = c ? a : t3;
        return { name: e3, number: d, description: n3, supported: c, action: o2, forced: s2, standard: i };
      };
    }, 434: (e2) => {
      "use strict";
      const isStream = (e3) => e3 !== null && typeof e3 === "object" && typeof e3.pipe === "function";
      isStream.writable = (e3) => isStream(e3) && e3.writable !== false && typeof e3._write === "function" && typeof e3._writableState === "object";
      isStream.readable = (e3) => isStream(e3) && e3.readable !== false && typeof e3._read === "function" && typeof e3._readableState === "object";
      isStream.duplex = (e3) => isStream.writable(e3) && isStream.readable(e3);
      isStream.transform = (e3) => isStream.duplex(e3) && typeof e3._transform === "function";
      e2.exports = isStream;
    }, 212: (e2, t2, n2) => {
      var r = n2(147);
      var o;
      if (process.platform === "win32" || global.TESTING_WINDOWS) {
        o = n2(476);
      } else {
        o = n2(836);
      }
      e2.exports = isexe;
      isexe.sync = sync2;
      function isexe(e3, t3, n3) {
        if (typeof t3 === "function") {
          n3 = t3;
          t3 = {};
        }
        if (!n3) {
          if (typeof Promise !== "function") {
            throw new TypeError("callback not provided");
          }
          return new Promise(function(n4, r2) {
            isexe(e3, t3 || {}, function(e4, t4) {
              if (e4) {
                r2(e4);
              } else {
                n4(t4);
              }
            });
          });
        }
        o(e3, t3 || {}, function(e4, r2) {
          if (e4) {
            if (e4.code === "EACCES" || t3 && t3.ignoreErrors) {
              e4 = null;
              r2 = false;
            }
          }
          n3(e4, r2);
        });
      }
      function sync2(e3, t3) {
        try {
          return o.sync(e3, t3 || {});
        } catch (e4) {
          if (t3 && t3.ignoreErrors || e4.code === "EACCES") {
            return false;
          } else {
            throw e4;
          }
        }
      }
    }, 836: (e2, t2, n2) => {
      e2.exports = isexe;
      isexe.sync = sync2;
      var r = n2(147);
      function isexe(e3, t3, n3) {
        r.stat(e3, function(e4, r2) {
          n3(e4, e4 ? false : checkStat(r2, t3));
        });
      }
      function sync2(e3, t3) {
        return checkStat(r.statSync(e3), t3);
      }
      function checkStat(e3, t3) {
        return e3.isFile() && checkMode(e3, t3);
      }
      function checkMode(e3, t3) {
        var n3 = e3.mode;
        var r2 = e3.uid;
        var o = e3.gid;
        var s = t3.uid !== void 0 ? t3.uid : process.getuid && process.getuid();
        var i = t3.gid !== void 0 ? t3.gid : process.getgid && process.getgid();
        var a = parseInt("100", 8);
        var c = parseInt("010", 8);
        var d = parseInt("001", 8);
        var u = a | c;
        var l = n3 & d || n3 & c && o === i || n3 & a && r2 === s || n3 & u && s === 0;
        return l;
      }
    }, 476: (e2, t2, n2) => {
      e2.exports = isexe;
      isexe.sync = sync2;
      var r = n2(147);
      function checkPathExt(e3, t3) {
        var n3 = t3.pathExt !== void 0 ? t3.pathExt : process.env.PATHEXT;
        if (!n3) {
          return true;
        }
        n3 = n3.split(";");
        if (n3.indexOf("") !== -1) {
          return true;
        }
        for (var r2 = 0; r2 < n3.length; r2++) {
          var o = n3[r2].toLowerCase();
          if (o && e3.substr(-o.length).toLowerCase() === o) {
            return true;
          }
        }
        return false;
      }
      function checkStat(e3, t3, n3) {
        if (!e3.isSymbolicLink() && !e3.isFile()) {
          return false;
        }
        return checkPathExt(t3, n3);
      }
      function isexe(e3, t3, n3) {
        r.stat(e3, function(r2, o) {
          n3(r2, r2 ? false : checkStat(o, e3, t3));
        });
      }
      function sync2(e3, t3) {
        return checkStat(r.statSync(e3), e3, t3);
      }
    }, 853: (e2, t2, n2) => {
      "use strict";
      const { PassThrough: r } = n2(781);
      e2.exports = function() {
        var e3 = [];
        var t3 = new r({ objectMode: true });
        t3.setMaxListeners(0);
        t3.add = add;
        t3.isEmpty = isEmpty;
        t3.on("unpipe", remove);
        Array.prototype.slice.call(arguments).forEach(add);
        return t3;
        function add(n3) {
          if (Array.isArray(n3)) {
            n3.forEach(add);
            return this;
          }
          e3.push(n3);
          n3.once("end", remove.bind(null, n3));
          n3.once("error", t3.emit.bind(t3, "error"));
          n3.pipe(t3, { end: false });
          return this;
        }
        function isEmpty() {
          return e3.length == 0;
        }
        function remove(n3) {
          e3 = e3.filter(function(e4) {
            return e4 !== n3;
          });
          if (!e3.length && t3.readable) {
            t3.end();
          }
        }
      };
    }, 693: (e2) => {
      "use strict";
      const mimicFn = (e3, t2) => {
        for (const n2 of Reflect.ownKeys(t2)) {
          Object.defineProperty(e3, n2, Object.getOwnPropertyDescriptor(t2, n2));
        }
        return e3;
      };
      e2.exports = mimicFn;
      e2.exports["default"] = mimicFn;
    }, 136: (e2, t2, n2) => {
      "use strict";
      const r = n2(17);
      const o = n2(460);
      const npmRunPath = (e3) => {
        e3 = { cwd: process.cwd(), path: process.env[o()], execPath: process.execPath, ...e3 };
        let t3;
        let n3 = r.resolve(e3.cwd);
        const s = [];
        while (t3 !== n3) {
          s.push(r.join(n3, "node_modules/.bin"));
          t3 = n3;
          n3 = r.resolve(n3, "..");
        }
        const i = r.resolve(e3.cwd, e3.execPath, "..");
        s.push(i);
        return s.concat(e3.path).join(r.delimiter);
      };
      e2.exports = npmRunPath;
      e2.exports["default"] = npmRunPath;
      e2.exports.env = (t3) => {
        t3 = { env: process.env, ...t3 };
        const n3 = { ...t3.env };
        const r2 = o({ env: n3 });
        t3.path = n3[r2];
        n3[r2] = e2.exports(t3);
        return n3;
      };
    }, 591: (e2, t2, n2) => {
      "use strict";
      const r = n2(693);
      const o = /* @__PURE__ */ new WeakMap();
      const onetime = (e3, t3 = {}) => {
        if (typeof e3 !== "function") {
          throw new TypeError("Expected a function");
        }
        let n3;
        let s = 0;
        const i = e3.displayName || e3.name || "<anonymous>";
        const onetime2 = function(...r2) {
          o.set(onetime2, ++s);
          if (s === 1) {
            n3 = e3.apply(this, r2);
            e3 = null;
          } else if (t3.throw === true) {
            throw new Error(`Function \`${i}\` can only be called once`);
          }
          return n3;
        };
        r(onetime2, e3);
        o.set(onetime2, s);
        return onetime2;
      };
      e2.exports = onetime;
      e2.exports["default"] = onetime;
      e2.exports.callCount = (e3) => {
        if (!o.has(e3)) {
          throw new Error(`The given function \`${e3.name}\` is not wrapped by the \`onetime\` package`);
        }
        return o.get(e3);
      };
    }, 460: (e2) => {
      "use strict";
      const pathKey = (e3 = {}) => {
        const t2 = e3.env || process.env;
        const n2 = e3.platform || process.platform;
        if (n2 !== "win32") {
          return "PATH";
        }
        return Object.keys(t2).reverse().find((e4) => e4.toUpperCase() === "PATH") || "Path";
      };
      e2.exports = pathKey;
      e2.exports["default"] = pathKey;
    }, 256: (e2, t2, n2) => {
      "use strict";
      const r = n2(609);
      e2.exports = (e3 = "") => {
        const t3 = e3.match(r);
        if (!t3) {
          return null;
        }
        const [n3, o] = t3[0].replace(/#! ?/, "").split(" ");
        const s = n3.split("/").pop();
        if (s === "env") {
          return o;
        }
        return o ? `${s} ${o}` : s;
      };
    }, 609: (e2) => {
      "use strict";
      e2.exports = /^#!(.*)/;
    }, 160: (e2, t2, n2) => {
      var r = global.process;
      const processOk = function(e3) {
        return e3 && typeof e3 === "object" && typeof e3.removeListener === "function" && typeof e3.emit === "function" && typeof e3.reallyExit === "function" && typeof e3.listeners === "function" && typeof e3.kill === "function" && typeof e3.pid === "number" && typeof e3.on === "function";
      };
      if (!processOk(r)) {
        e2.exports = function() {
        };
      } else {
        var o = n2(491);
        var s = n2(87);
        var i = /^win/i.test(r.platform);
        var a = n2(361);
        if (typeof a !== "function") {
          a = a.EventEmitter;
        }
        var c;
        if (r.__signal_exit_emitter__) {
          c = r.__signal_exit_emitter__;
        } else {
          c = r.__signal_exit_emitter__ = new a();
          c.count = 0;
          c.emitted = {};
        }
        if (!c.infinite) {
          c.setMaxListeners(Infinity);
          c.infinite = true;
        }
        e2.exports = function(e3, t3) {
          if (!processOk(global.process)) {
            return;
          }
          o.equal(typeof e3, "function", "a callback must be provided for exit handler");
          if (f === false) {
            p();
          }
          var n3 = "exit";
          if (t3 && t3.alwaysLast) {
            n3 = "afterexit";
          }
          var remove = function() {
            c.removeListener(n3, e3);
            if (c.listeners("exit").length === 0 && c.listeners("afterexit").length === 0) {
              d();
            }
          };
          c.on(n3, e3);
          return remove;
        };
        var d = function unload() {
          if (!f || !processOk(global.process)) {
            return;
          }
          f = false;
          s.forEach(function(e3) {
            try {
              r.removeListener(e3, l[e3]);
            } catch (e4) {
            }
          });
          r.emit = x;
          r.reallyExit = m;
          c.count -= 1;
        };
        e2.exports.unload = d;
        var u = function emit(e3, t3, n3) {
          if (c.emitted[e3]) {
            return;
          }
          c.emitted[e3] = true;
          c.emit(e3, t3, n3);
        };
        var l = {};
        s.forEach(function(e3) {
          l[e3] = function listener() {
            if (!processOk(global.process)) {
              return;
            }
            var t3 = r.listeners(e3);
            if (t3.length === c.count) {
              d();
              u("exit", null, e3);
              u("afterexit", null, e3);
              if (i && e3 === "SIGHUP") {
                e3 = "SIGINT";
              }
              r.kill(r.pid, e3);
            }
          };
        });
        e2.exports.signals = function() {
          return s;
        };
        var f = false;
        var p = function load() {
          if (f || !processOk(global.process)) {
            return;
          }
          f = true;
          c.count += 1;
          s = s.filter(function(e3) {
            try {
              r.on(e3, l[e3]);
              return true;
            } catch (e4) {
              return false;
            }
          });
          r.emit = h;
          r.reallyExit = g;
        };
        e2.exports.load = p;
        var m = r.reallyExit;
        var g = function processReallyExit(e3) {
          if (!processOk(global.process)) {
            return;
          }
          r.exitCode = e3 || 0;
          u("exit", r.exitCode, null);
          u("afterexit", r.exitCode, null);
          m.call(r, r.exitCode);
        };
        var x = r.emit;
        var h = function processEmit(e3, t3) {
          if (e3 === "exit" && processOk(global.process)) {
            if (t3 !== void 0) {
              r.exitCode = t3;
            }
            var n3 = x.apply(this, arguments);
            u("exit", r.exitCode, null);
            u("afterexit", r.exitCode, null);
            return n3;
          } else {
            return x.apply(this, arguments);
          }
        };
      }
    }, 87: (e2) => {
      e2.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
      if (process.platform !== "win32") {
        e2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
      }
      if (process.platform === "linux") {
        e2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
      }
    }, 133: (e2) => {
      "use strict";
      e2.exports = (e3) => {
        const t2 = typeof e3 === "string" ? "\n" : "\n".charCodeAt();
        const n2 = typeof e3 === "string" ? "\r" : "\r".charCodeAt();
        if (e3[e3.length - 1] === t2) {
          e3 = e3.slice(0, e3.length - 1);
        }
        if (e3[e3.length - 1] === n2) {
          e3 = e3.slice(0, e3.length - 1);
        }
        return e3;
      };
    }, 85: (e2, t2, n2) => {
      const r = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
      const o = n2(17);
      const s = r ? ";" : ":";
      const i = n2(212);
      const getNotFoundError = (e3) => Object.assign(new Error(`not found: ${e3}`), { code: "ENOENT" });
      const getPathInfo = (e3, t3) => {
        const n3 = t3.colon || s;
        const o2 = e3.match(/\//) || r && e3.match(/\\/) ? [""] : [...r ? [process.cwd()] : [], ...(t3.path || process.env.PATH || "").split(n3)];
        const i2 = r ? t3.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
        const a = r ? i2.split(n3) : [""];
        if (r) {
          if (e3.indexOf(".") !== -1 && a[0] !== "")
            a.unshift("");
        }
        return { pathEnv: o2, pathExt: a, pathExtExe: i2 };
      };
      const which = (e3, t3, n3) => {
        if (typeof t3 === "function") {
          n3 = t3;
          t3 = {};
        }
        if (!t3)
          t3 = {};
        const { pathEnv: r2, pathExt: s2, pathExtExe: a } = getPathInfo(e3, t3);
        const c = [];
        const step = (n4) => new Promise((s3, i2) => {
          if (n4 === r2.length)
            return t3.all && c.length ? s3(c) : i2(getNotFoundError(e3));
          const a2 = r2[n4];
          const d = /^".*"$/.test(a2) ? a2.slice(1, -1) : a2;
          const u = o.join(d, e3);
          const l = !d && /^\.[\\\/]/.test(e3) ? e3.slice(0, 2) + u : u;
          s3(subStep(l, n4, 0));
        });
        const subStep = (e4, n4, r3) => new Promise((o2, d) => {
          if (r3 === s2.length)
            return o2(step(n4 + 1));
          const u = s2[r3];
          i(e4 + u, { pathExt: a }, (s3, i2) => {
            if (!s3 && i2) {
              if (t3.all)
                c.push(e4 + u);
              else
                return o2(e4 + u);
            }
            return o2(subStep(e4, n4, r3 + 1));
          });
        });
        return n3 ? step(0).then((e4) => n3(null, e4), n3) : step(0);
      };
      const whichSync = (e3, t3) => {
        t3 = t3 || {};
        const { pathEnv: n3, pathExt: r2, pathExtExe: s2 } = getPathInfo(e3, t3);
        const a = [];
        for (let c = 0; c < n3.length; c++) {
          const d = n3[c];
          const u = /^".*"$/.test(d) ? d.slice(1, -1) : d;
          const l = o.join(u, e3);
          const f = !u && /^\.[\\\/]/.test(e3) ? e3.slice(0, 2) + l : l;
          for (let e4 = 0; e4 < r2.length; e4++) {
            const n4 = f + r2[e4];
            try {
              const e5 = i.sync(n4, { pathExt: s2 });
              if (e5) {
                if (t3.all)
                  a.push(n4);
                else
                  return n4;
              }
            } catch (e5) {
            }
          }
        }
        if (t3.all && a.length)
          return a;
        if (t3.nothrow)
          return null;
        throw getNotFoundError(e3);
      };
      e2.exports = which;
      which.sync = whichSync;
    }, 491: (e2) => {
      "use strict";
      e2.exports = __require("assert");
    }, 300: (e2) => {
      "use strict";
      e2.exports = __require("buffer");
    }, 81: (e2) => {
      "use strict";
      e2.exports = __require("child_process");
    }, 361: (e2) => {
      "use strict";
      e2.exports = __require("events");
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 37: (e2) => {
      "use strict";
      e2.exports = __require("os");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    }, 781: (e2) => {
      "use strict";
      e2.exports = __require("stream");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    } };
    var t = {};
    function __nccwpck_require__(n2) {
      var r = t[n2];
      if (r !== void 0) {
        return r.exports;
      }
      var o = t[n2] = { exports: {} };
      var s = true;
      try {
        e[n2](o, o.exports, __nccwpck_require__);
        s = false;
      } finally {
        if (s)
          delete t[n2];
      }
      return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var n = __nccwpck_require__(632);
    module2.exports = n;
  })();
});
var require_json5 = __commonJSMin((exports, module2) => {
  (() => {
    var u = { 687: (u2, D2, e2) => {
      const r = e2(731);
      const F = e2(224);
      const C = { parse: r, stringify: F };
      u2.exports = C;
    }, 731: (u2, D2, e2) => {
      const r = e2(796);
      let F;
      let C;
      let t;
      let A;
      let n;
      let E;
      let a;
      let i;
      let B;
      u2.exports = function parse4(u3, D3) {
        F = String(u3);
        C = "start";
        t = [];
        A = 0;
        n = 1;
        E = 0;
        a = void 0;
        i = void 0;
        B = void 0;
        do {
          a = lex();
          p[C]();
        } while (a.type !== "eof");
        if (typeof D3 === "function") {
          return internalize({ "": B }, "", D3);
        }
        return B;
      };
      function internalize(u3, D3, e3) {
        const r2 = u3[D3];
        if (r2 != null && typeof r2 === "object") {
          for (const u4 in r2) {
            const D4 = internalize(r2, u4, e3);
            if (D4 === void 0) {
              delete r2[u4];
            } else {
              r2[u4] = D4;
            }
          }
        }
        return e3.call(u3, D3, r2);
      }
      let s;
      let c;
      let o;
      let d;
      let l;
      function lex() {
        s = "default";
        c = "";
        o = false;
        d = 1;
        for (; ; ) {
          l = peek();
          const u3 = f[s]();
          if (u3) {
            return u3;
          }
        }
      }
      function peek() {
        if (F[A]) {
          return String.fromCodePoint(F.codePointAt(A));
        }
      }
      function read2() {
        const u3 = peek();
        if (u3 === "\n") {
          n++;
          E = 0;
        } else if (u3) {
          E += u3.length;
        } else {
          E++;
        }
        if (u3) {
          A += u3.length;
        }
        return u3;
      }
      const f = { default() {
        switch (l) {
          case "	":
          case "\v":
          case "\f":
          case " ":
          case "\xA0":
          case "\uFEFF":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            read2();
            return;
          case "/":
            read2();
            s = "comment";
            return;
          case void 0:
            read2();
            return newToken("eof");
        }
        if (r.isSpaceSeparator(l)) {
          read2();
          return;
        }
        return f[C]();
      }, comment() {
        switch (l) {
          case "*":
            read2();
            s = "multiLineComment";
            return;
          case "/":
            read2();
            s = "singleLineComment";
            return;
        }
        throw invalidChar(read2());
      }, multiLineComment() {
        switch (l) {
          case "*":
            read2();
            s = "multiLineCommentAsterisk";
            return;
          case void 0:
            throw invalidChar(read2());
        }
        read2();
      }, multiLineCommentAsterisk() {
        switch (l) {
          case "*":
            read2();
            return;
          case "/":
            read2();
            s = "default";
            return;
          case void 0:
            throw invalidChar(read2());
        }
        read2();
        s = "multiLineComment";
      }, singleLineComment() {
        switch (l) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            read2();
            s = "default";
            return;
          case void 0:
            read2();
            return newToken("eof");
        }
        read2();
      }, value() {
        switch (l) {
          case "{":
          case "[":
            return newToken("punctuator", read2());
          case "n":
            read2();
            literal("ull");
            return newToken("null", null);
          case "t":
            read2();
            literal("rue");
            return newToken("boolean", true);
          case "f":
            read2();
            literal("alse");
            return newToken("boolean", false);
          case "-":
          case "+":
            if (read2() === "-") {
              d = -1;
            }
            s = "sign";
            return;
          case ".":
            c = read2();
            s = "decimalPointLeading";
            return;
          case "0":
            c = read2();
            s = "zero";
            return;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            c = read2();
            s = "decimalInteger";
            return;
          case "I":
            read2();
            literal("nfinity");
            return newToken("numeric", Infinity);
          case "N":
            read2();
            literal("aN");
            return newToken("numeric", NaN);
          case '"':
          case "'":
            o = read2() === '"';
            c = "";
            s = "string";
            return;
        }
        throw invalidChar(read2());
      }, identifierNameStartEscape() {
        if (l !== "u") {
          throw invalidChar(read2());
        }
        read2();
        const u3 = unicodeEscape();
        switch (u3) {
          case "$":
          case "_":
            break;
          default:
            if (!r.isIdStartChar(u3)) {
              throw invalidIdentifier();
            }
            break;
        }
        c += u3;
        s = "identifierName";
      }, identifierName() {
        switch (l) {
          case "$":
          case "_":
          case "\u200C":
          case "\u200D":
            c += read2();
            return;
          case "\\":
            read2();
            s = "identifierNameEscape";
            return;
        }
        if (r.isIdContinueChar(l)) {
          c += read2();
          return;
        }
        return newToken("identifier", c);
      }, identifierNameEscape() {
        if (l !== "u") {
          throw invalidChar(read2());
        }
        read2();
        const u3 = unicodeEscape();
        switch (u3) {
          case "$":
          case "_":
          case "\u200C":
          case "\u200D":
            break;
          default:
            if (!r.isIdContinueChar(u3)) {
              throw invalidIdentifier();
            }
            break;
        }
        c += u3;
        s = "identifierName";
      }, sign() {
        switch (l) {
          case ".":
            c = read2();
            s = "decimalPointLeading";
            return;
          case "0":
            c = read2();
            s = "zero";
            return;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            c = read2();
            s = "decimalInteger";
            return;
          case "I":
            read2();
            literal("nfinity");
            return newToken("numeric", d * Infinity);
          case "N":
            read2();
            literal("aN");
            return newToken("numeric", NaN);
        }
        throw invalidChar(read2());
      }, zero() {
        switch (l) {
          case ".":
            c += read2();
            s = "decimalPoint";
            return;
          case "e":
          case "E":
            c += read2();
            s = "decimalExponent";
            return;
          case "x":
          case "X":
            c += read2();
            s = "hexadecimal";
            return;
        }
        return newToken("numeric", d * 0);
      }, decimalInteger() {
        switch (l) {
          case ".":
            c += read2();
            s = "decimalPoint";
            return;
          case "e":
          case "E":
            c += read2();
            s = "decimalExponent";
            return;
        }
        if (r.isDigit(l)) {
          c += read2();
          return;
        }
        return newToken("numeric", d * Number(c));
      }, decimalPointLeading() {
        if (r.isDigit(l)) {
          c += read2();
          s = "decimalFraction";
          return;
        }
        throw invalidChar(read2());
      }, decimalPoint() {
        switch (l) {
          case "e":
          case "E":
            c += read2();
            s = "decimalExponent";
            return;
        }
        if (r.isDigit(l)) {
          c += read2();
          s = "decimalFraction";
          return;
        }
        return newToken("numeric", d * Number(c));
      }, decimalFraction() {
        switch (l) {
          case "e":
          case "E":
            c += read2();
            s = "decimalExponent";
            return;
        }
        if (r.isDigit(l)) {
          c += read2();
          return;
        }
        return newToken("numeric", d * Number(c));
      }, decimalExponent() {
        switch (l) {
          case "+":
          case "-":
            c += read2();
            s = "decimalExponentSign";
            return;
        }
        if (r.isDigit(l)) {
          c += read2();
          s = "decimalExponentInteger";
          return;
        }
        throw invalidChar(read2());
      }, decimalExponentSign() {
        if (r.isDigit(l)) {
          c += read2();
          s = "decimalExponentInteger";
          return;
        }
        throw invalidChar(read2());
      }, decimalExponentInteger() {
        if (r.isDigit(l)) {
          c += read2();
          return;
        }
        return newToken("numeric", d * Number(c));
      }, hexadecimal() {
        if (r.isHexDigit(l)) {
          c += read2();
          s = "hexadecimalInteger";
          return;
        }
        throw invalidChar(read2());
      }, hexadecimalInteger() {
        if (r.isHexDigit(l)) {
          c += read2();
          return;
        }
        return newToken("numeric", d * Number(c));
      }, string() {
        switch (l) {
          case "\\":
            read2();
            c += escape();
            return;
          case '"':
            if (o) {
              read2();
              return newToken("string", c);
            }
            c += read2();
            return;
          case "'":
            if (!o) {
              read2();
              return newToken("string", c);
            }
            c += read2();
            return;
          case "\n":
          case "\r":
            throw invalidChar(read2());
          case "\u2028":
          case "\u2029":
            separatorChar(l);
            break;
          case void 0:
            throw invalidChar(read2());
        }
        c += read2();
      }, start() {
        switch (l) {
          case "{":
          case "[":
            return newToken("punctuator", read2());
        }
        s = "value";
      }, beforePropertyName() {
        switch (l) {
          case "$":
          case "_":
            c = read2();
            s = "identifierName";
            return;
          case "\\":
            read2();
            s = "identifierNameStartEscape";
            return;
          case "}":
            return newToken("punctuator", read2());
          case '"':
          case "'":
            o = read2() === '"';
            s = "string";
            return;
        }
        if (r.isIdStartChar(l)) {
          c += read2();
          s = "identifierName";
          return;
        }
        throw invalidChar(read2());
      }, afterPropertyName() {
        if (l === ":") {
          return newToken("punctuator", read2());
        }
        throw invalidChar(read2());
      }, beforePropertyValue() {
        s = "value";
      }, afterPropertyValue() {
        switch (l) {
          case ",":
          case "}":
            return newToken("punctuator", read2());
        }
        throw invalidChar(read2());
      }, beforeArrayValue() {
        if (l === "]") {
          return newToken("punctuator", read2());
        }
        s = "value";
      }, afterArrayValue() {
        switch (l) {
          case ",":
          case "]":
            return newToken("punctuator", read2());
        }
        throw invalidChar(read2());
      }, end() {
        throw invalidChar(read2());
      } };
      function newToken(u3, D3) {
        return { type: u3, value: D3, line: n, column: E };
      }
      function literal(u3) {
        for (const D3 of u3) {
          const u4 = peek();
          if (u4 !== D3) {
            throw invalidChar(read2());
          }
          read2();
        }
      }
      function escape() {
        const u3 = peek();
        switch (u3) {
          case "b":
            read2();
            return "\b";
          case "f":
            read2();
            return "\f";
          case "n":
            read2();
            return "\n";
          case "r":
            read2();
            return "\r";
          case "t":
            read2();
            return "	";
          case "v":
            read2();
            return "\v";
          case "0":
            read2();
            if (r.isDigit(peek())) {
              throw invalidChar(read2());
            }
            return "\0";
          case "x":
            read2();
            return hexEscape();
          case "u":
            read2();
            return unicodeEscape();
          case "\n":
          case "\u2028":
          case "\u2029":
            read2();
            return "";
          case "\r":
            read2();
            if (peek() === "\n") {
              read2();
            }
            return "";
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            throw invalidChar(read2());
          case void 0:
            throw invalidChar(read2());
        }
        return read2();
      }
      function hexEscape() {
        let u3 = "";
        let D3 = peek();
        if (!r.isHexDigit(D3)) {
          throw invalidChar(read2());
        }
        u3 += read2();
        D3 = peek();
        if (!r.isHexDigit(D3)) {
          throw invalidChar(read2());
        }
        u3 += read2();
        return String.fromCodePoint(parseInt(u3, 16));
      }
      function unicodeEscape() {
        let u3 = "";
        let D3 = 4;
        while (D3-- > 0) {
          const D4 = peek();
          if (!r.isHexDigit(D4)) {
            throw invalidChar(read2());
          }
          u3 += read2();
        }
        return String.fromCodePoint(parseInt(u3, 16));
      }
      const p = { start() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        push();
      }, beforePropertyName() {
        switch (a.type) {
          case "identifier":
          case "string":
            i = a.value;
            C = "afterPropertyName";
            return;
          case "punctuator":
            pop();
            return;
          case "eof":
            throw invalidEOF();
        }
      }, afterPropertyName() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        C = "beforePropertyValue";
      }, beforePropertyValue() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        push();
      }, beforeArrayValue() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        if (a.type === "punctuator" && a.value === "]") {
          pop();
          return;
        }
        push();
      }, afterPropertyValue() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        switch (a.value) {
          case ",":
            C = "beforePropertyName";
            return;
          case "}":
            pop();
        }
      }, afterArrayValue() {
        if (a.type === "eof") {
          throw invalidEOF();
        }
        switch (a.value) {
          case ",":
            C = "beforeArrayValue";
            return;
          case "]":
            pop();
        }
      }, end() {
      } };
      function push() {
        let u3;
        switch (a.type) {
          case "punctuator":
            switch (a.value) {
              case "{":
                u3 = {};
                break;
              case "[":
                u3 = [];
                break;
            }
            break;
          case "null":
          case "boolean":
          case "numeric":
          case "string":
            u3 = a.value;
            break;
        }
        if (B === void 0) {
          B = u3;
        } else {
          const D3 = t[t.length - 1];
          if (Array.isArray(D3)) {
            D3.push(u3);
          } else {
            D3[i] = u3;
          }
        }
        if (u3 !== null && typeof u3 === "object") {
          t.push(u3);
          if (Array.isArray(u3)) {
            C = "beforeArrayValue";
          } else {
            C = "beforePropertyName";
          }
        } else {
          const u4 = t[t.length - 1];
          if (u4 == null) {
            C = "end";
          } else if (Array.isArray(u4)) {
            C = "afterArrayValue";
          } else {
            C = "afterPropertyValue";
          }
        }
      }
      function pop() {
        t.pop();
        const u3 = t[t.length - 1];
        if (u3 == null) {
          C = "end";
        } else if (Array.isArray(u3)) {
          C = "afterArrayValue";
        } else {
          C = "afterPropertyValue";
        }
      }
      function invalidChar(u3) {
        if (u3 === void 0) {
          return syntaxError(`JSON5: invalid end of input at ${n}:${E}`);
        }
        return syntaxError(`JSON5: invalid character '${formatChar(u3)}' at ${n}:${E}`);
      }
      function invalidEOF() {
        return syntaxError(`JSON5: invalid end of input at ${n}:${E}`);
      }
      function invalidIdentifier() {
        E -= 5;
        return syntaxError(`JSON5: invalid identifier character at ${n}:${E}`);
      }
      function separatorChar(u3) {
        console.warn(`JSON5: '${formatChar(u3)}' in strings is not valid ECMAScript; consider escaping`);
      }
      function formatChar(u3) {
        const D3 = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
        if (D3[u3]) {
          return D3[u3];
        }
        if (u3 < " ") {
          const D4 = u3.charCodeAt(0).toString(16);
          return "\\x" + ("00" + D4).substring(D4.length);
        }
        return u3;
      }
      function syntaxError(u3) {
        const D3 = new SyntaxError(u3);
        D3.lineNumber = n;
        D3.columnNumber = E;
        return D3;
      }
    }, 224: (u2, D2, e2) => {
      const r = e2(796);
      u2.exports = function stringify(u3, D3, e3) {
        const F = [];
        let C = "";
        let t;
        let A;
        let n = "";
        let E;
        if (D3 != null && typeof D3 === "object" && !Array.isArray(D3)) {
          e3 = D3.space;
          E = D3.quote;
          D3 = D3.replacer;
        }
        if (typeof D3 === "function") {
          A = D3;
        } else if (Array.isArray(D3)) {
          t = [];
          for (const u4 of D3) {
            let D4;
            if (typeof u4 === "string") {
              D4 = u4;
            } else if (typeof u4 === "number" || u4 instanceof String || u4 instanceof Number) {
              D4 = String(u4);
            }
            if (D4 !== void 0 && t.indexOf(D4) < 0) {
              t.push(D4);
            }
          }
        }
        if (e3 instanceof Number) {
          e3 = Number(e3);
        } else if (e3 instanceof String) {
          e3 = String(e3);
        }
        if (typeof e3 === "number") {
          if (e3 > 0) {
            e3 = Math.min(10, Math.floor(e3));
            n = "          ".substr(0, e3);
          }
        } else if (typeof e3 === "string") {
          n = e3.substr(0, 10);
        }
        return serializeProperty("", { "": u3 });
        function serializeProperty(u4, D4) {
          let e4 = D4[u4];
          if (e4 != null) {
            if (typeof e4.toJSON5 === "function") {
              e4 = e4.toJSON5(u4);
            } else if (typeof e4.toJSON === "function") {
              e4 = e4.toJSON(u4);
            }
          }
          if (A) {
            e4 = A.call(D4, u4, e4);
          }
          if (e4 instanceof Number) {
            e4 = Number(e4);
          } else if (e4 instanceof String) {
            e4 = String(e4);
          } else if (e4 instanceof Boolean) {
            e4 = e4.valueOf();
          }
          switch (e4) {
            case null:
              return "null";
            case true:
              return "true";
            case false:
              return "false";
          }
          if (typeof e4 === "string") {
            return quoteString(e4, false);
          }
          if (typeof e4 === "number") {
            return String(e4);
          }
          if (typeof e4 === "object") {
            return Array.isArray(e4) ? serializeArray(e4) : serializeObject(e4);
          }
          return void 0;
        }
        function quoteString(u4) {
          const D4 = { "'": 0.1, '"': 0.2 };
          const e4 = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          let F2 = "";
          for (let C3 = 0; C3 < u4.length; C3++) {
            const t2 = u4[C3];
            switch (t2) {
              case "'":
              case '"':
                D4[t2]++;
                F2 += t2;
                continue;
              case "\0":
                if (r.isDigit(u4[C3 + 1])) {
                  F2 += "\\x00";
                  continue;
                }
            }
            if (e4[t2]) {
              F2 += e4[t2];
              continue;
            }
            if (t2 < " ") {
              let u5 = t2.charCodeAt(0).toString(16);
              F2 += "\\x" + ("00" + u5).substring(u5.length);
              continue;
            }
            F2 += t2;
          }
          const C2 = E || Object.keys(D4).reduce((u5, e5) => D4[u5] < D4[e5] ? u5 : e5);
          F2 = F2.replace(new RegExp(C2, "g"), e4[C2]);
          return C2 + F2 + C2;
        }
        function serializeObject(u4) {
          if (F.indexOf(u4) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          F.push(u4);
          let D4 = C;
          C = C + n;
          let e4 = t || Object.keys(u4);
          let r2 = [];
          for (const D5 of e4) {
            const e5 = serializeProperty(D5, u4);
            if (e5 !== void 0) {
              let u5 = serializeKey(D5) + ":";
              if (n !== "") {
                u5 += " ";
              }
              u5 += e5;
              r2.push(u5);
            }
          }
          let A2;
          if (r2.length === 0) {
            A2 = "{}";
          } else {
            let u5;
            if (n === "") {
              u5 = r2.join(",");
              A2 = "{" + u5 + "}";
            } else {
              let e5 = ",\n" + C;
              u5 = r2.join(e5);
              A2 = "{\n" + C + u5 + ",\n" + D4 + "}";
            }
          }
          F.pop();
          C = D4;
          return A2;
        }
        function serializeKey(u4) {
          if (u4.length === 0) {
            return quoteString(u4, true);
          }
          const D4 = String.fromCodePoint(u4.codePointAt(0));
          if (!r.isIdStartChar(D4)) {
            return quoteString(u4, true);
          }
          for (let e4 = D4.length; e4 < u4.length; e4++) {
            if (!r.isIdContinueChar(String.fromCodePoint(u4.codePointAt(e4)))) {
              return quoteString(u4, true);
            }
          }
          return u4;
        }
        function serializeArray(u4) {
          if (F.indexOf(u4) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          F.push(u4);
          let D4 = C;
          C = C + n;
          let e4 = [];
          for (let D5 = 0; D5 < u4.length; D5++) {
            const r3 = serializeProperty(String(D5), u4);
            e4.push(r3 !== void 0 ? r3 : "null");
          }
          let r2;
          if (e4.length === 0) {
            r2 = "[]";
          } else {
            if (n === "") {
              let u5 = e4.join(",");
              r2 = "[" + u5 + "]";
            } else {
              let u5 = ",\n" + C;
              let F2 = e4.join(u5);
              r2 = "[\n" + C + F2 + ",\n" + D4 + "]";
            }
          }
          F.pop();
          C = D4;
          return r2;
        }
      };
    }, 988: (u2) => {
      u2.exports.Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      u2.exports.ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
      u2.exports.ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
    }, 796: (u2, D2, e2) => {
      const r = e2(988);
      u2.exports = { isSpaceSeparator(u3) {
        return typeof u3 === "string" && r.Space_Separator.test(u3);
      }, isIdStartChar(u3) {
        return typeof u3 === "string" && (u3 >= "a" && u3 <= "z" || u3 >= "A" && u3 <= "Z" || u3 === "$" || u3 === "_" || r.ID_Start.test(u3));
      }, isIdContinueChar(u3) {
        return typeof u3 === "string" && (u3 >= "a" && u3 <= "z" || u3 >= "A" && u3 <= "Z" || u3 >= "0" && u3 <= "9" || u3 === "$" || u3 === "_" || u3 === "\u200C" || u3 === "\u200D" || r.ID_Continue.test(u3));
      }, isDigit(u3) {
        return typeof u3 === "string" && /[0-9]/.test(u3);
      }, isHexDigit(u3) {
        return typeof u3 === "string" && /[0-9A-Fa-f]/.test(u3);
      } };
    } };
    var D = {};
    function __nccwpck_require__(e2) {
      var r = D[e2];
      if (r !== void 0) {
        return r.exports;
      }
      var F = D[e2] = { exports: {} };
      var C = true;
      try {
        u[e2](F, F.exports, __nccwpck_require__);
        C = false;
      } finally {
        if (C)
          delete D[e2];
      }
      return F.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var e = __nccwpck_require__(687);
    module2.exports = e;
  })();
});
var require_upath = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 472: (e2, t2, r2) => {
      var n = "2.0.1";
      var i, u, a, f, l, s, o, c, h, p, _, x = [].slice, d = [].indexOf || function(e3) {
        for (var t3 = 0, r3 = this.length; t3 < r3; t3++) {
          if (t3 in this && this[t3] === e3)
            return t3;
        }
        return -1;
      }, m = {}.hasOwnProperty;
      o = r2(17);
      a = function(e3) {
        return typeof e3 === "function";
      };
      f = function(e3) {
        return typeof e3 === "string" || !!e3 && typeof e3 === "object" && Object.prototype.toString.call(e3) === "[object String]";
      };
      _ = t2;
      _.VERSION = typeof n !== "undefined" && n !== null ? n : "NO-VERSION";
      p = function(e3) {
        e3 = e3.replace(/\\/g, "/");
        e3 = e3.replace(/(?<!^)\/+/g, "/");
        return e3;
      };
      for (c in o) {
        h = o[c];
        if (a(h)) {
          _[c] = function(e3) {
            return function() {
              var t3, r3;
              t3 = 1 <= arguments.length ? x.call(arguments, 0) : [];
              t3 = t3.map(function(e4) {
                if (f(e4)) {
                  return p(e4);
                } else {
                  return e4;
                }
              });
              r3 = o[e3].apply(o, t3);
              if (f(r3)) {
                return p(r3);
              } else {
                return r3;
              }
            };
          }(c);
        } else {
          _[c] = h;
        }
      }
      _.sep = "/";
      u = { toUnix: p, normalizeSafe: function(e3) {
        var t3;
        e3 = p(e3);
        t3 = _.normalize(e3);
        if (e3.startsWith("./") && !t3.startsWith("./") && !t3.startsWith("..")) {
          t3 = "./" + t3;
        } else if (e3.startsWith("//") && !t3.startsWith("//")) {
          if (e3.startsWith("//./")) {
            t3 = "//." + t3;
          } else {
            t3 = "/" + t3;
          }
        }
        return t3;
      }, normalizeTrim: function(e3) {
        e3 = _.normalizeSafe(e3);
        if (e3.endsWith("/")) {
          return e3.slice(0, +(e3.length - 2) + 1 || 9e9);
        } else {
          return e3;
        }
      }, joinSafe: function() {
        var e3, t3, r3;
        e3 = 1 <= arguments.length ? x.call(arguments, 0) : [];
        r3 = _.join.apply(null, e3);
        if (e3.length > 0) {
          t3 = p(e3[0]);
          if (t3.startsWith("./") && !r3.startsWith("./") && !r3.startsWith("..")) {
            r3 = "./" + r3;
          } else if (t3.startsWith("//") && !r3.startsWith("//")) {
            if (t3.startsWith("//./")) {
              r3 = "//." + r3;
            } else {
              r3 = "/" + r3;
            }
          }
        }
        return r3;
      }, addExt: function(e3, t3) {
        if (!t3) {
          return e3;
        } else {
          if (t3[0] !== ".") {
            t3 = "." + t3;
          }
          return e3 + (e3.endsWith(t3) ? "" : t3);
        }
      }, trimExt: function(e3, t3, r3) {
        var n2;
        if (r3 == null) {
          r3 = 7;
        }
        n2 = _.extname(e3);
        if (l(n2, t3, r3)) {
          return e3.slice(0, +(e3.length - n2.length - 1) + 1 || 9e9);
        } else {
          return e3;
        }
      }, removeExt: function(e3, t3) {
        if (!t3) {
          return e3;
        } else {
          t3 = t3[0] === "." ? t3 : "." + t3;
          if (_.extname(e3) === t3) {
            return _.trimExt(e3, [], t3.length);
          } else {
            return e3;
          }
        }
      }, changeExt: function(e3, t3, r3, n2) {
        if (n2 == null) {
          n2 = 7;
        }
        return _.trimExt(e3, r3, n2) + (!t3 ? "" : t3[0] === "." ? t3 : "." + t3);
      }, defaultExt: function(e3, t3, r3, n2) {
        var i2;
        if (n2 == null) {
          n2 = 7;
        }
        i2 = _.extname(e3);
        if (l(i2, r3, n2)) {
          return e3;
        } else {
          return _.addExt(e3, t3);
        }
      } };
      l = function(e3, t3, r3) {
        if (t3 == null) {
          t3 = [];
        }
        return e3 && e3.length <= r3 && d.call(t3.map(function(e4) {
          return (e4 && e4[0] !== "." ? "." : "") + e4;
        }), e3) < 0;
      };
      for (s in u) {
        if (!m.call(u, s))
          continue;
        i = u[s];
        if (_[s] !== void 0) {
          throw new Error("path." + s + " already exists.");
        } else {
          _[s] = i;
        }
      }
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var n = t[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var i = t[r2] = { exports: {} };
      var u = true;
      try {
        e[r2](i, i.exports, __nccwpck_require__);
        u = false;
      } finally {
        if (u)
          delete t[r2];
      }
      return i.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(472);
    module2.exports = r;
  })();
});
var require_pkg_up = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 485: (e2, r2, n2) => {
      const t = n2(17);
      const s = n2(197);
      e2.exports = (e3, r3 = {}) => {
        const n3 = t.resolve(r3.cwd || "");
        const { root: c } = t.parse(n3);
        const o = [].concat(e3);
        return new Promise((e4) => {
          (function find2(r4) {
            s(o, { cwd: r4 }).then((n4) => {
              if (n4) {
                e4(t.join(r4, n4));
              } else if (r4 === c) {
                e4(null);
              } else {
                find2(t.dirname(r4));
              }
            });
          })(n3);
        });
      };
      e2.exports.sync = (e3, r3 = {}) => {
        let n3 = t.resolve(r3.cwd || "");
        const { root: c } = t.parse(n3);
        const o = [].concat(e3);
        while (true) {
          const e4 = s.sync(o, { cwd: n3 });
          if (e4) {
            return t.join(n3, e4);
          }
          if (n3 === c) {
            return null;
          }
          n3 = t.dirname(n3);
        }
      };
    }, 197: (e2, r2, n2) => {
      const t = n2(17);
      const s = n2(383);
      const c = n2(22);
      e2.exports = (e3, r3) => {
        r3 = Object.assign({ cwd: process.cwd() }, r3);
        return c(e3, (e4) => s(t.resolve(r3.cwd, e4)), r3);
      };
      e2.exports.sync = (e3, r3) => {
        r3 = Object.assign({ cwd: process.cwd() }, r3);
        for (const n3 of e3) {
          if (s.sync(t.resolve(r3.cwd, n3))) {
            return n3;
          }
        }
      };
    }, 848: (e2, r2, n2) => {
      const t = n2(242);
      const pLimit = (e3) => {
        if (!((Number.isInteger(e3) || e3 === Infinity) && e3 > 0)) {
          return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
        }
        const r3 = [];
        let n3 = 0;
        const next = () => {
          n3--;
          if (r3.length > 0) {
            r3.shift()();
          }
        };
        const run = (e4, r4, ...s) => {
          n3++;
          const c = t(e4, ...s);
          r4(c);
          c.then(next, next);
        };
        const enqueue = (t2, s, ...c) => {
          if (n3 < e3) {
            run(t2, s, ...c);
          } else {
            r3.push(run.bind(null, t2, s, ...c));
          }
        };
        const generator = (e4, ...r4) => new Promise((n4) => enqueue(e4, n4, ...r4));
        Object.defineProperties(generator, { activeCount: { get: () => n3 }, pendingCount: { get: () => r3.length }, clearQueue: { value: () => {
          r3.length = 0;
        } } });
        return generator;
      };
      e2.exports = pLimit;
      e2.exports["default"] = pLimit;
    }, 22: (e2, r2, n2) => {
      const t = n2(848);
      class EndError extends Error {
        constructor(e3) {
          super();
          this.value = e3;
        }
      }
      const testElement = (e3, r3) => Promise.resolve(e3).then(r3);
      const finder = (e3) => Promise.all(e3).then((e4) => e4[1] === true && Promise.reject(new EndError(e4[0])));
      e2.exports = (e3, r3, n3) => {
        n3 = Object.assign({ concurrency: Infinity, preserveOrder: true }, n3);
        const s = t(n3.concurrency);
        const c = [...e3].map((e4) => [e4, s(testElement, e4, r3)]);
        const o = t(n3.preserveOrder ? 1 : Infinity);
        return Promise.all(c.map((e4) => o(finder, e4))).then(() => {
        }).catch((e4) => e4 instanceof EndError ? e4.value : Promise.reject(e4));
      };
    }, 242: (e2) => {
      const pTry = (e3, ...r2) => new Promise((n2) => {
        n2(e3(...r2));
      });
      e2.exports = pTry;
      e2.exports["default"] = pTry;
    }, 383: (e2, r2, n2) => {
      const t = n2(147);
      e2.exports = (e3) => new Promise((r3) => {
        t.access(e3, (e4) => {
          r3(!e4);
        });
      });
      e2.exports.sync = (e3) => {
        try {
          t.accessSync(e3);
          return true;
        } catch (e4) {
          return false;
        }
      };
    }, 800: (e2, r2, n2) => {
      const t = n2(485);
      e2.exports = async ({ cwd: e3 } = {}) => t("package.json", { cwd: e3 });
      e2.exports.sync = ({ cwd: e3 } = {}) => t.sync("package.json", { cwd: e3 });
    }, 147: (e2) => {
      e2.exports = __require("fs");
    }, 17: (e2) => {
      e2.exports = __require("path");
    } };
    var r = {};
    function __nccwpck_require__(n2) {
      var t = r[n2];
      if (t !== void 0) {
        return t.exports;
      }
      var s = r[n2] = { exports: {} };
      var c = true;
      try {
        e[n2](s, s.exports, __nccwpck_require__);
        c = false;
      } finally {
        if (c)
          delete r[n2];
      }
      return s.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var n = __nccwpck_require__(800);
    module2.exports = n;
  })();
});
var require_nanoid = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 113: (e2) => {
      "use strict";
      e2.exports = __require("crypto");
    }, 495: (e2, r2, t2) => {
      let l = t2(113);
      let { urlAlphabet: a } = t2(240);
      const n = 128;
      let _, u;
      let fillPool = (e3) => {
        if (!_ || _.length < e3) {
          _ = Buffer.allocUnsafe(e3 * n);
          l.randomFillSync(_);
          u = 0;
        } else if (u + e3 > _.length) {
          l.randomFillSync(_);
          u = 0;
        }
        u += e3;
      };
      let random = (e3) => {
        fillPool(e3 -= 0);
        return _.subarray(u - e3, u);
      };
      let customRandom = (e3, r3, t3) => {
        let l2 = (2 << 31 - Math.clz32(e3.length - 1 | 1)) - 1;
        let a2 = Math.ceil(1.6 * l2 * r3 / e3.length);
        return (n2 = r3) => {
          let _2 = "";
          while (true) {
            let r4 = t3(a2);
            let u2 = a2;
            while (u2--) {
              _2 += e3[r4[u2] & l2] || "";
              if (_2.length === n2)
                return _2;
            }
          }
        };
      };
      let customAlphabet = (e3, r3 = 21) => customRandom(e3, r3, random);
      let nanoid = (e3 = 21) => {
        fillPool(e3 -= 0);
        let r3 = "";
        for (let t3 = u - e3; t3 < u; t3++) {
          r3 += a[_[t3] & 63];
        }
        return r3;
      };
      e2.exports = { nanoid, customAlphabet, customRandom, urlAlphabet: a, random };
    }, 240: (e2) => {
      let r2 = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
      e2.exports = { urlAlphabet: r2 };
    } };
    var r = {};
    function __nccwpck_require__(t2) {
      var l = r[t2];
      if (l !== void 0) {
        return l.exports;
      }
      var a = r[t2] = { exports: {} };
      var n = true;
      try {
        e[t2](a, a.exports, __nccwpck_require__);
        n = false;
      } finally {
        if (n)
          delete r[t2];
      }
      return a.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var t = __nccwpck_require__(495);
    module2.exports = t;
  })();
});
var require_semver = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 844: (e2, t2, r2) => {
      "use strict";
      const s = r2(605);
      const n = Symbol("max");
      const i = Symbol("length");
      const o = Symbol("lengthCalculator");
      const l = Symbol("allowStale");
      const a = Symbol("maxAge");
      const h = Symbol("dispose");
      const c = Symbol("noDisposeOnSet");
      const u = Symbol("lruList");
      const f = Symbol("cache");
      const p = Symbol("updateAgeOnGet");
      const naiveLength = () => 1;
      class LRUCache {
        constructor(e3) {
          if (typeof e3 === "number")
            e3 = { max: e3 };
          if (!e3)
            e3 = {};
          if (e3.max && (typeof e3.max !== "number" || e3.max < 0))
            throw new TypeError("max must be a non-negative number");
          const t3 = this[n] = e3.max || Infinity;
          const r3 = e3.length || naiveLength;
          this[o] = typeof r3 !== "function" ? naiveLength : r3;
          this[l] = e3.stale || false;
          if (e3.maxAge && typeof e3.maxAge !== "number")
            throw new TypeError("maxAge must be a number");
          this[a] = e3.maxAge || 0;
          this[h] = e3.dispose;
          this[c] = e3.noDisposeOnSet || false;
          this[p] = e3.updateAgeOnGet || false;
          this.reset();
        }
        set max(e3) {
          if (typeof e3 !== "number" || e3 < 0)
            throw new TypeError("max must be a non-negative number");
          this[n] = e3 || Infinity;
          trim(this);
        }
        get max() {
          return this[n];
        }
        set allowStale(e3) {
          this[l] = !!e3;
        }
        get allowStale() {
          return this[l];
        }
        set maxAge(e3) {
          if (typeof e3 !== "number")
            throw new TypeError("maxAge must be a non-negative number");
          this[a] = e3;
          trim(this);
        }
        get maxAge() {
          return this[a];
        }
        set lengthCalculator(e3) {
          if (typeof e3 !== "function")
            e3 = naiveLength;
          if (e3 !== this[o]) {
            this[o] = e3;
            this[i] = 0;
            this[u].forEach((e4) => {
              e4.length = this[o](e4.value, e4.key);
              this[i] += e4.length;
            });
          }
          trim(this);
        }
        get lengthCalculator() {
          return this[o];
        }
        get length() {
          return this[i];
        }
        get itemCount() {
          return this[u].length;
        }
        rforEach(e3, t3) {
          t3 = t3 || this;
          for (let r3 = this[u].tail; r3 !== null; ) {
            const s2 = r3.prev;
            forEachStep(this, e3, r3, t3);
            r3 = s2;
          }
        }
        forEach(e3, t3) {
          t3 = t3 || this;
          for (let r3 = this[u].head; r3 !== null; ) {
            const s2 = r3.next;
            forEachStep(this, e3, r3, t3);
            r3 = s2;
          }
        }
        keys() {
          return this[u].toArray().map((e3) => e3.key);
        }
        values() {
          return this[u].toArray().map((e3) => e3.value);
        }
        reset() {
          if (this[h] && this[u] && this[u].length) {
            this[u].forEach((e3) => this[h](e3.key, e3.value));
          }
          this[f] = /* @__PURE__ */ new Map();
          this[u] = new s();
          this[i] = 0;
        }
        dump() {
          return this[u].map((e3) => isStale(this, e3) ? false : { k: e3.key, v: e3.value, e: e3.now + (e3.maxAge || 0) }).toArray().filter((e3) => e3);
        }
        dumpLru() {
          return this[u];
        }
        set(e3, t3, r3) {
          r3 = r3 || this[a];
          if (r3 && typeof r3 !== "number")
            throw new TypeError("maxAge must be a number");
          const s2 = r3 ? Date.now() : 0;
          const l2 = this[o](t3, e3);
          if (this[f].has(e3)) {
            if (l2 > this[n]) {
              del(this, this[f].get(e3));
              return false;
            }
            const o2 = this[f].get(e3);
            const a2 = o2.value;
            if (this[h]) {
              if (!this[c])
                this[h](e3, a2.value);
            }
            a2.now = s2;
            a2.maxAge = r3;
            a2.value = t3;
            this[i] += l2 - a2.length;
            a2.length = l2;
            this.get(e3);
            trim(this);
            return true;
          }
          const p2 = new Entry(e3, t3, l2, s2, r3);
          if (p2.length > this[n]) {
            if (this[h])
              this[h](e3, t3);
            return false;
          }
          this[i] += p2.length;
          this[u].unshift(p2);
          this[f].set(e3, this[u].head);
          trim(this);
          return true;
        }
        has(e3) {
          if (!this[f].has(e3))
            return false;
          const t3 = this[f].get(e3).value;
          return !isStale(this, t3);
        }
        get(e3) {
          return get(this, e3, true);
        }
        peek(e3) {
          return get(this, e3, false);
        }
        pop() {
          const e3 = this[u].tail;
          if (!e3)
            return null;
          del(this, e3);
          return e3.value;
        }
        del(e3) {
          del(this, this[f].get(e3));
        }
        load(e3) {
          this.reset();
          const t3 = Date.now();
          for (let r3 = e3.length - 1; r3 >= 0; r3--) {
            const s2 = e3[r3];
            const n2 = s2.e || 0;
            if (n2 === 0)
              this.set(s2.k, s2.v);
            else {
              const e4 = n2 - t3;
              if (e4 > 0) {
                this.set(s2.k, s2.v, e4);
              }
            }
          }
        }
        prune() {
          this[f].forEach((e3, t3) => get(this, t3, false));
        }
      }
      const get = (e3, t3, r3) => {
        const s2 = e3[f].get(t3);
        if (s2) {
          const t4 = s2.value;
          if (isStale(e3, t4)) {
            del(e3, s2);
            if (!e3[l])
              return void 0;
          } else {
            if (r3) {
              if (e3[p])
                s2.value.now = Date.now();
              e3[u].unshiftNode(s2);
            }
          }
          return t4.value;
        }
      };
      const isStale = (e3, t3) => {
        if (!t3 || !t3.maxAge && !e3[a])
          return false;
        const r3 = Date.now() - t3.now;
        return t3.maxAge ? r3 > t3.maxAge : e3[a] && r3 > e3[a];
      };
      const trim = (e3) => {
        if (e3[i] > e3[n]) {
          for (let t3 = e3[u].tail; e3[i] > e3[n] && t3 !== null; ) {
            const r3 = t3.prev;
            del(e3, t3);
            t3 = r3;
          }
        }
      };
      const del = (e3, t3) => {
        if (t3) {
          const r3 = t3.value;
          if (e3[h])
            e3[h](r3.key, r3.value);
          e3[i] -= r3.length;
          e3[f].delete(r3.key);
          e3[u].removeNode(t3);
        }
      };
      class Entry {
        constructor(e3, t3, r3, s2, n2) {
          this.key = e3;
          this.value = t3;
          this.length = r3;
          this.now = s2;
          this.maxAge = n2 || 0;
        }
      }
      const forEachStep = (e3, t3, r3, s2) => {
        let n2 = r3.value;
        if (isStale(e3, n2)) {
          del(e3, r3);
          if (!e3[l])
            n2 = void 0;
        }
        if (n2)
          t3.call(s2, n2.value, n2.key, e3);
      };
      e2.exports = LRUCache;
    }, 685: (e2, t2, r2) => {
      const s = Symbol("SemVer ANY");
      class Comparator {
        static get ANY() {
          return s;
        }
        constructor(e3, t3) {
          t3 = n(t3);
          if (e3 instanceof Comparator) {
            if (e3.loose === !!t3.loose) {
              return e3;
            } else {
              e3 = e3.value;
            }
          }
          a("comparator", e3, t3);
          this.options = t3;
          this.loose = !!t3.loose;
          this.parse(e3);
          if (this.semver === s) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          a("comp", this);
        }
        parse(e3) {
          const t3 = this.options.loose ? i[o.COMPARATORLOOSE] : i[o.COMPARATOR];
          const r3 = e3.match(t3);
          if (!r3) {
            throw new TypeError(`Invalid comparator: ${e3}`);
          }
          this.operator = r3[1] !== void 0 ? r3[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!r3[2]) {
            this.semver = s;
          } else {
            this.semver = new h(r3[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(e3) {
          a("Comparator.test", e3, this.options.loose);
          if (this.semver === s || e3 === s) {
            return true;
          }
          if (typeof e3 === "string") {
            try {
              e3 = new h(e3, this.options);
            } catch (e4) {
              return false;
            }
          }
          return l(e3, this.operator, this.semver, this.options);
        }
        intersects(e3, t3) {
          if (!(e3 instanceof Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (!t3 || typeof t3 !== "object") {
            t3 = { loose: !!t3, includePrerelease: false };
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new c(e3.value, t3).test(this.value);
          } else if (e3.operator === "") {
            if (e3.value === "") {
              return true;
            }
            return new c(this.value, t3).test(e3.semver);
          }
          const r3 = (this.operator === ">=" || this.operator === ">") && (e3.operator === ">=" || e3.operator === ">");
          const s2 = (this.operator === "<=" || this.operator === "<") && (e3.operator === "<=" || e3.operator === "<");
          const n2 = this.semver.version === e3.semver.version;
          const i2 = (this.operator === ">=" || this.operator === "<=") && (e3.operator === ">=" || e3.operator === "<=");
          const o2 = l(this.semver, "<", e3.semver, t3) && (this.operator === ">=" || this.operator === ">") && (e3.operator === "<=" || e3.operator === "<");
          const a2 = l(this.semver, ">", e3.semver, t3) && (this.operator === "<=" || this.operator === "<") && (e3.operator === ">=" || e3.operator === ">");
          return r3 || s2 || n2 && i2 || o2 || a2;
        }
      }
      e2.exports = Comparator;
      const n = r2(912);
      const { re: i, t: o } = r2(475);
      const l = r2(852);
      const a = r2(805);
      const h = r2(607);
      const c = r2(12);
    }, 12: (e2, t2, r2) => {
      class Range {
        constructor(e3, t3) {
          t3 = i(t3);
          if (e3 instanceof Range) {
            if (e3.loose === !!t3.loose && e3.includePrerelease === !!t3.includePrerelease) {
              return e3;
            } else {
              return new Range(e3.raw, t3);
            }
          }
          if (e3 instanceof o) {
            this.raw = e3.value;
            this.set = [[e3]];
            this.format();
            return this;
          }
          this.options = t3;
          this.loose = !!t3.loose;
          this.includePrerelease = !!t3.includePrerelease;
          this.raw = e3;
          this.set = e3.split("||").map((e4) => this.parseRange(e4.trim())).filter((e4) => e4.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${e3}`);
          }
          if (this.set.length > 1) {
            const e4 = this.set[0];
            this.set = this.set.filter((e5) => !isNullSet(e5[0]));
            if (this.set.length === 0) {
              this.set = [e4];
            } else if (this.set.length > 1) {
              for (const e5 of this.set) {
                if (e5.length === 1 && isAny(e5[0])) {
                  this.set = [e5];
                  break;
                }
              }
            }
          }
          this.format();
        }
        format() {
          this.range = this.set.map((e3) => e3.join(" ").trim()).join("||").trim();
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(e3) {
          e3 = e3.trim();
          const t3 = Object.keys(this.options).join(",");
          const r3 = `parseRange:${t3}:${e3}`;
          const s2 = n.get(r3);
          if (s2) {
            return s2;
          }
          const i2 = this.options.loose;
          const a2 = i2 ? h[c.HYPHENRANGELOOSE] : h[c.HYPHENRANGE];
          e3 = e3.replace(a2, hyphenReplace(this.options.includePrerelease));
          l("hyphen replace", e3);
          e3 = e3.replace(h[c.COMPARATORTRIM], u);
          l("comparator trim", e3);
          e3 = e3.replace(h[c.TILDETRIM], f);
          e3 = e3.replace(h[c.CARETTRIM], p);
          e3 = e3.split(/\s+/).join(" ");
          let E = e3.split(" ").map((e4) => parseComparator(e4, this.options)).join(" ").split(/\s+/).map((e4) => replaceGTE0(e4, this.options));
          if (i2) {
            E = E.filter((e4) => {
              l("loose invalid filter", e4, this.options);
              return !!e4.match(h[c.COMPARATORLOOSE]);
            });
          }
          l("range list", E);
          const m = /* @__PURE__ */ new Map();
          const v = E.map((e4) => new o(e4, this.options));
          for (const e4 of v) {
            if (isNullSet(e4)) {
              return [e4];
            }
            m.set(e4.value, e4);
          }
          if (m.size > 1 && m.has("")) {
            m.delete("");
          }
          const $ = [...m.values()];
          n.set(r3, $);
          return $;
        }
        intersects(e3, t3) {
          if (!(e3 instanceof Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((r3) => isSatisfiable(r3, t3) && e3.set.some((e4) => isSatisfiable(e4, t3) && r3.every((r4) => e4.every((e5) => r4.intersects(e5, t3)))));
        }
        test(e3) {
          if (!e3) {
            return false;
          }
          if (typeof e3 === "string") {
            try {
              e3 = new a(e3, this.options);
            } catch (e4) {
              return false;
            }
          }
          for (let t3 = 0; t3 < this.set.length; t3++) {
            if (testSet(this.set[t3], e3, this.options)) {
              return true;
            }
          }
          return false;
        }
      }
      e2.exports = Range;
      const s = r2(844);
      const n = new s({ max: 1e3 });
      const i = r2(912);
      const o = r2(685);
      const l = r2(805);
      const a = r2(607);
      const { re: h, t: c, comparatorTrimReplace: u, tildeTrimReplace: f, caretTrimReplace: p } = r2(475);
      const isNullSet = (e3) => e3.value === "<0.0.0-0";
      const isAny = (e3) => e3.value === "";
      const isSatisfiable = (e3, t3) => {
        let r3 = true;
        const s2 = e3.slice();
        let n2 = s2.pop();
        while (r3 && s2.length) {
          r3 = s2.every((e4) => n2.intersects(e4, t3));
          n2 = s2.pop();
        }
        return r3;
      };
      const parseComparator = (e3, t3) => {
        l("comp", e3, t3);
        e3 = replaceCarets(e3, t3);
        l("caret", e3);
        e3 = replaceTildes(e3, t3);
        l("tildes", e3);
        e3 = replaceXRanges(e3, t3);
        l("xrange", e3);
        e3 = replaceStars(e3, t3);
        l("stars", e3);
        return e3;
      };
      const isX = (e3) => !e3 || e3.toLowerCase() === "x" || e3 === "*";
      const replaceTildes = (e3, t3) => e3.trim().split(/\s+/).map((e4) => replaceTilde(e4, t3)).join(" ");
      const replaceTilde = (e3, t3) => {
        const r3 = t3.loose ? h[c.TILDELOOSE] : h[c.TILDE];
        return e3.replace(r3, (t4, r4, s2, n2, i2) => {
          l("tilde", e3, t4, r4, s2, n2, i2);
          let o2;
          if (isX(r4)) {
            o2 = "";
          } else if (isX(s2)) {
            o2 = `>=${r4}.0.0 <${+r4 + 1}.0.0-0`;
          } else if (isX(n2)) {
            o2 = `>=${r4}.${s2}.0 <${r4}.${+s2 + 1}.0-0`;
          } else if (i2) {
            l("replaceTilde pr", i2);
            o2 = `>=${r4}.${s2}.${n2}-${i2} <${r4}.${+s2 + 1}.0-0`;
          } else {
            o2 = `>=${r4}.${s2}.${n2} <${r4}.${+s2 + 1}.0-0`;
          }
          l("tilde return", o2);
          return o2;
        });
      };
      const replaceCarets = (e3, t3) => e3.trim().split(/\s+/).map((e4) => replaceCaret(e4, t3)).join(" ");
      const replaceCaret = (e3, t3) => {
        l("caret", e3, t3);
        const r3 = t3.loose ? h[c.CARETLOOSE] : h[c.CARET];
        const s2 = t3.includePrerelease ? "-0" : "";
        return e3.replace(r3, (t4, r4, n2, i2, o2) => {
          l("caret", e3, t4, r4, n2, i2, o2);
          let a2;
          if (isX(r4)) {
            a2 = "";
          } else if (isX(n2)) {
            a2 = `>=${r4}.0.0${s2} <${+r4 + 1}.0.0-0`;
          } else if (isX(i2)) {
            if (r4 === "0") {
              a2 = `>=${r4}.${n2}.0${s2} <${r4}.${+n2 + 1}.0-0`;
            } else {
              a2 = `>=${r4}.${n2}.0${s2} <${+r4 + 1}.0.0-0`;
            }
          } else if (o2) {
            l("replaceCaret pr", o2);
            if (r4 === "0") {
              if (n2 === "0") {
                a2 = `>=${r4}.${n2}.${i2}-${o2} <${r4}.${n2}.${+i2 + 1}-0`;
              } else {
                a2 = `>=${r4}.${n2}.${i2}-${o2} <${r4}.${+n2 + 1}.0-0`;
              }
            } else {
              a2 = `>=${r4}.${n2}.${i2}-${o2} <${+r4 + 1}.0.0-0`;
            }
          } else {
            l("no pr");
            if (r4 === "0") {
              if (n2 === "0") {
                a2 = `>=${r4}.${n2}.${i2}${s2} <${r4}.${n2}.${+i2 + 1}-0`;
              } else {
                a2 = `>=${r4}.${n2}.${i2}${s2} <${r4}.${+n2 + 1}.0-0`;
              }
            } else {
              a2 = `>=${r4}.${n2}.${i2} <${+r4 + 1}.0.0-0`;
            }
          }
          l("caret return", a2);
          return a2;
        });
      };
      const replaceXRanges = (e3, t3) => {
        l("replaceXRanges", e3, t3);
        return e3.split(/\s+/).map((e4) => replaceXRange(e4, t3)).join(" ");
      };
      const replaceXRange = (e3, t3) => {
        e3 = e3.trim();
        const r3 = t3.loose ? h[c.XRANGELOOSE] : h[c.XRANGE];
        return e3.replace(r3, (r4, s2, n2, i2, o2, a2) => {
          l("xRange", e3, r4, s2, n2, i2, o2, a2);
          const h2 = isX(n2);
          const c2 = h2 || isX(i2);
          const u2 = c2 || isX(o2);
          const f2 = u2;
          if (s2 === "=" && f2) {
            s2 = "";
          }
          a2 = t3.includePrerelease ? "-0" : "";
          if (h2) {
            if (s2 === ">" || s2 === "<") {
              r4 = "<0.0.0-0";
            } else {
              r4 = "*";
            }
          } else if (s2 && f2) {
            if (c2) {
              i2 = 0;
            }
            o2 = 0;
            if (s2 === ">") {
              s2 = ">=";
              if (c2) {
                n2 = +n2 + 1;
                i2 = 0;
                o2 = 0;
              } else {
                i2 = +i2 + 1;
                o2 = 0;
              }
            } else if (s2 === "<=") {
              s2 = "<";
              if (c2) {
                n2 = +n2 + 1;
              } else {
                i2 = +i2 + 1;
              }
            }
            if (s2 === "<") {
              a2 = "-0";
            }
            r4 = `${s2 + n2}.${i2}.${o2}${a2}`;
          } else if (c2) {
            r4 = `>=${n2}.0.0${a2} <${+n2 + 1}.0.0-0`;
          } else if (u2) {
            r4 = `>=${n2}.${i2}.0${a2} <${n2}.${+i2 + 1}.0-0`;
          }
          l("xRange return", r4);
          return r4;
        });
      };
      const replaceStars = (e3, t3) => {
        l("replaceStars", e3, t3);
        return e3.trim().replace(h[c.STAR], "");
      };
      const replaceGTE0 = (e3, t3) => {
        l("replaceGTE0", e3, t3);
        return e3.trim().replace(h[t3.includePrerelease ? c.GTE0PRE : c.GTE0], "");
      };
      const hyphenReplace = (e3) => (t3, r3, s2, n2, i2, o2, l2, a2, h2, c2, u2, f2, p2) => {
        if (isX(s2)) {
          r3 = "";
        } else if (isX(n2)) {
          r3 = `>=${s2}.0.0${e3 ? "-0" : ""}`;
        } else if (isX(i2)) {
          r3 = `>=${s2}.${n2}.0${e3 ? "-0" : ""}`;
        } else if (o2) {
          r3 = `>=${r3}`;
        } else {
          r3 = `>=${r3}${e3 ? "-0" : ""}`;
        }
        if (isX(h2)) {
          a2 = "";
        } else if (isX(c2)) {
          a2 = `<${+h2 + 1}.0.0-0`;
        } else if (isX(u2)) {
          a2 = `<${h2}.${+c2 + 1}.0-0`;
        } else if (f2) {
          a2 = `<=${h2}.${c2}.${u2}-${f2}`;
        } else if (e3) {
          a2 = `<${h2}.${c2}.${+u2 + 1}-0`;
        } else {
          a2 = `<=${a2}`;
        }
        return `${r3} ${a2}`.trim();
      };
      const testSet = (e3, t3, r3) => {
        for (let r4 = 0; r4 < e3.length; r4++) {
          if (!e3[r4].test(t3)) {
            return false;
          }
        }
        if (t3.prerelease.length && !r3.includePrerelease) {
          for (let r4 = 0; r4 < e3.length; r4++) {
            l(e3[r4].semver);
            if (e3[r4].semver === o.ANY) {
              continue;
            }
            if (e3[r4].semver.prerelease.length > 0) {
              const s2 = e3[r4].semver;
              if (s2.major === t3.major && s2.minor === t3.minor && s2.patch === t3.patch) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      };
    }, 607: (e2, t2, r2) => {
      const s = r2(805);
      const { MAX_LENGTH: n, MAX_SAFE_INTEGER: i } = r2(393);
      const { re: o, t: l } = r2(475);
      const a = r2(912);
      const { compareIdentifiers: h } = r2(350);
      class SemVer {
        constructor(e3, t3) {
          t3 = a(t3);
          if (e3 instanceof SemVer) {
            if (e3.loose === !!t3.loose && e3.includePrerelease === !!t3.includePrerelease) {
              return e3;
            } else {
              e3 = e3.version;
            }
          } else if (typeof e3 !== "string") {
            throw new TypeError(`Invalid Version: ${e3}`);
          }
          if (e3.length > n) {
            throw new TypeError(`version is longer than ${n} characters`);
          }
          s("SemVer", e3, t3);
          this.options = t3;
          this.loose = !!t3.loose;
          this.includePrerelease = !!t3.includePrerelease;
          const r3 = e3.trim().match(t3.loose ? o[l.LOOSE] : o[l.FULL]);
          if (!r3) {
            throw new TypeError(`Invalid Version: ${e3}`);
          }
          this.raw = e3;
          this.major = +r3[1];
          this.minor = +r3[2];
          this.patch = +r3[3];
          if (this.major > i || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > i || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > i || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!r3[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = r3[4].split(".").map((e4) => {
              if (/^[0-9]+$/.test(e4)) {
                const t4 = +e4;
                if (t4 >= 0 && t4 < i) {
                  return t4;
                }
              }
              return e4;
            });
          }
          this.build = r3[5] ? r3[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(e3) {
          s("SemVer.compare", this.version, this.options, e3);
          if (!(e3 instanceof SemVer)) {
            if (typeof e3 === "string" && e3 === this.version) {
              return 0;
            }
            e3 = new SemVer(e3, this.options);
          }
          if (e3.version === this.version) {
            return 0;
          }
          return this.compareMain(e3) || this.comparePre(e3);
        }
        compareMain(e3) {
          if (!(e3 instanceof SemVer)) {
            e3 = new SemVer(e3, this.options);
          }
          return h(this.major, e3.major) || h(this.minor, e3.minor) || h(this.patch, e3.patch);
        }
        comparePre(e3) {
          if (!(e3 instanceof SemVer)) {
            e3 = new SemVer(e3, this.options);
          }
          if (this.prerelease.length && !e3.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && e3.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !e3.prerelease.length) {
            return 0;
          }
          let t3 = 0;
          do {
            const r3 = this.prerelease[t3];
            const n2 = e3.prerelease[t3];
            s("prerelease compare", t3, r3, n2);
            if (r3 === void 0 && n2 === void 0) {
              return 0;
            } else if (n2 === void 0) {
              return 1;
            } else if (r3 === void 0) {
              return -1;
            } else if (r3 === n2) {
              continue;
            } else {
              return h(r3, n2);
            }
          } while (++t3);
        }
        compareBuild(e3) {
          if (!(e3 instanceof SemVer)) {
            e3 = new SemVer(e3, this.options);
          }
          let t3 = 0;
          do {
            const r3 = this.build[t3];
            const n2 = e3.build[t3];
            s("prerelease compare", t3, r3, n2);
            if (r3 === void 0 && n2 === void 0) {
              return 0;
            } else if (n2 === void 0) {
              return 1;
            } else if (r3 === void 0) {
              return -1;
            } else if (r3 === n2) {
              continue;
            } else {
              return h(r3, n2);
            }
          } while (++t3);
        }
        inc(e3, t3) {
          switch (e3) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", t3);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", t3);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", t3);
              this.inc("pre", t3);
              break;
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", t3);
              }
              this.inc("pre", t3);
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            case "pre":
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                let e4 = this.prerelease.length;
                while (--e4 >= 0) {
                  if (typeof this.prerelease[e4] === "number") {
                    this.prerelease[e4]++;
                    e4 = -2;
                  }
                }
                if (e4 === -1) {
                  this.prerelease.push(0);
                }
              }
              if (t3) {
                if (h(this.prerelease[0], t3) === 0) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [t3, 0];
                  }
                } else {
                  this.prerelease = [t3, 0];
                }
              }
              break;
            default:
              throw new Error(`invalid increment argument: ${e3}`);
          }
          this.format();
          this.raw = this.version;
          return this;
        }
      }
      e2.exports = SemVer;
    }, 219: (e2, t2, r2) => {
      const s = r2(278);
      const clean = (e3, t3) => {
        const r3 = s(e3.trim().replace(/^[=v]+/, ""), t3);
        return r3 ? r3.version : null;
      };
      e2.exports = clean;
    }, 852: (e2, t2, r2) => {
      const s = r2(620);
      const n = r2(443);
      const i = r2(421);
      const o = r2(294);
      const l = r2(808);
      const a = r2(923);
      const cmp = (e3, t3, r3, h) => {
        switch (t3) {
          case "===":
            if (typeof e3 === "object") {
              e3 = e3.version;
            }
            if (typeof r3 === "object") {
              r3 = r3.version;
            }
            return e3 === r3;
          case "!==":
            if (typeof e3 === "object") {
              e3 = e3.version;
            }
            if (typeof r3 === "object") {
              r3 = r3.version;
            }
            return e3 !== r3;
          case "":
          case "=":
          case "==":
            return s(e3, r3, h);
          case "!=":
            return n(e3, r3, h);
          case ">":
            return i(e3, r3, h);
          case ">=":
            return o(e3, r3, h);
          case "<":
            return l(e3, r3, h);
          case "<=":
            return a(e3, r3, h);
          default:
            throw new TypeError(`Invalid operator: ${t3}`);
        }
      };
      e2.exports = cmp;
    }, 970: (e2, t2, r2) => {
      const s = r2(607);
      const n = r2(278);
      const { re: i, t: o } = r2(475);
      const coerce = (e3, t3) => {
        if (e3 instanceof s) {
          return e3;
        }
        if (typeof e3 === "number") {
          e3 = String(e3);
        }
        if (typeof e3 !== "string") {
          return null;
        }
        t3 = t3 || {};
        let r3 = null;
        if (!t3.rtl) {
          r3 = e3.match(i[o.COERCE]);
        } else {
          let t4;
          while ((t4 = i[o.COERCERTL].exec(e3)) && (!r3 || r3.index + r3[0].length !== e3.length)) {
            if (!r3 || t4.index + t4[0].length !== r3.index + r3[0].length) {
              r3 = t4;
            }
            i[o.COERCERTL].lastIndex = t4.index + t4[1].length + t4[2].length;
          }
          i[o.COERCERTL].lastIndex = -1;
        }
        if (r3 === null) {
          return null;
        }
        return n(`${r3[2]}.${r3[3] || "0"}.${r3[4] || "0"}`, t3);
      };
      e2.exports = coerce;
    }, 25: (e2, t2, r2) => {
      const s = r2(607);
      const compareBuild = (e3, t3, r3) => {
        const n = new s(e3, r3);
        const i = new s(t3, r3);
        return n.compare(i) || n.compareBuild(i);
      };
      e2.exports = compareBuild;
    }, 414: (e2, t2, r2) => {
      const s = r2(433);
      const compareLoose = (e3, t3) => s(e3, t3, true);
      e2.exports = compareLoose;
    }, 433: (e2, t2, r2) => {
      const s = r2(607);
      const compare = (e3, t3, r3) => new s(e3, r3).compare(new s(t3, r3));
      e2.exports = compare;
    }, 74: (e2, t2, r2) => {
      const s = r2(278);
      const n = r2(620);
      const diff = (e3, t3) => {
        if (n(e3, t3)) {
          return null;
        } else {
          const r3 = s(e3);
          const n2 = s(t3);
          const i = r3.prerelease.length || n2.prerelease.length;
          const o = i ? "pre" : "";
          const l = i ? "prerelease" : "";
          for (const e4 in r3) {
            if (e4 === "major" || e4 === "minor" || e4 === "patch") {
              if (r3[e4] !== n2[e4]) {
                return o + e4;
              }
            }
          }
          return l;
        }
      };
      e2.exports = diff;
    }, 620: (e2, t2, r2) => {
      const s = r2(433);
      const eq = (e3, t3, r3) => s(e3, t3, r3) === 0;
      e2.exports = eq;
    }, 421: (e2, t2, r2) => {
      const s = r2(433);
      const gt = (e3, t3, r3) => s(e3, t3, r3) > 0;
      e2.exports = gt;
    }, 294: (e2, t2, r2) => {
      const s = r2(433);
      const gte = (e3, t3, r3) => s(e3, t3, r3) >= 0;
      e2.exports = gte;
    }, 779: (e2, t2, r2) => {
      const s = r2(607);
      const inc2 = (e3, t3, r3, n) => {
        if (typeof r3 === "string") {
          n = r3;
          r3 = void 0;
        }
        try {
          return new s(e3 instanceof s ? e3.version : e3, r3).inc(t3, n).version;
        } catch (e4) {
          return null;
        }
      };
      e2.exports = inc2;
    }, 808: (e2, t2, r2) => {
      const s = r2(433);
      const lt = (e3, t3, r3) => s(e3, t3, r3) < 0;
      e2.exports = lt;
    }, 923: (e2, t2, r2) => {
      const s = r2(433);
      const lte = (e3, t3, r3) => s(e3, t3, r3) <= 0;
      e2.exports = lte;
    }, 972: (e2, t2, r2) => {
      const s = r2(607);
      const major = (e3, t3) => new s(e3, t3).major;
      e2.exports = major;
    }, 857: (e2, t2, r2) => {
      const s = r2(607);
      const minor = (e3, t3) => new s(e3, t3).minor;
      e2.exports = minor;
    }, 443: (e2, t2, r2) => {
      const s = r2(433);
      const neq = (e3, t3, r3) => s(e3, t3, r3) !== 0;
      e2.exports = neq;
    }, 278: (e2, t2, r2) => {
      const { MAX_LENGTH: s } = r2(393);
      const { re: n, t: i } = r2(475);
      const o = r2(607);
      const l = r2(912);
      const parse4 = (e3, t3) => {
        t3 = l(t3);
        if (e3 instanceof o) {
          return e3;
        }
        if (typeof e3 !== "string") {
          return null;
        }
        if (e3.length > s) {
          return null;
        }
        const r3 = t3.loose ? n[i.LOOSE] : n[i.FULL];
        if (!r3.test(e3)) {
          return null;
        }
        try {
          return new o(e3, t3);
        } catch (e4) {
          return null;
        }
      };
      e2.exports = parse4;
    }, 410: (e2, t2, r2) => {
      const s = r2(607);
      const patch = (e3, t3) => new s(e3, t3).patch;
      e2.exports = patch;
    }, 235: (e2, t2, r2) => {
      const s = r2(278);
      const prerelease = (e3, t3) => {
        const r3 = s(e3, t3);
        return r3 && r3.prerelease.length ? r3.prerelease : null;
      };
      e2.exports = prerelease;
    }, 9: (e2, t2, r2) => {
      const s = r2(433);
      const rcompare = (e3, t3, r3) => s(t3, e3, r3);
      e2.exports = rcompare;
    }, 190: (e2, t2, r2) => {
      const s = r2(25);
      const rsort = (e3, t3) => e3.sort((e4, r3) => s(r3, e4, t3));
      e2.exports = rsort;
    }, 27: (e2, t2, r2) => {
      const s = r2(12);
      const satisfies = (e3, t3, r3) => {
        try {
          t3 = new s(t3, r3);
        } catch (e4) {
          return false;
        }
        return t3.test(e3);
      };
      e2.exports = satisfies;
    }, 297: (e2, t2, r2) => {
      const s = r2(25);
      const sort = (e3, t3) => e3.sort((e4, r3) => s(e4, r3, t3));
      e2.exports = sort;
    }, 862: (e2, t2, r2) => {
      const s = r2(278);
      const valid = (e3, t3) => {
        const r3 = s(e3, t3);
        return r3 ? r3.version : null;
      };
      e2.exports = valid;
    }, 124: (e2, t2, r2) => {
      const s = r2(475);
      e2.exports = { re: s.re, src: s.src, tokens: s.t, SEMVER_SPEC_VERSION: r2(393).SEMVER_SPEC_VERSION, SemVer: r2(607), compareIdentifiers: r2(350).compareIdentifiers, rcompareIdentifiers: r2(350).rcompareIdentifiers, parse: r2(278), valid: r2(862), clean: r2(219), inc: r2(779), diff: r2(74), major: r2(972), minor: r2(857), patch: r2(410), prerelease: r2(235), compare: r2(433), rcompare: r2(9), compareLoose: r2(414), compareBuild: r2(25), sort: r2(297), rsort: r2(190), gt: r2(421), lt: r2(808), eq: r2(620), neq: r2(443), gte: r2(294), lte: r2(923), cmp: r2(852), coerce: r2(970), Comparator: r2(685), Range: r2(12), satisfies: r2(27), toComparators: r2(564), maxSatisfying: r2(771), minSatisfying: r2(758), minVersion: r2(521), validRange: r2(764), outside: r2(866), gtr: r2(234), ltr: r2(63), intersects: r2(875), simplifyRange: r2(843), subset: r2(747) };
    }, 393: (e2) => {
      const t2 = "2.0.0";
      const r2 = 256;
      const s = Number.MAX_SAFE_INTEGER || 9007199254740991;
      const n = 16;
      e2.exports = { SEMVER_SPEC_VERSION: t2, MAX_LENGTH: r2, MAX_SAFE_INTEGER: s, MAX_SAFE_COMPONENT_LENGTH: n };
    }, 805: (e2) => {
      const t2 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...e3) => console.error("SEMVER", ...e3) : () => {
      };
      e2.exports = t2;
    }, 350: (e2) => {
      const t2 = /^[0-9]+$/;
      const compareIdentifiers = (e3, r2) => {
        const s = t2.test(e3);
        const n = t2.test(r2);
        if (s && n) {
          e3 = +e3;
          r2 = +r2;
        }
        return e3 === r2 ? 0 : s && !n ? -1 : n && !s ? 1 : e3 < r2 ? -1 : 1;
      };
      const rcompareIdentifiers = (e3, t3) => compareIdentifiers(t3, e3);
      e2.exports = { compareIdentifiers, rcompareIdentifiers };
    }, 912: (e2) => {
      const t2 = ["includePrerelease", "loose", "rtl"];
      const parseOptions = (e3) => !e3 ? {} : typeof e3 !== "object" ? { loose: true } : t2.filter((t3) => e3[t3]).reduce((e4, t3) => {
        e4[t3] = true;
        return e4;
      }, {});
      e2.exports = parseOptions;
    }, 475: (e2, t2, r2) => {
      const { MAX_SAFE_COMPONENT_LENGTH: s } = r2(393);
      const n = r2(805);
      t2 = e2.exports = {};
      const i = t2.re = [];
      const o = t2.src = [];
      const l = t2.t = {};
      let a = 0;
      const createToken = (e3, t3, r3) => {
        const s2 = a++;
        n(e3, s2, t3);
        l[e3] = s2;
        o[s2] = t3;
        i[s2] = new RegExp(t3, r3 ? "g" : void 0);
      };
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
      createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
      createToken("MAINVERSION", `(${o[l.NUMERICIDENTIFIER]})\\.(${o[l.NUMERICIDENTIFIER]})\\.(${o[l.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${o[l.NUMERICIDENTIFIERLOOSE]})\\.(${o[l.NUMERICIDENTIFIERLOOSE]})\\.(${o[l.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${o[l.NUMERICIDENTIFIER]}|${o[l.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${o[l.NUMERICIDENTIFIERLOOSE]}|${o[l.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASE", `(?:-(${o[l.PRERELEASEIDENTIFIER]}(?:\\.${o[l.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${o[l.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${o[l.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
      createToken("BUILD", `(?:\\+(${o[l.BUILDIDENTIFIER]}(?:\\.${o[l.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${o[l.MAINVERSION]}${o[l.PRERELEASE]}?${o[l.BUILD]}?`);
      createToken("FULL", `^${o[l.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${o[l.MAINVERSIONLOOSE]}${o[l.PRERELEASELOOSE]}?${o[l.BUILD]}?`);
      createToken("LOOSE", `^${o[l.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${o[l.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${o[l.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${o[l.XRANGEIDENTIFIER]})(?:\\.(${o[l.XRANGEIDENTIFIER]})(?:\\.(${o[l.XRANGEIDENTIFIER]})(?:${o[l.PRERELEASE]})?${o[l.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${o[l.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[l.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[l.XRANGEIDENTIFIERLOOSE]})(?:${o[l.PRERELEASELOOSE]})?${o[l.BUILD]}?)?)?`);
      createToken("XRANGE", `^${o[l.GTLT]}\\s*${o[l.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${o[l.GTLT]}\\s*${o[l.XRANGEPLAINLOOSE]}$`);
      createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${s}})(?:\\.(\\d{1,${s}}))?(?:\\.(\\d{1,${s}}))?(?:$|[^\\d])`);
      createToken("COERCERTL", o[l.COERCE], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${o[l.LONETILDE]}\\s+`, true);
      t2.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${o[l.LONETILDE]}${o[l.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${o[l.LONETILDE]}${o[l.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${o[l.LONECARET]}\\s+`, true);
      t2.caretTrimReplace = "$1^";
      createToken("CARET", `^${o[l.LONECARET]}${o[l.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${o[l.LONECARET]}${o[l.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${o[l.GTLT]}\\s*(${o[l.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${o[l.GTLT]}\\s*(${o[l.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${o[l.GTLT]}\\s*(${o[l.LOOSEPLAIN]}|${o[l.XRANGEPLAIN]})`, true);
      t2.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${o[l.XRANGEPLAIN]})\\s+-\\s+(${o[l.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${o[l.XRANGEPLAINLOOSE]})\\s+-\\s+(${o[l.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    }, 234: (e2, t2, r2) => {
      const s = r2(866);
      const gtr = (e3, t3, r3) => s(e3, t3, ">", r3);
      e2.exports = gtr;
    }, 875: (e2, t2, r2) => {
      const s = r2(12);
      const intersects = (e3, t3, r3) => {
        e3 = new s(e3, r3);
        t3 = new s(t3, r3);
        return e3.intersects(t3);
      };
      e2.exports = intersects;
    }, 63: (e2, t2, r2) => {
      const s = r2(866);
      const ltr = (e3, t3, r3) => s(e3, t3, "<", r3);
      e2.exports = ltr;
    }, 771: (e2, t2, r2) => {
      const s = r2(607);
      const n = r2(12);
      const maxSatisfying = (e3, t3, r3) => {
        let i = null;
        let o = null;
        let l = null;
        try {
          l = new n(t3, r3);
        } catch (e4) {
          return null;
        }
        e3.forEach((e4) => {
          if (l.test(e4)) {
            if (!i || o.compare(e4) === -1) {
              i = e4;
              o = new s(i, r3);
            }
          }
        });
        return i;
      };
      e2.exports = maxSatisfying;
    }, 758: (e2, t2, r2) => {
      const s = r2(607);
      const n = r2(12);
      const minSatisfying = (e3, t3, r3) => {
        let i = null;
        let o = null;
        let l = null;
        try {
          l = new n(t3, r3);
        } catch (e4) {
          return null;
        }
        e3.forEach((e4) => {
          if (l.test(e4)) {
            if (!i || o.compare(e4) === 1) {
              i = e4;
              o = new s(i, r3);
            }
          }
        });
        return i;
      };
      e2.exports = minSatisfying;
    }, 521: (e2, t2, r2) => {
      const s = r2(607);
      const n = r2(12);
      const i = r2(421);
      const minVersion = (e3, t3) => {
        e3 = new n(e3, t3);
        let r3 = new s("0.0.0");
        if (e3.test(r3)) {
          return r3;
        }
        r3 = new s("0.0.0-0");
        if (e3.test(r3)) {
          return r3;
        }
        r3 = null;
        for (let t4 = 0; t4 < e3.set.length; ++t4) {
          const n2 = e3.set[t4];
          let o = null;
          n2.forEach((e4) => {
            const t5 = new s(e4.semver.version);
            switch (e4.operator) {
              case ">":
                if (t5.prerelease.length === 0) {
                  t5.patch++;
                } else {
                  t5.prerelease.push(0);
                }
                t5.raw = t5.format();
              case "":
              case ">=":
                if (!o || i(t5, o)) {
                  o = t5;
                }
                break;
              case "<":
              case "<=":
                break;
              default:
                throw new Error(`Unexpected operation: ${e4.operator}`);
            }
          });
          if (o && (!r3 || i(r3, o))) {
            r3 = o;
          }
        }
        if (r3 && e3.test(r3)) {
          return r3;
        }
        return null;
      };
      e2.exports = minVersion;
    }, 866: (e2, t2, r2) => {
      const s = r2(607);
      const n = r2(685);
      const { ANY: i } = n;
      const o = r2(12);
      const l = r2(27);
      const a = r2(421);
      const h = r2(808);
      const c = r2(923);
      const u = r2(294);
      const outside = (e3, t3, r3, f) => {
        e3 = new s(e3, f);
        t3 = new o(t3, f);
        let p, E, m, v, $;
        switch (r3) {
          case ">":
            p = a;
            E = c;
            m = h;
            v = ">";
            $ = ">=";
            break;
          case "<":
            p = h;
            E = u;
            m = a;
            v = "<";
            $ = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (l(e3, t3, f)) {
          return false;
        }
        for (let r4 = 0; r4 < t3.set.length; ++r4) {
          const s2 = t3.set[r4];
          let o2 = null;
          let l2 = null;
          s2.forEach((e4) => {
            if (e4.semver === i) {
              e4 = new n(">=0.0.0");
            }
            o2 = o2 || e4;
            l2 = l2 || e4;
            if (p(e4.semver, o2.semver, f)) {
              o2 = e4;
            } else if (m(e4.semver, l2.semver, f)) {
              l2 = e4;
            }
          });
          if (o2.operator === v || o2.operator === $) {
            return false;
          }
          if ((!l2.operator || l2.operator === v) && E(e3, l2.semver)) {
            return false;
          } else if (l2.operator === $ && m(e3, l2.semver)) {
            return false;
          }
        }
        return true;
      };
      e2.exports = outside;
    }, 843: (e2, t2, r2) => {
      const s = r2(27);
      const n = r2(433);
      e2.exports = (e3, t3, r3) => {
        const i = [];
        let o = null;
        let l = null;
        const a = e3.sort((e4, t4) => n(e4, t4, r3));
        for (const e4 of a) {
          const n2 = s(e4, t3, r3);
          if (n2) {
            l = e4;
            if (!o) {
              o = e4;
            }
          } else {
            if (l) {
              i.push([o, l]);
            }
            l = null;
            o = null;
          }
        }
        if (o) {
          i.push([o, null]);
        }
        const h = [];
        for (const [e4, t4] of i) {
          if (e4 === t4) {
            h.push(e4);
          } else if (!t4 && e4 === a[0]) {
            h.push("*");
          } else if (!t4) {
            h.push(`>=${e4}`);
          } else if (e4 === a[0]) {
            h.push(`<=${t4}`);
          } else {
            h.push(`${e4} - ${t4}`);
          }
        }
        const c = h.join(" || ");
        const u = typeof t3.raw === "string" ? t3.raw : String(t3);
        return c.length < u.length ? c : t3;
      };
    }, 747: (e2, t2, r2) => {
      const s = r2(12);
      const n = r2(685);
      const { ANY: i } = n;
      const o = r2(27);
      const l = r2(433);
      const subset = (e3, t3, r3 = {}) => {
        if (e3 === t3) {
          return true;
        }
        e3 = new s(e3, r3);
        t3 = new s(t3, r3);
        let n2 = false;
        e:
          for (const s2 of e3.set) {
            for (const e4 of t3.set) {
              const t4 = simpleSubset(s2, e4, r3);
              n2 = n2 || t4 !== null;
              if (t4) {
                continue e;
              }
            }
            if (n2) {
              return false;
            }
          }
        return true;
      };
      const simpleSubset = (e3, t3, r3) => {
        if (e3 === t3) {
          return true;
        }
        if (e3.length === 1 && e3[0].semver === i) {
          if (t3.length === 1 && t3[0].semver === i) {
            return true;
          } else if (r3.includePrerelease) {
            e3 = [new n(">=0.0.0-0")];
          } else {
            e3 = [new n(">=0.0.0")];
          }
        }
        if (t3.length === 1 && t3[0].semver === i) {
          if (r3.includePrerelease) {
            return true;
          } else {
            t3 = [new n(">=0.0.0")];
          }
        }
        const s2 = /* @__PURE__ */ new Set();
        let a, h;
        for (const t4 of e3) {
          if (t4.operator === ">" || t4.operator === ">=") {
            a = higherGT(a, t4, r3);
          } else if (t4.operator === "<" || t4.operator === "<=") {
            h = lowerLT(h, t4, r3);
          } else {
            s2.add(t4.semver);
          }
        }
        if (s2.size > 1) {
          return null;
        }
        let c;
        if (a && h) {
          c = l(a.semver, h.semver, r3);
          if (c > 0) {
            return null;
          } else if (c === 0 && (a.operator !== ">=" || h.operator !== "<=")) {
            return null;
          }
        }
        for (const e4 of s2) {
          if (a && !o(e4, String(a), r3)) {
            return null;
          }
          if (h && !o(e4, String(h), r3)) {
            return null;
          }
          for (const s3 of t3) {
            if (!o(e4, String(s3), r3)) {
              return false;
            }
          }
          return true;
        }
        let u, f;
        let p, E;
        let m = h && !r3.includePrerelease && h.semver.prerelease.length ? h.semver : false;
        let v = a && !r3.includePrerelease && a.semver.prerelease.length ? a.semver : false;
        if (m && m.prerelease.length === 1 && h.operator === "<" && m.prerelease[0] === 0) {
          m = false;
        }
        for (const e4 of t3) {
          E = E || e4.operator === ">" || e4.operator === ">=";
          p = p || e4.operator === "<" || e4.operator === "<=";
          if (a) {
            if (v) {
              if (e4.semver.prerelease && e4.semver.prerelease.length && e4.semver.major === v.major && e4.semver.minor === v.minor && e4.semver.patch === v.patch) {
                v = false;
              }
            }
            if (e4.operator === ">" || e4.operator === ">=") {
              u = higherGT(a, e4, r3);
              if (u === e4 && u !== a) {
                return false;
              }
            } else if (a.operator === ">=" && !o(a.semver, String(e4), r3)) {
              return false;
            }
          }
          if (h) {
            if (m) {
              if (e4.semver.prerelease && e4.semver.prerelease.length && e4.semver.major === m.major && e4.semver.minor === m.minor && e4.semver.patch === m.patch) {
                m = false;
              }
            }
            if (e4.operator === "<" || e4.operator === "<=") {
              f = lowerLT(h, e4, r3);
              if (f === e4 && f !== h) {
                return false;
              }
            } else if (h.operator === "<=" && !o(h.semver, String(e4), r3)) {
              return false;
            }
          }
          if (!e4.operator && (h || a) && c !== 0) {
            return false;
          }
        }
        if (a && p && !h && c !== 0) {
          return false;
        }
        if (h && E && !a && c !== 0) {
          return false;
        }
        if (v || m) {
          return false;
        }
        return true;
      };
      const higherGT = (e3, t3, r3) => {
        if (!e3) {
          return t3;
        }
        const s2 = l(e3.semver, t3.semver, r3);
        return s2 > 0 ? e3 : s2 < 0 ? t3 : t3.operator === ">" && e3.operator === ">=" ? t3 : e3;
      };
      const lowerLT = (e3, t3, r3) => {
        if (!e3) {
          return t3;
        }
        const s2 = l(e3.semver, t3.semver, r3);
        return s2 < 0 ? e3 : s2 > 0 ? t3 : t3.operator === "<" && e3.operator === "<=" ? t3 : e3;
      };
      e2.exports = subset;
    }, 564: (e2, t2, r2) => {
      const s = r2(12);
      const toComparators = (e3, t3) => new s(e3, t3).set.map((e4) => e4.map((e5) => e5.value).join(" ").trim().split(" "));
      e2.exports = toComparators;
    }, 764: (e2, t2, r2) => {
      const s = r2(12);
      const validRange = (e3, t3) => {
        try {
          return new s(e3, t3).range || "*";
        } catch (e4) {
          return null;
        }
      };
      e2.exports = validRange;
    }, 77: (e2) => {
      "use strict";
      e2.exports = function(e3) {
        e3.prototype[Symbol.iterator] = function* () {
          for (let e4 = this.head; e4; e4 = e4.next) {
            yield e4.value;
          }
        };
      };
    }, 605: (e2, t2, r2) => {
      "use strict";
      e2.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;
      function Yallist(e3) {
        var t3 = this;
        if (!(t3 instanceof Yallist)) {
          t3 = new Yallist();
        }
        t3.tail = null;
        t3.head = null;
        t3.length = 0;
        if (e3 && typeof e3.forEach === "function") {
          e3.forEach(function(e4) {
            t3.push(e4);
          });
        } else if (arguments.length > 0) {
          for (var r3 = 0, s = arguments.length; r3 < s; r3++) {
            t3.push(arguments[r3]);
          }
        }
        return t3;
      }
      Yallist.prototype.removeNode = function(e3) {
        if (e3.list !== this) {
          throw new Error("removing node which does not belong to this list");
        }
        var t3 = e3.next;
        var r3 = e3.prev;
        if (t3) {
          t3.prev = r3;
        }
        if (r3) {
          r3.next = t3;
        }
        if (e3 === this.head) {
          this.head = t3;
        }
        if (e3 === this.tail) {
          this.tail = r3;
        }
        e3.list.length--;
        e3.next = null;
        e3.prev = null;
        e3.list = null;
        return t3;
      };
      Yallist.prototype.unshiftNode = function(e3) {
        if (e3 === this.head) {
          return;
        }
        if (e3.list) {
          e3.list.removeNode(e3);
        }
        var t3 = this.head;
        e3.list = this;
        e3.next = t3;
        if (t3) {
          t3.prev = e3;
        }
        this.head = e3;
        if (!this.tail) {
          this.tail = e3;
        }
        this.length++;
      };
      Yallist.prototype.pushNode = function(e3) {
        if (e3 === this.tail) {
          return;
        }
        if (e3.list) {
          e3.list.removeNode(e3);
        }
        var t3 = this.tail;
        e3.list = this;
        e3.prev = t3;
        if (t3) {
          t3.next = e3;
        }
        this.tail = e3;
        if (!this.head) {
          this.head = e3;
        }
        this.length++;
      };
      Yallist.prototype.push = function() {
        for (var e3 = 0, t3 = arguments.length; e3 < t3; e3++) {
          push(this, arguments[e3]);
        }
        return this.length;
      };
      Yallist.prototype.unshift = function() {
        for (var e3 = 0, t3 = arguments.length; e3 < t3; e3++) {
          unshift(this, arguments[e3]);
        }
        return this.length;
      };
      Yallist.prototype.pop = function() {
        if (!this.tail) {
          return void 0;
        }
        var e3 = this.tail.value;
        this.tail = this.tail.prev;
        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }
        this.length--;
        return e3;
      };
      Yallist.prototype.shift = function() {
        if (!this.head) {
          return void 0;
        }
        var e3 = this.head.value;
        this.head = this.head.next;
        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }
        this.length--;
        return e3;
      };
      Yallist.prototype.forEach = function(e3, t3) {
        t3 = t3 || this;
        for (var r3 = this.head, s = 0; r3 !== null; s++) {
          e3.call(t3, r3.value, s, this);
          r3 = r3.next;
        }
      };
      Yallist.prototype.forEachReverse = function(e3, t3) {
        t3 = t3 || this;
        for (var r3 = this.tail, s = this.length - 1; r3 !== null; s--) {
          e3.call(t3, r3.value, s, this);
          r3 = r3.prev;
        }
      };
      Yallist.prototype.get = function(e3) {
        for (var t3 = 0, r3 = this.head; r3 !== null && t3 < e3; t3++) {
          r3 = r3.next;
        }
        if (t3 === e3 && r3 !== null) {
          return r3.value;
        }
      };
      Yallist.prototype.getReverse = function(e3) {
        for (var t3 = 0, r3 = this.tail; r3 !== null && t3 < e3; t3++) {
          r3 = r3.prev;
        }
        if (t3 === e3 && r3 !== null) {
          return r3.value;
        }
      };
      Yallist.prototype.map = function(e3, t3) {
        t3 = t3 || this;
        var r3 = new Yallist();
        for (var s = this.head; s !== null; ) {
          r3.push(e3.call(t3, s.value, this));
          s = s.next;
        }
        return r3;
      };
      Yallist.prototype.mapReverse = function(e3, t3) {
        t3 = t3 || this;
        var r3 = new Yallist();
        for (var s = this.tail; s !== null; ) {
          r3.push(e3.call(t3, s.value, this));
          s = s.prev;
        }
        return r3;
      };
      Yallist.prototype.reduce = function(e3, t3) {
        var r3;
        var s = this.head;
        if (arguments.length > 1) {
          r3 = t3;
        } else if (this.head) {
          s = this.head.next;
          r3 = this.head.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var n = 0; s !== null; n++) {
          r3 = e3(r3, s.value, n);
          s = s.next;
        }
        return r3;
      };
      Yallist.prototype.reduceReverse = function(e3, t3) {
        var r3;
        var s = this.tail;
        if (arguments.length > 1) {
          r3 = t3;
        } else if (this.tail) {
          s = this.tail.prev;
          r3 = this.tail.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var n = this.length - 1; s !== null; n--) {
          r3 = e3(r3, s.value, n);
          s = s.prev;
        }
        return r3;
      };
      Yallist.prototype.toArray = function() {
        var e3 = new Array(this.length);
        for (var t3 = 0, r3 = this.head; r3 !== null; t3++) {
          e3[t3] = r3.value;
          r3 = r3.next;
        }
        return e3;
      };
      Yallist.prototype.toArrayReverse = function() {
        var e3 = new Array(this.length);
        for (var t3 = 0, r3 = this.tail; r3 !== null; t3++) {
          e3[t3] = r3.value;
          r3 = r3.prev;
        }
        return e3;
      };
      Yallist.prototype.slice = function(e3, t3) {
        t3 = t3 || this.length;
        if (t3 < 0) {
          t3 += this.length;
        }
        e3 = e3 || 0;
        if (e3 < 0) {
          e3 += this.length;
        }
        var r3 = new Yallist();
        if (t3 < e3 || t3 < 0) {
          return r3;
        }
        if (e3 < 0) {
          e3 = 0;
        }
        if (t3 > this.length) {
          t3 = this.length;
        }
        for (var s = 0, n = this.head; n !== null && s < e3; s++) {
          n = n.next;
        }
        for (; n !== null && s < t3; s++, n = n.next) {
          r3.push(n.value);
        }
        return r3;
      };
      Yallist.prototype.sliceReverse = function(e3, t3) {
        t3 = t3 || this.length;
        if (t3 < 0) {
          t3 += this.length;
        }
        e3 = e3 || 0;
        if (e3 < 0) {
          e3 += this.length;
        }
        var r3 = new Yallist();
        if (t3 < e3 || t3 < 0) {
          return r3;
        }
        if (e3 < 0) {
          e3 = 0;
        }
        if (t3 > this.length) {
          t3 = this.length;
        }
        for (var s = this.length, n = this.tail; n !== null && s > t3; s--) {
          n = n.prev;
        }
        for (; n !== null && s > e3; s--, n = n.prev) {
          r3.push(n.value);
        }
        return r3;
      };
      Yallist.prototype.splice = function(e3, t3, ...r3) {
        if (e3 > this.length) {
          e3 = this.length - 1;
        }
        if (e3 < 0) {
          e3 = this.length + e3;
        }
        for (var s = 0, n = this.head; n !== null && s < e3; s++) {
          n = n.next;
        }
        var i = [];
        for (var s = 0; n && s < t3; s++) {
          i.push(n.value);
          n = this.removeNode(n);
        }
        if (n === null) {
          n = this.tail;
        }
        if (n !== this.head && n !== this.tail) {
          n = n.prev;
        }
        for (var s = 0; s < r3.length; s++) {
          n = insert(this, n, r3[s]);
        }
        return i;
      };
      Yallist.prototype.reverse = function() {
        var e3 = this.head;
        var t3 = this.tail;
        for (var r3 = e3; r3 !== null; r3 = r3.prev) {
          var s = r3.prev;
          r3.prev = r3.next;
          r3.next = s;
        }
        this.head = t3;
        this.tail = e3;
        return this;
      };
      function insert(e3, t3, r3) {
        var s = t3 === e3.head ? new Node(r3, null, t3, e3) : new Node(r3, t3, t3.next, e3);
        if (s.next === null) {
          e3.tail = s;
        }
        if (s.prev === null) {
          e3.head = s;
        }
        e3.length++;
        return s;
      }
      function push(e3, t3) {
        e3.tail = new Node(t3, e3.tail, null, e3);
        if (!e3.head) {
          e3.head = e3.tail;
        }
        e3.length++;
      }
      function unshift(e3, t3) {
        e3.head = new Node(t3, null, e3.head, e3);
        if (!e3.tail) {
          e3.tail = e3.head;
        }
        e3.length++;
      }
      function Node(e3, t3, r3, s) {
        if (!(this instanceof Node)) {
          return new Node(e3, t3, r3, s);
        }
        this.list = s;
        this.value = e3;
        if (t3) {
          t3.next = this;
          this.prev = t3;
        } else {
          this.prev = null;
        }
        if (r3) {
          r3.prev = this;
          this.next = r3;
        } else {
          this.next = null;
        }
      }
      try {
        r2(77)(Yallist);
      } catch (e3) {
      }
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var s = t[r2];
      if (s !== void 0) {
        return s.exports;
      }
      var n = t[r2] = { exports: {} };
      var i = true;
      try {
        e[r2](n, n.exports, __nccwpck_require__);
        i = false;
      } finally {
        if (i)
          delete t[r2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(124);
    module2.exports = r;
  })();
});
var require_dotenv = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 608: (e2, r2, n2) => {
      const t = n2(147);
      const o = n2(17);
      const s = n2(37);
      function log(e3) {
        console.log(`[dotenv][DEBUG] ${e3}`);
      }
      const i = "\n";
      const c = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
      const l = /\\n/g;
      const a = /\r\n|\n|\r/;
      function parse4(e3, r3) {
        const n3 = Boolean(r3 && r3.debug);
        const t2 = {};
        e3.toString().split(a).forEach(function(e4, r4) {
          const o2 = e4.match(c);
          if (o2 != null) {
            const e5 = o2[1];
            let r5 = o2[2] || "";
            const n4 = r5.length - 1;
            const s2 = r5[0] === '"' && r5[n4] === '"';
            const c2 = r5[0] === "'" && r5[n4] === "'";
            if (c2 || s2) {
              r5 = r5.substring(1, n4);
              if (s2) {
                r5 = r5.replace(l, i);
              }
            } else {
              r5 = r5.trim();
            }
            t2[e5] = r5;
          } else if (n3) {
            log(`did not match key and value when parsing line ${r4 + 1}: ${e4}`);
          }
        });
        return t2;
      }
      function resolveHome(e3) {
        return e3[0] === "~" ? o.join(s.homedir(), e3.slice(1)) : e3;
      }
      function config(e3) {
        let r3 = o.resolve(process.cwd(), ".env");
        let n3 = "utf8";
        let s2 = false;
        if (e3) {
          if (e3.path != null) {
            r3 = resolveHome(e3.path);
          }
          if (e3.encoding != null) {
            n3 = e3.encoding;
          }
          if (e3.debug != null) {
            s2 = true;
          }
        }
        try {
          const e4 = parse4(t.readFileSync(r3, { encoding: n3 }), { debug: s2 });
          Object.keys(e4).forEach(function(r4) {
            if (!Object.prototype.hasOwnProperty.call(process.env, r4)) {
              process.env[r4] = e4[r4];
            } else if (s2) {
              log(`"${r4}" is already defined in \`process.env\` and will not be overwritten`);
            }
          });
          return { parsed: e4 };
        } catch (e4) {
          return { error: e4 };
        }
      }
      e2.exports.config = config;
      e2.exports.parse = parse4;
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 37: (e2) => {
      "use strict";
      e2.exports = __require("os");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    } };
    var r = {};
    function __nccwpck_require__(n2) {
      var t = r[n2];
      if (t !== void 0) {
        return t.exports;
      }
      var o = r[n2] = { exports: {} };
      var s = true;
      try {
        e[n2](o, o.exports, __nccwpck_require__);
        s = false;
      } finally {
        if (s)
          delete r[n2];
      }
      return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var n = __nccwpck_require__(608);
    module2.exports = n;
  })();
});
var require_lodash = __commonJSMin((exports, module2) => {
  (function() {
    var undefined2;
    var VERSION7 = "4.17.21";
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrimStart = /^\s+/;
    var reWhitespace = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEvery(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty("length");
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined2 : object[key];
      };
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined2 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseSum(array, iteratee) {
      var result, index = -1, length = array.length;
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined2) {
          result = result === undefined2 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1, length = strSymbols.length;
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined2 : object[key];
    }
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator2) {
      var data, result = [];
      while (!(data = iterator2.next()).done) {
        result.push(data.value);
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function replaceHolders(array, placeholder) {
      var index = -1, length = array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    function setToPairs(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext2(context3) {
      context3 = context3 == null ? root : _.defaults(root.Object(), context3, _.pick(root, contextProps));
      var Array2 = context3.Array, Date2 = context3.Date, Error2 = context3.Error, Function2 = context3.Function, Math2 = context3.Math, Object2 = context3.Object, RegExp2 = context3.RegExp, String2 = context3.String, TypeError2 = context3.TypeError;
      var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
      var coreJsData = context3["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object2);
      var oldDash = root._;
      var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? context3.Buffer : undefined2, Symbol2 = context3.Symbol, Uint8Array2 = context3.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
      var defineProperty = function() {
        try {
          var func = getNative(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context3.clearTimeout !== root.clearTimeout && context3.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context3.setTimeout !== root.setTimeout && context3.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context3.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context3.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
      var DataView = getNative(context3, "DataView"), Map2 = getNative(context3, "Map"), Promise2 = getNative(context3, "Promise"), Set2 = getNative(context3, "Set"), WeakMap2 = getNative(context3, "WeakMap"), nativeCreate = getNative(Object2, "create");
      var metaMap = WeakMap2 && new WeakMap2();
      var realNames = {};
      var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
      function lodash(value) {
        if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result2 = new object();
          object.prototype = undefined2;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined2;
      }
      lodash.templateSettings = {
        "escape": reEscape,
        "evaluate": reEvaluate,
        "interpolate": reInterpolate,
        "variable": "",
        "imports": {
          "_": lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1, value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result2 = data[key];
          return result2 === HASH_UNDEFINED ? undefined2 : result2;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined2;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? undefined2 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values2) {
        var index = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values2[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result2 = data["delete"](key);
        this.size = data.size;
        return result2;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined2;
      }
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
        while (++index < length) {
          result2[index] = skip ? undefined2 : get(object, paths[index]);
        }
        return result2;
      }
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined2) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined2) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result2 = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result2 !== undefined2) {
          return result2;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result2 = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result2);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result2 = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result2 = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined2 : keysFunc(value);
        arrayEach(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (length--) {
          var key = props[length], predicate = source[key], value = object[key];
          if (value === undefined2 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return setTimeout2(function() {
          func.apply(undefined2, args);
        }, wait);
      }
      function baseDifference(array, values2, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
        if (!length) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap(values2, baseUnary(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach(collection, function(value, index, collection2) {
          result2 = !!predicate(value, index, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array, iteratee2, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
          var value = array[index], current = iteratee2(value);
          if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined2 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach(collection, function(value, index, collection2) {
          if (predicate(value, index, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten(array, depth, predicate, isStrict, result2) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);
      function baseForOwn(object, iteratee2) {
        return object && baseFor(object, iteratee2, keys);
      }
      function baseForOwnRight(object, iteratee2) {
        return object && baseForRight(object, iteratee2, keys);
      }
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }
      function baseGet(object, path9) {
        path9 = castPath(path9, object);
        var index = 0, length = path9.length;
        while (object != null && index < length) {
          object = object[toKey(path9[index++])];
        }
        return index && index == length ? object : undefined2;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined2 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object2(object);
      }
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee2) {
            array = arrayMap(array, baseUnary(iteratee2));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
        }
        array = arrays[0];
        var index = -1, seen = caches[0];
        outer:
          while (++index < length && result2.length < maxLength) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object, setter, iteratee2, accumulator) {
        baseForOwn(object, function(value, key, object2) {
          setter(accumulator, iteratee2(value), key, object2);
        });
        return accumulator;
      }
      function baseInvoke(object, path9, args) {
        path9 = castPath(path9, object);
        object = parent(object, path9);
        var func = object == null ? object : object[toKey(last(path9))];
        return func == null ? undefined2 : apply(func, object, args);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === undefined2 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result2 = [];
        for (var key in Object2(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result2[++index] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path9, srcValue) {
        if (isKey(path9) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path9), srcValue);
        }
        return function(object) {
          var objValue = get(object, path9);
          return objValue === undefined2 && objValue === srcValue ? hasIn(object, path9) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
            if (newValue === undefined2) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
        var isCommon = newValue === undefined2;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined2;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee2) {
            if (isArray2(iteratee2)) {
              return function(value) {
                return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity];
        }
        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return { "criteria": criteria, "index": ++index, "value": value };
        });
        return baseSortBy(result2, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path9) {
          return hasIn(object, path9);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result2 = {};
        while (++index < length) {
          var path9 = paths[index], value = baseGet(object, path9);
          if (predicate(value, path9)) {
            baseSet(result2, castPath(path9, object), value);
          }
        }
        return result2;
      }
      function basePropertyDeep(path9) {
        return function(object) {
          return baseGet(object, path9);
        };
      }
      function basePullAll(array, values2, iteratee2, comparator) {
        var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
        if (array === values2) {
          values2 = copyArray(values2);
        }
        if (iteratee2) {
          seen = arrayMap(array, baseUnary(iteratee2));
        }
        while (++index < length) {
          var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0, lastIndex = length - 1;
        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
        while (length--) {
          result2[fromRight ? length : ++index] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string, n) {
        var result2 = "";
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
      function baseSet(object, path9, value, customizer) {
        if (!isObject2(object)) {
          return object;
        }
        path9 = castPath(path9, object);
        var index = -1, length = path9.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path9[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined2;
            if (newValue === undefined2) {
              newValue = isObject2(objValue) ? objValue : isIndex(path9[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length);
        while (++index < length) {
          result2[index] = array[index + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach(collection, function(value, index, collection2) {
          result2 = predicate(value, index, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array, value, retHighest) {
        var low = 0, high = array == null ? low : array.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array[mid];
            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
      function baseSortedIndexBy(array, value, iteratee2, retHighest) {
        var low = 0, high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array, iteratee2) {
        var index = -1, length = array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function baseUniq(array, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee2 ? null : createSet(array);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset(object, path9) {
        path9 = castPath(path9, object);
        object = parent(object, path9);
        return object == null || delete object[toKey(last(path9))];
      }
      function baseUpdate(object, path9, updater, customizer) {
        return baseSet(object, path9, updater(baseGet(object, path9)), customizer);
      }
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length, index = fromRight ? length : -1;
        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
        }
        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }
      function baseWrapperValue(value, actions) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce(actions, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1, result2 = Array2(length);
        while (++index < length) {
          var array = arrays[index], othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index) {
              result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values2, assignFunc) {
        var index = -1, length = props.length, valsLength = values2.length, result2 = {};
        while (++index < length) {
          var value = index < valsLength ? values2[index] : undefined2;
          assignFunc(result2, props[index], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      function castPath(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      var castRest = baseRest;
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined2 ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result2.lastIndex = regexp.lastIndex;
        return result2;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index < length) {
          var result2 = compareAscending(objCriteria[index], othCriteria[index]);
          if (result2) {
            if (index >= ordersLength) {
              return result2;
            }
            var order = orders[index];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array2(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
          if (newValue === undefined2) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined2 : customizer;
            length = 1;
          }
          object = Object2(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee2(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee2, keysFunc) {
          var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject2(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray2(value)) {
              return wrapper.plant(value).value();
            }
            var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
            while (++index2 < length) {
              result2 = funcs[index2].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length;
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length) {
            args.length = ary2;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object, iteratee2) {
          return baseInverter(object, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined2 && other === undefined2) {
            return defaultValue;
          }
          if (value !== undefined2) {
            result2 = value;
          }
          if (other !== undefined2) {
            if (result2 === undefined2) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined2 ? " " : baseToString(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined2;
          }
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined2, newData);
        if (isLaziable(func)) {
          setData(result2, newData);
        }
        result2.placeholder = placeholder;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number);
        };
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined2;
        }
        ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
        arity = arity === undefined2 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined2;
        }
        var data = isBindKey ? undefined2 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined2, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject2(objValue) && isObject2(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject2(value) ? undefined2 : value;
      }
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined2) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result2;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert2 = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert2 || (convert2 = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined2, flatten2), func + "");
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
        while (length--) {
          var data = array[length], otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result2 = lodash.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getMatchData(object) {
        var result2 = keys(object), length = result2.length;
        while (length--) {
          var key = result2[length], value = object[key];
          result2[length] = [key, value, isStrictComparable(value)];
        }
        return result2;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined2;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined2;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object2(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result2 = [];
        while (object) {
          arrayPush(result2, getSymbols(object));
          object = getPrototype(object);
        }
        return result2;
      };
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms) {
        var index = -1, length = transforms.length;
        while (++index < length) {
          var data = transforms[index], size2 = data.size;
          switch (data.type) {
            case "drop":
              start += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start + size2);
              break;
            case "takeRight":
              start = nativeMax(start, end - size2);
              break;
          }
        }
        return { "start": start, "end": end };
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path9, hasFunc) {
        path9 = castPath(path9, object);
        var index = -1, length = path9.length, result2 = false;
        while (++index < length) {
          var key = toKey(path9[index]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index != length) {
          return result2;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
      }
      function initCloneArray(array) {
        var length = array.length, result2 = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
          result2.index = array.index;
          result2.input = array.input;
        }
        return result2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value) {
        return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction : stubFalse;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject2(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
        };
      }
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      function mergeData(data, source) {
        var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        if (data[9] == null) {
          data[9] = source[9];
        }
        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object2(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform2) {
        start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array2(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply(func, this, otherArgs);
        };
      }
      function parent(object, path9) {
        return path9.length < 2 ? object : baseGet(object, baseSlice(path9, 0, -1));
      }
      function reorder(array, indexes) {
        var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
        }
        return array;
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setData = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + "";
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined2, arguments);
        };
      }
      function shuffleSelf(array, size2) {
        var index = -1, length = array.length, lastIndex = length - 1;
        size2 = size2 === undefined2 ? length : size2;
        while (++index < size2) {
          var rand = baseRandom(index, lastIndex), value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size2;
        return array;
      }
      var stringToPath = memoizeCapped(function(string) {
        var result2 = [];
        if (string.charCodeAt(0) === 46) {
          result2.push("");
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result2;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array, size2, guard) {
        if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
          size2 = 1;
        } else {
          size2 = nativeMax(toInteger(size2), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size2 < 1) {
          return [];
        }
        var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
        while (index < length) {
          result2[resIndex++] = baseSlice(array, index, index += size2);
        }
        return result2;
      }
      function compact(array) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array2(length - 1), array = arguments[0], index = length;
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
      var difference = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array, values2) {
        var iteratee2 = last(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array, values2) {
        var comparator = last(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
      });
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }
      function flatten2(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
      function fromPairs(pairs) {
        var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
        while (++index < length) {
          var pair = pairs[index];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array) {
        return array && array.length ? array[0] : undefined2;
      }
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined2;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
      });
      function join(array, separator) {
        return array == null ? "" : nativeJoin.call(array, separator);
      }
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined2;
      }
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
      }
      var pull = baseRest(pullAll);
      function pullAll(array, values2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
      }
      function pullAllBy(array, values2, iteratee2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
      }
      function pullAllWith(array, values2, comparator) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
      }
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result2;
      });
      function remove(array, predicate) {
        var result2 = [];
        if (!(array && array.length)) {
          return result2;
        }
        var index = -1, indexes = [], length = array.length;
        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result2.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result2;
      }
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined2 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
      function sortedIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
      function sortedLastIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }
      function sortedUniqBy(array, iteratee2) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
      });
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      function uniqBy(array, iteratee2) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return array && array.length ? baseUniq(array, undefined2, comparator) : [];
      }
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }
      function unzipWith(array, iteratee2) {
        if (!(array && array.length)) {
          return [];
        }
        var result2 = unzip(array);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap(result2, function(group) {
          return apply(iteratee2, undefined2, group);
        });
      }
      var without = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values2) {
        return baseZipObject(props || [], values2 || [], assignValue);
      }
      function zipObjectDeep(props, values2) {
        return baseZipObject(props || [], values2 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
          return baseAt(object, paths);
        };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          "func": thru,
          "args": [interceptor],
          "thisArg": undefined2
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined2);
          }
          return array;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined2) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
        return { "done": done, "value": value };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent2 = this;
        while (parent2 instanceof baseLodash) {
          var clone3 = wrapperClone(parent2);
          clone3.__index__ = 0;
          clone3.__values__ = undefined2;
          if (result2) {
            previous.__wrapped__ = clone3;
          } else {
            result2 = clone3;
          }
          var previous = clone3;
          parent2 = parent2.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            "func": thru,
            "args": [reverse],
            "thisArg": undefined2
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find2 = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), INFINITY);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee2), depth);
      }
      function forEach(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path9, args) {
        var index = -1, isFunc = typeof path9 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value) {
          result2[++index] = isFunc ? apply(path9, value, args) : baseInvoke(value, path9, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue(result2, key, value);
      });
      function map(collection, iteratee2) {
        var func = isArray2(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray2(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined2 : orders;
        if (!isArray2(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray2(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray2(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root.Date.now();
      };
      function after(n, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined2 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
      }
      function before(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined2;
          }
          return result2;
        };
      }
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options2) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject2(options2)) {
          leading = !!options2.leading;
          maxing = "maxWait" in options2;
          maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined2;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined2;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined2;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined2) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined2;
        }
        function flush() {
          return timerId === undefined2 ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined2) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined2) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once2(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1, length = nativeMin(args.length, funcsLength);
          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start === undefined2 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start], otherArgs = castSlice(args, 0, start);
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options2) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        if (isObject2(options2)) {
          leading = "leading" in options2 ? !!options2.leading : leading;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray2(value) ? value : [value];
      }
      function clone2(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray2 = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        var result2 = customizer ? customizer(value, other) : undefined2;
        return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
      }
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
      }
      function isFinite2(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isInteger(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
      function isNaN2(value) {
        return isNumber(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      function isPlainObject2(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      function isString(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function isUndefined(value) {
        return value === undefined2;
      }
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);
      function create(prototype, properties) {
        var result2 = baseCreate(prototype);
        return properties == null ? result2 : baseAssign(result2, properties);
      }
      var defaults = baseRest(function(object, sources) {
        object = Object2(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined2;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined2, customDefaultsMerge);
        return apply(mergeWith, undefined2, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee2) {
        return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forInRight(object, iteratee2) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forOwn(object, iteratee2) {
        return object && baseForOwn(object, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object, iteratee2) {
        return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get(object, path9, defaultValue) {
        var result2 = object == null ? undefined2 : baseGet(object, path9);
        return result2 === undefined2 ? defaultValue : result2;
      }
      function has(object, path9) {
        return object != null && hasPath(object, path9, baseHas);
      }
      function hasIn(object, path9) {
        return object != null && hasPath(object, path9, baseHasIn);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        result2[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        if (hasOwnProperty.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, iteratee2(value, key, object2), value);
        });
        return result2;
      }
      function mapValues(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, key, iteratee2(value, key, object2));
        });
        return result2;
      }
      var merge2 = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit2 = flatRest(function(object, paths) {
        var result2 = {};
        if (object == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path9) {
          path9 = castPath(path9, object);
          isDeep || (isDeep = path9.length > 1);
          return path9;
        });
        copyObject(object, getAllKeysIn(object), result2);
        if (isDeep) {
          result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result2, paths[length]);
        }
        return result2;
      });
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path9) {
          return predicate(value, path9[0]);
        });
      }
      function result(object, path9, defaultValue) {
        path9 = castPath(path9, object);
        var index = -1, length = path9.length;
        if (!length) {
          length = 1;
          object = undefined2;
        }
        while (++index < length) {
          var value = object == null ? undefined2 : object[toKey(path9[index])];
          if (value === undefined2) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }
      function set(object, path9, value) {
        return object == null ? object : baseSet(object, path9, value);
      }
      function setWith(object, path9, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseSet(object, path9, value, customizer);
      }
      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);
      function transform(object, iteratee2, accumulator) {
        var isArr = isArray2(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject2(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
          return iteratee2(accumulator, value, index, object2);
        });
        return accumulator;
      }
      function unset(object, path9) {
        return object == null ? true : baseUnset(object, path9);
      }
      function update(object, path9, updater) {
        return object == null ? object : baseUpdate(object, path9, castFunction(updater));
      }
      function updateWith(object, path9, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseUpdate(object, path9, castFunction(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number, lower, upper) {
        if (upper === undefined2) {
          upper = lower;
          lower = undefined2;
        }
        if (upper !== undefined2) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined2) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined2) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined2;
        }
        if (floating === undefined2) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined2;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined2;
          }
        }
        if (lower === undefined2 && upper === undefined2) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined2) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder(function(result2, word, index) {
        word = word.toLowerCase();
        return result2 + (index ? capitalize(word) : word);
      });
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }
      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }
      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
      }
      var kebabCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst("toLowerCase");
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }
      function parseInt2(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }
      function replace() {
        var args = arguments, string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "_" : "") + word.toLowerCase();
      });
      function split(string, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined2;
        }
        limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
      var startCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + upperFirst(word);
      });
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }
      function template(string, options2, guard) {
        var settings = lodash.templateSettings;
        if (guard && isIterateeCall(string, options2, guard)) {
          options2 = undefined2;
        }
        string = toString(string);
        options2 = assignInWith({}, options2, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options2.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index = 0, interpolate = options2.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2((options2.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options2.evaluate || reNoMatch).source + "|$", "g");
        var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options2, "sourceURL") ? (options2.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty.call(options2, "variable") && options2.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
        });
        result2.source = source;
        if (isError(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString(value).toLowerCase();
      }
      function toUpper(value) {
        return toString(value).toUpperCase();
      }
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join("");
      }
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join("");
      }
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined2)) {
          return string.replace(reTrimStart, "");
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join("");
      }
      function truncate(string, options2) {
        var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject2(options2)) {
          var separator = "separator" in options2 ? options2.separator : separator;
          length = "length" in options2 ? toInteger(options2.length) : length;
          omission = "omission" in options2 ? baseToString(options2.omission) : omission;
        }
        string = toString(string);
        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
        if (separator === undefined2) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result2.lastIndexOf(separator);
          if (index > -1) {
            result2 = result2.slice(0, index);
          }
        }
        return result2 + omission;
      }
      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }
      var upperCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toUpperCase();
      });
      var upperFirst = createCaseFirst("toUpperCase");
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined2 : pattern;
        if (pattern === undefined2) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined2, args);
        } catch (e) {
          return isError(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path9, srcValue) {
        return baseMatchesProperty(path9, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function(path9, args) {
        return function(object) {
          return baseInvoke(object, path9, args);
        };
      });
      var methodOf = baseRest(function(object, args) {
        return function(path9) {
          return baseInvoke(object, path9, args);
        };
      });
      function mixin(object, source, options2) {
        var props = keys(source), methodNames = baseFunctions(source, props);
        if (options2 == null && !(isObject2(source) && (methodNames.length || !props.length))) {
          options2 = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain2 = !(isObject2(options2) && "chain" in options2) || !!options2.chain, isFunc = isFunction(object);
        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                actions.push({ "func": func, "args": arguments, "thisArg": object });
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
      function noop() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path9) {
        return isKey(path9) ? baseProperty(toKey(path9)) : basePropertyDeep(path9);
      }
      function propertyOf(object) {
        return function(path9) {
          return object == null ? undefined2 : baseGet(object, path9);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes(length, iteratee2);
        while (++index < n) {
          iteratee2(index);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray2(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }
      function uniqueId(prefix2) {
        var id = ++idCounter;
        return toString(prefix2) + id;
      }
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
      }
      function maxBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
      }
      function mean(array) {
        return baseMean(array, identity);
      }
      function meanBy(array, iteratee2) {
        return baseMean(array, getIteratee(iteratee2, 2));
      }
      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
      }
      function minBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }
      function sumBy(array, iteratee2) {
        return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
      }
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten2;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge2;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit2;
      lodash.omitBy = omitBy;
      lodash.once = once2;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone2;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find2;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray2;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite2;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN2;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject2;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject2;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt2;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext2;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), { "chain": false });
      lodash.VERSION = VERSION7;
      arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(["drop", "take"], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
          var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              "size": nativeMin(n, MAX_ARRAY_LENGTH),
              "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
        var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            "iteratee": getIteratee(iteratee2, 3),
            "type": type
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach(["head", "last"], function(methodName, index) {
        var takeName = "take" + (index ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(["initial", "tail"], function(methodName, index) {
        var dropName = "drop" + (index ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path9, args) {
        if (typeof path9 == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path9, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined2) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray2(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray2(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ "name": methodName, "func": lodashFunc });
        }
      });
      realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
        "name": "wrapper",
        "func": undefined2
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;
      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    };
    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
      root._ = _;
      define(function() {
        return _;
      });
    } else if (freeModule) {
      (freeModule.exports = _)._ = _;
      freeExports._ = _;
    } else {
      root._ = _;
    }
  }).call(exports);
});
var require_lodash2 = __commonJSMin((exports, module2) => {
  module2.exports = require_lodash();
});
var require_fast_glob = __commonJSMin((exports, module2) => {
  (() => {
    var t = { 6491: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.createFileSystemAdapter = e2.FILE_SYSTEM_ADAPTER = void 0;
      const n = r2(7147);
      e2.FILE_SYSTEM_ADAPTER = { lstat: n.lstat, stat: n.stat, lstatSync: n.lstatSync, statSync: n.statSync, readdir: n.readdir, readdirSync: n.readdirSync };
      function createFileSystemAdapter(t3) {
        if (t3 === void 0) {
          return e2.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, e2.FILE_SYSTEM_ADAPTER), t3);
      }
      e2.createFileSystemAdapter = createFileSystemAdapter;
    }, 6325: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
      const r2 = process.versions.node.split(".");
      if (r2[0] === void 0 || r2[1] === void 0) {
        throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
      }
      const n = Number.parseInt(r2[0], 10);
      const s = Number.parseInt(r2[1], 10);
      const i = 10;
      const o = 10;
      const a = n > i;
      const u = n === i && s >= o;
      e2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = a || u;
    }, 1659: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.Settings = e2.scandirSync = e2.scandir = void 0;
      const n = r2(4715);
      const s = r2(8907);
      const i = r2(3486);
      e2.Settings = i.default;
      function scandir(t3, e3, r3) {
        if (typeof e3 === "function") {
          n.read(t3, getSettings(), e3);
          return;
        }
        n.read(t3, getSettings(e3), r3);
      }
      e2.scandir = scandir;
      function scandirSync(t3, e3) {
        const r3 = getSettings(e3);
        return s.read(t3, r3);
      }
      e2.scandirSync = scandirSync;
      function getSettings(t3 = {}) {
        if (t3 instanceof i.default) {
          return t3;
        }
        return new i.default(t3);
      }
    }, 4715: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.readdir = e2.readdirWithFileTypes = e2.read = void 0;
      const n = r2(3645);
      const s = r2(5341);
      const i = r2(6325);
      const o = r2(946);
      const a = r2(3253);
      function read2(t3, e3, r3) {
        if (!e3.stats && i.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          readdirWithFileTypes(t3, e3, r3);
          return;
        }
        readdir(t3, e3, r3);
      }
      e2.read = read2;
      function readdirWithFileTypes(t3, e3, r3) {
        e3.fs.readdir(t3, { withFileTypes: true }, (n2, i2) => {
          if (n2 !== null) {
            callFailureCallback(r3, n2);
            return;
          }
          const o2 = i2.map((r4) => ({ dirent: r4, name: r4.name, path: a.joinPathSegments(t3, r4.name, e3.pathSegmentSeparator) }));
          if (!e3.followSymbolicLinks) {
            callSuccessCallback(r3, o2);
            return;
          }
          const u = o2.map((t4) => makeRplTaskEntry(t4, e3));
          s(u, (t4, e4) => {
            if (t4 !== null) {
              callFailureCallback(r3, t4);
              return;
            }
            callSuccessCallback(r3, e4);
          });
        });
      }
      e2.readdirWithFileTypes = readdirWithFileTypes;
      function makeRplTaskEntry(t3, e3) {
        return (r3) => {
          if (!t3.dirent.isSymbolicLink()) {
            r3(null, t3);
            return;
          }
          e3.fs.stat(t3.path, (n2, s2) => {
            if (n2 !== null) {
              if (e3.throwErrorOnBrokenSymbolicLink) {
                r3(n2);
                return;
              }
              r3(null, t3);
              return;
            }
            t3.dirent = o.fs.createDirentFromStats(t3.name, s2);
            r3(null, t3);
          });
        };
      }
      function readdir(t3, e3, r3) {
        e3.fs.readdir(t3, (i2, u) => {
          if (i2 !== null) {
            callFailureCallback(r3, i2);
            return;
          }
          const c = u.map((r4) => {
            const s2 = a.joinPathSegments(t3, r4, e3.pathSegmentSeparator);
            return (t4) => {
              n.stat(s2, e3.fsStatSettings, (n2, i3) => {
                if (n2 !== null) {
                  t4(n2);
                  return;
                }
                const a2 = { name: r4, path: s2, dirent: o.fs.createDirentFromStats(r4, i3) };
                if (e3.stats) {
                  a2.stats = i3;
                }
                t4(null, a2);
              });
            };
          });
          s(c, (t4, e4) => {
            if (t4 !== null) {
              callFailureCallback(r3, t4);
              return;
            }
            callSuccessCallback(r3, e4);
          });
        });
      }
      e2.readdir = readdir;
      function callFailureCallback(t3, e3) {
        t3(e3);
      }
      function callSuccessCallback(t3, e3) {
        t3(null, e3);
      }
    }, 3253: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.joinPathSegments = void 0;
      function joinPathSegments(t3, e3, r2) {
        if (t3.endsWith(r2)) {
          return t3 + e3;
        }
        return t3 + r2 + e3;
      }
      e2.joinPathSegments = joinPathSegments;
    }, 8907: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.readdir = e2.readdirWithFileTypes = e2.read = void 0;
      const n = r2(3645);
      const s = r2(6325);
      const i = r2(946);
      const o = r2(3253);
      function read2(t3, e3) {
        if (!e3.stats && s.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(t3, e3);
        }
        return readdir(t3, e3);
      }
      e2.read = read2;
      function readdirWithFileTypes(t3, e3) {
        const r3 = e3.fs.readdirSync(t3, { withFileTypes: true });
        return r3.map((r4) => {
          const n2 = { dirent: r4, name: r4.name, path: o.joinPathSegments(t3, r4.name, e3.pathSegmentSeparator) };
          if (n2.dirent.isSymbolicLink() && e3.followSymbolicLinks) {
            try {
              const t4 = e3.fs.statSync(n2.path);
              n2.dirent = i.fs.createDirentFromStats(n2.name, t4);
            } catch (t4) {
              if (e3.throwErrorOnBrokenSymbolicLink) {
                throw t4;
              }
            }
          }
          return n2;
        });
      }
      e2.readdirWithFileTypes = readdirWithFileTypes;
      function readdir(t3, e3) {
        const r3 = e3.fs.readdirSync(t3);
        return r3.map((r4) => {
          const s2 = o.joinPathSegments(t3, r4, e3.pathSegmentSeparator);
          const a = n.statSync(s2, e3.fsStatSettings);
          const u = { name: r4, path: s2, dirent: i.fs.createDirentFromStats(r4, a) };
          if (e3.stats) {
            u.stats = a;
          }
          return u;
        });
      }
      e2.readdir = readdir;
    }, 3486: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1017);
      const s = r2(3645);
      const i = r2(6491);
      class Settings {
        constructor(t3 = {}) {
          this._options = t3;
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
          this.fs = i.createFileSystemAdapter(this._options.fs);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, n.sep);
          this.stats = this._getValue(this._options.stats, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
          this.fsStatSettings = new s.Settings({ followSymbolicLink: this.followSymbolicLinks, fs: this.fs, throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink });
        }
        _getValue(t3, e3) {
          return t3 !== null && t3 !== void 0 ? t3 : e3;
        }
      }
      e2["default"] = Settings;
    }, 2926: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.createDirentFromStats = void 0;
      class DirentFromStats {
        constructor(t3, e3) {
          this.name = t3;
          this.isBlockDevice = e3.isBlockDevice.bind(e3);
          this.isCharacterDevice = e3.isCharacterDevice.bind(e3);
          this.isDirectory = e3.isDirectory.bind(e3);
          this.isFIFO = e3.isFIFO.bind(e3);
          this.isFile = e3.isFile.bind(e3);
          this.isSocket = e3.isSocket.bind(e3);
          this.isSymbolicLink = e3.isSymbolicLink.bind(e3);
        }
      }
      function createDirentFromStats(t3, e3) {
        return new DirentFromStats(t3, e3);
      }
      e2.createDirentFromStats = createDirentFromStats;
    }, 946: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.fs = void 0;
      const n = r2(2926);
      e2.fs = n;
    }, 2243: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.createFileSystemAdapter = e2.FILE_SYSTEM_ADAPTER = void 0;
      const n = r2(7147);
      e2.FILE_SYSTEM_ADAPTER = { lstat: n.lstat, stat: n.stat, lstatSync: n.lstatSync, statSync: n.statSync };
      function createFileSystemAdapter(t3) {
        if (t3 === void 0) {
          return e2.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, e2.FILE_SYSTEM_ADAPTER), t3);
      }
      e2.createFileSystemAdapter = createFileSystemAdapter;
    }, 3645: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.statSync = e2.stat = e2.Settings = void 0;
      const n = r2(6948);
      const s = r2(6750);
      const i = r2(1917);
      e2.Settings = i.default;
      function stat(t3, e3, r3) {
        if (typeof e3 === "function") {
          n.read(t3, getSettings(), e3);
          return;
        }
        n.read(t3, getSettings(e3), r3);
      }
      e2.stat = stat;
      function statSync(t3, e3) {
        const r3 = getSettings(e3);
        return s.read(t3, r3);
      }
      e2.statSync = statSync;
      function getSettings(t3 = {}) {
        if (t3 instanceof i.default) {
          return t3;
        }
        return new i.default(t3);
      }
    }, 6948: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.read = void 0;
      function read2(t3, e3, r2) {
        e3.fs.lstat(t3, (n, s) => {
          if (n !== null) {
            callFailureCallback(r2, n);
            return;
          }
          if (!s.isSymbolicLink() || !e3.followSymbolicLink) {
            callSuccessCallback(r2, s);
            return;
          }
          e3.fs.stat(t3, (t4, n2) => {
            if (t4 !== null) {
              if (e3.throwErrorOnBrokenSymbolicLink) {
                callFailureCallback(r2, t4);
                return;
              }
              callSuccessCallback(r2, s);
              return;
            }
            if (e3.markSymbolicLink) {
              n2.isSymbolicLink = () => true;
            }
            callSuccessCallback(r2, n2);
          });
        });
      }
      e2.read = read2;
      function callFailureCallback(t3, e3) {
        t3(e3);
      }
      function callSuccessCallback(t3, e3) {
        t3(null, e3);
      }
    }, 6750: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.read = void 0;
      function read2(t3, e3) {
        const r2 = e3.fs.lstatSync(t3);
        if (!r2.isSymbolicLink() || !e3.followSymbolicLink) {
          return r2;
        }
        try {
          const r3 = e3.fs.statSync(t3);
          if (e3.markSymbolicLink) {
            r3.isSymbolicLink = () => true;
          }
          return r3;
        } catch (t4) {
          if (!e3.throwErrorOnBrokenSymbolicLink) {
            return r2;
          }
          throw t4;
        }
      }
      e2.read = read2;
    }, 1917: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(2243);
      class Settings {
        constructor(t3 = {}) {
          this._options = t3;
          this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
          this.fs = n.createFileSystemAdapter(this._options.fs);
          this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        }
        _getValue(t3, e3) {
          return t3 !== null && t3 !== void 0 ? t3 : e3;
        }
      }
      e2["default"] = Settings;
    }, 4328: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.Settings = e2.walkStream = e2.walkSync = e2.walk = void 0;
      const n = r2(4306);
      const s = r2(2686);
      const i = r2(8918);
      const o = r2(8831);
      e2.Settings = o.default;
      function walk(t3, e3, r3) {
        if (typeof e3 === "function") {
          new n.default(t3, getSettings()).read(e3);
          return;
        }
        new n.default(t3, getSettings(e3)).read(r3);
      }
      e2.walk = walk;
      function walkSync(t3, e3) {
        const r3 = getSettings(e3);
        const n2 = new i.default(t3, r3);
        return n2.read();
      }
      e2.walkSync = walkSync;
      function walkStream(t3, e3) {
        const r3 = getSettings(e3);
        const n2 = new s.default(t3, r3);
        return n2.read();
      }
      e2.walkStream = walkStream;
      function getSettings(t3 = {}) {
        if (t3 instanceof o.default) {
          return t3;
        }
        return new o.default(t3);
      }
    }, 4306: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1293);
      class AsyncProvider {
        constructor(t3, e3) {
          this._root = t3;
          this._settings = e3;
          this._reader = new n.default(this._root, this._settings);
          this._storage = [];
        }
        read(t3) {
          this._reader.onError((e3) => {
            callFailureCallback(t3, e3);
          });
          this._reader.onEntry((t4) => {
            this._storage.push(t4);
          });
          this._reader.onEnd(() => {
            callSuccessCallback(t3, this._storage);
          });
          this._reader.read();
        }
      }
      e2["default"] = AsyncProvider;
      function callFailureCallback(t3, e3) {
        t3(e3);
      }
      function callSuccessCallback(t3, e3) {
        t3(null, e3);
      }
    }, 2686: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(2781);
      const s = r2(1293);
      class StreamProvider {
        constructor(t3, e3) {
          this._root = t3;
          this._settings = e3;
          this._reader = new s.default(this._root, this._settings);
          this._stream = new n.Readable({ objectMode: true, read: () => {
          }, destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          } });
        }
        read() {
          this._reader.onError((t3) => {
            this._stream.emit("error", t3);
          });
          this._reader.onEntry((t3) => {
            this._stream.push(t3);
          });
          this._reader.onEnd(() => {
            this._stream.push(null);
          });
          this._reader.read();
          return this._stream;
        }
      }
      e2["default"] = StreamProvider;
    }, 8918: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(9476);
      class SyncProvider {
        constructor(t3, e3) {
          this._root = t3;
          this._settings = e3;
          this._reader = new n.default(this._root, this._settings);
        }
        read() {
          return this._reader.read();
        }
      }
      e2["default"] = SyncProvider;
    }, 1293: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(2361);
      const s = r2(1659);
      const i = r2(4241);
      const o = r2(1652);
      const a = r2(8376);
      class AsyncReader extends a.default {
        constructor(t3, e3) {
          super(t3, e3);
          this._settings = e3;
          this._scandir = s.scandir;
          this._emitter = new n.EventEmitter();
          this._queue = i(this._worker.bind(this), this._settings.concurrency);
          this._isFatalError = false;
          this._isDestroyed = false;
          this._queue.drain = () => {
            if (!this._isFatalError) {
              this._emitter.emit("end");
            }
          };
        }
        read() {
          this._isFatalError = false;
          this._isDestroyed = false;
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          });
          return this._emitter;
        }
        get isDestroyed() {
          return this._isDestroyed;
        }
        destroy() {
          if (this._isDestroyed) {
            throw new Error("The reader is already destroyed");
          }
          this._isDestroyed = true;
          this._queue.killAndDrain();
        }
        onEntry(t3) {
          this._emitter.on("entry", t3);
        }
        onError(t3) {
          this._emitter.once("error", t3);
        }
        onEnd(t3) {
          this._emitter.once("end", t3);
        }
        _pushToQueue(t3, e3) {
          const r3 = { directory: t3, base: e3 };
          this._queue.push(r3, (t4) => {
            if (t4 !== null) {
              this._handleError(t4);
            }
          });
        }
        _worker(t3, e3) {
          this._scandir(t3.directory, this._settings.fsScandirSettings, (r3, n2) => {
            if (r3 !== null) {
              e3(r3, void 0);
              return;
            }
            for (const e4 of n2) {
              this._handleEntry(e4, t3.base);
            }
            e3(null, void 0);
          });
        }
        _handleError(t3) {
          if (this._isDestroyed || !o.isFatalError(this._settings, t3)) {
            return;
          }
          this._isFatalError = true;
          this._isDestroyed = true;
          this._emitter.emit("error", t3);
        }
        _handleEntry(t3, e3) {
          if (this._isDestroyed || this._isFatalError) {
            return;
          }
          const r3 = t3.path;
          if (e3 !== void 0) {
            t3.path = o.joinPathSegments(e3, t3.name, this._settings.pathSegmentSeparator);
          }
          if (o.isAppliedFilter(this._settings.entryFilter, t3)) {
            this._emitEntry(t3);
          }
          if (t3.dirent.isDirectory() && o.isAppliedFilter(this._settings.deepFilter, t3)) {
            this._pushToQueue(r3, e3 === void 0 ? void 0 : t3.path);
          }
        }
        _emitEntry(t3) {
          this._emitter.emit("entry", t3);
        }
      }
      e2["default"] = AsyncReader;
    }, 1652: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.joinPathSegments = e2.replacePathSegmentSeparator = e2.isAppliedFilter = e2.isFatalError = void 0;
      function isFatalError(t3, e3) {
        if (t3.errorFilter === null) {
          return true;
        }
        return !t3.errorFilter(e3);
      }
      e2.isFatalError = isFatalError;
      function isAppliedFilter(t3, e3) {
        return t3 === null || t3(e3);
      }
      e2.isAppliedFilter = isAppliedFilter;
      function replacePathSegmentSeparator(t3, e3) {
        return t3.split(/[/\\]/).join(e3);
      }
      e2.replacePathSegmentSeparator = replacePathSegmentSeparator;
      function joinPathSegments(t3, e3, r2) {
        if (t3 === "") {
          return e3;
        }
        if (t3.endsWith(r2)) {
          return t3 + e3;
        }
        return t3 + r2 + e3;
      }
      e2.joinPathSegments = joinPathSegments;
    }, 8376: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1652);
      class Reader {
        constructor(t3, e3) {
          this._root = t3;
          this._settings = e3;
          this._root = n.replacePathSegmentSeparator(t3, e3.pathSegmentSeparator);
        }
      }
      e2["default"] = Reader;
    }, 9476: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1659);
      const s = r2(1652);
      const i = r2(8376);
      class SyncReader extends i.default {
        constructor() {
          super(...arguments);
          this._scandir = n.scandirSync;
          this._storage = [];
          this._queue = /* @__PURE__ */ new Set();
        }
        read() {
          this._pushToQueue(this._root, this._settings.basePath);
          this._handleQueue();
          return this._storage;
        }
        _pushToQueue(t3, e3) {
          this._queue.add({ directory: t3, base: e3 });
        }
        _handleQueue() {
          for (const t3 of this._queue.values()) {
            this._handleDirectory(t3.directory, t3.base);
          }
        }
        _handleDirectory(t3, e3) {
          try {
            const r3 = this._scandir(t3, this._settings.fsScandirSettings);
            for (const t4 of r3) {
              this._handleEntry(t4, e3);
            }
          } catch (t4) {
            this._handleError(t4);
          }
        }
        _handleError(t3) {
          if (!s.isFatalError(this._settings, t3)) {
            return;
          }
          throw t3;
        }
        _handleEntry(t3, e3) {
          const r3 = t3.path;
          if (e3 !== void 0) {
            t3.path = s.joinPathSegments(e3, t3.name, this._settings.pathSegmentSeparator);
          }
          if (s.isAppliedFilter(this._settings.entryFilter, t3)) {
            this._pushToStorage(t3);
          }
          if (t3.dirent.isDirectory() && s.isAppliedFilter(this._settings.deepFilter, t3)) {
            this._pushToQueue(r3, e3 === void 0 ? void 0 : t3.path);
          }
        }
        _pushToStorage(t3) {
          this._storage.push(t3);
        }
      }
      e2["default"] = SyncReader;
    }, 8831: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1017);
      const s = r2(1659);
      class Settings {
        constructor(t3 = {}) {
          this._options = t3;
          this.basePath = this._getValue(this._options.basePath, void 0);
          this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
          this.deepFilter = this._getValue(this._options.deepFilter, null);
          this.entryFilter = this._getValue(this._options.entryFilter, null);
          this.errorFilter = this._getValue(this._options.errorFilter, null);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, n.sep);
          this.fsScandirSettings = new s.Settings({ followSymbolicLinks: this._options.followSymbolicLinks, fs: this._options.fs, pathSegmentSeparator: this._options.pathSegmentSeparator, stats: this._options.stats, throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink });
        }
        _getValue(t3, e3) {
          return t3 !== null && t3 !== void 0 ? t3 : e3;
        }
      }
      e2["default"] = Settings;
    }, 1570: (t2, e2, r2) => {
      "use strict";
      const n = r2(3625);
      const s = r2(4666);
      const i = r2(6183);
      const o = r2(2467);
      const braces = (t3, e3 = {}) => {
        let r3 = [];
        if (Array.isArray(t3)) {
          for (let n2 of t3) {
            let t4 = braces.create(n2, e3);
            if (Array.isArray(t4)) {
              r3.push(...t4);
            } else {
              r3.push(t4);
            }
          }
        } else {
          r3 = [].concat(braces.create(t3, e3));
        }
        if (e3 && e3.expand === true && e3.nodupes === true) {
          r3 = [...new Set(r3)];
        }
        return r3;
      };
      braces.parse = (t3, e3 = {}) => o(t3, e3);
      braces.stringify = (t3, e3 = {}) => {
        if (typeof t3 === "string") {
          return n(braces.parse(t3, e3), e3);
        }
        return n(t3, e3);
      };
      braces.compile = (t3, e3 = {}) => {
        if (typeof t3 === "string") {
          t3 = braces.parse(t3, e3);
        }
        return s(t3, e3);
      };
      braces.expand = (t3, e3 = {}) => {
        if (typeof t3 === "string") {
          t3 = braces.parse(t3, e3);
        }
        let r3 = i(t3, e3);
        if (e3.noempty === true) {
          r3 = r3.filter(Boolean);
        }
        if (e3.nodupes === true) {
          r3 = [...new Set(r3)];
        }
        return r3;
      };
      braces.create = (t3, e3 = {}) => {
        if (t3 === "" || t3.length < 3) {
          return [t3];
        }
        return e3.expand !== true ? braces.compile(t3, e3) : braces.expand(t3, e3);
      };
      t2.exports = braces;
    }, 4666: (t2, e2, r2) => {
      "use strict";
      const n = r2(442);
      const s = r2(2456);
      const compile = (t3, e3 = {}) => {
        let walk = (t4, r3 = {}) => {
          let i = s.isInvalidBrace(r3);
          let o = t4.invalid === true && e3.escapeInvalid === true;
          let a = i === true || o === true;
          let u = e3.escapeInvalid === true ? "\\" : "";
          let c = "";
          if (t4.isOpen === true) {
            return u + t4.value;
          }
          if (t4.isClose === true) {
            return u + t4.value;
          }
          if (t4.type === "open") {
            return a ? u + t4.value : "(";
          }
          if (t4.type === "close") {
            return a ? u + t4.value : ")";
          }
          if (t4.type === "comma") {
            return t4.prev.type === "comma" ? "" : a ? t4.value : "|";
          }
          if (t4.value) {
            return t4.value;
          }
          if (t4.nodes && t4.ranges > 0) {
            let r4 = s.reduce(t4.nodes);
            let i2 = n(...r4, { ...e3, wrap: false, toRegex: true });
            if (i2.length !== 0) {
              return r4.length > 1 && i2.length > 1 ? `(${i2})` : i2;
            }
          }
          if (t4.nodes) {
            for (let e4 of t4.nodes) {
              c += walk(e4, t4);
            }
          }
          return c;
        };
        return walk(t3);
      };
      t2.exports = compile;
    }, 487: (t2) => {
      "use strict";
      t2.exports = { MAX_LENGTH: 1024 * 64, CHAR_0: "0", CHAR_9: "9", CHAR_UPPERCASE_A: "A", CHAR_LOWERCASE_A: "a", CHAR_UPPERCASE_Z: "Z", CHAR_LOWERCASE_Z: "z", CHAR_LEFT_PARENTHESES: "(", CHAR_RIGHT_PARENTHESES: ")", CHAR_ASTERISK: "*", CHAR_AMPERSAND: "&", CHAR_AT: "@", CHAR_BACKSLASH: "\\", CHAR_BACKTICK: "`", CHAR_CARRIAGE_RETURN: "\r", CHAR_CIRCUMFLEX_ACCENT: "^", CHAR_COLON: ":", CHAR_COMMA: ",", CHAR_DOLLAR: "$", CHAR_DOT: ".", CHAR_DOUBLE_QUOTE: '"', CHAR_EQUAL: "=", CHAR_EXCLAMATION_MARK: "!", CHAR_FORM_FEED: "\f", CHAR_FORWARD_SLASH: "/", CHAR_HASH: "#", CHAR_HYPHEN_MINUS: "-", CHAR_LEFT_ANGLE_BRACKET: "<", CHAR_LEFT_CURLY_BRACE: "{", CHAR_LEFT_SQUARE_BRACKET: "[", CHAR_LINE_FEED: "\n", CHAR_NO_BREAK_SPACE: "\xA0", CHAR_PERCENT: "%", CHAR_PLUS: "+", CHAR_QUESTION_MARK: "?", CHAR_RIGHT_ANGLE_BRACKET: ">", CHAR_RIGHT_CURLY_BRACE: "}", CHAR_RIGHT_SQUARE_BRACKET: "]", CHAR_SEMICOLON: ";", CHAR_SINGLE_QUOTE: "'", CHAR_SPACE: " ", CHAR_TAB: "	", CHAR_UNDERSCORE: "_", CHAR_VERTICAL_LINE: "|", CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF" };
    }, 6183: (t2, e2, r2) => {
      "use strict";
      const n = r2(442);
      const s = r2(3625);
      const i = r2(2456);
      const append = (t3 = "", e3 = "", r3 = false) => {
        let n2 = [];
        t3 = [].concat(t3);
        e3 = [].concat(e3);
        if (!e3.length)
          return t3;
        if (!t3.length) {
          return r3 ? i.flatten(e3).map((t4) => `{${t4}}`) : e3;
        }
        for (let s2 of t3) {
          if (Array.isArray(s2)) {
            for (let t4 of s2) {
              n2.push(append(t4, e3, r3));
            }
          } else {
            for (let t4 of e3) {
              if (r3 === true && typeof t4 === "string")
                t4 = `{${t4}}`;
              n2.push(Array.isArray(t4) ? append(s2, t4, r3) : s2 + t4);
            }
          }
        }
        return i.flatten(n2);
      };
      const expand2 = (t3, e3 = {}) => {
        let r3 = e3.rangeLimit === void 0 ? 1e3 : e3.rangeLimit;
        let walk = (t4, o = {}) => {
          t4.queue = [];
          let a = o;
          let u = o.queue;
          while (a.type !== "brace" && a.type !== "root" && a.parent) {
            a = a.parent;
            u = a.queue;
          }
          if (t4.invalid || t4.dollar) {
            u.push(append(u.pop(), s(t4, e3)));
            return;
          }
          if (t4.type === "brace" && t4.invalid !== true && t4.nodes.length === 2) {
            u.push(append(u.pop(), ["{}"]));
            return;
          }
          if (t4.nodes && t4.ranges > 0) {
            let o2 = i.reduce(t4.nodes);
            if (i.exceedsLimit(...o2, e3.step, r3)) {
              throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
            }
            let a2 = n(...o2, e3);
            if (a2.length === 0) {
              a2 = s(t4, e3);
            }
            u.push(append(u.pop(), a2));
            t4.nodes = [];
            return;
          }
          let c = i.encloseBrace(t4);
          let l = t4.queue;
          let f = t4;
          while (f.type !== "brace" && f.type !== "root" && f.parent) {
            f = f.parent;
            l = f.queue;
          }
          for (let e4 = 0; e4 < t4.nodes.length; e4++) {
            let r4 = t4.nodes[e4];
            if (r4.type === "comma" && t4.type === "brace") {
              if (e4 === 1)
                l.push("");
              l.push("");
              continue;
            }
            if (r4.type === "close") {
              u.push(append(u.pop(), l, c));
              continue;
            }
            if (r4.value && r4.type !== "open") {
              l.push(append(l.pop(), r4.value));
              continue;
            }
            if (r4.nodes) {
              walk(r4, t4);
            }
          }
          return l;
        };
        return i.flatten(walk(t3));
      };
      t2.exports = expand2;
    }, 2467: (t2, e2, r2) => {
      "use strict";
      const n = r2(3625);
      const { MAX_LENGTH: s, CHAR_BACKSLASH: i, CHAR_BACKTICK: o, CHAR_COMMA: a, CHAR_DOT: u, CHAR_LEFT_PARENTHESES: c, CHAR_RIGHT_PARENTHESES: l, CHAR_LEFT_CURLY_BRACE: f, CHAR_RIGHT_CURLY_BRACE: p, CHAR_LEFT_SQUARE_BRACKET: h, CHAR_RIGHT_SQUARE_BRACKET: d, CHAR_DOUBLE_QUOTE: _, CHAR_SINGLE_QUOTE: g, CHAR_NO_BREAK_SPACE: y, CHAR_ZERO_WIDTH_NOBREAK_SPACE: S } = r2(487);
      const parse4 = (t3, e3 = {}) => {
        if (typeof t3 !== "string") {
          throw new TypeError("Expected a string");
        }
        let r3 = e3 || {};
        let m = typeof r3.maxLength === "number" ? Math.min(s, r3.maxLength) : s;
        if (t3.length > m) {
          throw new SyntaxError(`Input length (${t3.length}), exceeds max characters (${m})`);
        }
        let v = { type: "root", input: t3, nodes: [] };
        let E = [v];
        let A = v;
        let b = v;
        let R = 0;
        let P = t3.length;
        let x = 0;
        let k = 0;
        let T;
        let C = {};
        const advance = () => t3[x++];
        const push = (t4) => {
          if (t4.type === "text" && b.type === "dot") {
            b.type = "text";
          }
          if (b && b.type === "text" && t4.type === "text") {
            b.value += t4.value;
            return;
          }
          A.nodes.push(t4);
          t4.parent = A;
          t4.prev = b;
          b = t4;
          return t4;
        };
        push({ type: "bos" });
        while (x < P) {
          A = E[E.length - 1];
          T = advance();
          if (T === S || T === y) {
            continue;
          }
          if (T === i) {
            push({ type: "text", value: (e3.keepEscaping ? T : "") + advance() });
            continue;
          }
          if (T === d) {
            push({ type: "text", value: "\\" + T });
            continue;
          }
          if (T === h) {
            R++;
            let t4 = true;
            let e4;
            while (x < P && (e4 = advance())) {
              T += e4;
              if (e4 === h) {
                R++;
                continue;
              }
              if (e4 === i) {
                T += advance();
                continue;
              }
              if (e4 === d) {
                R--;
                if (R === 0) {
                  break;
                }
              }
            }
            push({ type: "text", value: T });
            continue;
          }
          if (T === c) {
            A = push({ type: "paren", nodes: [] });
            E.push(A);
            push({ type: "text", value: T });
            continue;
          }
          if (T === l) {
            if (A.type !== "paren") {
              push({ type: "text", value: T });
              continue;
            }
            A = E.pop();
            push({ type: "text", value: T });
            A = E[E.length - 1];
            continue;
          }
          if (T === _ || T === g || T === o) {
            let t4 = T;
            let r4;
            if (e3.keepQuotes !== true) {
              T = "";
            }
            while (x < P && (r4 = advance())) {
              if (r4 === i) {
                T += r4 + advance();
                continue;
              }
              if (r4 === t4) {
                if (e3.keepQuotes === true)
                  T += r4;
                break;
              }
              T += r4;
            }
            push({ type: "text", value: T });
            continue;
          }
          if (T === f) {
            k++;
            let t4 = b.value && b.value.slice(-1) === "$" || A.dollar === true;
            let e4 = { type: "brace", open: true, close: false, dollar: t4, depth: k, commas: 0, ranges: 0, nodes: [] };
            A = push(e4);
            E.push(A);
            push({ type: "open", value: T });
            continue;
          }
          if (T === p) {
            if (A.type !== "brace") {
              push({ type: "text", value: T });
              continue;
            }
            let t4 = "close";
            A = E.pop();
            A.close = true;
            push({ type: t4, value: T });
            k--;
            A = E[E.length - 1];
            continue;
          }
          if (T === a && k > 0) {
            if (A.ranges > 0) {
              A.ranges = 0;
              let t4 = A.nodes.shift();
              A.nodes = [t4, { type: "text", value: n(A) }];
            }
            push({ type: "comma", value: T });
            A.commas++;
            continue;
          }
          if (T === u && k > 0 && A.commas === 0) {
            let t4 = A.nodes;
            if (k === 0 || t4.length === 0) {
              push({ type: "text", value: T });
              continue;
            }
            if (b.type === "dot") {
              A.range = [];
              b.value += T;
              b.type = "range";
              if (A.nodes.length !== 3 && A.nodes.length !== 5) {
                A.invalid = true;
                A.ranges = 0;
                b.type = "text";
                continue;
              }
              A.ranges++;
              A.args = [];
              continue;
            }
            if (b.type === "range") {
              t4.pop();
              let e4 = t4[t4.length - 1];
              e4.value += b.value + T;
              b = e4;
              A.ranges--;
              continue;
            }
            push({ type: "dot", value: T });
            continue;
          }
          push({ type: "text", value: T });
        }
        do {
          A = E.pop();
          if (A.type !== "root") {
            A.nodes.forEach((t5) => {
              if (!t5.nodes) {
                if (t5.type === "open")
                  t5.isOpen = true;
                if (t5.type === "close")
                  t5.isClose = true;
                if (!t5.nodes)
                  t5.type = "text";
                t5.invalid = true;
              }
            });
            let t4 = E[E.length - 1];
            let e4 = t4.nodes.indexOf(A);
            t4.nodes.splice(e4, 1, ...A.nodes);
          }
        } while (E.length > 0);
        push({ type: "eos" });
        return v;
      };
      t2.exports = parse4;
    }, 3625: (t2, e2, r2) => {
      "use strict";
      const n = r2(2456);
      t2.exports = (t3, e3 = {}) => {
        let stringify = (t4, r3 = {}) => {
          let s = e3.escapeInvalid && n.isInvalidBrace(r3);
          let i = t4.invalid === true && e3.escapeInvalid === true;
          let o = "";
          if (t4.value) {
            if ((s || i) && n.isOpenOrClose(t4)) {
              return "\\" + t4.value;
            }
            return t4.value;
          }
          if (t4.value) {
            return t4.value;
          }
          if (t4.nodes) {
            for (let e4 of t4.nodes) {
              o += stringify(e4);
            }
          }
          return o;
        };
        return stringify(t3);
      };
    }, 2456: (t2, e2) => {
      "use strict";
      e2.isInteger = (t3) => {
        if (typeof t3 === "number") {
          return Number.isInteger(t3);
        }
        if (typeof t3 === "string" && t3.trim() !== "") {
          return Number.isInteger(Number(t3));
        }
        return false;
      };
      e2.find = (t3, e3) => t3.nodes.find((t4) => t4.type === e3);
      e2.exceedsLimit = (t3, r2, n = 1, s) => {
        if (s === false)
          return false;
        if (!e2.isInteger(t3) || !e2.isInteger(r2))
          return false;
        return (Number(r2) - Number(t3)) / Number(n) >= s;
      };
      e2.escapeNode = (t3, e3 = 0, r2) => {
        let n = t3.nodes[e3];
        if (!n)
          return;
        if (r2 && n.type === r2 || n.type === "open" || n.type === "close") {
          if (n.escaped !== true) {
            n.value = "\\" + n.value;
            n.escaped = true;
          }
        }
      };
      e2.encloseBrace = (t3) => {
        if (t3.type !== "brace")
          return false;
        if (t3.commas >> 0 + t3.ranges >> 0 === 0) {
          t3.invalid = true;
          return true;
        }
        return false;
      };
      e2.isInvalidBrace = (t3) => {
        if (t3.type !== "brace")
          return false;
        if (t3.invalid === true || t3.dollar)
          return true;
        if (t3.commas >> 0 + t3.ranges >> 0 === 0) {
          t3.invalid = true;
          return true;
        }
        if (t3.open !== true || t3.close !== true) {
          t3.invalid = true;
          return true;
        }
        return false;
      };
      e2.isOpenOrClose = (t3) => {
        if (t3.type === "open" || t3.type === "close") {
          return true;
        }
        return t3.open === true || t3.close === true;
      };
      e2.reduce = (t3) => t3.reduce((t4, e3) => {
        if (e3.type === "text")
          t4.push(e3.value);
        if (e3.type === "range")
          e3.type = "text";
        return t4;
      }, []);
      e2.flatten = (...t3) => {
        const e3 = [];
        const flat = (t4) => {
          for (let r2 = 0; r2 < t4.length; r2++) {
            let n = t4[r2];
            Array.isArray(n) ? flat(n, e3) : n !== void 0 && e3.push(n);
          }
          return e3;
        };
        flat(t3);
        return e3;
      };
    }, 3924: (t2, e2, r2) => {
      "use strict";
      const n = r2(2291);
      const s = r2(8620);
      const i = r2(7900);
      const o = r2(5407);
      const a = r2(1066);
      const u = r2(7190);
      const c = r2(3828);
      async function FastGlob(t3, e3) {
        assertPatternsInput(t3);
        const r3 = getWorks(t3, i.default, e3);
        const n2 = await Promise.all(r3);
        return c.array.flatten(n2);
      }
      (function(t3) {
        function sync2(t4, e3) {
          assertPatternsInput(t4);
          const r3 = getWorks(t4, a.default, e3);
          return c.array.flatten(r3);
        }
        t3.sync = sync2;
        function stream(t4, e3) {
          assertPatternsInput(t4);
          const r3 = getWorks(t4, o.default, e3);
          return c.stream.merge(r3);
        }
        t3.stream = stream;
        function generateTasks(t4, e3) {
          assertPatternsInput(t4);
          const r3 = s.transform([].concat(t4));
          const i2 = new u.default(e3);
          return n.generate(r3, i2);
        }
        t3.generateTasks = generateTasks;
        function isDynamicPattern(t4, e3) {
          assertPatternsInput(t4);
          const r3 = new u.default(e3);
          return c.pattern.isDynamicPattern(t4, r3);
        }
        t3.isDynamicPattern = isDynamicPattern;
        function escapePath(t4) {
          assertPatternsInput(t4);
          return c.path.escape(t4);
        }
        t3.escapePath = escapePath;
      })(FastGlob || (FastGlob = {}));
      function getWorks(t3, e3, r3) {
        const i2 = s.transform([].concat(t3));
        const o2 = new u.default(r3);
        const a2 = n.generate(i2, o2);
        const c2 = new e3(o2);
        return a2.map(c2.read, c2);
      }
      function assertPatternsInput(t3) {
        const e3 = [].concat(t3);
        const r3 = e3.every((t4) => c.string.isString(t4) && !c.string.isEmpty(t4));
        if (!r3) {
          throw new TypeError("Patterns must be a string (non empty) or an array of strings");
        }
      }
      t2.exports = FastGlob;
    }, 8620: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.removeDuplicateSlashes = e2.transform = void 0;
      const r2 = /(?!^)\/{2,}/g;
      function transform(t3) {
        return t3.map((t4) => removeDuplicateSlashes(t4));
      }
      e2.transform = transform;
      function removeDuplicateSlashes(t3) {
        return t3.replace(r2, "/");
      }
      e2.removeDuplicateSlashes = removeDuplicateSlashes;
    }, 2291: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.convertPatternGroupToTask = e2.convertPatternGroupsToTasks = e2.groupPatternsByBaseDirectory = e2.getNegativePatternsAsPositive = e2.getPositivePatterns = e2.convertPatternsToTasks = e2.generate = void 0;
      const n = r2(3828);
      function generate(t3, e3) {
        const r3 = getPositivePatterns(t3);
        const s = getNegativePatternsAsPositive(t3, e3.ignore);
        const i = r3.filter((t4) => n.pattern.isStaticPattern(t4, e3));
        const o = r3.filter((t4) => n.pattern.isDynamicPattern(t4, e3));
        const a = convertPatternsToTasks(i, s, false);
        const u = convertPatternsToTasks(o, s, true);
        return a.concat(u);
      }
      e2.generate = generate;
      function convertPatternsToTasks(t3, e3, r3) {
        const s = [];
        const i = n.pattern.getPatternsOutsideCurrentDirectory(t3);
        const o = n.pattern.getPatternsInsideCurrentDirectory(t3);
        const a = groupPatternsByBaseDirectory(i);
        const u = groupPatternsByBaseDirectory(o);
        s.push(...convertPatternGroupsToTasks(a, e3, r3));
        if ("." in u) {
          s.push(convertPatternGroupToTask(".", o, e3, r3));
        } else {
          s.push(...convertPatternGroupsToTasks(u, e3, r3));
        }
        return s;
      }
      e2.convertPatternsToTasks = convertPatternsToTasks;
      function getPositivePatterns(t3) {
        return n.pattern.getPositivePatterns(t3);
      }
      e2.getPositivePatterns = getPositivePatterns;
      function getNegativePatternsAsPositive(t3, e3) {
        const r3 = n.pattern.getNegativePatterns(t3).concat(e3);
        const s = r3.map(n.pattern.convertToPositivePattern);
        return s;
      }
      e2.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
      function groupPatternsByBaseDirectory(t3) {
        const e3 = {};
        return t3.reduce((t4, e4) => {
          const r3 = n.pattern.getBaseDirectory(e4);
          if (r3 in t4) {
            t4[r3].push(e4);
          } else {
            t4[r3] = [e4];
          }
          return t4;
        }, e3);
      }
      e2.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
      function convertPatternGroupsToTasks(t3, e3, r3) {
        return Object.keys(t3).map((n2) => convertPatternGroupToTask(n2, t3[n2], e3, r3));
      }
      e2.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
      function convertPatternGroupToTask(t3, e3, r3, s) {
        return { dynamic: s, positive: e3, negative: r3, base: t3, patterns: [].concat(e3, r3.map(n.pattern.convertToNegativePattern)) };
      }
      e2.convertPatternGroupToTask = convertPatternGroupToTask;
    }, 7900: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(8075);
      const s = r2(8845);
      class ProviderAsync extends s.default {
        constructor() {
          super(...arguments);
          this._reader = new n.default(this._settings);
        }
        read(t3) {
          const e3 = this._getRootDirectory(t3);
          const r3 = this._getReaderOptions(t3);
          const n2 = [];
          return new Promise((s2, i) => {
            const o = this.api(e3, t3, r3);
            o.once("error", i);
            o.on("data", (t4) => n2.push(r3.transform(t4)));
            o.once("end", () => s2(n2));
          });
        }
        api(t3, e3, r3) {
          if (e3.dynamic) {
            return this._reader.dynamic(t3, r3);
          }
          return this._reader.static(e3.patterns, r3);
        }
      }
      e2["default"] = ProviderAsync;
    }, 4292: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3828);
      const s = r2(5995);
      class DeepFilter {
        constructor(t3, e3) {
          this._settings = t3;
          this._micromatchOptions = e3;
        }
        getFilter(t3, e3, r3) {
          const n2 = this._getMatcher(e3);
          const s2 = this._getNegativePatternsRe(r3);
          return (e4) => this._filter(t3, e4, n2, s2);
        }
        _getMatcher(t3) {
          return new s.default(t3, this._settings, this._micromatchOptions);
        }
        _getNegativePatternsRe(t3) {
          const e3 = t3.filter(n.pattern.isAffectDepthOfReadingPattern);
          return n.pattern.convertPatternsToRe(e3, this._micromatchOptions);
        }
        _filter(t3, e3, r3, s2) {
          if (this._isSkippedByDeep(t3, e3.path)) {
            return false;
          }
          if (this._isSkippedSymbolicLink(e3)) {
            return false;
          }
          const i = n.path.removeLeadingDotSegment(e3.path);
          if (this._isSkippedByPositivePatterns(i, r3)) {
            return false;
          }
          return this._isSkippedByNegativePatterns(i, s2);
        }
        _isSkippedByDeep(t3, e3) {
          if (this._settings.deep === Infinity) {
            return false;
          }
          return this._getEntryLevel(t3, e3) >= this._settings.deep;
        }
        _getEntryLevel(t3, e3) {
          const r3 = e3.split("/").length;
          if (t3 === "") {
            return r3;
          }
          const n2 = t3.split("/").length;
          return r3 - n2;
        }
        _isSkippedSymbolicLink(t3) {
          return !this._settings.followSymbolicLinks && t3.dirent.isSymbolicLink();
        }
        _isSkippedByPositivePatterns(t3, e3) {
          return !this._settings.baseNameMatch && !e3.match(t3);
        }
        _isSkippedByNegativePatterns(t3, e3) {
          return !n.pattern.matchAny(t3, e3);
        }
      }
      e2["default"] = DeepFilter;
    }, 659: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3828);
      class EntryFilter {
        constructor(t3, e3) {
          this._settings = t3;
          this._micromatchOptions = e3;
          this.index = /* @__PURE__ */ new Map();
        }
        getFilter(t3, e3) {
          const r3 = n.pattern.convertPatternsToRe(t3, this._micromatchOptions);
          const s = n.pattern.convertPatternsToRe(e3, this._micromatchOptions);
          return (t4) => this._filter(t4, r3, s);
        }
        _filter(t3, e3, r3) {
          if (this._settings.unique && this._isDuplicateEntry(t3)) {
            return false;
          }
          if (this._onlyFileFilter(t3) || this._onlyDirectoryFilter(t3)) {
            return false;
          }
          if (this._isSkippedByAbsoluteNegativePatterns(t3.path, r3)) {
            return false;
          }
          const n2 = this._settings.baseNameMatch ? t3.name : t3.path;
          const s = this._isMatchToPatterns(n2, e3) && !this._isMatchToPatterns(t3.path, r3);
          if (this._settings.unique && s) {
            this._createIndexRecord(t3);
          }
          return s;
        }
        _isDuplicateEntry(t3) {
          return this.index.has(t3.path);
        }
        _createIndexRecord(t3) {
          this.index.set(t3.path, void 0);
        }
        _onlyFileFilter(t3) {
          return this._settings.onlyFiles && !t3.dirent.isFile();
        }
        _onlyDirectoryFilter(t3) {
          return this._settings.onlyDirectories && !t3.dirent.isDirectory();
        }
        _isSkippedByAbsoluteNegativePatterns(t3, e3) {
          if (!this._settings.absolute) {
            return false;
          }
          const r3 = n.path.makeAbsolute(this._settings.cwd, t3);
          return n.pattern.matchAny(r3, e3);
        }
        _isMatchToPatterns(t3, e3) {
          const r3 = n.path.removeLeadingDotSegment(t3);
          return n.pattern.matchAny(r3, e3) || n.pattern.matchAny(r3 + "/", e3);
        }
      }
      e2["default"] = EntryFilter;
    }, 9558: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3828);
      class ErrorFilter {
        constructor(t3) {
          this._settings = t3;
        }
        getFilter() {
          return (t3) => this._isNonFatalError(t3);
        }
        _isNonFatalError(t3) {
          return n.errno.isEnoentCodeError(t3) || this._settings.suppressErrors;
        }
      }
      e2["default"] = ErrorFilter;
    }, 8302: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3828);
      class Matcher {
        constructor(t3, e3, r3) {
          this._patterns = t3;
          this._settings = e3;
          this._micromatchOptions = r3;
          this._storage = [];
          this._fillStorage();
        }
        _fillStorage() {
          const t3 = n.pattern.expandPatternsWithBraceExpansion(this._patterns);
          for (const e3 of t3) {
            const t4 = this._getPatternSegments(e3);
            const r3 = this._splitSegmentsIntoSections(t4);
            this._storage.push({ complete: r3.length <= 1, pattern: e3, segments: t4, sections: r3 });
          }
        }
        _getPatternSegments(t3) {
          const e3 = n.pattern.getPatternParts(t3, this._micromatchOptions);
          return e3.map((t4) => {
            const e4 = n.pattern.isDynamicPattern(t4, this._settings);
            if (!e4) {
              return { dynamic: false, pattern: t4 };
            }
            return { dynamic: true, pattern: t4, patternRe: n.pattern.makeRe(t4, this._micromatchOptions) };
          });
        }
        _splitSegmentsIntoSections(t3) {
          return n.array.splitWhen(t3, (t4) => t4.dynamic && n.pattern.hasGlobStar(t4.pattern));
        }
      }
      e2["default"] = Matcher;
    }, 5995: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(8302);
      class PartialMatcher extends n.default {
        match(t3) {
          const e3 = t3.split("/");
          const r3 = e3.length;
          const n2 = this._storage.filter((t4) => !t4.complete || t4.segments.length > r3);
          for (const t4 of n2) {
            const n3 = t4.sections[0];
            if (!t4.complete && r3 > n3.length) {
              return true;
            }
            const s = e3.every((e4, r4) => {
              const n4 = t4.segments[r4];
              if (n4.dynamic && n4.patternRe.test(e4)) {
                return true;
              }
              if (!n4.dynamic && n4.pattern === e4) {
                return true;
              }
              return false;
            });
            if (s) {
              return true;
            }
          }
          return false;
        }
      }
      e2["default"] = PartialMatcher;
    }, 8845: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1017);
      const s = r2(4292);
      const i = r2(659);
      const o = r2(9558);
      const a = r2(8460);
      class Provider {
        constructor(t3) {
          this._settings = t3;
          this.errorFilter = new o.default(this._settings);
          this.entryFilter = new i.default(this._settings, this._getMicromatchOptions());
          this.deepFilter = new s.default(this._settings, this._getMicromatchOptions());
          this.entryTransformer = new a.default(this._settings);
        }
        _getRootDirectory(t3) {
          return n.resolve(this._settings.cwd, t3.base);
        }
        _getReaderOptions(t3) {
          const e3 = t3.base === "." ? "" : t3.base;
          return { basePath: e3, pathSegmentSeparator: "/", concurrency: this._settings.concurrency, deepFilter: this.deepFilter.getFilter(e3, t3.positive, t3.negative), entryFilter: this.entryFilter.getFilter(t3.positive, t3.negative), errorFilter: this.errorFilter.getFilter(), followSymbolicLinks: this._settings.followSymbolicLinks, fs: this._settings.fs, stats: this._settings.stats, throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink, transform: this.entryTransformer.getTransformer() };
        }
        _getMicromatchOptions() {
          return { dot: this._settings.dot, matchBase: this._settings.baseNameMatch, nobrace: !this._settings.braceExpansion, nocase: !this._settings.caseSensitiveMatch, noext: !this._settings.extglob, noglobstar: !this._settings.globstar, posix: true, strictSlashes: false };
        }
      }
      e2["default"] = Provider;
    }, 5407: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(2781);
      const s = r2(8075);
      const i = r2(8845);
      class ProviderStream extends i.default {
        constructor() {
          super(...arguments);
          this._reader = new s.default(this._settings);
        }
        read(t3) {
          const e3 = this._getRootDirectory(t3);
          const r3 = this._getReaderOptions(t3);
          const s2 = this.api(e3, t3, r3);
          const i2 = new n.Readable({ objectMode: true, read: () => {
          } });
          s2.once("error", (t4) => i2.emit("error", t4)).on("data", (t4) => i2.emit("data", r3.transform(t4))).once("end", () => i2.emit("end"));
          i2.once("close", () => s2.destroy());
          return i2;
        }
        api(t3, e3, r3) {
          if (e3.dynamic) {
            return this._reader.dynamic(t3, r3);
          }
          return this._reader.static(e3.patterns, r3);
        }
      }
      e2["default"] = ProviderStream;
    }, 1066: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(8110);
      const s = r2(8845);
      class ProviderSync extends s.default {
        constructor() {
          super(...arguments);
          this._reader = new n.default(this._settings);
        }
        read(t3) {
          const e3 = this._getRootDirectory(t3);
          const r3 = this._getReaderOptions(t3);
          const n2 = this.api(e3, t3, r3);
          return n2.map(r3.transform);
        }
        api(t3, e3, r3) {
          if (e3.dynamic) {
            return this._reader.dynamic(t3, r3);
          }
          return this._reader.static(e3.patterns, r3);
        }
      }
      e2["default"] = ProviderSync;
    }, 8460: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3828);
      class EntryTransformer {
        constructor(t3) {
          this._settings = t3;
        }
        getTransformer() {
          return (t3) => this._transform(t3);
        }
        _transform(t3) {
          let e3 = t3.path;
          if (this._settings.absolute) {
            e3 = n.path.makeAbsolute(this._settings.cwd, e3);
            e3 = n.path.unixify(e3);
          }
          if (this._settings.markDirectories && t3.dirent.isDirectory()) {
            e3 += "/";
          }
          if (!this._settings.objectMode) {
            return e3;
          }
          return Object.assign(Object.assign({}, t3), { path: e3 });
        }
      }
      e2["default"] = EntryTransformer;
    }, 5906: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(1017);
      const s = r2(3645);
      const i = r2(3828);
      class Reader {
        constructor(t3) {
          this._settings = t3;
          this._fsStatSettings = new s.Settings({ followSymbolicLink: this._settings.followSymbolicLinks, fs: this._settings.fs, throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks });
        }
        _getFullEntryPath(t3) {
          return n.resolve(this._settings.cwd, t3);
        }
        _makeEntry(t3, e3) {
          const r3 = { name: e3, path: e3, dirent: i.fs.createDirentFromStats(e3, t3) };
          if (this._settings.stats) {
            r3.stats = t3;
          }
          return r3;
        }
        _isFatalError(t3) {
          return !i.errno.isEnoentCodeError(t3) && !this._settings.suppressErrors;
        }
      }
      e2["default"] = Reader;
    }, 8075: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(2781);
      const s = r2(3645);
      const i = r2(4328);
      const o = r2(5906);
      class ReaderStream extends o.default {
        constructor() {
          super(...arguments);
          this._walkStream = i.walkStream;
          this._stat = s.stat;
        }
        dynamic(t3, e3) {
          return this._walkStream(t3, e3);
        }
        static(t3, e3) {
          const r3 = t3.map(this._getFullEntryPath, this);
          const s2 = new n.PassThrough({ objectMode: true });
          s2._write = (n2, i2, o2) => this._getEntry(r3[n2], t3[n2], e3).then((t4) => {
            if (t4 !== null && e3.entryFilter(t4)) {
              s2.push(t4);
            }
            if (n2 === r3.length - 1) {
              s2.end();
            }
            o2();
          }).catch(o2);
          for (let t4 = 0; t4 < r3.length; t4++) {
            s2.write(t4);
          }
          return s2;
        }
        _getEntry(t3, e3, r3) {
          return this._getStat(t3).then((t4) => this._makeEntry(t4, e3)).catch((t4) => {
            if (r3.errorFilter(t4)) {
              return null;
            }
            throw t4;
          });
        }
        _getStat(t3) {
          return new Promise((e3, r3) => {
            this._stat(t3, this._fsStatSettings, (t4, n2) => t4 === null ? e3(n2) : r3(t4));
          });
        }
      }
      e2["default"] = ReaderStream;
    }, 8110: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      const n = r2(3645);
      const s = r2(4328);
      const i = r2(5906);
      class ReaderSync extends i.default {
        constructor() {
          super(...arguments);
          this._walkSync = s.walkSync;
          this._statSync = n.statSync;
        }
        dynamic(t3, e3) {
          return this._walkSync(t3, e3);
        }
        static(t3, e3) {
          const r3 = [];
          for (const n2 of t3) {
            const t4 = this._getFullEntryPath(n2);
            const s2 = this._getEntry(t4, n2, e3);
            if (s2 === null || !e3.entryFilter(s2)) {
              continue;
            }
            r3.push(s2);
          }
          return r3;
        }
        _getEntry(t3, e3, r3) {
          try {
            const r4 = this._getStat(t3);
            return this._makeEntry(r4, e3);
          } catch (t4) {
            if (r3.errorFilter(t4)) {
              return null;
            }
            throw t4;
          }
        }
        _getStat(t3) {
          return this._statSync(t3, this._fsStatSettings);
        }
      }
      e2["default"] = ReaderSync;
    }, 7190: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
      const n = r2(7147);
      const s = r2(2037);
      const i = Math.max(s.cpus().length, 1);
      e2.DEFAULT_FILE_SYSTEM_ADAPTER = { lstat: n.lstat, lstatSync: n.lstatSync, stat: n.stat, statSync: n.statSync, readdir: n.readdir, readdirSync: n.readdirSync };
      class Settings {
        constructor(t3 = {}) {
          this._options = t3;
          this.absolute = this._getValue(this._options.absolute, false);
          this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
          this.braceExpansion = this._getValue(this._options.braceExpansion, true);
          this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
          this.concurrency = this._getValue(this._options.concurrency, i);
          this.cwd = this._getValue(this._options.cwd, process.cwd());
          this.deep = this._getValue(this._options.deep, Infinity);
          this.dot = this._getValue(this._options.dot, false);
          this.extglob = this._getValue(this._options.extglob, true);
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
          this.fs = this._getFileSystemMethods(this._options.fs);
          this.globstar = this._getValue(this._options.globstar, true);
          this.ignore = this._getValue(this._options.ignore, []);
          this.markDirectories = this._getValue(this._options.markDirectories, false);
          this.objectMode = this._getValue(this._options.objectMode, false);
          this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
          this.onlyFiles = this._getValue(this._options.onlyFiles, true);
          this.stats = this._getValue(this._options.stats, false);
          this.suppressErrors = this._getValue(this._options.suppressErrors, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
          this.unique = this._getValue(this._options.unique, true);
          if (this.onlyDirectories) {
            this.onlyFiles = false;
          }
          if (this.stats) {
            this.objectMode = true;
          }
        }
        _getValue(t3, e3) {
          return t3 === void 0 ? e3 : t3;
        }
        _getFileSystemMethods(t3 = {}) {
          return Object.assign(Object.assign({}, e2.DEFAULT_FILE_SYSTEM_ADAPTER), t3);
        }
      }
      e2["default"] = Settings;
    }, 5789: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.splitWhen = e2.flatten = void 0;
      function flatten2(t3) {
        return t3.reduce((t4, e3) => [].concat(t4, e3), []);
      }
      e2.flatten = flatten2;
      function splitWhen(t3, e3) {
        const r2 = [[]];
        let n = 0;
        for (const s of t3) {
          if (e3(s)) {
            n++;
            r2[n] = [];
          } else {
            r2[n].push(s);
          }
        }
        return r2;
      }
      e2.splitWhen = splitWhen;
    }, 886: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.isEnoentCodeError = void 0;
      function isEnoentCodeError(t3) {
        return t3.code === "ENOENT";
      }
      e2.isEnoentCodeError = isEnoentCodeError;
    }, 9102: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.createDirentFromStats = void 0;
      class DirentFromStats {
        constructor(t3, e3) {
          this.name = t3;
          this.isBlockDevice = e3.isBlockDevice.bind(e3);
          this.isCharacterDevice = e3.isCharacterDevice.bind(e3);
          this.isDirectory = e3.isDirectory.bind(e3);
          this.isFIFO = e3.isFIFO.bind(e3);
          this.isFile = e3.isFile.bind(e3);
          this.isSocket = e3.isSocket.bind(e3);
          this.isSymbolicLink = e3.isSymbolicLink.bind(e3);
        }
      }
      function createDirentFromStats(t3, e3) {
        return new DirentFromStats(t3, e3);
      }
      e2.createDirentFromStats = createDirentFromStats;
    }, 3828: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.string = e2.stream = e2.pattern = e2.path = e2.fs = e2.errno = e2.array = void 0;
      const n = r2(5789);
      e2.array = n;
      const s = r2(886);
      e2.errno = s;
      const i = r2(9102);
      e2.fs = i;
      const o = r2(6462);
      e2.path = o;
      const a = r2(2256);
      e2.pattern = a;
      const u = r2(9941);
      e2.stream = u;
      const c = r2(5121);
      e2.string = c;
    }, 6462: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.removeLeadingDotSegment = e2.escape = e2.makeAbsolute = e2.unixify = void 0;
      const n = r2(1017);
      const s = 2;
      const i = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
      function unixify(t3) {
        return t3.replace(/\\/g, "/");
      }
      e2.unixify = unixify;
      function makeAbsolute(t3, e3) {
        return n.resolve(t3, e3);
      }
      e2.makeAbsolute = makeAbsolute;
      function escape(t3) {
        return t3.replace(i, "\\$2");
      }
      e2.escape = escape;
      function removeLeadingDotSegment(t3) {
        if (t3.charAt(0) === ".") {
          const e3 = t3.charAt(1);
          if (e3 === "/" || e3 === "\\") {
            return t3.slice(s);
          }
        }
        return t3;
      }
      e2.removeLeadingDotSegment = removeLeadingDotSegment;
    }, 2256: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.matchAny = e2.convertPatternsToRe = e2.makeRe = e2.getPatternParts = e2.expandBraceExpansion = e2.expandPatternsWithBraceExpansion = e2.isAffectDepthOfReadingPattern = e2.endsWithSlashGlobStar = e2.hasGlobStar = e2.getBaseDirectory = e2.isPatternRelatedToParentDirectory = e2.getPatternsOutsideCurrentDirectory = e2.getPatternsInsideCurrentDirectory = e2.getPositivePatterns = e2.getNegativePatterns = e2.isPositivePattern = e2.isNegativePattern = e2.convertToNegativePattern = e2.convertToPositivePattern = e2.isDynamicPattern = e2.isStaticPattern = void 0;
      const n = r2(1017);
      const s = r2(5976);
      const i = r2(1224);
      const o = "**";
      const a = "\\";
      const u = /[*?]|^!/;
      const c = /\[[^[]*]/;
      const l = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
      const f = /[!*+?@]\([^(]*\)/;
      const p = /,|\.\./;
      function isStaticPattern(t3, e3 = {}) {
        return !isDynamicPattern(t3, e3);
      }
      e2.isStaticPattern = isStaticPattern;
      function isDynamicPattern(t3, e3 = {}) {
        if (t3 === "") {
          return false;
        }
        if (e3.caseSensitiveMatch === false || t3.includes(a)) {
          return true;
        }
        if (u.test(t3) || c.test(t3) || l.test(t3)) {
          return true;
        }
        if (e3.extglob !== false && f.test(t3)) {
          return true;
        }
        if (e3.braceExpansion !== false && hasBraceExpansion(t3)) {
          return true;
        }
        return false;
      }
      e2.isDynamicPattern = isDynamicPattern;
      function hasBraceExpansion(t3) {
        const e3 = t3.indexOf("{");
        if (e3 === -1) {
          return false;
        }
        const r3 = t3.indexOf("}", e3 + 1);
        if (r3 === -1) {
          return false;
        }
        const n2 = t3.slice(e3, r3);
        return p.test(n2);
      }
      function convertToPositivePattern(t3) {
        return isNegativePattern(t3) ? t3.slice(1) : t3;
      }
      e2.convertToPositivePattern = convertToPositivePattern;
      function convertToNegativePattern(t3) {
        return "!" + t3;
      }
      e2.convertToNegativePattern = convertToNegativePattern;
      function isNegativePattern(t3) {
        return t3.startsWith("!") && t3[1] !== "(";
      }
      e2.isNegativePattern = isNegativePattern;
      function isPositivePattern(t3) {
        return !isNegativePattern(t3);
      }
      e2.isPositivePattern = isPositivePattern;
      function getNegativePatterns(t3) {
        return t3.filter(isNegativePattern);
      }
      e2.getNegativePatterns = getNegativePatterns;
      function getPositivePatterns(t3) {
        return t3.filter(isPositivePattern);
      }
      e2.getPositivePatterns = getPositivePatterns;
      function getPatternsInsideCurrentDirectory(t3) {
        return t3.filter((t4) => !isPatternRelatedToParentDirectory(t4));
      }
      e2.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
      function getPatternsOutsideCurrentDirectory(t3) {
        return t3.filter(isPatternRelatedToParentDirectory);
      }
      e2.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
      function isPatternRelatedToParentDirectory(t3) {
        return t3.startsWith("..") || t3.startsWith("./..");
      }
      e2.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
      function getBaseDirectory(t3) {
        return s(t3, { flipBackslashes: false });
      }
      e2.getBaseDirectory = getBaseDirectory;
      function hasGlobStar(t3) {
        return t3.includes(o);
      }
      e2.hasGlobStar = hasGlobStar;
      function endsWithSlashGlobStar(t3) {
        return t3.endsWith("/" + o);
      }
      e2.endsWithSlashGlobStar = endsWithSlashGlobStar;
      function isAffectDepthOfReadingPattern(t3) {
        const e3 = n.basename(t3);
        return endsWithSlashGlobStar(t3) || isStaticPattern(e3);
      }
      e2.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
      function expandPatternsWithBraceExpansion(t3) {
        return t3.reduce((t4, e3) => t4.concat(expandBraceExpansion(e3)), []);
      }
      e2.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
      function expandBraceExpansion(t3) {
        return i.braces(t3, { expand: true, nodupes: true });
      }
      e2.expandBraceExpansion = expandBraceExpansion;
      function getPatternParts(t3, e3) {
        let { parts: r3 } = i.scan(t3, Object.assign(Object.assign({}, e3), { parts: true }));
        if (r3.length === 0) {
          r3 = [t3];
        }
        if (r3[0].startsWith("/")) {
          r3[0] = r3[0].slice(1);
          r3.unshift("");
        }
        return r3;
      }
      e2.getPatternParts = getPatternParts;
      function makeRe(t3, e3) {
        return i.makeRe(t3, e3);
      }
      e2.makeRe = makeRe;
      function convertPatternsToRe(t3, e3) {
        return t3.map((t4) => makeRe(t4, e3));
      }
      e2.convertPatternsToRe = convertPatternsToRe;
      function matchAny(t3, e3) {
        return e3.some((e4) => e4.test(t3));
      }
      e2.matchAny = matchAny;
    }, 9941: (t2, e2, r2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.merge = void 0;
      const n = r2(1382);
      function merge2(t3) {
        const e3 = n(t3);
        t3.forEach((t4) => {
          t4.once("error", (t5) => e3.emit("error", t5));
        });
        e3.once("close", () => propagateCloseEventToSources(t3));
        e3.once("end", () => propagateCloseEventToSources(t3));
        return e3;
      }
      e2.merge = merge2;
      function propagateCloseEventToSources(t3) {
        t3.forEach((t4) => t4.emit("close"));
      }
    }, 5121: (t2, e2) => {
      "use strict";
      Object.defineProperty(e2, "__esModule", { value: true });
      e2.isEmpty = e2.isString = void 0;
      function isString(t3) {
        return typeof t3 === "string";
      }
      e2.isString = isString;
      function isEmpty(t3) {
        return t3 === "";
      }
      e2.isEmpty = isEmpty;
    }, 4241: (t2, e2, r2) => {
      "use strict";
      var n = r2(1816);
      function fastqueue(t3, e3, r3) {
        if (typeof t3 === "function") {
          r3 = e3;
          e3 = t3;
          t3 = null;
        }
        if (r3 < 1) {
          throw new Error("fastqueue concurrency must be greater than 1");
        }
        var s = n(Task);
        var i = null;
        var o = null;
        var a = 0;
        var u = null;
        var c = { push, drain: noop, saturated: noop, pause, paused: false, concurrency: r3, running, resume, idle, length, getQueue, unshift, empty: noop, kill, killAndDrain, error };
        return c;
        function running() {
          return a;
        }
        function pause() {
          c.paused = true;
        }
        function length() {
          var t4 = i;
          var e4 = 0;
          while (t4) {
            t4 = t4.next;
            e4++;
          }
          return e4;
        }
        function getQueue() {
          var t4 = i;
          var e4 = [];
          while (t4) {
            e4.push(t4.value);
            t4 = t4.next;
          }
          return e4;
        }
        function resume() {
          if (!c.paused)
            return;
          c.paused = false;
          for (var t4 = 0; t4 < c.concurrency; t4++) {
            a++;
            release2();
          }
        }
        function idle() {
          return a === 0 && c.length() === 0;
        }
        function push(r4, n2) {
          var l = s.get();
          l.context = t3;
          l.release = release2;
          l.value = r4;
          l.callback = n2 || noop;
          l.errorHandler = u;
          if (a === c.concurrency || c.paused) {
            if (o) {
              o.next = l;
              o = l;
            } else {
              i = l;
              o = l;
              c.saturated();
            }
          } else {
            a++;
            e3.call(t3, l.value, l.worked);
          }
        }
        function unshift(r4, n2) {
          var u2 = s.get();
          u2.context = t3;
          u2.release = release2;
          u2.value = r4;
          u2.callback = n2 || noop;
          if (a === c.concurrency || c.paused) {
            if (i) {
              u2.next = i;
              i = u2;
            } else {
              i = u2;
              o = u2;
              c.saturated();
            }
          } else {
            a++;
            e3.call(t3, u2.value, u2.worked);
          }
        }
        function release2(r4) {
          if (r4) {
            s.release(r4);
          }
          var n2 = i;
          if (n2) {
            if (!c.paused) {
              if (o === i) {
                o = null;
              }
              i = n2.next;
              n2.next = null;
              e3.call(t3, n2.value, n2.worked);
              if (o === null) {
                c.empty();
              }
            } else {
              a--;
            }
          } else if (--a === 0) {
            c.drain();
          }
        }
        function kill() {
          i = null;
          o = null;
          c.drain = noop;
        }
        function killAndDrain() {
          i = null;
          o = null;
          c.drain();
          c.drain = noop;
        }
        function error(t4) {
          u = t4;
        }
      }
      function noop() {
      }
      function Task() {
        this.value = null;
        this.callback = noop;
        this.next = null;
        this.release = noop;
        this.context = null;
        this.errorHandler = null;
        var t3 = this;
        this.worked = function worked(e3, r3) {
          var n2 = t3.callback;
          var s = t3.errorHandler;
          var i = t3.value;
          t3.value = null;
          t3.callback = noop;
          if (t3.errorHandler) {
            s(e3, i);
          }
          n2.call(t3.context, e3, r3);
          t3.release(t3);
        };
      }
      function queueAsPromised(t3, e3, r3) {
        if (typeof t3 === "function") {
          r3 = e3;
          e3 = t3;
          t3 = null;
        }
        function asyncWrapper(t4, r4) {
          e3.call(this, t4).then(function(t5) {
            r4(null, t5);
          }, r4);
        }
        var n2 = fastqueue(t3, asyncWrapper, r3);
        var s = n2.push;
        var i = n2.unshift;
        n2.push = push;
        n2.unshift = unshift;
        n2.drained = drained;
        return n2;
        function push(t4) {
          var e4 = new Promise(function(e5, r4) {
            s(t4, function(t5, n3) {
              if (t5) {
                r4(t5);
                return;
              }
              e5(n3);
            });
          });
          e4.catch(noop);
          return e4;
        }
        function unshift(t4) {
          var e4 = new Promise(function(e5, r4) {
            i(t4, function(t5, n3) {
              if (t5) {
                r4(t5);
                return;
              }
              e5(n3);
            });
          });
          e4.catch(noop);
          return e4;
        }
        function drained() {
          var t4 = n2.drain;
          var e4 = new Promise(function(e5) {
            n2.drain = function() {
              t4();
              e5();
            };
          });
          return e4;
        }
      }
      t2.exports = fastqueue;
      t2.exports.promise = queueAsPromised;
    }, 442: (t2, e2, r2) => {
      "use strict";
      const n = r2(3837);
      const s = r2(211);
      const isObject2 = (t3) => t3 !== null && typeof t3 === "object" && !Array.isArray(t3);
      const transform = (t3) => (e3) => t3 === true ? Number(e3) : String(e3);
      const isValidValue = (t3) => typeof t3 === "number" || typeof t3 === "string" && t3 !== "";
      const isNumber = (t3) => Number.isInteger(+t3);
      const zeros = (t3) => {
        let e3 = `${t3}`;
        let r3 = -1;
        if (e3[0] === "-")
          e3 = e3.slice(1);
        if (e3 === "0")
          return false;
        while (e3[++r3] === "0")
          ;
        return r3 > 0;
      };
      const stringify = (t3, e3, r3) => {
        if (typeof t3 === "string" || typeof e3 === "string") {
          return true;
        }
        return r3.stringify === true;
      };
      const pad = (t3, e3, r3) => {
        if (e3 > 0) {
          let r4 = t3[0] === "-" ? "-" : "";
          if (r4)
            t3 = t3.slice(1);
          t3 = r4 + t3.padStart(r4 ? e3 - 1 : e3, "0");
        }
        if (r3 === false) {
          return String(t3);
        }
        return t3;
      };
      const toMaxLen = (t3, e3) => {
        let r3 = t3[0] === "-" ? "-" : "";
        if (r3) {
          t3 = t3.slice(1);
          e3--;
        }
        while (t3.length < e3)
          t3 = "0" + t3;
        return r3 ? "-" + t3 : t3;
      };
      const toSequence = (t3, e3) => {
        t3.negatives.sort((t4, e4) => t4 < e4 ? -1 : t4 > e4 ? 1 : 0);
        t3.positives.sort((t4, e4) => t4 < e4 ? -1 : t4 > e4 ? 1 : 0);
        let r3 = e3.capture ? "" : "?:";
        let n2 = "";
        let s2 = "";
        let i;
        if (t3.positives.length) {
          n2 = t3.positives.join("|");
        }
        if (t3.negatives.length) {
          s2 = `-(${r3}${t3.negatives.join("|")})`;
        }
        if (n2 && s2) {
          i = `${n2}|${s2}`;
        } else {
          i = n2 || s2;
        }
        if (e3.wrap) {
          return `(${r3}${i})`;
        }
        return i;
      };
      const toRange = (t3, e3, r3, n2) => {
        if (r3) {
          return s(t3, e3, { wrap: false, ...n2 });
        }
        let i = String.fromCharCode(t3);
        if (t3 === e3)
          return i;
        let o = String.fromCharCode(e3);
        return `[${i}-${o}]`;
      };
      const toRegex = (t3, e3, r3) => {
        if (Array.isArray(t3)) {
          let e4 = r3.wrap === true;
          let n2 = r3.capture ? "" : "?:";
          return e4 ? `(${n2}${t3.join("|")})` : t3.join("|");
        }
        return s(t3, e3, r3);
      };
      const rangeError = (...t3) => new RangeError("Invalid range arguments: " + n.inspect(...t3));
      const invalidRange = (t3, e3, r3) => {
        if (r3.strictRanges === true)
          throw rangeError([t3, e3]);
        return [];
      };
      const invalidStep = (t3, e3) => {
        if (e3.strictRanges === true) {
          throw new TypeError(`Expected step "${t3}" to be a number`);
        }
        return [];
      };
      const fillNumbers = (t3, e3, r3 = 1, n2 = {}) => {
        let s2 = Number(t3);
        let i = Number(e3);
        if (!Number.isInteger(s2) || !Number.isInteger(i)) {
          if (n2.strictRanges === true)
            throw rangeError([t3, e3]);
          return [];
        }
        if (s2 === 0)
          s2 = 0;
        if (i === 0)
          i = 0;
        let o = s2 > i;
        let a = String(t3);
        let u = String(e3);
        let c = String(r3);
        r3 = Math.max(Math.abs(r3), 1);
        let l = zeros(a) || zeros(u) || zeros(c);
        let f = l ? Math.max(a.length, u.length, c.length) : 0;
        let p = l === false && stringify(t3, e3, n2) === false;
        let h = n2.transform || transform(p);
        if (n2.toRegex && r3 === 1) {
          return toRange(toMaxLen(t3, f), toMaxLen(e3, f), true, n2);
        }
        let d = { negatives: [], positives: [] };
        let push = (t4) => d[t4 < 0 ? "negatives" : "positives"].push(Math.abs(t4));
        let _ = [];
        let g = 0;
        while (o ? s2 >= i : s2 <= i) {
          if (n2.toRegex === true && r3 > 1) {
            push(s2);
          } else {
            _.push(pad(h(s2, g), f, p));
          }
          s2 = o ? s2 - r3 : s2 + r3;
          g++;
        }
        if (n2.toRegex === true) {
          return r3 > 1 ? toSequence(d, n2) : toRegex(_, null, { wrap: false, ...n2 });
        }
        return _;
      };
      const fillLetters = (t3, e3, r3 = 1, n2 = {}) => {
        if (!isNumber(t3) && t3.length > 1 || !isNumber(e3) && e3.length > 1) {
          return invalidRange(t3, e3, n2);
        }
        let s2 = n2.transform || ((t4) => String.fromCharCode(t4));
        let i = `${t3}`.charCodeAt(0);
        let o = `${e3}`.charCodeAt(0);
        let a = i > o;
        let u = Math.min(i, o);
        let c = Math.max(i, o);
        if (n2.toRegex && r3 === 1) {
          return toRange(u, c, false, n2);
        }
        let l = [];
        let f = 0;
        while (a ? i >= o : i <= o) {
          l.push(s2(i, f));
          i = a ? i - r3 : i + r3;
          f++;
        }
        if (n2.toRegex === true) {
          return toRegex(l, null, { wrap: false, options: n2 });
        }
        return l;
      };
      const fill = (t3, e3, r3, n2 = {}) => {
        if (e3 == null && isValidValue(t3)) {
          return [t3];
        }
        if (!isValidValue(t3) || !isValidValue(e3)) {
          return invalidRange(t3, e3, n2);
        }
        if (typeof r3 === "function") {
          return fill(t3, e3, 1, { transform: r3 });
        }
        if (isObject2(r3)) {
          return fill(t3, e3, 0, r3);
        }
        let s2 = { ...n2 };
        if (s2.capture === true)
          s2.wrap = true;
        r3 = r3 || s2.step || 1;
        if (!isNumber(r3)) {
          if (r3 != null && !isObject2(r3))
            return invalidStep(r3, s2);
          return fill(t3, e3, 1, r3);
        }
        if (isNumber(t3) && isNumber(e3)) {
          return fillNumbers(t3, e3, r3, s2);
        }
        return fillLetters(t3, e3, Math.max(Math.abs(r3), 1), s2);
      };
      t2.exports = fill;
    }, 5976: (t2, e2, r2) => {
      "use strict";
      var n = r2(6654);
      var s = r2(1017).posix.dirname;
      var i = r2(2037).platform() === "win32";
      var o = "/";
      var a = /\\/g;
      var u = /[\{\[].*[\}\]]$/;
      var c = /(^|[^\\])([\{\[]|\([^\)]+$)/;
      var l = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
      t2.exports = function globParent(t3, e3) {
        var r3 = Object.assign({ flipBackslashes: true }, e3);
        if (r3.flipBackslashes && i && t3.indexOf(o) < 0) {
          t3 = t3.replace(a, o);
        }
        if (u.test(t3)) {
          t3 += o;
        }
        t3 += "a";
        do {
          t3 = s(t3);
        } while (n(t3) || c.test(t3));
        return t3.replace(l, "$1");
      };
    }, 3071: (t2) => {
      t2.exports = function isExtglob(t3) {
        if (typeof t3 !== "string" || t3 === "") {
          return false;
        }
        var e2;
        while (e2 = /(\\).|([@?!+*]\(.*\))/g.exec(t3)) {
          if (e2[2])
            return true;
          t3 = t3.slice(e2.index + e2[0].length);
        }
        return false;
      };
    }, 6654: (t2, e2, r2) => {
      var n = r2(3071);
      var s = { "{": "}", "(": ")", "[": "]" };
      var strictCheck = function(t3) {
        if (t3[0] === "!") {
          return true;
        }
        var e3 = 0;
        var r3 = -2;
        var n2 = -2;
        var i = -2;
        var o = -2;
        var a = -2;
        while (e3 < t3.length) {
          if (t3[e3] === "*") {
            return true;
          }
          if (t3[e3 + 1] === "?" && /[\].+)]/.test(t3[e3])) {
            return true;
          }
          if (n2 !== -1 && t3[e3] === "[" && t3[e3 + 1] !== "]") {
            if (n2 < e3) {
              n2 = t3.indexOf("]", e3);
            }
            if (n2 > e3) {
              if (a === -1 || a > n2) {
                return true;
              }
              a = t3.indexOf("\\", e3);
              if (a === -1 || a > n2) {
                return true;
              }
            }
          }
          if (i !== -1 && t3[e3] === "{" && t3[e3 + 1] !== "}") {
            i = t3.indexOf("}", e3);
            if (i > e3) {
              a = t3.indexOf("\\", e3);
              if (a === -1 || a > i) {
                return true;
              }
            }
          }
          if (o !== -1 && t3[e3] === "(" && t3[e3 + 1] === "?" && /[:!=]/.test(t3[e3 + 2]) && t3[e3 + 3] !== ")") {
            o = t3.indexOf(")", e3);
            if (o > e3) {
              a = t3.indexOf("\\", e3);
              if (a === -1 || a > o) {
                return true;
              }
            }
          }
          if (r3 !== -1 && t3[e3] === "(" && t3[e3 + 1] !== "|") {
            if (r3 < e3) {
              r3 = t3.indexOf("|", e3);
            }
            if (r3 !== -1 && t3[r3 + 1] !== ")") {
              o = t3.indexOf(")", r3);
              if (o > r3) {
                a = t3.indexOf("\\", r3);
                if (a === -1 || a > o) {
                  return true;
                }
              }
            }
          }
          if (t3[e3] === "\\") {
            var u = t3[e3 + 1];
            e3 += 2;
            var c = s[u];
            if (c) {
              var l = t3.indexOf(c, e3);
              if (l !== -1) {
                e3 = l + 1;
              }
            }
            if (t3[e3] === "!") {
              return true;
            }
          } else {
            e3++;
          }
        }
        return false;
      };
      var relaxedCheck = function(t3) {
        if (t3[0] === "!") {
          return true;
        }
        var e3 = 0;
        while (e3 < t3.length) {
          if (/[*?{}()[\]]/.test(t3[e3])) {
            return true;
          }
          if (t3[e3] === "\\") {
            var r3 = t3[e3 + 1];
            e3 += 2;
            var n2 = s[r3];
            if (n2) {
              var i = t3.indexOf(n2, e3);
              if (i !== -1) {
                e3 = i + 1;
              }
            }
            if (t3[e3] === "!") {
              return true;
            }
          } else {
            e3++;
          }
        }
        return false;
      };
      t2.exports = function isGlob(t3, e3) {
        if (typeof t3 !== "string" || t3 === "") {
          return false;
        }
        if (n(t3)) {
          return true;
        }
        var r3 = strictCheck;
        if (e3 && e3.strict === false) {
          r3 = relaxedCheck;
        }
        return r3(t3);
      };
    }, 8387: (t2) => {
      "use strict";
      t2.exports = function(t3) {
        if (typeof t3 === "number") {
          return t3 - t3 === 0;
        }
        if (typeof t3 === "string" && t3.trim() !== "") {
          return Number.isFinite ? Number.isFinite(+t3) : isFinite(+t3);
        }
        return false;
      };
    }, 1382: (t2, e2, r2) => {
      "use strict";
      const n = r2(2781);
      const s = n.PassThrough;
      const i = Array.prototype.slice;
      t2.exports = merge2;
      function merge2() {
        const t3 = [];
        const e3 = i.call(arguments);
        let r3 = false;
        let n2 = e3[e3.length - 1];
        if (n2 && !Array.isArray(n2) && n2.pipe == null) {
          e3.pop();
        } else {
          n2 = {};
        }
        const o = n2.end !== false;
        const a = n2.pipeError === true;
        if (n2.objectMode == null) {
          n2.objectMode = true;
        }
        if (n2.highWaterMark == null) {
          n2.highWaterMark = 64 * 1024;
        }
        const u = s(n2);
        function addStream() {
          for (let e4 = 0, r4 = arguments.length; e4 < r4; e4++) {
            t3.push(pauseStreams(arguments[e4], n2));
          }
          mergeStream();
          return this;
        }
        function mergeStream() {
          if (r3) {
            return;
          }
          r3 = true;
          let e4 = t3.shift();
          if (!e4) {
            process.nextTick(endStream);
            return;
          }
          if (!Array.isArray(e4)) {
            e4 = [e4];
          }
          let n3 = e4.length + 1;
          function next() {
            if (--n3 > 0) {
              return;
            }
            r3 = false;
            mergeStream();
          }
          function pipe(t4) {
            function onend() {
              t4.removeListener("merge2UnpipeEnd", onend);
              t4.removeListener("end", onend);
              if (a) {
                t4.removeListener("error", onerror);
              }
              next();
            }
            function onerror(t5) {
              u.emit("error", t5);
            }
            if (t4._readableState.endEmitted) {
              return next();
            }
            t4.on("merge2UnpipeEnd", onend);
            t4.on("end", onend);
            if (a) {
              t4.on("error", onerror);
            }
            t4.pipe(u, { end: false });
            t4.resume();
          }
          for (let t4 = 0; t4 < e4.length; t4++) {
            pipe(e4[t4]);
          }
          next();
        }
        function endStream() {
          r3 = false;
          u.emit("queueDrain");
          if (o) {
            u.end();
          }
        }
        u.setMaxListeners(0);
        u.add = addStream;
        u.on("unpipe", function(t4) {
          t4.emit("merge2UnpipeEnd");
        });
        if (e3.length) {
          addStream.apply(null, e3);
        }
        return u;
      }
      function pauseStreams(t3, e3) {
        if (!Array.isArray(t3)) {
          if (!t3._readableState && t3.pipe) {
            t3 = t3.pipe(s(e3));
          }
          if (!t3._readableState || !t3.pause || !t3.pipe) {
            throw new Error("Only readable stream can be merged.");
          }
          t3.pause();
        } else {
          for (let r3 = 0, n2 = t3.length; r3 < n2; r3++) {
            t3[r3] = pauseStreams(t3[r3], e3);
          }
        }
        return t3;
      }
    }, 1224: (t2, e2, r2) => {
      "use strict";
      const n = r2(3837);
      const s = r2(1570);
      const i = r2(376);
      const o = r2(8658);
      const isEmptyString = (t3) => t3 === "" || t3 === "./";
      const micromatch2 = (t3, e3, r3) => {
        e3 = [].concat(e3);
        t3 = [].concat(t3);
        let n2 = /* @__PURE__ */ new Set();
        let s2 = /* @__PURE__ */ new Set();
        let o2 = /* @__PURE__ */ new Set();
        let a = 0;
        let onResult = (t4) => {
          o2.add(t4.output);
          if (r3 && r3.onResult) {
            r3.onResult(t4);
          }
        };
        for (let o3 = 0; o3 < e3.length; o3++) {
          let u2 = i(String(e3[o3]), { ...r3, onResult }, true);
          let c2 = u2.state.negated || u2.state.negatedExtglob;
          if (c2)
            a++;
          for (let e4 of t3) {
            let t4 = u2(e4, true);
            let r4 = c2 ? !t4.isMatch : t4.isMatch;
            if (!r4)
              continue;
            if (c2) {
              n2.add(t4.output);
            } else {
              n2.delete(t4.output);
              s2.add(t4.output);
            }
          }
        }
        let u = a === e3.length ? [...o2] : [...s2];
        let c = u.filter((t4) => !n2.has(t4));
        if (r3 && c.length === 0) {
          if (r3.failglob === true) {
            throw new Error(`No matches found for "${e3.join(", ")}"`);
          }
          if (r3.nonull === true || r3.nullglob === true) {
            return r3.unescape ? e3.map((t4) => t4.replace(/\\/g, "")) : e3;
          }
        }
        return c;
      };
      micromatch2.match = micromatch2;
      micromatch2.matcher = (t3, e3) => i(t3, e3);
      micromatch2.isMatch = (t3, e3, r3) => i(e3, r3)(t3);
      micromatch2.any = micromatch2.isMatch;
      micromatch2.not = (t3, e3, r3 = {}) => {
        e3 = [].concat(e3).map(String);
        let n2 = /* @__PURE__ */ new Set();
        let s2 = [];
        let onResult = (t4) => {
          if (r3.onResult)
            r3.onResult(t4);
          s2.push(t4.output);
        };
        let i2 = micromatch2(t3, e3, { ...r3, onResult });
        for (let t4 of s2) {
          if (!i2.includes(t4)) {
            n2.add(t4);
          }
        }
        return [...n2];
      };
      micromatch2.contains = (t3, e3, r3) => {
        if (typeof t3 !== "string") {
          throw new TypeError(`Expected a string: "${n.inspect(t3)}"`);
        }
        if (Array.isArray(e3)) {
          return e3.some((e4) => micromatch2.contains(t3, e4, r3));
        }
        if (typeof e3 === "string") {
          if (isEmptyString(t3) || isEmptyString(e3)) {
            return false;
          }
          if (t3.includes(e3) || t3.startsWith("./") && t3.slice(2).includes(e3)) {
            return true;
          }
        }
        return micromatch2.isMatch(t3, e3, { ...r3, contains: true });
      };
      micromatch2.matchKeys = (t3, e3, r3) => {
        if (!o.isObject(t3)) {
          throw new TypeError("Expected the first argument to be an object");
        }
        let n2 = micromatch2(Object.keys(t3), e3, r3);
        let s2 = {};
        for (let e4 of n2)
          s2[e4] = t3[e4];
        return s2;
      };
      micromatch2.some = (t3, e3, r3) => {
        let n2 = [].concat(t3);
        for (let t4 of [].concat(e3)) {
          let e4 = i(String(t4), r3);
          if (n2.some((t5) => e4(t5))) {
            return true;
          }
        }
        return false;
      };
      micromatch2.every = (t3, e3, r3) => {
        let n2 = [].concat(t3);
        for (let t4 of [].concat(e3)) {
          let e4 = i(String(t4), r3);
          if (!n2.every((t5) => e4(t5))) {
            return false;
          }
        }
        return true;
      };
      micromatch2.all = (t3, e3, r3) => {
        if (typeof t3 !== "string") {
          throw new TypeError(`Expected a string: "${n.inspect(t3)}"`);
        }
        return [].concat(e3).every((e4) => i(e4, r3)(t3));
      };
      micromatch2.capture = (t3, e3, r3) => {
        let n2 = o.isWindows(r3);
        let s2 = i.makeRe(String(t3), { ...r3, capture: true });
        let a = s2.exec(n2 ? o.toPosixSlashes(e3) : e3);
        if (a) {
          return a.slice(1).map((t4) => t4 === void 0 ? "" : t4);
        }
      };
      micromatch2.makeRe = (...t3) => i.makeRe(...t3);
      micromatch2.scan = (...t3) => i.scan(...t3);
      micromatch2.parse = (t3, e3) => {
        let r3 = [];
        for (let n2 of [].concat(t3 || [])) {
          for (let t4 of s(String(n2), e3)) {
            r3.push(i.parse(t4, e3));
          }
        }
        return r3;
      };
      micromatch2.braces = (t3, e3) => {
        if (typeof t3 !== "string")
          throw new TypeError("Expected a string");
        if (e3 && e3.nobrace === true || !/\{.*\}/.test(t3)) {
          return [t3];
        }
        return s(t3, e3);
      };
      micromatch2.braceExpand = (t3, e3) => {
        if (typeof t3 !== "string")
          throw new TypeError("Expected a string");
        return micromatch2.braces(t3, { ...e3, expand: true });
      };
      t2.exports = micromatch2;
    }, 376: (t2, e2, r2) => {
      "use strict";
      t2.exports = r2(7631);
    }, 7820: (t2, e2, r2) => {
      "use strict";
      const n = r2(1017);
      const s = "\\\\/";
      const i = `[^${s}]`;
      const o = "\\.";
      const a = "\\+";
      const u = "\\?";
      const c = "\\/";
      const l = "(?=.)";
      const f = "[^/]";
      const p = `(?:${c}|$)`;
      const h = `(?:^|${c})`;
      const d = `${o}{1,2}${p}`;
      const _ = `(?!${o})`;
      const g = `(?!${h}${d})`;
      const y = `(?!${o}{0,1}${p})`;
      const S = `(?!${d})`;
      const m = `[^.${c}]`;
      const v = `${f}*?`;
      const E = { DOT_LITERAL: o, PLUS_LITERAL: a, QMARK_LITERAL: u, SLASH_LITERAL: c, ONE_CHAR: l, QMARK: f, END_ANCHOR: p, DOTS_SLASH: d, NO_DOT: _, NO_DOTS: g, NO_DOT_SLASH: y, NO_DOTS_SLASH: S, QMARK_NO_DOT: m, STAR: v, START_ANCHOR: h };
      const A = { ...E, SLASH_LITERAL: `[${s}]`, QMARK: i, STAR: `${i}*?`, DOTS_SLASH: `${o}{1,2}(?:[${s}]|$)`, NO_DOT: `(?!${o})`, NO_DOTS: `(?!(?:^|[${s}])${o}{1,2}(?:[${s}]|$))`, NO_DOT_SLASH: `(?!${o}{0,1}(?:[${s}]|$))`, NO_DOTS_SLASH: `(?!${o}{1,2}(?:[${s}]|$))`, QMARK_NO_DOT: `[^.${s}]`, START_ANCHOR: `(?:^|[${s}])`, END_ANCHOR: `(?:[${s}]|$)` };
      const b = { alnum: "a-zA-Z0-9", alpha: "a-zA-Z", ascii: "\\x00-\\x7F", blank: " \\t", cntrl: "\\x00-\\x1F\\x7F", digit: "0-9", graph: "\\x21-\\x7E", lower: "a-z", print: "\\x20-\\x7E ", punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~", space: " \\t\\r\\n\\v\\f", upper: "A-Z", word: "A-Za-z0-9_", xdigit: "A-Fa-f0-9" };
      t2.exports = { MAX_LENGTH: 1024 * 64, POSIX_REGEX_SOURCE: b, REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g, REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/, REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/, REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g, REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g, REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g, REPLACEMENTS: { "***": "*", "**/**": "**", "**/**/**": "**" }, CHAR_0: 48, CHAR_9: 57, CHAR_UPPERCASE_A: 65, CHAR_LOWERCASE_A: 97, CHAR_UPPERCASE_Z: 90, CHAR_LOWERCASE_Z: 122, CHAR_LEFT_PARENTHESES: 40, CHAR_RIGHT_PARENTHESES: 41, CHAR_ASTERISK: 42, CHAR_AMPERSAND: 38, CHAR_AT: 64, CHAR_BACKWARD_SLASH: 92, CHAR_CARRIAGE_RETURN: 13, CHAR_CIRCUMFLEX_ACCENT: 94, CHAR_COLON: 58, CHAR_COMMA: 44, CHAR_DOT: 46, CHAR_DOUBLE_QUOTE: 34, CHAR_EQUAL: 61, CHAR_EXCLAMATION_MARK: 33, CHAR_FORM_FEED: 12, CHAR_FORWARD_SLASH: 47, CHAR_GRAVE_ACCENT: 96, CHAR_HASH: 35, CHAR_HYPHEN_MINUS: 45, CHAR_LEFT_ANGLE_BRACKET: 60, CHAR_LEFT_CURLY_BRACE: 123, CHAR_LEFT_SQUARE_BRACKET: 91, CHAR_LINE_FEED: 10, CHAR_NO_BREAK_SPACE: 160, CHAR_PERCENT: 37, CHAR_PLUS: 43, CHAR_QUESTION_MARK: 63, CHAR_RIGHT_ANGLE_BRACKET: 62, CHAR_RIGHT_CURLY_BRACE: 125, CHAR_RIGHT_SQUARE_BRACKET: 93, CHAR_SEMICOLON: 59, CHAR_SINGLE_QUOTE: 39, CHAR_SPACE: 32, CHAR_TAB: 9, CHAR_UNDERSCORE: 95, CHAR_VERTICAL_LINE: 124, CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, SEP: n.sep, extglobChars(t3) {
        return { "!": { type: "negate", open: "(?:(?!(?:", close: `))${t3.STAR})` }, "?": { type: "qmark", open: "(?:", close: ")?" }, "+": { type: "plus", open: "(?:", close: ")+" }, "*": { type: "star", open: "(?:", close: ")*" }, "@": { type: "at", open: "(?:", close: ")" } };
      }, globChars(t3) {
        return t3 === true ? A : E;
      } };
    }, 6986: (t2, e2, r2) => {
      "use strict";
      const n = r2(7820);
      const s = r2(8658);
      const { MAX_LENGTH: i, POSIX_REGEX_SOURCE: o, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: u, REPLACEMENTS: c } = n;
      const expandRange = (t3, e3) => {
        if (typeof e3.expandRange === "function") {
          return e3.expandRange(...t3, e3);
        }
        t3.sort();
        const r3 = `[${t3.join("-")}]`;
        try {
          new RegExp(r3);
        } catch (e4) {
          return t3.map((t4) => s.escapeRegex(t4)).join("..");
        }
        return r3;
      };
      const syntaxError = (t3, e3) => `Missing ${t3}: "${e3}" - use "\\\\${e3}" to match literal characters`;
      const parse4 = (t3, e3) => {
        if (typeof t3 !== "string") {
          throw new TypeError("Expected a string");
        }
        t3 = c[t3] || t3;
        const r3 = { ...e3 };
        const l = typeof r3.maxLength === "number" ? Math.min(i, r3.maxLength) : i;
        let f = t3.length;
        if (f > l) {
          throw new SyntaxError(`Input length: ${f}, exceeds maximum allowed length: ${l}`);
        }
        const p = { type: "bos", value: "", output: r3.prepend || "" };
        const h = [p];
        const d = r3.capture ? "" : "?:";
        const _ = s.isWindows(e3);
        const g = n.globChars(_);
        const y = n.extglobChars(g);
        const { DOT_LITERAL: S, PLUS_LITERAL: m, SLASH_LITERAL: v, ONE_CHAR: E, DOTS_SLASH: A, NO_DOT: b, NO_DOT_SLASH: R, NO_DOTS_SLASH: P, QMARK: x, QMARK_NO_DOT: k, STAR: T, START_ANCHOR: C } = g;
        const globstar = (t4) => `(${d}(?:(?!${C}${t4.dot ? A : S}).)*?)`;
        const w = r3.dot ? "" : b;
        const O = r3.dot ? x : k;
        let L = r3.bash === true ? globstar(r3) : T;
        if (r3.capture) {
          L = `(${L})`;
        }
        if (typeof r3.noext === "boolean") {
          r3.noextglob = r3.noext;
        }
        const H = { input: t3, index: -1, start: 0, dot: r3.dot === true, consumed: "", output: "", prefix: "", backtrack: false, negated: false, brackets: 0, braces: 0, parens: 0, quotes: 0, globstar: false, tokens: h };
        t3 = s.removePrefix(t3, H);
        f = t3.length;
        const D = [];
        const F = [];
        const $ = [];
        let M = p;
        let N;
        const eos = () => H.index === f - 1;
        const I = H.peek = (e4 = 1) => t3[H.index + e4];
        const B = H.advance = () => t3[++H.index] || "";
        const remaining = () => t3.slice(H.index + 1);
        const consume = (t4 = "", e4 = 0) => {
          H.consumed += t4;
          H.index += e4;
        };
        const append = (t4) => {
          H.output += t4.output != null ? t4.output : t4.value;
          consume(t4.value);
        };
        const negate = () => {
          let t4 = 1;
          while (I() === "!" && (I(2) !== "(" || I(3) === "?")) {
            B();
            H.start++;
            t4++;
          }
          if (t4 % 2 === 0) {
            return false;
          }
          H.negated = true;
          H.start++;
          return true;
        };
        const increment = (t4) => {
          H[t4]++;
          $.push(t4);
        };
        const decrement = (t4) => {
          H[t4]--;
          $.pop();
        };
        const push = (t4) => {
          if (M.type === "globstar") {
            const e4 = H.braces > 0 && (t4.type === "comma" || t4.type === "brace");
            const r4 = t4.extglob === true || D.length && (t4.type === "pipe" || t4.type === "paren");
            if (t4.type !== "slash" && t4.type !== "paren" && !e4 && !r4) {
              H.output = H.output.slice(0, -M.output.length);
              M.type = "star";
              M.value = "*";
              M.output = L;
              H.output += M.output;
            }
          }
          if (D.length && t4.type !== "paren") {
            D[D.length - 1].inner += t4.value;
          }
          if (t4.value || t4.output)
            append(t4);
          if (M && M.type === "text" && t4.type === "text") {
            M.value += t4.value;
            M.output = (M.output || "") + t4.value;
            return;
          }
          t4.prev = M;
          h.push(t4);
          M = t4;
        };
        const extglobOpen = (t4, e4) => {
          const n2 = { ...y[e4], conditions: 1, inner: "" };
          n2.prev = M;
          n2.parens = H.parens;
          n2.output = H.output;
          const s2 = (r3.capture ? "(" : "") + n2.open;
          increment("parens");
          push({ type: t4, value: e4, output: H.output ? "" : E });
          push({ type: "paren", extglob: true, value: B(), output: s2 });
          D.push(n2);
        };
        const extglobClose = (t4) => {
          let n2 = t4.close + (r3.capture ? ")" : "");
          let s2;
          if (t4.type === "negate") {
            let i2 = L;
            if (t4.inner && t4.inner.length > 1 && t4.inner.includes("/")) {
              i2 = globstar(r3);
            }
            if (i2 !== L || eos() || /^\)+$/.test(remaining())) {
              n2 = t4.close = `)$))${i2}`;
            }
            if (t4.inner.includes("*") && (s2 = remaining()) && /^\.[^\\/.]+$/.test(s2)) {
              const r4 = parse4(s2, { ...e3, fastpaths: false }).output;
              n2 = t4.close = `)${r4})${i2})`;
            }
            if (t4.prev.type === "bos") {
              H.negatedExtglob = true;
            }
          }
          push({ type: "paren", extglob: true, value: N, output: n2 });
          decrement("parens");
        };
        if (r3.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t3)) {
          let n2 = false;
          let i2 = t3.replace(u, (t4, e4, r4, s2, i3, o2) => {
            if (s2 === "\\") {
              n2 = true;
              return t4;
            }
            if (s2 === "?") {
              if (e4) {
                return e4 + s2 + (i3 ? x.repeat(i3.length) : "");
              }
              if (o2 === 0) {
                return O + (i3 ? x.repeat(i3.length) : "");
              }
              return x.repeat(r4.length);
            }
            if (s2 === ".") {
              return S.repeat(r4.length);
            }
            if (s2 === "*") {
              if (e4) {
                return e4 + s2 + (i3 ? L : "");
              }
              return L;
            }
            return e4 ? t4 : `\\${t4}`;
          });
          if (n2 === true) {
            if (r3.unescape === true) {
              i2 = i2.replace(/\\/g, "");
            } else {
              i2 = i2.replace(/\\+/g, (t4) => t4.length % 2 === 0 ? "\\\\" : t4 ? "\\" : "");
            }
          }
          if (i2 === t3 && r3.contains === true) {
            H.output = t3;
            return H;
          }
          H.output = s.wrapOutput(i2, H, e3);
          return H;
        }
        while (!eos()) {
          N = B();
          if (N === "\0") {
            continue;
          }
          if (N === "\\") {
            const t4 = I();
            if (t4 === "/" && r3.bash !== true) {
              continue;
            }
            if (t4 === "." || t4 === ";") {
              continue;
            }
            if (!t4) {
              N += "\\";
              push({ type: "text", value: N });
              continue;
            }
            const e5 = /^\\+/.exec(remaining());
            let n3 = 0;
            if (e5 && e5[0].length > 2) {
              n3 = e5[0].length;
              H.index += n3;
              if (n3 % 2 !== 0) {
                N += "\\";
              }
            }
            if (r3.unescape === true) {
              N = B();
            } else {
              N += B();
            }
            if (H.brackets === 0) {
              push({ type: "text", value: N });
              continue;
            }
          }
          if (H.brackets > 0 && (N !== "]" || M.value === "[" || M.value === "[^")) {
            if (r3.posix !== false && N === ":") {
              const t4 = M.value.slice(1);
              if (t4.includes("[")) {
                M.posix = true;
                if (t4.includes(":")) {
                  const t5 = M.value.lastIndexOf("[");
                  const e5 = M.value.slice(0, t5);
                  const r4 = M.value.slice(t5 + 2);
                  const n3 = o[r4];
                  if (n3) {
                    M.value = e5 + n3;
                    H.backtrack = true;
                    B();
                    if (!p.output && h.indexOf(M) === 1) {
                      p.output = E;
                    }
                    continue;
                  }
                }
              }
            }
            if (N === "[" && I() !== ":" || N === "-" && I() === "]") {
              N = `\\${N}`;
            }
            if (N === "]" && (M.value === "[" || M.value === "[^")) {
              N = `\\${N}`;
            }
            if (r3.posix === true && N === "!" && M.value === "[") {
              N = "^";
            }
            M.value += N;
            append({ value: N });
            continue;
          }
          if (H.quotes === 1 && N !== '"') {
            N = s.escapeRegex(N);
            M.value += N;
            append({ value: N });
            continue;
          }
          if (N === '"') {
            H.quotes = H.quotes === 1 ? 0 : 1;
            if (r3.keepQuotes === true) {
              push({ type: "text", value: N });
            }
            continue;
          }
          if (N === "(") {
            increment("parens");
            push({ type: "paren", value: N });
            continue;
          }
          if (N === ")") {
            if (H.parens === 0 && r3.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "("));
            }
            const t4 = D[D.length - 1];
            if (t4 && H.parens === t4.parens + 1) {
              extglobClose(D.pop());
              continue;
            }
            push({ type: "paren", value: N, output: H.parens ? ")" : "\\)" });
            decrement("parens");
            continue;
          }
          if (N === "[") {
            if (r3.nobracket === true || !remaining().includes("]")) {
              if (r3.nobracket !== true && r3.strictBrackets === true) {
                throw new SyntaxError(syntaxError("closing", "]"));
              }
              N = `\\${N}`;
            } else {
              increment("brackets");
            }
            push({ type: "bracket", value: N });
            continue;
          }
          if (N === "]") {
            if (r3.nobracket === true || M && M.type === "bracket" && M.value.length === 1) {
              push({ type: "text", value: N, output: `\\${N}` });
              continue;
            }
            if (H.brackets === 0) {
              if (r3.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "["));
              }
              push({ type: "text", value: N, output: `\\${N}` });
              continue;
            }
            decrement("brackets");
            const t4 = M.value.slice(1);
            if (M.posix !== true && t4[0] === "^" && !t4.includes("/")) {
              N = `/${N}`;
            }
            M.value += N;
            append({ value: N });
            if (r3.literalBrackets === false || s.hasRegexChars(t4)) {
              continue;
            }
            const e5 = s.escapeRegex(M.value);
            H.output = H.output.slice(0, -M.value.length);
            if (r3.literalBrackets === true) {
              H.output += e5;
              M.value = e5;
              continue;
            }
            M.value = `(${d}${e5}|${M.value})`;
            H.output += M.value;
            continue;
          }
          if (N === "{" && r3.nobrace !== true) {
            increment("braces");
            const t4 = { type: "brace", value: N, output: "(", outputIndex: H.output.length, tokensIndex: H.tokens.length };
            F.push(t4);
            push(t4);
            continue;
          }
          if (N === "}") {
            const t4 = F[F.length - 1];
            if (r3.nobrace === true || !t4) {
              push({ type: "text", value: N, output: N });
              continue;
            }
            let e5 = ")";
            if (t4.dots === true) {
              const t5 = h.slice();
              const n3 = [];
              for (let e6 = t5.length - 1; e6 >= 0; e6--) {
                h.pop();
                if (t5[e6].type === "brace") {
                  break;
                }
                if (t5[e6].type !== "dots") {
                  n3.unshift(t5[e6].value);
                }
              }
              e5 = expandRange(n3, r3);
              H.backtrack = true;
            }
            if (t4.comma !== true && t4.dots !== true) {
              const r4 = H.output.slice(0, t4.outputIndex);
              const n3 = H.tokens.slice(t4.tokensIndex);
              t4.value = t4.output = "\\{";
              N = e5 = "\\}";
              H.output = r4;
              for (const t5 of n3) {
                H.output += t5.output || t5.value;
              }
            }
            push({ type: "brace", value: N, output: e5 });
            decrement("braces");
            F.pop();
            continue;
          }
          if (N === "|") {
            if (D.length > 0) {
              D[D.length - 1].conditions++;
            }
            push({ type: "text", value: N });
            continue;
          }
          if (N === ",") {
            let t4 = N;
            const e5 = F[F.length - 1];
            if (e5 && $[$.length - 1] === "braces") {
              e5.comma = true;
              t4 = "|";
            }
            push({ type: "comma", value: N, output: t4 });
            continue;
          }
          if (N === "/") {
            if (M.type === "dot" && H.index === H.start + 1) {
              H.start = H.index + 1;
              H.consumed = "";
              H.output = "";
              h.pop();
              M = p;
              continue;
            }
            push({ type: "slash", value: N, output: v });
            continue;
          }
          if (N === ".") {
            if (H.braces > 0 && M.type === "dot") {
              if (M.value === ".")
                M.output = S;
              const t4 = F[F.length - 1];
              M.type = "dots";
              M.output += N;
              M.value += N;
              t4.dots = true;
              continue;
            }
            if (H.braces + H.parens === 0 && M.type !== "bos" && M.type !== "slash") {
              push({ type: "text", value: N, output: S });
              continue;
            }
            push({ type: "dot", value: N, output: S });
            continue;
          }
          if (N === "?") {
            const t4 = M && M.value === "(";
            if (!t4 && r3.noextglob !== true && I() === "(" && I(2) !== "?") {
              extglobOpen("qmark", N);
              continue;
            }
            if (M && M.type === "paren") {
              const t5 = I();
              let e5 = N;
              if (t5 === "<" && !s.supportsLookbehinds()) {
                throw new Error("Node.js v10 or higher is required for regex lookbehinds");
              }
              if (M.value === "(" && !/[!=<:]/.test(t5) || t5 === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                e5 = `\\${N}`;
              }
              push({ type: "text", value: N, output: e5 });
              continue;
            }
            if (r3.dot !== true && (M.type === "slash" || M.type === "bos")) {
              push({ type: "qmark", value: N, output: k });
              continue;
            }
            push({ type: "qmark", value: N, output: x });
            continue;
          }
          if (N === "!") {
            if (r3.noextglob !== true && I() === "(") {
              if (I(2) !== "?" || !/[!=<:]/.test(I(3))) {
                extglobOpen("negate", N);
                continue;
              }
            }
            if (r3.nonegate !== true && H.index === 0) {
              negate();
              continue;
            }
          }
          if (N === "+") {
            if (r3.noextglob !== true && I() === "(" && I(2) !== "?") {
              extglobOpen("plus", N);
              continue;
            }
            if (M && M.value === "(" || r3.regex === false) {
              push({ type: "plus", value: N, output: m });
              continue;
            }
            if (M && (M.type === "bracket" || M.type === "paren" || M.type === "brace") || H.parens > 0) {
              push({ type: "plus", value: N });
              continue;
            }
            push({ type: "plus", value: m });
            continue;
          }
          if (N === "@") {
            if (r3.noextglob !== true && I() === "(" && I(2) !== "?") {
              push({ type: "at", extglob: true, value: N, output: "" });
              continue;
            }
            push({ type: "text", value: N });
            continue;
          }
          if (N !== "*") {
            if (N === "$" || N === "^") {
              N = `\\${N}`;
            }
            const t4 = a.exec(remaining());
            if (t4) {
              N += t4[0];
              H.index += t4[0].length;
            }
            push({ type: "text", value: N });
            continue;
          }
          if (M && (M.type === "globstar" || M.star === true)) {
            M.type = "star";
            M.star = true;
            M.value += N;
            M.output = L;
            H.backtrack = true;
            H.globstar = true;
            consume(N);
            continue;
          }
          let e4 = remaining();
          if (r3.noextglob !== true && /^\([^?]/.test(e4)) {
            extglobOpen("star", N);
            continue;
          }
          if (M.type === "star") {
            if (r3.noglobstar === true) {
              consume(N);
              continue;
            }
            const n3 = M.prev;
            const s2 = n3.prev;
            const i2 = n3.type === "slash" || n3.type === "bos";
            const o2 = s2 && (s2.type === "star" || s2.type === "globstar");
            if (r3.bash === true && (!i2 || e4[0] && e4[0] !== "/")) {
              push({ type: "star", value: N, output: "" });
              continue;
            }
            const a2 = H.braces > 0 && (n3.type === "comma" || n3.type === "brace");
            const u2 = D.length && (n3.type === "pipe" || n3.type === "paren");
            if (!i2 && n3.type !== "paren" && !a2 && !u2) {
              push({ type: "star", value: N, output: "" });
              continue;
            }
            while (e4.slice(0, 3) === "/**") {
              const r4 = t3[H.index + 4];
              if (r4 && r4 !== "/") {
                break;
              }
              e4 = e4.slice(3);
              consume("/**", 3);
            }
            if (n3.type === "bos" && eos()) {
              M.type = "globstar";
              M.value += N;
              M.output = globstar(r3);
              H.output = M.output;
              H.globstar = true;
              consume(N);
              continue;
            }
            if (n3.type === "slash" && n3.prev.type !== "bos" && !o2 && eos()) {
              H.output = H.output.slice(0, -(n3.output + M.output).length);
              n3.output = `(?:${n3.output}`;
              M.type = "globstar";
              M.output = globstar(r3) + (r3.strictSlashes ? ")" : "|$)");
              M.value += N;
              H.globstar = true;
              H.output += n3.output + M.output;
              consume(N);
              continue;
            }
            if (n3.type === "slash" && n3.prev.type !== "bos" && e4[0] === "/") {
              const t4 = e4[1] !== void 0 ? "|$" : "";
              H.output = H.output.slice(0, -(n3.output + M.output).length);
              n3.output = `(?:${n3.output}`;
              M.type = "globstar";
              M.output = `${globstar(r3)}${v}|${v}${t4})`;
              M.value += N;
              H.output += n3.output + M.output;
              H.globstar = true;
              consume(N + B());
              push({ type: "slash", value: "/", output: "" });
              continue;
            }
            if (n3.type === "bos" && e4[0] === "/") {
              M.type = "globstar";
              M.value += N;
              M.output = `(?:^|${v}|${globstar(r3)}${v})`;
              H.output = M.output;
              H.globstar = true;
              consume(N + B());
              push({ type: "slash", value: "/", output: "" });
              continue;
            }
            H.output = H.output.slice(0, -M.output.length);
            M.type = "globstar";
            M.output = globstar(r3);
            M.value += N;
            H.output += M.output;
            H.globstar = true;
            consume(N);
            continue;
          }
          const n2 = { type: "star", value: N, output: L };
          if (r3.bash === true) {
            n2.output = ".*?";
            if (M.type === "bos" || M.type === "slash") {
              n2.output = w + n2.output;
            }
            push(n2);
            continue;
          }
          if (M && (M.type === "bracket" || M.type === "paren") && r3.regex === true) {
            n2.output = N;
            push(n2);
            continue;
          }
          if (H.index === H.start || M.type === "slash" || M.type === "dot") {
            if (M.type === "dot") {
              H.output += R;
              M.output += R;
            } else if (r3.dot === true) {
              H.output += P;
              M.output += P;
            } else {
              H.output += w;
              M.output += w;
            }
            if (I() !== "*") {
              H.output += E;
              M.output += E;
            }
          }
          push(n2);
        }
        while (H.brackets > 0) {
          if (r3.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "]"));
          H.output = s.escapeLast(H.output, "[");
          decrement("brackets");
        }
        while (H.parens > 0) {
          if (r3.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", ")"));
          H.output = s.escapeLast(H.output, "(");
          decrement("parens");
        }
        while (H.braces > 0) {
          if (r3.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "}"));
          H.output = s.escapeLast(H.output, "{");
          decrement("braces");
        }
        if (r3.strictSlashes !== true && (M.type === "star" || M.type === "bracket")) {
          push({ type: "maybe_slash", value: "", output: `${v}?` });
        }
        if (H.backtrack === true) {
          H.output = "";
          for (const t4 of H.tokens) {
            H.output += t4.output != null ? t4.output : t4.value;
            if (t4.suffix) {
              H.output += t4.suffix;
            }
          }
        }
        return H;
      };
      parse4.fastpaths = (t3, e3) => {
        const r3 = { ...e3 };
        const o2 = typeof r3.maxLength === "number" ? Math.min(i, r3.maxLength) : i;
        const a2 = t3.length;
        if (a2 > o2) {
          throw new SyntaxError(`Input length: ${a2}, exceeds maximum allowed length: ${o2}`);
        }
        t3 = c[t3] || t3;
        const u2 = s.isWindows(e3);
        const { DOT_LITERAL: l, SLASH_LITERAL: f, ONE_CHAR: p, DOTS_SLASH: h, NO_DOT: d, NO_DOTS: _, NO_DOTS_SLASH: g, STAR: y, START_ANCHOR: S } = n.globChars(u2);
        const m = r3.dot ? _ : d;
        const v = r3.dot ? g : d;
        const E = r3.capture ? "" : "?:";
        const A = { negated: false, prefix: "" };
        let b = r3.bash === true ? ".*?" : y;
        if (r3.capture) {
          b = `(${b})`;
        }
        const globstar = (t4) => {
          if (t4.noglobstar === true)
            return b;
          return `(${E}(?:(?!${S}${t4.dot ? h : l}).)*?)`;
        };
        const create = (t4) => {
          switch (t4) {
            case "*":
              return `${m}${p}${b}`;
            case ".*":
              return `${l}${p}${b}`;
            case "*.*":
              return `${m}${b}${l}${p}${b}`;
            case "*/*":
              return `${m}${b}${f}${p}${v}${b}`;
            case "**":
              return m + globstar(r3);
            case "**/*":
              return `(?:${m}${globstar(r3)}${f})?${v}${p}${b}`;
            case "**/*.*":
              return `(?:${m}${globstar(r3)}${f})?${v}${b}${l}${p}${b}`;
            case "**/.*":
              return `(?:${m}${globstar(r3)}${f})?${l}${p}${b}`;
            default: {
              const e4 = /^(.*?)\.(\w+)$/.exec(t4);
              if (!e4)
                return;
              const r4 = create(e4[1]);
              if (!r4)
                return;
              return r4 + l + e4[2];
            }
          }
        };
        const R = s.removePrefix(t3, A);
        let P = create(R);
        if (P && r3.strictSlashes !== true) {
          P += `${f}?`;
        }
        return P;
      };
      t2.exports = parse4;
    }, 7631: (t2, e2, r2) => {
      "use strict";
      const n = r2(1017);
      const s = r2(8640);
      const i = r2(6986);
      const o = r2(8658);
      const a = r2(7820);
      const isObject2 = (t3) => t3 && typeof t3 === "object" && !Array.isArray(t3);
      const picomatch = (t3, e3, r3 = false) => {
        if (Array.isArray(t3)) {
          const n3 = t3.map((t4) => picomatch(t4, e3, r3));
          const arrayMatcher = (t4) => {
            for (const e4 of n3) {
              const r4 = e4(t4);
              if (r4)
                return r4;
            }
            return false;
          };
          return arrayMatcher;
        }
        const n2 = isObject2(t3) && t3.tokens && t3.input;
        if (t3 === "" || typeof t3 !== "string" && !n2) {
          throw new TypeError("Expected pattern to be a non-empty string");
        }
        const s2 = e3 || {};
        const i2 = o.isWindows(e3);
        const a2 = n2 ? picomatch.compileRe(t3, e3) : picomatch.makeRe(t3, e3, false, true);
        const u = a2.state;
        delete a2.state;
        let isIgnored = () => false;
        if (s2.ignore) {
          const t4 = { ...e3, ignore: null, onMatch: null, onResult: null };
          isIgnored = picomatch(s2.ignore, t4, r3);
        }
        const matcher = (r4, n3 = false) => {
          const { isMatch: o2, match: c, output: l } = picomatch.test(r4, a2, e3, { glob: t3, posix: i2 });
          const f = { glob: t3, state: u, regex: a2, posix: i2, input: r4, output: l, match: c, isMatch: o2 };
          if (typeof s2.onResult === "function") {
            s2.onResult(f);
          }
          if (o2 === false) {
            f.isMatch = false;
            return n3 ? f : false;
          }
          if (isIgnored(r4)) {
            if (typeof s2.onIgnore === "function") {
              s2.onIgnore(f);
            }
            f.isMatch = false;
            return n3 ? f : false;
          }
          if (typeof s2.onMatch === "function") {
            s2.onMatch(f);
          }
          return n3 ? f : true;
        };
        if (r3) {
          matcher.state = u;
        }
        return matcher;
      };
      picomatch.test = (t3, e3, r3, { glob: n2, posix: s2 } = {}) => {
        if (typeof t3 !== "string") {
          throw new TypeError("Expected input to be a string");
        }
        if (t3 === "") {
          return { isMatch: false, output: "" };
        }
        const i2 = r3 || {};
        const a2 = i2.format || (s2 ? o.toPosixSlashes : null);
        let u = t3 === n2;
        let c = u && a2 ? a2(t3) : t3;
        if (u === false) {
          c = a2 ? a2(t3) : t3;
          u = c === n2;
        }
        if (u === false || i2.capture === true) {
          if (i2.matchBase === true || i2.basename === true) {
            u = picomatch.matchBase(t3, e3, r3, s2);
          } else {
            u = e3.exec(c);
          }
        }
        return { isMatch: Boolean(u), match: u, output: c };
      };
      picomatch.matchBase = (t3, e3, r3, s2 = o.isWindows(r3)) => {
        const i2 = e3 instanceof RegExp ? e3 : picomatch.makeRe(e3, r3);
        return i2.test(n.basename(t3));
      };
      picomatch.isMatch = (t3, e3, r3) => picomatch(e3, r3)(t3);
      picomatch.parse = (t3, e3) => {
        if (Array.isArray(t3))
          return t3.map((t4) => picomatch.parse(t4, e3));
        return i(t3, { ...e3, fastpaths: false });
      };
      picomatch.scan = (t3, e3) => s(t3, e3);
      picomatch.compileRe = (t3, e3, r3 = false, n2 = false) => {
        if (r3 === true) {
          return t3.output;
        }
        const s2 = e3 || {};
        const i2 = s2.contains ? "" : "^";
        const o2 = s2.contains ? "" : "$";
        let a2 = `${i2}(?:${t3.output})${o2}`;
        if (t3 && t3.negated === true) {
          a2 = `^(?!${a2}).*$`;
        }
        const u = picomatch.toRegex(a2, e3);
        if (n2 === true) {
          u.state = t3;
        }
        return u;
      };
      picomatch.makeRe = (t3, e3 = {}, r3 = false, n2 = false) => {
        if (!t3 || typeof t3 !== "string") {
          throw new TypeError("Expected a non-empty string");
        }
        let s2 = { negated: false, fastpaths: true };
        if (e3.fastpaths !== false && (t3[0] === "." || t3[0] === "*")) {
          s2.output = i.fastpaths(t3, e3);
        }
        if (!s2.output) {
          s2 = i(t3, e3);
        }
        return picomatch.compileRe(s2, e3, r3, n2);
      };
      picomatch.toRegex = (t3, e3) => {
        try {
          const r3 = e3 || {};
          return new RegExp(t3, r3.flags || (r3.nocase ? "i" : ""));
        } catch (t4) {
          if (e3 && e3.debug === true)
            throw t4;
          return /$^/;
        }
      };
      picomatch.constants = a;
      t2.exports = picomatch;
    }, 8640: (t2, e2, r2) => {
      "use strict";
      const n = r2(8658);
      const { CHAR_ASTERISK: s, CHAR_AT: i, CHAR_BACKWARD_SLASH: o, CHAR_COMMA: a, CHAR_DOT: u, CHAR_EXCLAMATION_MARK: c, CHAR_FORWARD_SLASH: l, CHAR_LEFT_CURLY_BRACE: f, CHAR_LEFT_PARENTHESES: p, CHAR_LEFT_SQUARE_BRACKET: h, CHAR_PLUS: d, CHAR_QUESTION_MARK: _, CHAR_RIGHT_CURLY_BRACE: g, CHAR_RIGHT_PARENTHESES: y, CHAR_RIGHT_SQUARE_BRACKET: S } = r2(7820);
      const isPathSeparator = (t3) => t3 === l || t3 === o;
      const depth = (t3) => {
        if (t3.isPrefix !== true) {
          t3.depth = t3.isGlobstar ? Infinity : 1;
        }
      };
      const scan = (t3, e3) => {
        const r3 = e3 || {};
        const m = t3.length - 1;
        const v = r3.parts === true || r3.scanToEnd === true;
        const E = [];
        const A = [];
        const b = [];
        let R = t3;
        let P = -1;
        let x = 0;
        let k = 0;
        let T = false;
        let C = false;
        let w = false;
        let O = false;
        let L = false;
        let H = false;
        let D = false;
        let F = false;
        let $ = false;
        let M = false;
        let N = 0;
        let I;
        let B;
        let j = { value: "", depth: 0, isGlob: false };
        const eos = () => P >= m;
        const peek = () => R.charCodeAt(P + 1);
        const advance = () => {
          I = B;
          return R.charCodeAt(++P);
        };
        while (P < m) {
          B = advance();
          let t4;
          if (B === o) {
            D = j.backslashes = true;
            B = advance();
            if (B === f) {
              H = true;
            }
            continue;
          }
          if (H === true || B === f) {
            N++;
            while (eos() !== true && (B = advance())) {
              if (B === o) {
                D = j.backslashes = true;
                advance();
                continue;
              }
              if (B === f) {
                N++;
                continue;
              }
              if (H !== true && B === u && (B = advance()) === u) {
                T = j.isBrace = true;
                w = j.isGlob = true;
                M = true;
                if (v === true) {
                  continue;
                }
                break;
              }
              if (H !== true && B === a) {
                T = j.isBrace = true;
                w = j.isGlob = true;
                M = true;
                if (v === true) {
                  continue;
                }
                break;
              }
              if (B === g) {
                N--;
                if (N === 0) {
                  H = false;
                  T = j.isBrace = true;
                  M = true;
                  break;
                }
              }
            }
            if (v === true) {
              continue;
            }
            break;
          }
          if (B === l) {
            E.push(P);
            A.push(j);
            j = { value: "", depth: 0, isGlob: false };
            if (M === true)
              continue;
            if (I === u && P === x + 1) {
              x += 2;
              continue;
            }
            k = P + 1;
            continue;
          }
          if (r3.noext !== true) {
            const t5 = B === d || B === i || B === s || B === _ || B === c;
            if (t5 === true && peek() === p) {
              w = j.isGlob = true;
              O = j.isExtglob = true;
              M = true;
              if (B === c && P === x) {
                $ = true;
              }
              if (v === true) {
                while (eos() !== true && (B = advance())) {
                  if (B === o) {
                    D = j.backslashes = true;
                    B = advance();
                    continue;
                  }
                  if (B === y) {
                    w = j.isGlob = true;
                    M = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
          }
          if (B === s) {
            if (I === s)
              L = j.isGlobstar = true;
            w = j.isGlob = true;
            M = true;
            if (v === true) {
              continue;
            }
            break;
          }
          if (B === _) {
            w = j.isGlob = true;
            M = true;
            if (v === true) {
              continue;
            }
            break;
          }
          if (B === h) {
            while (eos() !== true && (t4 = advance())) {
              if (t4 === o) {
                D = j.backslashes = true;
                advance();
                continue;
              }
              if (t4 === S) {
                C = j.isBracket = true;
                w = j.isGlob = true;
                M = true;
                break;
              }
            }
            if (v === true) {
              continue;
            }
            break;
          }
          if (r3.nonegate !== true && B === c && P === x) {
            F = j.negated = true;
            x++;
            continue;
          }
          if (r3.noparen !== true && B === p) {
            w = j.isGlob = true;
            if (v === true) {
              while (eos() !== true && (B = advance())) {
                if (B === p) {
                  D = j.backslashes = true;
                  B = advance();
                  continue;
                }
                if (B === y) {
                  M = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
          if (w === true) {
            M = true;
            if (v === true) {
              continue;
            }
            break;
          }
        }
        if (r3.noext === true) {
          O = false;
          w = false;
        }
        let G = R;
        let W = "";
        let U = "";
        if (x > 0) {
          W = R.slice(0, x);
          R = R.slice(x);
          k -= x;
        }
        if (G && w === true && k > 0) {
          G = R.slice(0, k);
          U = R.slice(k);
        } else if (w === true) {
          G = "";
          U = R;
        } else {
          G = R;
        }
        if (G && G !== "" && G !== "/" && G !== R) {
          if (isPathSeparator(G.charCodeAt(G.length - 1))) {
            G = G.slice(0, -1);
          }
        }
        if (r3.unescape === true) {
          if (U)
            U = n.removeBackslashes(U);
          if (G && D === true) {
            G = n.removeBackslashes(G);
          }
        }
        const K = { prefix: W, input: t3, start: x, base: G, glob: U, isBrace: T, isBracket: C, isGlob: w, isExtglob: O, isGlobstar: L, negated: F, negatedExtglob: $ };
        if (r3.tokens === true) {
          K.maxDepth = 0;
          if (!isPathSeparator(B)) {
            A.push(j);
          }
          K.tokens = A;
        }
        if (r3.parts === true || r3.tokens === true) {
          let e4;
          for (let n2 = 0; n2 < E.length; n2++) {
            const s2 = e4 ? e4 + 1 : x;
            const i2 = E[n2];
            const o2 = t3.slice(s2, i2);
            if (r3.tokens) {
              if (n2 === 0 && x !== 0) {
                A[n2].isPrefix = true;
                A[n2].value = W;
              } else {
                A[n2].value = o2;
              }
              depth(A[n2]);
              K.maxDepth += A[n2].depth;
            }
            if (n2 !== 0 || o2 !== "") {
              b.push(o2);
            }
            e4 = i2;
          }
          if (e4 && e4 + 1 < t3.length) {
            const n2 = t3.slice(e4 + 1);
            b.push(n2);
            if (r3.tokens) {
              A[A.length - 1].value = n2;
              depth(A[A.length - 1]);
              K.maxDepth += A[A.length - 1].depth;
            }
          }
          K.slashes = E;
          K.parts = b;
        }
        return K;
      };
      t2.exports = scan;
    }, 8658: (t2, e2, r2) => {
      "use strict";
      const n = r2(1017);
      const s = process.platform === "win32";
      const { REGEX_BACKSLASH: i, REGEX_REMOVE_BACKSLASH: o, REGEX_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_GLOBAL: u } = r2(7820);
      e2.isObject = (t3) => t3 !== null && typeof t3 === "object" && !Array.isArray(t3);
      e2.hasRegexChars = (t3) => a.test(t3);
      e2.isRegexChar = (t3) => t3.length === 1 && e2.hasRegexChars(t3);
      e2.escapeRegex = (t3) => t3.replace(u, "\\$1");
      e2.toPosixSlashes = (t3) => t3.replace(i, "/");
      e2.removeBackslashes = (t3) => t3.replace(o, (t4) => t4 === "\\" ? "" : t4);
      e2.supportsLookbehinds = () => {
        const t3 = process.version.slice(1).split(".").map(Number);
        if (t3.length === 3 && t3[0] >= 9 || t3[0] === 8 && t3[1] >= 10) {
          return true;
        }
        return false;
      };
      e2.isWindows = (t3) => {
        if (t3 && typeof t3.windows === "boolean") {
          return t3.windows;
        }
        return s === true || n.sep === "\\";
      };
      e2.escapeLast = (t3, r3, n2) => {
        const s2 = t3.lastIndexOf(r3, n2);
        if (s2 === -1)
          return t3;
        if (t3[s2 - 1] === "\\")
          return e2.escapeLast(t3, r3, s2 - 1);
        return `${t3.slice(0, s2)}\\${t3.slice(s2)}`;
      };
      e2.removePrefix = (t3, e3 = {}) => {
        let r3 = t3;
        if (r3.startsWith("./")) {
          r3 = r3.slice(2);
          e3.prefix = "./";
        }
        return r3;
      };
      e2.wrapOutput = (t3, e3 = {}, r3 = {}) => {
        const n2 = r3.contains ? "" : "^";
        const s2 = r3.contains ? "" : "$";
        let i2 = `${n2}(?:${t3})${s2}`;
        if (e3.negated === true) {
          i2 = `(?:^(?!${i2}).*$)`;
        }
        return i2;
      };
    }, 8453: (t2) => {
      let e2;
      t2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (t3) => (e2 || (e2 = Promise.resolve())).then(t3).catch((t4) => setTimeout(() => {
        throw t4;
      }, 0));
    }, 1816: (t2) => {
      "use strict";
      function reusify(t3) {
        var e2 = new t3();
        var r2 = e2;
        function get() {
          var n = e2;
          if (n.next) {
            e2 = n.next;
          } else {
            e2 = new t3();
            r2 = e2;
          }
          n.next = null;
          return n;
        }
        function release2(t4) {
          r2.next = t4;
          r2 = t4;
        }
        return { get, release: release2 };
      }
      t2.exports = reusify;
    }, 5341: (t2, e2, r2) => {
      t2.exports = runParallel;
      const n = r2(8453);
      function runParallel(t3, e3) {
        let r3, s, i;
        let o = true;
        if (Array.isArray(t3)) {
          r3 = [];
          s = t3.length;
        } else {
          i = Object.keys(t3);
          r3 = {};
          s = i.length;
        }
        function done(t4) {
          function end() {
            if (e3)
              e3(t4, r3);
            e3 = null;
          }
          if (o)
            n(end);
          else
            end();
        }
        function each(t4, e4, n2) {
          r3[t4] = n2;
          if (--s === 0 || e4) {
            done(e4);
          }
        }
        if (!s) {
          done(null);
        } else if (i) {
          i.forEach(function(e4) {
            t3[e4](function(t4, r4) {
              each(e4, t4, r4);
            });
          });
        } else {
          t3.forEach(function(t4, e4) {
            t4(function(t5, r4) {
              each(e4, t5, r4);
            });
          });
        }
        o = false;
      }
    }, 211: (t2, e2, r2) => {
      "use strict";
      const n = r2(8387);
      const toRegexRange = (t3, e3, r3) => {
        if (n(t3) === false) {
          throw new TypeError("toRegexRange: expected the first argument to be a number");
        }
        if (e3 === void 0 || t3 === e3) {
          return String(t3);
        }
        if (n(e3) === false) {
          throw new TypeError("toRegexRange: expected the second argument to be a number.");
        }
        let s = { relaxZeros: true, ...r3 };
        if (typeof s.strictZeros === "boolean") {
          s.relaxZeros = s.strictZeros === false;
        }
        let i = String(s.relaxZeros);
        let o = String(s.shorthand);
        let a = String(s.capture);
        let u = String(s.wrap);
        let c = t3 + ":" + e3 + "=" + i + o + a + u;
        if (toRegexRange.cache.hasOwnProperty(c)) {
          return toRegexRange.cache[c].result;
        }
        let l = Math.min(t3, e3);
        let f = Math.max(t3, e3);
        if (Math.abs(l - f) === 1) {
          let r4 = t3 + "|" + e3;
          if (s.capture) {
            return `(${r4})`;
          }
          if (s.wrap === false) {
            return r4;
          }
          return `(?:${r4})`;
        }
        let p = hasPadding(t3) || hasPadding(e3);
        let h = { min: t3, max: e3, a: l, b: f };
        let d = [];
        let _ = [];
        if (p) {
          h.isPadded = p;
          h.maxLen = String(h.max).length;
        }
        if (l < 0) {
          let t4 = f < 0 ? Math.abs(f) : 1;
          _ = splitToPatterns(t4, Math.abs(l), h, s);
          l = h.a = 0;
        }
        if (f >= 0) {
          d = splitToPatterns(l, f, h, s);
        }
        h.negatives = _;
        h.positives = d;
        h.result = collatePatterns(_, d, s);
        if (s.capture === true) {
          h.result = `(${h.result})`;
        } else if (s.wrap !== false && d.length + _.length > 1) {
          h.result = `(?:${h.result})`;
        }
        toRegexRange.cache[c] = h;
        return h.result;
      };
      function collatePatterns(t3, e3, r3) {
        let n2 = filterPatterns(t3, e3, "-", false, r3) || [];
        let s = filterPatterns(e3, t3, "", false, r3) || [];
        let i = filterPatterns(t3, e3, "-?", true, r3) || [];
        let o = n2.concat(i).concat(s);
        return o.join("|");
      }
      function splitToRanges(t3, e3) {
        let r3 = 1;
        let n2 = 1;
        let s = countNines(t3, r3);
        let i = /* @__PURE__ */ new Set([e3]);
        while (t3 <= s && s <= e3) {
          i.add(s);
          r3 += 1;
          s = countNines(t3, r3);
        }
        s = countZeros(e3 + 1, n2) - 1;
        while (t3 < s && s <= e3) {
          i.add(s);
          n2 += 1;
          s = countZeros(e3 + 1, n2) - 1;
        }
        i = [...i];
        i.sort(compare);
        return i;
      }
      function rangeToPattern(t3, e3, r3) {
        if (t3 === e3) {
          return { pattern: t3, count: [], digits: 0 };
        }
        let n2 = zip(t3, e3);
        let s = n2.length;
        let i = "";
        let o = 0;
        for (let t4 = 0; t4 < s; t4++) {
          let [e4, s2] = n2[t4];
          if (e4 === s2) {
            i += e4;
          } else if (e4 !== "0" || s2 !== "9") {
            i += toCharacterClass(e4, s2, r3);
          } else {
            o++;
          }
        }
        if (o) {
          i += r3.shorthand === true ? "\\d" : "[0-9]";
        }
        return { pattern: i, count: [o], digits: s };
      }
      function splitToPatterns(t3, e3, r3, n2) {
        let s = splitToRanges(t3, e3);
        let i = [];
        let o = t3;
        let a;
        for (let t4 = 0; t4 < s.length; t4++) {
          let e4 = s[t4];
          let u = rangeToPattern(String(o), String(e4), n2);
          let c = "";
          if (!r3.isPadded && a && a.pattern === u.pattern) {
            if (a.count.length > 1) {
              a.count.pop();
            }
            a.count.push(u.count[0]);
            a.string = a.pattern + toQuantifier(a.count);
            o = e4 + 1;
            continue;
          }
          if (r3.isPadded) {
            c = padZeros(e4, r3, n2);
          }
          u.string = c + u.pattern + toQuantifier(u.count);
          i.push(u);
          o = e4 + 1;
          a = u;
        }
        return i;
      }
      function filterPatterns(t3, e3, r3, n2, s) {
        let i = [];
        for (let s2 of t3) {
          let { string: t4 } = s2;
          if (!n2 && !contains(e3, "string", t4)) {
            i.push(r3 + t4);
          }
          if (n2 && contains(e3, "string", t4)) {
            i.push(r3 + t4);
          }
        }
        return i;
      }
      function zip(t3, e3) {
        let r3 = [];
        for (let n2 = 0; n2 < t3.length; n2++)
          r3.push([t3[n2], e3[n2]]);
        return r3;
      }
      function compare(t3, e3) {
        return t3 > e3 ? 1 : e3 > t3 ? -1 : 0;
      }
      function contains(t3, e3, r3) {
        return t3.some((t4) => t4[e3] === r3);
      }
      function countNines(t3, e3) {
        return Number(String(t3).slice(0, -e3) + "9".repeat(e3));
      }
      function countZeros(t3, e3) {
        return t3 - t3 % Math.pow(10, e3);
      }
      function toQuantifier(t3) {
        let [e3 = 0, r3 = ""] = t3;
        if (r3 || e3 > 1) {
          return `{${e3 + (r3 ? "," + r3 : "")}}`;
        }
        return "";
      }
      function toCharacterClass(t3, e3, r3) {
        return `[${t3}${e3 - t3 === 1 ? "" : "-"}${e3}]`;
      }
      function hasPadding(t3) {
        return /^-?(0+)\d/.test(t3);
      }
      function padZeros(t3, e3, r3) {
        if (!e3.isPadded) {
          return t3;
        }
        let n2 = Math.abs(e3.maxLen - String(t3).length);
        let s = r3.relaxZeros !== false;
        switch (n2) {
          case 0:
            return "";
          case 1:
            return s ? "0?" : "0";
          case 2:
            return s ? "0{0,2}" : "00";
          default: {
            return s ? `0{0,${n2}}` : `0{${n2}}`;
          }
        }
      }
      toRegexRange.cache = {};
      toRegexRange.clearCache = () => toRegexRange.cache = {};
      t2.exports = toRegexRange;
    }, 2361: (t2) => {
      "use strict";
      t2.exports = __require("events");
    }, 7147: (t2) => {
      "use strict";
      t2.exports = __require("fs");
    }, 2037: (t2) => {
      "use strict";
      t2.exports = __require("os");
    }, 1017: (t2) => {
      "use strict";
      t2.exports = __require("path");
    }, 2781: (t2) => {
      "use strict";
      t2.exports = __require("stream");
    }, 3837: (t2) => {
      "use strict";
      t2.exports = __require("util");
    } };
    var e = {};
    function __nccwpck_require__(r2) {
      var n = e[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var s = e[r2] = { exports: {} };
      var i = true;
      try {
        t[r2](s, s.exports, __nccwpck_require__);
        i = false;
      } finally {
        if (i)
          delete e[r2];
      }
      return s.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(3924);
    module2.exports = r;
  })();
});
var require_globby = __commonJSMin((exports, module2) => {
  (() => {
    var t = { 337: (t2) => {
      "use strict";
      t2.exports = (...t3) => [...new Set([].concat(...t3))];
    }, 352: (t2, e2, r2) => {
      "use strict";
      const n = r2(17);
      const s = r2(223);
      const getExtensions = (t3) => t3.length > 1 ? `{${t3.join(",")}}` : t3[0];
      const getPath = (t3, e3) => {
        const r3 = t3[0] === "!" ? t3.slice(1) : t3;
        return n.isAbsolute(r3) ? r3 : n.join(e3, r3);
      };
      const addExtensions = (t3, e3) => {
        if (n.extname(t3)) {
          return `**/${t3}`;
        }
        return `**/${t3}.${getExtensions(e3)}`;
      };
      const getGlob = (t3, e3) => {
        if (e3.files && !Array.isArray(e3.files)) {
          throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof e3.files}\``);
        }
        if (e3.extensions && !Array.isArray(e3.extensions)) {
          throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof e3.extensions}\``);
        }
        if (e3.files && e3.extensions) {
          return e3.files.map((r3) => n.posix.join(t3, addExtensions(r3, e3.extensions)));
        }
        if (e3.files) {
          return e3.files.map((e4) => n.posix.join(t3, `**/${e4}`));
        }
        if (e3.extensions) {
          return [n.posix.join(t3, `**/*.${getExtensions(e3.extensions)}`)];
        }
        return [n.posix.join(t3, "**")];
      };
      t2.exports = async (t3, e3) => {
        e3 = { cwd: process.cwd(), ...e3 };
        if (typeof e3.cwd !== "string") {
          throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof e3.cwd}\``);
        }
        const r3 = await Promise.all([].concat(t3).map(async (t4) => {
          const r4 = await s.isDirectory(getPath(t4, e3.cwd));
          return r4 ? getGlob(t4, e3) : t4;
        }));
        return [].concat.apply([], r3);
      };
      t2.exports.sync = (t3, e3) => {
        e3 = { cwd: process.cwd(), ...e3 };
        if (typeof e3.cwd !== "string") {
          throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof e3.cwd}\``);
        }
        const r3 = [].concat(t3).map((t4) => s.isDirectorySync(getPath(t4, e3.cwd)) ? getGlob(t4, e3) : t4);
        return [].concat.apply([], r3);
      };
    }, 153: (t2, e2, r2) => {
      "use strict";
      const { promisify: n } = r2(837);
      const s = r2(147);
      const o = r2(17);
      const i = r2(592);
      const c = r2(302);
      const a = r2(398);
      const p = ["**/node_modules/**", "**/flow-typed/**", "**/coverage/**", "**/.git"];
      const u = n(s.readFile);
      const mapGitIgnorePatternTo = (t3) => (e3) => {
        if (e3.startsWith("!")) {
          return "!" + o.posix.join(t3, e3.slice(1));
        }
        return o.posix.join(t3, e3);
      };
      const parseGitIgnore = (t3, e3) => {
        const r3 = a(o.relative(e3.cwd, o.dirname(e3.fileName)));
        return t3.split(/\r?\n/).filter(Boolean).filter((t4) => !t4.startsWith("#")).map(mapGitIgnorePatternTo(r3));
      };
      const reduceIgnore = (t3) => {
        const e3 = c();
        for (const r3 of t3) {
          e3.add(parseGitIgnore(r3.content, { cwd: r3.cwd, fileName: r3.filePath }));
        }
        return e3;
      };
      const ensureAbsolutePathForCwd = (t3, e3) => {
        t3 = a(t3);
        if (o.isAbsolute(e3)) {
          if (a(e3).startsWith(t3)) {
            return e3;
          }
          throw new Error(`Path ${e3} is not in cwd ${t3}`);
        }
        return o.join(t3, e3);
      };
      const getIsIgnoredPredecate = (t3, e3) => (r3) => t3.ignores(a(o.relative(e3, ensureAbsolutePathForCwd(e3, r3.path || r3))));
      const getFile = async (t3, e3) => {
        const r3 = o.join(e3, t3);
        const n2 = await u(r3, "utf8");
        return { cwd: e3, filePath: r3, content: n2 };
      };
      const getFileSync = (t3, e3) => {
        const r3 = o.join(e3, t3);
        const n2 = s.readFileSync(r3, "utf8");
        return { cwd: e3, filePath: r3, content: n2 };
      };
      const normalizeOptions = ({ ignore: t3 = [], cwd: e3 = a(process.cwd()) } = {}) => ({ ignore: t3, cwd: e3 });
      t2.exports = async (t3) => {
        t3 = normalizeOptions(t3);
        const e3 = await i("**/.gitignore", { ignore: p.concat(t3.ignore), cwd: t3.cwd });
        const r3 = await Promise.all(e3.map((e4) => getFile(e4, t3.cwd)));
        const n2 = reduceIgnore(r3);
        return getIsIgnoredPredecate(n2, t3.cwd);
      };
      t2.exports.sync = (t3) => {
        t3 = normalizeOptions(t3);
        const e3 = i.sync("**/.gitignore", { ignore: p.concat(t3.ignore), cwd: t3.cwd });
        const r3 = e3.map((e4) => getFileSync(e4, t3.cwd));
        const n2 = reduceIgnore(r3);
        return getIsIgnoredPredecate(n2, t3.cwd);
      };
    }, 718: (t2, e2, r2) => {
      "use strict";
      const n = r2(147);
      const s = r2(337);
      const o = r2(382);
      const i = r2(592);
      const c = r2(352);
      const a = r2(153);
      const { FilterStream: p, UniqueStream: u } = r2(546);
      const DEFAULT_FILTER = () => false;
      const isNegative = (t3) => t3[0] === "!";
      const assertPatternsInput = (t3) => {
        if (!t3.every((t4) => typeof t4 === "string")) {
          throw new TypeError("Patterns must be a string or an array of strings");
        }
      };
      const checkCwdOption = (t3 = {}) => {
        if (!t3.cwd) {
          return;
        }
        let e3;
        try {
          e3 = n.statSync(t3.cwd);
        } catch {
          return;
        }
        if (!e3.isDirectory()) {
          throw new Error("The `cwd` option must be a path to a directory");
        }
      };
      const getPathString = (t3) => t3.stats instanceof n.Stats ? t3.path : t3;
      const generateGlobTasks = (t3, e3) => {
        t3 = s([].concat(t3));
        assertPatternsInput(t3);
        checkCwdOption(e3);
        const r3 = [];
        e3 = { ignore: [], expandDirectories: true, ...e3 };
        for (const [n2, s2] of t3.entries()) {
          if (isNegative(s2)) {
            continue;
          }
          const o2 = t3.slice(n2).filter((t4) => isNegative(t4)).map((t4) => t4.slice(1));
          const i2 = { ...e3, ignore: e3.ignore.concat(o2) };
          r3.push({ pattern: s2, options: i2 });
        }
        return r3;
      };
      const globDirs = (t3, e3) => {
        let r3 = {};
        if (t3.options.cwd) {
          r3.cwd = t3.options.cwd;
        }
        if (Array.isArray(t3.options.expandDirectories)) {
          r3 = { ...r3, files: t3.options.expandDirectories };
        } else if (typeof t3.options.expandDirectories === "object") {
          r3 = { ...r3, ...t3.options.expandDirectories };
        }
        return e3(t3.pattern, r3);
      };
      const getPattern = (t3, e3) => t3.options.expandDirectories ? globDirs(t3, e3) : [t3.pattern];
      const getFilterSync = (t3) => t3 && t3.gitignore ? a.sync({ cwd: t3.cwd, ignore: t3.ignore }) : DEFAULT_FILTER;
      const globToTask = (t3) => (e3) => {
        const { options: r3 } = t3;
        if (r3.ignore && Array.isArray(r3.ignore) && r3.expandDirectories) {
          r3.ignore = c.sync(r3.ignore);
        }
        return { pattern: e3, options: r3 };
      };
      t2.exports = async (t3, e3) => {
        const r3 = generateGlobTasks(t3, e3);
        const getFilter = async () => e3 && e3.gitignore ? a({ cwd: e3.cwd, ignore: e3.ignore }) : DEFAULT_FILTER;
        const getTasks = async () => {
          const t4 = await Promise.all(r3.map(async (t5) => {
            const e4 = await getPattern(t5, c);
            return Promise.all(e4.map(globToTask(t5)));
          }));
          return s(...t4);
        };
        const [n2, o2] = await Promise.all([getFilter(), getTasks()]);
        const p2 = await Promise.all(o2.map((t4) => i(t4.pattern, t4.options)));
        return s(...p2).filter((t4) => !n2(getPathString(t4)));
      };
      t2.exports.sync = (t3, e3) => {
        const r3 = generateGlobTasks(t3, e3);
        const n2 = [];
        for (const t4 of r3) {
          const e4 = getPattern(t4, c.sync).map(globToTask(t4));
          n2.push(...e4);
        }
        const o2 = getFilterSync(e3);
        let a2 = [];
        for (const t4 of n2) {
          a2 = s(a2, i.sync(t4.pattern, t4.options));
        }
        return a2.filter((t4) => !o2(t4));
      };
      t2.exports.stream = (t3, e3) => {
        const r3 = generateGlobTasks(t3, e3);
        const n2 = [];
        for (const t4 of r3) {
          const e4 = getPattern(t4, c.sync).map(globToTask(t4));
          n2.push(...e4);
        }
        const s2 = getFilterSync(e3);
        const a2 = new p((t4) => !s2(t4));
        const l = new u();
        return o(n2.map((t4) => i.stream(t4.pattern, t4.options))).pipe(a2).pipe(l);
      };
      t2.exports.generateGlobTasks = generateGlobTasks;
      t2.exports.hasMagic = (t3, e3) => [].concat(t3).some((t4) => i.isDynamicPattern(t4, e3));
      t2.exports.gitignore = a;
    }, 546: (t2, e2, r2) => {
      "use strict";
      const { Transform: n } = r2(781);
      class ObjectTransform extends n {
        constructor() {
          super({ objectMode: true });
        }
      }
      class FilterStream extends ObjectTransform {
        constructor(t3) {
          super();
          this._filter = t3;
        }
        _transform(t3, e3, r3) {
          if (this._filter(t3)) {
            this.push(t3);
          }
          r3();
        }
      }
      class UniqueStream extends ObjectTransform {
        constructor() {
          super();
          this._pushed = /* @__PURE__ */ new Set();
        }
        _transform(t3, e3, r3) {
          if (!this._pushed.has(t3)) {
            this.push(t3);
            this._pushed.add(t3);
          }
          r3();
        }
      }
      t2.exports = { FilterStream, UniqueStream };
    }, 302: (t2) => {
      function makeArray(t3) {
        return Array.isArray(t3) ? t3 : [t3];
      }
      const e2 = "";
      const r2 = " ";
      const n = "\\";
      const s = /^\s+$/;
      const o = /^\\!/;
      const i = /^\\#/;
      const c = /\r?\n/g;
      const a = /^\.*\/|^\.+$/;
      const p = "/";
      const u = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
      const define2 = (t3, e3, r3) => Object.defineProperty(t3, e3, { value: r3 });
      const l = /([0-z])-([0-z])/g;
      const RETURN_FALSE = () => false;
      const sanitizeRange = (t3) => t3.replace(l, (t4, r3, n2) => r3.charCodeAt(0) <= n2.charCodeAt(0) ? t4 : e2);
      const cleanRangeBackSlash = (t3) => {
        const { length: e3 } = t3;
        return t3.slice(0, e3 - e3 % 2);
      };
      const f = [[/\\?\s+$/, (t3) => t3.indexOf("\\") === 0 ? r2 : e2], [/\\\s/g, () => r2], [/[\\$.|*+(){^]/g, (t3) => `\\${t3}`], [/(?!\\)\?/g, () => "[^/]"], [/^\//, () => "^"], [/\//g, () => "\\/"], [/^\^*\\\*\\\*\\\//, () => "^(?:.*\\/)?"], [/^(?=[^^])/, function startingReplacer() {
        return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
      }], [/\\\/\\\*\\\*(?=\\\/|$)/g, (t3, e3, r3) => e3 + 6 < r3.length ? "(?:\\/[^\\/]+)*" : "\\/.+"], [/(^|[^\\]+)\\\*(?=.+)/g, (t3, e3) => `${e3}[^\\/]*`], [/\\\\\\(?=[$.|*+(){^])/g, () => n], [/\\\\/g, () => n], [/(\\)?\[([^\]/]*?)(\\*)($|\])/g, (t3, e3, r3, s2, o2) => e3 === n ? `\\[${r3}${cleanRangeBackSlash(s2)}${o2}` : o2 === "]" ? s2.length % 2 === 0 ? `[${sanitizeRange(r3)}${s2}]` : "[]" : "[]"], [/(?:[^*])$/, (t3) => /\/$/.test(t3) ? `${t3}$` : `${t3}(?=$|\\/$)`], [/(\^|\\\/)?\\\*$/, (t3, e3) => {
        const r3 = e3 ? `${e3}[^/]+` : "[^/]*";
        return `${r3}(?=$|\\/$)`;
      }]];
      const d = /* @__PURE__ */ Object.create(null);
      const makeRegex = (t3, e3) => {
        let r3 = d[t3];
        if (!r3) {
          r3 = f.reduce((e4, r4) => e4.replace(r4[0], r4[1].bind(t3)), t3);
          d[t3] = r3;
        }
        return e3 ? new RegExp(r3, "i") : new RegExp(r3);
      };
      const isString = (t3) => typeof t3 === "string";
      const checkPattern = (t3) => t3 && isString(t3) && !s.test(t3) && t3.indexOf("#") !== 0;
      const splitPattern = (t3) => t3.split(c);
      class IgnoreRule {
        constructor(t3, e3, r3, n2) {
          this.origin = t3;
          this.pattern = e3;
          this.negative = r3;
          this.regex = n2;
        }
      }
      const createRule = (t3, e3) => {
        const r3 = t3;
        let n2 = false;
        if (t3.indexOf("!") === 0) {
          n2 = true;
          t3 = t3.substr(1);
        }
        t3 = t3.replace(o, "!").replace(i, "#");
        const s2 = makeRegex(t3, e3);
        return new IgnoreRule(r3, t3, n2, s2);
      };
      const throwError = (t3, e3) => {
        throw new e3(t3);
      };
      const checkPath = (t3, e3, r3) => {
        if (!isString(t3)) {
          return r3(`path must be a string, but got \`${e3}\``, TypeError);
        }
        if (!t3) {
          return r3(`path must not be empty`, TypeError);
        }
        if (checkPath.isNotRelative(t3)) {
          const t4 = "`path.relative()`d";
          return r3(`path should be a ${t4} string, but got "${e3}"`, RangeError);
        }
        return true;
      };
      const isNotRelative = (t3) => a.test(t3);
      checkPath.isNotRelative = isNotRelative;
      checkPath.convert = (t3) => t3;
      class Ignore {
        constructor({ ignorecase: t3 = true, ignoreCase: e3 = t3, allowRelativePaths: r3 = false } = {}) {
          define2(this, u, true);
          this._rules = [];
          this._ignoreCase = e3;
          this._allowRelativePaths = r3;
          this._initCache();
        }
        _initCache() {
          this._ignoreCache = /* @__PURE__ */ Object.create(null);
          this._testCache = /* @__PURE__ */ Object.create(null);
        }
        _addPattern(t3) {
          if (t3 && t3[u]) {
            this._rules = this._rules.concat(t3._rules);
            this._added = true;
            return;
          }
          if (checkPattern(t3)) {
            const e3 = createRule(t3, this._ignoreCase);
            this._added = true;
            this._rules.push(e3);
          }
        }
        add(t3) {
          this._added = false;
          makeArray(isString(t3) ? splitPattern(t3) : t3).forEach(this._addPattern, this);
          if (this._added) {
            this._initCache();
          }
          return this;
        }
        addPattern(t3) {
          return this.add(t3);
        }
        _testOne(t3, e3) {
          let r3 = false;
          let n2 = false;
          this._rules.forEach((s2) => {
            const { negative: o2 } = s2;
            if (n2 === o2 && r3 !== n2 || o2 && !r3 && !n2 && !e3) {
              return;
            }
            const i2 = s2.regex.test(t3);
            if (i2) {
              r3 = !o2;
              n2 = o2;
            }
          });
          return { ignored: r3, unignored: n2 };
        }
        _test(t3, e3, r3, n2) {
          const s2 = t3 && checkPath.convert(t3);
          checkPath(s2, t3, this._allowRelativePaths ? RETURN_FALSE : throwError);
          return this._t(s2, e3, r3, n2);
        }
        _t(t3, e3, r3, n2) {
          if (t3 in e3) {
            return e3[t3];
          }
          if (!n2) {
            n2 = t3.split(p);
          }
          n2.pop();
          if (!n2.length) {
            return e3[t3] = this._testOne(t3, r3);
          }
          const s2 = this._t(n2.join(p) + p, e3, r3, n2);
          return e3[t3] = s2.ignored ? s2 : this._testOne(t3, r3);
        }
        ignores(t3) {
          return this._test(t3, this._ignoreCache, false).ignored;
        }
        createFilter() {
          return (t3) => !this.ignores(t3);
        }
        filter(t3) {
          return makeArray(t3).filter(this.createFilter());
        }
        test(t3) {
          return this._test(t3, this._testCache, true);
        }
      }
      const factory = (t3) => new Ignore(t3);
      const isPathValid = (t3) => checkPath(t3 && checkPath.convert(t3), t3, RETURN_FALSE);
      factory.isPathValid = isPathValid;
      factory.default = factory;
      t2.exports = factory;
      if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
        const makePosix = (t4) => /^\\\\\?\\/.test(t4) || /["<>|\u0000-\u001F]+/u.test(t4) ? t4 : t4.replace(/\\/g, "/");
        checkPath.convert = makePosix;
        const t3 = /^[a-z]:\//i;
        checkPath.isNotRelative = (e3) => t3.test(e3) || isNotRelative(e3);
      }
    }, 382: (t2, e2, r2) => {
      "use strict";
      const n = r2(781);
      const s = n.PassThrough;
      const o = Array.prototype.slice;
      t2.exports = merge2;
      function merge2() {
        const t3 = [];
        const e3 = o.call(arguments);
        let r3 = false;
        let n2 = e3[e3.length - 1];
        if (n2 && !Array.isArray(n2) && n2.pipe == null) {
          e3.pop();
        } else {
          n2 = {};
        }
        const i = n2.end !== false;
        const c = n2.pipeError === true;
        if (n2.objectMode == null) {
          n2.objectMode = true;
        }
        if (n2.highWaterMark == null) {
          n2.highWaterMark = 64 * 1024;
        }
        const a = s(n2);
        function addStream() {
          for (let e4 = 0, r4 = arguments.length; e4 < r4; e4++) {
            t3.push(pauseStreams(arguments[e4], n2));
          }
          mergeStream();
          return this;
        }
        function mergeStream() {
          if (r3) {
            return;
          }
          r3 = true;
          let e4 = t3.shift();
          if (!e4) {
            process.nextTick(endStream);
            return;
          }
          if (!Array.isArray(e4)) {
            e4 = [e4];
          }
          let n3 = e4.length + 1;
          function next() {
            if (--n3 > 0) {
              return;
            }
            r3 = false;
            mergeStream();
          }
          function pipe(t4) {
            function onend() {
              t4.removeListener("merge2UnpipeEnd", onend);
              t4.removeListener("end", onend);
              if (c) {
                t4.removeListener("error", onerror);
              }
              next();
            }
            function onerror(t5) {
              a.emit("error", t5);
            }
            if (t4._readableState.endEmitted) {
              return next();
            }
            t4.on("merge2UnpipeEnd", onend);
            t4.on("end", onend);
            if (c) {
              t4.on("error", onerror);
            }
            t4.pipe(a, { end: false });
            t4.resume();
          }
          for (let t4 = 0; t4 < e4.length; t4++) {
            pipe(e4[t4]);
          }
          next();
        }
        function endStream() {
          r3 = false;
          a.emit("queueDrain");
          if (i) {
            a.end();
          }
        }
        a.setMaxListeners(0);
        a.add = addStream;
        a.on("unpipe", function(t4) {
          t4.emit("merge2UnpipeEnd");
        });
        if (e3.length) {
          addStream.apply(null, e3);
        }
        return a;
      }
      function pauseStreams(t3, e3) {
        if (!Array.isArray(t3)) {
          if (!t3._readableState && t3.pipe) {
            t3 = t3.pipe(s(e3));
          }
          if (!t3._readableState || !t3.pause || !t3.pipe) {
            throw new Error("Only readable stream can be merged.");
          }
          t3.pause();
        } else {
          for (let r3 = 0, n2 = t3.length; r3 < n2; r3++) {
            t3[r3] = pauseStreams(t3[r3], e3);
          }
        }
        return t3;
      }
    }, 223: (t2, e2, r2) => {
      "use strict";
      const { promisify: n } = r2(837);
      const s = r2(147);
      async function isType(t3, e3, r3) {
        if (typeof r3 !== "string") {
          throw new TypeError(`Expected a string, got ${typeof r3}`);
        }
        try {
          const o = await n(s[t3])(r3);
          return o[e3]();
        } catch (t4) {
          if (t4.code === "ENOENT") {
            return false;
          }
          throw t4;
        }
      }
      function isTypeSync(t3, e3, r3) {
        if (typeof r3 !== "string") {
          throw new TypeError(`Expected a string, got ${typeof r3}`);
        }
        try {
          return s[t3](r3)[e3]();
        } catch (t4) {
          if (t4.code === "ENOENT") {
            return false;
          }
          throw t4;
        }
      }
      e2.isFile = isType.bind(null, "stat", "isFile");
      e2.isDirectory = isType.bind(null, "stat", "isDirectory");
      e2.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
      e2.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
      e2.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
      e2.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
    }, 398: (t2) => {
      "use strict";
      t2.exports = (t3) => {
        const e2 = /^\\\\\?\\/.test(t3);
        const r2 = /[^\u0000-\u0080]+/.test(t3);
        if (e2 || r2) {
          return t3;
        }
        return t3.replace(/\\/g, "/");
      };
    }, 592: (t2) => {
      "use strict";
      t2.exports = require_fast_glob();
    }, 147: (t2) => {
      "use strict";
      t2.exports = __require("fs");
    }, 17: (t2) => {
      "use strict";
      t2.exports = __require("path");
    }, 781: (t2) => {
      "use strict";
      t2.exports = __require("stream");
    }, 837: (t2) => {
      "use strict";
      t2.exports = __require("util");
    } };
    var e = {};
    function __nccwpck_require__(r2) {
      var n = e[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var s = e[r2] = { exports: {} };
      var o = true;
      try {
        t[r2](s, s.exports, __nccwpck_require__);
        o = false;
      } finally {
        if (o)
          delete e[r2];
      }
      return s.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(718);
    module2.exports = r;
  })();
});
var require_address = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var e = { 198: (e2, r2, a2) => {
      var n = a2(37);
      var i = a2(147);
      var t = a2(81);
      var f = "/etc/resolv.conf";
      function getInterfaceName() {
        var e3 = "eth";
        var r3 = n.platform();
        if (r3 === "darwin") {
          e3 = "en";
        } else if (r3 === "win32") {
          e3 = null;
        }
        return e3;
      }
      function getIfconfigCMD() {
        if (n.platform() === "win32") {
          return "ipconfig/all";
        }
        return "/sbin/ifconfig";
      }
      function address(e3, r3) {
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
        }
        var a3 = { ip: address.ip(e3), ipv6: address.ipv6(e3), mac: null };
        address.mac(e3, function(e4, n2) {
          if (n2) {
            a3.mac = n2;
          }
          r3(e4, a3);
        });
      }
      address.interface = function(e3, r3) {
        var a3 = n.networkInterfaces();
        var i2 = !r3;
        r3 = r3 || getInterfaceName();
        e3 = e3 || "IPv4";
        for (var t2 = -1; t2 < 8; t2++) {
          var f2 = r3 + (t2 >= 0 ? t2 : "");
          var s2 = a3[f2];
          if (s2) {
            for (var d2 = 0; d2 < s2.length; d2++) {
              var c2 = s2[d2];
              if (c2.family === e3) {
                return c2;
              }
            }
          }
        }
        if (i2) {
          for (var u2 in a3) {
            var s2 = a3[u2];
            for (var t2 = 0; t2 < s2.length; t2++) {
              var c2 = s2[t2];
              if (c2.family === e3 && c2.address !== "127.0.0.1") {
                return c2;
              }
            }
          }
        }
        return;
      };
      address.ip = function(e3) {
        var r3 = address.interface("IPv4", e3);
        return r3 && r3.address;
      };
      address.ipv6 = function(e3) {
        var r3 = address.interface("IPv6", e3);
        return r3 && r3.address;
      };
      var s = /^(\w+)\:\s+flags=/;
      var d = /^(\w+)\s{2,}link encap:\w+/i;
      var c = address.MAC_RE = /(?:ether|HWaddr)\s+((?:[a-z0-9]{2}\:){5}[a-z0-9]{2})/i;
      var u = address.MAC_IP_RE = /inet\s(?:addr\:)?(\d+\.\d+\.\d+\.\d+)/;
      function getMAC(e3, r3, a3) {
        var n2 = e3.split("\n");
        for (var i2 = 0; i2 < n2.length; i2++) {
          var t2 = n2[i2].trimRight();
          var f2 = s.exec(t2) || d.exec(t2);
          if (!f2) {
            continue;
          }
          var v2 = f2[1];
          if (v2.indexOf(r3) !== 0) {
            continue;
          }
          var o = null;
          var l = null;
          var p = c.exec(t2);
          if (p) {
            l = p[1];
          }
          i2++;
          while (true) {
            t2 = n2[i2];
            if (!t2 || s.exec(t2) || d.exec(t2)) {
              i2--;
              break;
            }
            if (!l) {
              p = c.exec(t2);
              if (p) {
                l = p[1];
              }
            }
            if (!o) {
              p = u.exec(t2);
              if (p) {
                o = p[1];
              }
            }
            i2++;
          }
          if (o === a3) {
            return l;
          }
        }
      }
      address.mac = function(e3, r3) {
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
        }
        e3 = e3 || getInterfaceName();
        var a3 = address.interface("IPv4", e3);
        if (!a3) {
          return r3();
        }
        if (!process.env.CI && (a3.mac === "ff:00:00:00:00:00" || a3.mac === "00:00:00:00:00:00")) {
          a3.mac = "";
        }
        if (a3.mac) {
          return r3(null, a3.mac);
        }
        t.exec(getIfconfigCMD(), { timeout: 5e3 }, function(n2, i2, t2) {
          if (n2 || !i2) {
            return r3(n2);
          }
          var f2 = getMAC(i2 || "", e3, a3.address);
          r3(null, f2);
        });
      };
      var v = /^nameserver\s+(\d+\.\d+\.\d+\.\d+)$/i;
      address.dns = function(e3, r3) {
        if (typeof e3 === "function") {
          r3 = e3;
          e3 = null;
        }
        e3 = e3 || f;
        i.readFile(e3, "utf8", function(e4, a3) {
          if (e4) {
            return r3(e4);
          }
          var n2 = [];
          a3 = a3 || "";
          var i2 = a3.split("\n");
          for (var t2 = 0; t2 < i2.length; t2++) {
            var f2 = i2[t2].trim();
            var s2 = v.exec(f2);
            if (s2) {
              n2.push(s2[1]);
            }
          }
          r3(null, n2);
        });
      };
      e2.exports = address;
    }, 81: (e2) => {
      e2.exports = __require("child_process");
    }, 147: (e2) => {
      e2.exports = __require("fs");
    }, 37: (e2) => {
      e2.exports = __require("os");
    } };
    var r = {};
    function __nccwpck_require__(a2) {
      var n = r[a2];
      if (n !== void 0) {
        return n.exports;
      }
      var i = r[a2] = { exports: {} };
      var t = true;
      try {
        e[a2](i, i.exports, __nccwpck_require__);
        t = false;
      } finally {
        if (t)
          delete r[a2];
      }
      return i.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var a = __nccwpck_require__(198);
    module2.exports = a;
  })();
});
var package_exports = {};
__export(package_exports, {
  author: () => author,
  default: () => package_default,
  license: () => license,
  name: () => name,
  options: () => options,
  version: () => version
});
var name, author, version, license, options, package_default;
var init_package = __esmMin(() => {
  name = "signale";
  author = {
    name: "Klaus Sinani",
    email: "klaussinani@gmail.com",
    url: "https://klaussinani.github.io"
  };
  version = "1.4.0";
  license = "MIT";
  options = {
    "default": {
      displayScope: true,
      displayBadge: true,
      displayDate: false,
      displayFilename: false,
      displayLabel: true,
      displayTimestamp: false,
      underlineLabel: true,
      underlineMessage: false,
      underlinePrefix: false,
      underlineSuffix: false,
      uppercaseLabel: false
    }
  };
  package_default = {
    name,
    author,
    version,
    license,
    options
  };
});
var require_signale = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 305: (e2, t2, r2) => {
      "use strict";
      var n = r2(837);
      var i = r2(589);
      var s = function errorEx(e3, t3) {
        if (!e3 || e3.constructor !== String) {
          t3 = e3 || {};
          e3 = Error.name;
        }
        var r3 = function ErrorEXError(n2) {
          if (!this) {
            return new ErrorEXError(n2);
          }
          n2 = n2 instanceof Error ? n2.message : n2 || this.message;
          Error.call(this, n2);
          Error.captureStackTrace(this, r3);
          this.name = e3;
          Object.defineProperty(this, "message", { configurable: true, enumerable: false, get: function() {
            var e4 = n2.split(/\r?\n/g);
            for (var r4 in t3) {
              if (!t3.hasOwnProperty(r4)) {
                continue;
              }
              var s3 = t3[r4];
              if ("message" in s3) {
                e4 = s3.message(this[r4], e4) || e4;
                if (!i(e4)) {
                  e4 = [e4];
                }
              }
            }
            return e4.join("\n");
          }, set: function(e4) {
            n2 = e4;
          } });
          var s2 = null;
          var o = Object.getOwnPropertyDescriptor(this, "stack");
          var c = o.get;
          var a = o.value;
          delete o.value;
          delete o.writable;
          o.set = function(e4) {
            s2 = e4;
          };
          o.get = function() {
            var e4 = (s2 || (c ? c.call(this) : a)).split(/\r?\n+/g);
            if (!s2) {
              e4[0] = this.name + ": " + this.message;
            }
            var r4 = 1;
            for (var n3 in t3) {
              if (!t3.hasOwnProperty(n3)) {
                continue;
              }
              var i2 = t3[n3];
              if ("line" in i2) {
                var o2 = i2.line(this[n3]);
                if (o2) {
                  e4.splice(r4++, 0, "    " + o2);
                }
              }
              if ("stack" in i2) {
                i2.stack(this[n3], e4);
              }
            }
            return e4.join("\n");
          };
          Object.defineProperty(this, "stack", o);
        };
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(r3.prototype, Error.prototype);
          Object.setPrototypeOf(r3, Error);
        } else {
          n.inherits(r3, Error);
        }
        return r3;
      };
      s.append = function(e3, t3) {
        return { message: function(r3, n2) {
          r3 = r3 || t3;
          if (r3) {
            n2[0] += " " + e3.replace("%s", r3.toString());
          }
          return n2;
        } };
      };
      s.line = function(e3, t3) {
        return { line: function(r3) {
          r3 = r3 || t3;
          if (r3) {
            return e3.replace("%s", r3.toString());
          }
          return null;
        } };
      };
      e2.exports = s;
    }, 434: (e2) => {
      "use strict";
      var t2 = /[|\\{}()[\]^$+*?.]/g;
      e2.exports = function(e3) {
        if (typeof e3 !== "string") {
          throw new TypeError("Expected a string");
        }
        return e3.replace(t2, "\\$&");
      };
    }, 877: (e2, t2, r2) => {
      "use strict";
      const n = r2(434);
      const i = process.platform;
      const s = { tick: "\u2714", cross: "\u2716", star: "\u2605", square: "\u2587", squareSmall: "\u25FB", squareSmallFilled: "\u25FC", play: "\u25B6", circle: "\u25EF", circleFilled: "\u25C9", circleDotted: "\u25CC", circleDouble: "\u25CE", circleCircle: "\u24DE", circleCross: "\u24E7", circlePipe: "\u24BE", circleQuestionMark: "?\u20DD", bullet: "\u25CF", dot: "\u2024", line: "\u2500", ellipsis: "\u2026", pointer: "\u276F", pointerSmall: "\u203A", info: "\u2139", warning: "\u26A0", hamburger: "\u2630", smiley: "\u32E1", mustache: "\u0DF4", heart: "\u2665", arrowUp: "\u2191", arrowDown: "\u2193", arrowLeft: "\u2190", arrowRight: "\u2192", radioOn: "\u25C9", radioOff: "\u25EF", checkboxOn: "\u2612", checkboxOff: "\u2610", checkboxCircleOn: "\u24E7", checkboxCircleOff: "\u24BE", questionMarkPrefix: "?\u20DD", oneHalf: "\xBD", oneThird: "\u2153", oneQuarter: "\xBC", oneFifth: "\u2155", oneSixth: "\u2159", oneSeventh: "\u2150", oneEighth: "\u215B", oneNinth: "\u2151", oneTenth: "\u2152", twoThirds: "\u2154", twoFifths: "\u2156", threeQuarters: "\xBE", threeFifths: "\u2157", threeEighths: "\u215C", fourFifths: "\u2158", fiveSixths: "\u215A", fiveEighths: "\u215D", sevenEighths: "\u215E" };
      const o = { tick: "\u221A", cross: "\xD7", star: "*", square: "\u2588", squareSmall: "[ ]", squareSmallFilled: "[\u2588]", play: "\u25BA", circle: "( )", circleFilled: "(*)", circleDotted: "( )", circleDouble: "( )", circleCircle: "(\u25CB)", circleCross: "(\xD7)", circlePipe: "(\u2502)", circleQuestionMark: "(?)", bullet: "*", dot: ".", line: "\u2500", ellipsis: "...", pointer: ">", pointerSmall: "\xBB", info: "i", warning: "\u203C", hamburger: "\u2261", smiley: "\u263A", mustache: "\u250C\u2500\u2510", heart: s.heart, arrowUp: s.arrowUp, arrowDown: s.arrowDown, arrowLeft: s.arrowLeft, arrowRight: s.arrowRight, radioOn: "(*)", radioOff: "( )", checkboxOn: "[\xD7]", checkboxOff: "[ ]", checkboxCircleOn: "(\xD7)", checkboxCircleOff: "( )", questionMarkPrefix: "\uFF1F", oneHalf: "1/2", oneThird: "1/3", oneQuarter: "1/4", oneFifth: "1/5", oneSixth: "1/6", oneSeventh: "1/7", oneEighth: "1/8", oneNinth: "1/9", oneTenth: "1/10", twoThirds: "2/3", twoFifths: "2/5", threeQuarters: "3/4", threeFifths: "3/5", threeEighths: "3/8", fourFifths: "4/5", fiveSixths: "5/6", fiveEighths: "5/8", sevenEighths: "7/8" };
      if (i === "linux") {
        s.questionMarkPrefix = "?";
      }
      const c = i === "win32" ? o : s;
      const fn = (e3) => {
        if (c === s) {
          return e3;
        }
        Object.keys(s).forEach((t3) => {
          if (s[t3] === c[t3]) {
            return;
          }
          e3 = e3.replace(new RegExp(n(s[t3]), "g"), c[t3]);
        });
        return e3;
      };
      e2.exports = Object.assign(fn, c);
    }, 834: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      const i = r2(69);
      e2.exports = (e3, t3) => {
        t3 = t3 || {};
        const r3 = n.resolve(t3.cwd || "");
        const s = n.parse(r3).root;
        const o = [].concat(e3);
        return new Promise((e4) => {
          (function find2(t4) {
            i(o, { cwd: t4 }).then((r4) => {
              if (r4) {
                e4(n.join(t4, r4));
              } else if (t4 === s) {
                e4(null);
              } else {
                find2(n.dirname(t4));
              }
            });
          })(r3);
        });
      };
      e2.exports.sync = (e3, t3) => {
        t3 = t3 || {};
        let r3 = n.resolve(t3.cwd || "");
        const s = n.parse(r3).root;
        const o = [].concat(e3);
        while (true) {
          const e4 = i.sync(o, { cwd: r3 });
          if (e4) {
            return n.join(r3, e4);
          } else if (r3 === s) {
            return null;
          }
          r3 = n.dirname(r3);
        }
      };
    }, 132: (e2) => {
      "use strict";
      e2.exports = clone2;
      var t2 = Object.getPrototypeOf || function(e3) {
        return e3.__proto__;
      };
      function clone2(e3) {
        if (e3 === null || typeof e3 !== "object")
          return e3;
        if (e3 instanceof Object)
          var r2 = { __proto__: t2(e3) };
        else
          var r2 = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(e3).forEach(function(t3) {
          Object.defineProperty(r2, t3, Object.getOwnPropertyDescriptor(e3, t3));
        });
        return r2;
      }
    }, 127: (e2, t2, r2) => {
      var n = r2(147);
      var i = r2(738);
      var s = r2(876);
      var o = r2(132);
      var c = r2(837);
      var a;
      var l;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        a = Symbol.for("graceful-fs.queue");
        l = Symbol.for("graceful-fs.previous");
      } else {
        a = "___graceful-fs.queue";
        l = "___graceful-fs.previous";
      }
      function noop() {
      }
      function publishQueue(e3, t3) {
        Object.defineProperty(e3, a, { get: function() {
          return t3;
        } });
      }
      var f = noop;
      if (c.debuglog)
        f = c.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        f = function() {
          var e3 = c.format.apply(c, arguments);
          e3 = "GFS4: " + e3.split(/\n/).join("\nGFS4: ");
          console.error(e3);
        };
      if (!n[a]) {
        var u = global[a] || [];
        publishQueue(n, u);
        n.close = function(e3) {
          function close(t3, r3) {
            return e3.call(n, t3, function(e4) {
              if (!e4) {
                resetQueue();
              }
              if (typeof r3 === "function")
                r3.apply(this, arguments);
            });
          }
          Object.defineProperty(close, l, { value: e3 });
          return close;
        }(n.close);
        n.closeSync = function(e3) {
          function closeSync(t3) {
            e3.apply(n, arguments);
            resetQueue();
          }
          Object.defineProperty(closeSync, l, { value: e3 });
          return closeSync;
        }(n.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function() {
            f(n[a]);
            r2(491).equal(n[a].length, 0);
          });
        }
      }
      if (!global[a]) {
        publishQueue(global, n[a]);
      }
      e2.exports = patch(o(n));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !n.__patched) {
        e2.exports = patch(n);
        n.__patched = true;
      }
      function patch(e3) {
        i(e3);
        e3.gracefulify = patch;
        e3.createReadStream = createReadStream;
        e3.createWriteStream = createWriteStream;
        var t3 = e3.readFile;
        e3.readFile = readFile2;
        function readFile2(e4, r4, n3) {
          if (typeof r4 === "function")
            n3 = r4, r4 = null;
          return go$readFile(e4, r4, n3);
          function go$readFile(e5, r5, n4, i2) {
            return t3(e5, r5, function(t4) {
              if (t4 && (t4.code === "EMFILE" || t4.code === "ENFILE"))
                enqueue([go$readFile, [e5, r5, n4], t4, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        var r3 = e3.writeFile;
        e3.writeFile = writeFile;
        function writeFile(e4, t4, n3, i2) {
          if (typeof n3 === "function")
            i2 = n3, n3 = null;
          return go$writeFile(e4, t4, n3, i2);
          function go$writeFile(e5, t5, n4, i3, s2) {
            return r3(e5, t5, n4, function(r4) {
              if (r4 && (r4.code === "EMFILE" || r4.code === "ENFILE"))
                enqueue([go$writeFile, [e5, t5, n4, i3], r4, s2 || Date.now(), Date.now()]);
              else {
                if (typeof i3 === "function")
                  i3.apply(this, arguments);
              }
            });
          }
        }
        var n2 = e3.appendFile;
        if (n2)
          e3.appendFile = appendFile;
        function appendFile(e4, t4, r4, i2) {
          if (typeof r4 === "function")
            i2 = r4, r4 = null;
          return go$appendFile(e4, t4, r4, i2);
          function go$appendFile(e5, t5, r5, i3, s2) {
            return n2(e5, t5, r5, function(n3) {
              if (n3 && (n3.code === "EMFILE" || n3.code === "ENFILE"))
                enqueue([go$appendFile, [e5, t5, r5, i3], n3, s2 || Date.now(), Date.now()]);
              else {
                if (typeof i3 === "function")
                  i3.apply(this, arguments);
              }
            });
          }
        }
        var o2 = e3.copyFile;
        if (o2)
          e3.copyFile = copyFile;
        function copyFile(e4, t4, r4, n3) {
          if (typeof r4 === "function") {
            n3 = r4;
            r4 = 0;
          }
          return go$copyFile(e4, t4, r4, n3);
          function go$copyFile(e5, t5, r5, n4, i2) {
            return o2(e5, t5, r5, function(s2) {
              if (s2 && (s2.code === "EMFILE" || s2.code === "ENFILE"))
                enqueue([go$copyFile, [e5, t5, r5, n4], s2, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        var c2 = e3.readdir;
        e3.readdir = readdir;
        var a2 = /^v[0-5]\./;
        function readdir(e4, t4, r4) {
          if (typeof t4 === "function")
            r4 = t4, t4 = null;
          var n3 = a2.test(process.version) ? function go$readdir(e5, t5, r5, n4) {
            return c2(e5, fs$readdirCallback(e5, t5, r5, n4));
          } : function go$readdir(e5, t5, r5, n4) {
            return c2(e5, t5, fs$readdirCallback(e5, t5, r5, n4));
          };
          return n3(e4, t4, r4);
          function fs$readdirCallback(e5, t5, r5, i2) {
            return function(s2, o3) {
              if (s2 && (s2.code === "EMFILE" || s2.code === "ENFILE"))
                enqueue([n3, [e5, t5, r5], s2, i2 || Date.now(), Date.now()]);
              else {
                if (o3 && o3.sort)
                  o3.sort();
                if (typeof r5 === "function")
                  r5.call(this, s2, o3);
              }
            };
          }
        }
        if (process.version.substr(0, 4) === "v0.8") {
          var l2 = s(e3);
          ReadStream = l2.ReadStream;
          WriteStream = l2.WriteStream;
        }
        var f2 = e3.ReadStream;
        if (f2) {
          ReadStream.prototype = Object.create(f2.prototype);
          ReadStream.prototype.open = ReadStream$open;
        }
        var u2 = e3.WriteStream;
        if (u2) {
          WriteStream.prototype = Object.create(u2.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(e3, "ReadStream", { get: function() {
          return ReadStream;
        }, set: function(e4) {
          ReadStream = e4;
        }, enumerable: true, configurable: true });
        Object.defineProperty(e3, "WriteStream", { get: function() {
          return WriteStream;
        }, set: function(e4) {
          WriteStream = e4;
        }, enumerable: true, configurable: true });
        var h2 = ReadStream;
        Object.defineProperty(e3, "FileReadStream", { get: function() {
          return h2;
        }, set: function(e4) {
          h2 = e4;
        }, enumerable: true, configurable: true });
        var p = WriteStream;
        Object.defineProperty(e3, "FileWriteStream", { get: function() {
          return p;
        }, set: function(e4) {
          p = e4;
        }, enumerable: true, configurable: true });
        function ReadStream(e4, t4) {
          if (this instanceof ReadStream)
            return f2.apply(this, arguments), this;
          else
            return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
        }
        function ReadStream$open() {
          var e4 = this;
          open(e4.path, e4.flags, e4.mode, function(t4, r4) {
            if (t4) {
              if (e4.autoClose)
                e4.destroy();
              e4.emit("error", t4);
            } else {
              e4.fd = r4;
              e4.emit("open", r4);
              e4.read();
            }
          });
        }
        function WriteStream(e4, t4) {
          if (this instanceof WriteStream)
            return u2.apply(this, arguments), this;
          else
            return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
        }
        function WriteStream$open() {
          var e4 = this;
          open(e4.path, e4.flags, e4.mode, function(t4, r4) {
            if (t4) {
              e4.destroy();
              e4.emit("error", t4);
            } else {
              e4.fd = r4;
              e4.emit("open", r4);
            }
          });
        }
        function createReadStream(t4, r4) {
          return new e3.ReadStream(t4, r4);
        }
        function createWriteStream(t4, r4) {
          return new e3.WriteStream(t4, r4);
        }
        var d = e3.open;
        e3.open = open;
        function open(e4, t4, r4, n3) {
          if (typeof r4 === "function")
            n3 = r4, r4 = null;
          return go$open(e4, t4, r4, n3);
          function go$open(e5, t5, r5, n4, i2) {
            return d(e5, t5, r5, function(s2, o3) {
              if (s2 && (s2.code === "EMFILE" || s2.code === "ENFILE"))
                enqueue([go$open, [e5, t5, r5, n4], s2, i2 || Date.now(), Date.now()]);
              else {
                if (typeof n4 === "function")
                  n4.apply(this, arguments);
              }
            });
          }
        }
        return e3;
      }
      function enqueue(e3) {
        f("ENQUEUE", e3[0].name, e3[1]);
        n[a].push(e3);
        retry();
      }
      var h;
      function resetQueue() {
        var e3 = Date.now();
        for (var t3 = 0; t3 < n[a].length; ++t3) {
          if (n[a][t3].length > 2) {
            n[a][t3][3] = e3;
            n[a][t3][4] = e3;
          }
        }
        retry();
      }
      function retry() {
        clearTimeout(h);
        h = void 0;
        if (n[a].length === 0)
          return;
        var e3 = n[a].shift();
        var t3 = e3[0];
        var r3 = e3[1];
        var i2 = e3[2];
        var s2 = e3[3];
        var o2 = e3[4];
        if (s2 === void 0) {
          f("RETRY", t3.name, r3);
          t3.apply(null, r3);
        } else if (Date.now() - s2 >= 6e4) {
          f("TIMEOUT", t3.name, r3);
          var c2 = r3.pop();
          if (typeof c2 === "function")
            c2.call(null, i2);
        } else {
          var l2 = Date.now() - o2;
          var u2 = Math.max(o2 - s2, 1);
          var p = Math.min(u2 * 1.2, 100);
          if (l2 >= p) {
            f("RETRY", t3.name, r3);
            t3.apply(null, r3.concat([s2]));
          } else {
            n[a].push(e3);
          }
        }
        if (h === void 0) {
          h = setTimeout(retry, 0);
        }
      }
    }, 876: (e2, t2, r2) => {
      var n = r2(781).Stream;
      e2.exports = legacy;
      function legacy(e3) {
        return { ReadStream, WriteStream };
        function ReadStream(t3, r3) {
          if (!(this instanceof ReadStream))
            return new ReadStream(t3, r3);
          n.call(this);
          var i = this;
          this.path = t3;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          r3 = r3 || {};
          var s = Object.keys(r3);
          for (var o = 0, c = s.length; o < c; o++) {
            var a = s[o];
            this[a] = r3[a];
          }
          if (this.encoding)
            this.setEncoding(this.encoding);
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.end === void 0) {
              this.end = Infinity;
            } else if (typeof this.end !== "number") {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function() {
              i._read();
            });
            return;
          }
          e3.open(this.path, this.flags, this.mode, function(e4, t4) {
            if (e4) {
              i.emit("error", e4);
              i.readable = false;
              return;
            }
            i.fd = t4;
            i.emit("open", t4);
            i._read();
          });
        }
        function WriteStream(t3, r3) {
          if (!(this instanceof WriteStream))
            return new WriteStream(t3, r3);
          n.call(this);
          this.path = t3;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          r3 = r3 || {};
          var i = Object.keys(r3);
          for (var s = 0, o = i.length; s < o; s++) {
            var c = i[s];
            this[c] = r3[c];
          }
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = e3.open;
            this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
            this.flush();
          }
        }
      }
    }, 738: (e2, t2, r2) => {
      var n = r2(57);
      var i = process.cwd;
      var s = null;
      var o = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function() {
        if (!s)
          s = i.call(process);
        return s;
      };
      try {
        process.cwd();
      } catch (e3) {
      }
      if (typeof process.chdir === "function") {
        var c = process.chdir;
        process.chdir = function(e3) {
          s = null;
          c.call(process, e3);
        };
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(process.chdir, c);
      }
      e2.exports = patch;
      function patch(e3) {
        if (n.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
          patchLchmod(e3);
        }
        if (!e3.lutimes) {
          patchLutimes(e3);
        }
        e3.chown = chownFix(e3.chown);
        e3.fchown = chownFix(e3.fchown);
        e3.lchown = chownFix(e3.lchown);
        e3.chmod = chmodFix(e3.chmod);
        e3.fchmod = chmodFix(e3.fchmod);
        e3.lchmod = chmodFix(e3.lchmod);
        e3.chownSync = chownFixSync(e3.chownSync);
        e3.fchownSync = chownFixSync(e3.fchownSync);
        e3.lchownSync = chownFixSync(e3.lchownSync);
        e3.chmodSync = chmodFixSync(e3.chmodSync);
        e3.fchmodSync = chmodFixSync(e3.fchmodSync);
        e3.lchmodSync = chmodFixSync(e3.lchmodSync);
        e3.stat = statFix(e3.stat);
        e3.fstat = statFix(e3.fstat);
        e3.lstat = statFix(e3.lstat);
        e3.statSync = statFixSync(e3.statSync);
        e3.fstatSync = statFixSync(e3.fstatSync);
        e3.lstatSync = statFixSync(e3.lstatSync);
        if (e3.chmod && !e3.lchmod) {
          e3.lchmod = function(e4, t3, r3) {
            if (r3)
              process.nextTick(r3);
          };
          e3.lchmodSync = function() {
          };
        }
        if (e3.chown && !e3.lchown) {
          e3.lchown = function(e4, t3, r3, n2) {
            if (n2)
              process.nextTick(n2);
          };
          e3.lchownSync = function() {
          };
        }
        if (o === "win32") {
          e3.rename = typeof e3.rename !== "function" ? e3.rename : function(t3) {
            function rename(r3, n2, i2) {
              var s2 = Date.now();
              var o2 = 0;
              t3(r3, n2, function CB(c2) {
                if (c2 && (c2.code === "EACCES" || c2.code === "EPERM") && Date.now() - s2 < 6e4) {
                  setTimeout(function() {
                    e3.stat(n2, function(e4, s3) {
                      if (e4 && e4.code === "ENOENT")
                        t3(r3, n2, CB);
                      else
                        i2(c2);
                    });
                  }, o2);
                  if (o2 < 100)
                    o2 += 10;
                  return;
                }
                if (i2)
                  i2(c2);
              });
            }
            if (Object.setPrototypeOf)
              Object.setPrototypeOf(rename, t3);
            return rename;
          }(e3.rename);
        }
        e3.read = typeof e3.read !== "function" ? e3.read : function(t3) {
          function read2(r3, n2, i2, s2, o2, c2) {
            var a;
            if (c2 && typeof c2 === "function") {
              var l = 0;
              a = function(f, u, h) {
                if (f && f.code === "EAGAIN" && l < 10) {
                  l++;
                  return t3.call(e3, r3, n2, i2, s2, o2, a);
                }
                c2.apply(this, arguments);
              };
            }
            return t3.call(e3, r3, n2, i2, s2, o2, a);
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(read2, t3);
          return read2;
        }(e3.read);
        e3.readSync = typeof e3.readSync !== "function" ? e3.readSync : function(t3) {
          return function(r3, n2, i2, s2, o2) {
            var c2 = 0;
            while (true) {
              try {
                return t3.call(e3, r3, n2, i2, s2, o2);
              } catch (e4) {
                if (e4.code === "EAGAIN" && c2 < 10) {
                  c2++;
                  continue;
                }
                throw e4;
              }
            }
          };
        }(e3.readSync);
        function patchLchmod(e4) {
          e4.lchmod = function(t3, r3, i2) {
            e4.open(t3, n.O_WRONLY | n.O_SYMLINK, r3, function(t4, n2) {
              if (t4) {
                if (i2)
                  i2(t4);
                return;
              }
              e4.fchmod(n2, r3, function(t5) {
                e4.close(n2, function(e5) {
                  if (i2)
                    i2(t5 || e5);
                });
              });
            });
          };
          e4.lchmodSync = function(t3, r3) {
            var i2 = e4.openSync(t3, n.O_WRONLY | n.O_SYMLINK, r3);
            var s2 = true;
            var o2;
            try {
              o2 = e4.fchmodSync(i2, r3);
              s2 = false;
            } finally {
              if (s2) {
                try {
                  e4.closeSync(i2);
                } catch (e5) {
                }
              } else {
                e4.closeSync(i2);
              }
            }
            return o2;
          };
        }
        function patchLutimes(e4) {
          if (n.hasOwnProperty("O_SYMLINK") && e4.futimes) {
            e4.lutimes = function(t3, r3, i2, s2) {
              e4.open(t3, n.O_SYMLINK, function(t4, n2) {
                if (t4) {
                  if (s2)
                    s2(t4);
                  return;
                }
                e4.futimes(n2, r3, i2, function(t5) {
                  e4.close(n2, function(e5) {
                    if (s2)
                      s2(t5 || e5);
                  });
                });
              });
            };
            e4.lutimesSync = function(t3, r3, i2) {
              var s2 = e4.openSync(t3, n.O_SYMLINK);
              var o2;
              var c2 = true;
              try {
                o2 = e4.futimesSync(s2, r3, i2);
                c2 = false;
              } finally {
                if (c2) {
                  try {
                    e4.closeSync(s2);
                  } catch (e5) {
                  }
                } else {
                  e4.closeSync(s2);
                }
              }
              return o2;
            };
          } else if (e4.futimes) {
            e4.lutimes = function(e5, t3, r3, n2) {
              if (n2)
                process.nextTick(n2);
            };
            e4.lutimesSync = function() {
            };
          }
        }
        function chmodFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            return t3.call(e3, r3, n2, function(e4) {
              if (chownErOk(e4))
                e4 = null;
              if (i2)
                i2.apply(this, arguments);
            });
          };
        }
        function chmodFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2) {
            try {
              return t3.call(e3, r3, n2);
            } catch (e4) {
              if (!chownErOk(e4))
                throw e4;
            }
          };
        }
        function chownFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2, s2) {
            return t3.call(e3, r3, n2, i2, function(e4) {
              if (chownErOk(e4))
                e4 = null;
              if (s2)
                s2.apply(this, arguments);
            });
          };
        }
        function chownFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            try {
              return t3.call(e3, r3, n2, i2);
            } catch (e4) {
              if (!chownErOk(e4))
                throw e4;
            }
          };
        }
        function statFix(t3) {
          if (!t3)
            return t3;
          return function(r3, n2, i2) {
            if (typeof n2 === "function") {
              i2 = n2;
              n2 = null;
            }
            function callback(e4, t4) {
              if (t4) {
                if (t4.uid < 0)
                  t4.uid += 4294967296;
                if (t4.gid < 0)
                  t4.gid += 4294967296;
              }
              if (i2)
                i2.apply(this, arguments);
            }
            return n2 ? t3.call(e3, r3, n2, callback) : t3.call(e3, r3, callback);
          };
        }
        function statFixSync(t3) {
          if (!t3)
            return t3;
          return function(r3, n2) {
            var i2 = n2 ? t3.call(e3, r3, n2) : t3.call(e3, r3);
            if (i2) {
              if (i2.uid < 0)
                i2.uid += 4294967296;
              if (i2.gid < 0)
                i2.gid += 4294967296;
            }
            return i2;
          };
        }
        function chownErOk(e4) {
          if (!e4)
            return true;
          if (e4.code === "ENOSYS")
            return true;
          var t3 = !process.getuid || process.getuid() !== 0;
          if (t3) {
            if (e4.code === "EINVAL" || e4.code === "EPERM")
              return true;
          }
          return false;
        }
      }
    }, 589: (e2) => {
      "use strict";
      e2.exports = function isArrayish(e3) {
        if (!e3) {
          return false;
        }
        return e3 instanceof Array || Array.isArray(e3) || e3.length >= 0 && e3.splice instanceof Function;
      };
    }, 9: (e2) => {
      "use strict";
      e2.exports = parseJson;
      function parseJson(e3, t2, r2) {
        r2 = r2 || 20;
        try {
          return JSON.parse(e3, t2);
        } catch (t3) {
          if (typeof e3 !== "string") {
            const t4 = Array.isArray(e3) && e3.length === 0;
            const r3 = "Cannot parse " + (t4 ? "an empty array" : String(e3));
            throw new TypeError(r3);
          }
          const n = t3.message.match(/^Unexpected token.*position\s+(\d+)/i);
          const i = n ? +n[1] : t3.message.match(/^Unexpected end of JSON.*/i) ? e3.length - 1 : null;
          if (i != null) {
            const n2 = i <= r2 ? 0 : i - r2;
            const s = i + r2 >= e3.length ? e3.length : i + r2;
            t3.message += ` while parsing near '${n2 === 0 ? "" : "..."}${e3.slice(n2, s)}${s === e3.length ? "" : "..."}'`;
          } else {
            t3.message += ` while parsing '${e3.slice(0, r2 * 2)}'`;
          }
          throw t3;
        }
      }
    }, 324: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      const i = r2(127);
      const s = r2(308);
      const o = r2(264);
      const c = r2(119);
      const parse4 = (e3, t3) => o(s(e3), n.relative(".", t3));
      e2.exports = (e3) => c(i.readFile)(e3, "utf8").then((t3) => parse4(t3, e3));
      e2.exports.sync = (e3) => parse4(i.readFileSync(e3, "utf8"), e3);
    }, 69: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      const i = r2(383);
      const s = r2(367);
      e2.exports = (e3, t3) => {
        t3 = Object.assign({ cwd: process.cwd() }, t3);
        return s(e3, (e4) => i(n.resolve(t3.cwd, e4)), t3);
      };
      e2.exports.sync = (e3, t3) => {
        t3 = Object.assign({ cwd: process.cwd() }, t3);
        for (const r3 of e3) {
          if (i.sync(n.resolve(t3.cwd, r3))) {
            return r3;
          }
        }
      };
    }, 273: (e2, t2, r2) => {
      "use strict";
      const n = r2(965);
      e2.exports = (e3) => {
        if (e3 < 1) {
          throw new TypeError("Expected `concurrency` to be a number from 1 and up");
        }
        const t3 = [];
        let r3 = 0;
        const next = () => {
          r3--;
          if (t3.length > 0) {
            t3.shift()();
          }
        };
        return (i) => new Promise((s, o) => {
          const run = () => {
            r3++;
            n(i).then((e4) => {
              s(e4);
              next();
            }, (e4) => {
              o(e4);
              next();
            });
          };
          if (r3 < e3) {
            run();
          } else {
            t3.push(run);
          }
        });
      };
    }, 367: (e2, t2, r2) => {
      "use strict";
      const n = r2(273);
      class EndError extends Error {
        constructor(e3) {
          super();
          this.value = e3;
        }
      }
      const finder = (e3) => Promise.all(e3).then((e4) => e4[1] === true && Promise.reject(new EndError(e4[0])));
      e2.exports = (e3, t3, r3) => {
        r3 = Object.assign({ concurrency: Infinity, preserveOrder: true }, r3);
        const i = n(r3.concurrency);
        const s = Array.from(e3).map((e4) => [e4, i(() => Promise.resolve(e4).then(t3))]);
        const o = n(r3.preserveOrder ? 1 : Infinity);
        return Promise.all(s.map((e4) => o(() => finder(e4)))).then(() => {
        }).catch((e4) => e4 instanceof EndError ? e4.value : Promise.reject(e4));
      };
    }, 965: (e2) => {
      "use strict";
      e2.exports = (e3) => new Promise((t2) => {
        t2(e3());
      });
    }, 264: (e2, t2, r2) => {
      "use strict";
      const n = r2(305);
      const i = r2(9);
      const s = n("JSONError", { fileName: n.append("in %s") });
      e2.exports = (e3, t3, r3) => {
        if (typeof t3 === "string") {
          r3 = t3;
          t3 = null;
        }
        try {
          try {
            return JSON.parse(e3, t3);
          } catch (r4) {
            i(e3, t3);
            throw r4;
          }
        } catch (e4) {
          e4.message = e4.message.replace(/\n/g, "");
          const t4 = new s(e4);
          if (r3) {
            t4.fileName = r3;
          }
          throw t4;
        }
      };
    }, 383: (e2, t2, r2) => {
      "use strict";
      const n = r2(147);
      e2.exports = (e3) => new Promise((t3) => {
        n.access(e3, (e4) => {
          t3(!e4);
        });
      });
      e2.exports.sync = (e3) => {
        try {
          n.accessSync(e3);
          return true;
        } catch (e4) {
          return false;
        }
      };
    }, 119: (e2) => {
      "use strict";
      const processFn = (e3, t2) => function() {
        const r2 = t2.promiseModule;
        const n = new Array(arguments.length);
        for (let e4 = 0; e4 < arguments.length; e4++) {
          n[e4] = arguments[e4];
        }
        return new r2((r3, i) => {
          if (t2.errorFirst) {
            n.push(function(e4, n2) {
              if (t2.multiArgs) {
                const t3 = new Array(arguments.length - 1);
                for (let e5 = 1; e5 < arguments.length; e5++) {
                  t3[e5 - 1] = arguments[e5];
                }
                if (e4) {
                  t3.unshift(e4);
                  i(t3);
                } else {
                  r3(t3);
                }
              } else if (e4) {
                i(e4);
              } else {
                r3(n2);
              }
            });
          } else {
            n.push(function(e4) {
              if (t2.multiArgs) {
                const e5 = new Array(arguments.length - 1);
                for (let t3 = 0; t3 < arguments.length; t3++) {
                  e5[t3] = arguments[t3];
                }
                r3(e5);
              } else {
                r3(e4);
              }
            });
          }
          e3.apply(this, n);
        });
      };
      e2.exports = (e3, t2) => {
        t2 = Object.assign({ exclude: [/.+(Sync|Stream)$/], errorFirst: true, promiseModule: Promise }, t2);
        const filter = (e4) => {
          const match = (t3) => typeof t3 === "string" ? e4 === t3 : t3.test(e4);
          return t2.include ? t2.include.some(match) : !t2.exclude.some(match);
        };
        let r2;
        if (typeof e3 === "function") {
          r2 = function() {
            if (t2.excludeMain) {
              return e3.apply(this, arguments);
            }
            return processFn(e3, t2).apply(this, arguments);
          };
        } else {
          r2 = Object.create(Object.getPrototypeOf(e3));
        }
        for (const n in e3) {
          const i = e3[n];
          r2[n] = typeof i === "function" && filter(n) ? processFn(i, t2) : i;
        }
        return r2;
      };
    }, 817: (e2, t2, r2) => {
      "use strict";
      const n = r2(17);
      const i = r2(834);
      const s = r2(324);
      const o = /* @__PURE__ */ new WeakMap();
      const filepath = (e3) => o.get(e3);
      const findNextCwd = (e3) => n.resolve(n.dirname(e3), "..");
      const addFp = (e3, t3) => {
        o.set(e3, t3);
        return e3;
      };
      const pkgConf = (e3, t3) => {
        if (!e3) {
          return Promise.reject(new TypeError("Expected a namespace"));
        }
        t3 = t3 || {};
        return i("package.json", t3.cwd ? { cwd: t3.cwd } : {}).then((r3) => {
          if (!r3) {
            return addFp(Object.assign({}, t3.defaults), r3);
          }
          return s(r3).then((n2) => {
            if (t3.skipOnFalse && n2[e3] === false) {
              const n3 = Object.assign({}, t3, { cwd: findNextCwd(r3) });
              return pkgConf(e3, n3);
            }
            return addFp(Object.assign({}, t3.defaults, n2[e3]), r3);
          });
        });
      };
      const sync2 = (e3, t3) => {
        if (!e3) {
          throw new TypeError("Expected a namespace");
        }
        t3 = t3 || {};
        const r3 = i.sync("package.json", t3.cwd ? { cwd: t3.cwd } : {});
        if (!r3) {
          return addFp(Object.assign({}, t3.defaults), r3);
        }
        const n2 = s.sync(r3);
        if (t3.skipOnFalse && n2[e3] === false) {
          const n3 = Object.assign({}, t3, { cwd: findNextCwd(r3) });
          return sync2(e3, n3);
        }
        return addFp(Object.assign({}, t3.defaults, n2[e3]), r3);
      };
      e2.exports = pkgConf;
      e2.exports.filepath = filepath;
      e2.exports.sync = sync2;
    }, 567: (e2, t2, r2) => {
      "use strict";
      const n = r2(852);
      e2.exports = Object.assign(new n(), { Signale: n });
    }, 852: (e2, t2, r2) => {
      "use strict";
      const n = r2(837);
      const i = r2(17);
      const s = r2(521);
      const o = r2(234);
      const c = r2(877);
      const a = r2(817);
      const l = r2(684);
      const f = r2(616);
      const { green: u, grey: h, red: p, underline: d, yellow: g } = o;
      let m = false;
      const y = l.options.default;
      const b = l.name;
      class Signale {
        constructor(e3 = {}) {
          this._interactive = e3.interactive || false;
          this._config = Object.assign(this.packageConfiguration, e3.config);
          this._customTypes = Object.assign({}, e3.types);
          this._disabled = e3.disabled || false;
          this._scopeName = e3.scope || "";
          this._timers = e3.timers || /* @__PURE__ */ new Map();
          this._types = this._mergeTypes(f, this._customTypes);
          this._stream = e3.stream || process.stdout;
          this._longestLabel = this._getLongestLabel();
          this._secrets = e3.secrets || [];
          this._generalLogLevel = this._validateLogLevel(e3.logLevel);
          Object.keys(this._types).forEach((e4) => {
            this[e4] = this._logger.bind(this, e4);
          });
        }
        get _now() {
          return Date.now();
        }
        get scopeName() {
          return this._scopeName;
        }
        get currentOptions() {
          return Object.assign({}, { config: this._config, disabled: this._disabled, types: this._customTypes, interactive: this._interactive, timers: this._timers, stream: this._stream, secrets: this._secrets, logLevel: this._generalLogLevel });
        }
        get date() {
          return new Date().toLocaleDateString();
        }
        get timestamp() {
          return new Date().toLocaleTimeString();
        }
        get filename() {
          const e3 = Error.prepareStackTrace;
          Error.prepareStackTrace = (e4, t4) => t4;
          const { stack: t3 } = new Error();
          Error.prepareStackTrace = e3;
          const r3 = t3.map((e4) => e4.getFileName());
          const n2 = r3.find((e4) => e4 !== r3[0]);
          return n2 ? i.basename(n2) : "anonymous";
        }
        get packageConfiguration() {
          return a.sync(b, { defaults: y });
        }
        get _longestUnderlinedLabel() {
          return d(this._longestLabel);
        }
        get _logLevels() {
          return { info: 0, timer: 1, debug: 2, warn: 3, error: 4 };
        }
        set configuration(e3) {
          this._config = Object.assign(this.packageConfiguration, e3);
        }
        _arrayify(e3) {
          return Array.isArray(e3) ? e3 : [e3];
        }
        _timeSpan(e3) {
          return this._now - e3;
        }
        _getLongestLabel() {
          const { _types: e3 } = this;
          const t3 = Object.keys(e3).map((t4) => e3[t4].label);
          return t3.reduce((e4, t4) => e4.length > t4.length ? e4 : t4);
        }
        _validateLogLevel(e3) {
          return Object.keys(this._logLevels).includes(e3) ? e3 : "info";
        }
        _mergeTypes(e3, t3) {
          const r3 = Object.assign({}, e3);
          Object.keys(t3).forEach((e4) => {
            r3[e4] = Object.assign({}, r3[e4], t3[e4]);
          });
          return r3;
        }
        _filterSecrets(e3) {
          const { _secrets: t3 } = this;
          if (t3.length === 0) {
            return e3;
          }
          let r3 = e3;
          t3.forEach((e4) => {
            r3 = r3.replace(new RegExp(e4, "g"), "[secure]");
          });
          return r3;
        }
        _formatStream(e3) {
          return this._arrayify(e3);
        }
        _formatDate() {
          return `[${this.date}]`;
        }
        _formatFilename() {
          return `[${this.filename}]`;
        }
        _formatScopeName() {
          if (Array.isArray(this._scopeName)) {
            const e3 = this._scopeName.filter((e4) => e4.length !== 0);
            return `${e3.map((e4) => `[${e4.trim()}]`).join(" ")}`;
          }
          return `[${this._scopeName}]`;
        }
        _formatTimestamp() {
          return `[${this.timestamp}]`;
        }
        _formatMessage(e3) {
          return n.format(...this._arrayify(e3));
        }
        _meta() {
          const e3 = [];
          if (this._config.displayDate) {
            e3.push(this._formatDate());
          }
          if (this._config.displayTimestamp) {
            e3.push(this._formatTimestamp());
          }
          if (this._config.displayFilename) {
            e3.push(this._formatFilename());
          }
          if (this._scopeName.length !== 0 && this._config.displayScope) {
            e3.push(this._formatScopeName());
          }
          if (e3.length !== 0) {
            e3.push(`${c.pointerSmall}`);
            return e3.map((e4) => h(e4));
          }
          return e3;
        }
        _hasAdditional({ suffix: e3, prefix: t3 }, r3) {
          return e3 || t3 ? "" : this._formatMessage(r3);
        }
        _buildSignale(e3, ...t3) {
          let [r3, n2] = [{}, {}];
          if (t3.length === 1 && typeof t3[0] === "object" && t3[0] !== null) {
            if (t3[0] instanceof Error) {
              [r3] = t3;
            } else {
              const [{ prefix: e4, message: i3, suffix: s2 }] = t3;
              n2 = Object.assign({}, { suffix: s2, prefix: e4 });
              r3 = i3 ? this._formatMessage(i3) : this._hasAdditional(n2, t3);
            }
          } else {
            r3 = this._formatMessage(t3);
          }
          const i2 = this._meta();
          if (n2.prefix) {
            if (this._config.underlinePrefix) {
              i2.push(d(n2.prefix));
            } else {
              i2.push(n2.prefix);
            }
          }
          if (this._config.displayBadge && e3.badge) {
            i2.push(o[e3.color](this._padEnd(e3.badge, e3.badge.length + 1)));
          }
          if (this._config.displayLabel && e3.label) {
            const t4 = this._config.uppercaseLabel ? e3.label.toUpperCase() : e3.label;
            if (this._config.underlineLabel) {
              i2.push(o[e3.color](this._padEnd(d(t4), this._longestUnderlinedLabel.length + 1)));
            } else {
              i2.push(o[e3.color](this._padEnd(t4, this._longestLabel.length + 1)));
            }
          }
          if (r3 instanceof Error && r3.stack) {
            const [e4, ...t4] = r3.stack.split("\n");
            if (this._config.underlineMessage) {
              i2.push(d(e4));
            } else {
              i2.push(e4);
            }
            i2.push(h(t4.map((e5) => e5.replace(/^/, "\n")).join("")));
            return i2.join(" ");
          }
          if (this._config.underlineMessage) {
            i2.push(d(r3));
          } else {
            i2.push(r3);
          }
          if (n2.suffix) {
            if (this._config.underlineSuffix) {
              i2.push(d(n2.suffix));
            } else {
              i2.push(n2.suffix);
            }
          }
          return i2.join(" ");
        }
        _write(e3, t3) {
          if (this._interactive && e3.isTTY && m) {
            s.moveCursor(e3, 0, -1);
            s.clearLine(e3);
            s.cursorTo(e3, 0);
          }
          e3.write(t3 + "\n");
          m = this._interactive;
        }
        _log(e3, t3 = this._stream, r3) {
          if (this.isEnabled() && this._logLevels[r3] >= this._logLevels[this._generalLogLevel]) {
            this._formatStream(t3).forEach((t4) => {
              this._write(t4, e3);
            });
          }
        }
        _logger(e3, ...t3) {
          const { stream: r3, logLevel: n2 } = this._types[e3];
          const i2 = this._buildSignale(this._types[e3], ...t3);
          this._log(this._filterSecrets(i2), r3, this._validateLogLevel(n2));
        }
        _padEnd(e3, t3) {
          e3 = String(e3);
          t3 = parseInt(t3, 10) || 0;
          if (e3.length >= t3) {
            return e3;
          }
          if (String.prototype.padEnd) {
            return e3.padEnd(t3);
          }
          t3 -= e3.length;
          return e3 + " ".repeat(t3);
        }
        addSecrets(e3) {
          if (!Array.isArray(e3)) {
            throw new TypeError("Argument must be an array.");
          }
          this._secrets.push(...e3);
        }
        clearSecrets() {
          this._secrets = [];
        }
        config(e3) {
          this.configuration = e3;
        }
        disable() {
          this._disabled = true;
        }
        enable() {
          this._disabled = false;
        }
        isEnabled() {
          return !this._disabled;
        }
        scope(...e3) {
          if (e3.length === 0) {
            throw new Error("No scope name was defined.");
          }
          return new Signale(Object.assign(this.currentOptions, { scope: e3 }));
        }
        unscope() {
          this._scopeName = "";
        }
        time(e3) {
          if (!e3) {
            e3 = `timer_${this._timers.size}`;
          }
          this._timers.set(e3, this._now);
          const t3 = this._meta();
          t3.push(u(this._padEnd(this._types.start.badge, 2)));
          if (this._config.underlineLabel) {
            t3.push(u(this._padEnd(d(e3), this._longestUnderlinedLabel.length + 1)));
          } else {
            t3.push(u(this._padEnd(e3, this._longestLabel.length + 1)));
          }
          t3.push("Initialized timer...");
          this._log(t3.join(" "), this._stream, "timer");
          return e3;
        }
        timeEnd(e3) {
          if (!e3 && this._timers.size) {
            const is = (e4) => e4.includes("timer_");
            e3 = [...this._timers.keys()].reduceRight((e4, t3) => is(e4) ? e4 : is(t3) ? t3 : null);
          }
          if (this._timers.has(e3)) {
            const t3 = this._timeSpan(this._timers.get(e3));
            this._timers.delete(e3);
            const r3 = this._meta();
            r3.push(p(this._padEnd(this._types.pause.badge, 2)));
            if (this._config.underlineLabel) {
              r3.push(p(this._padEnd(d(e3), this._longestUnderlinedLabel.length + 1)));
            } else {
              r3.push(p(this._padEnd(e3, this._longestLabel.length + 1)));
            }
            r3.push("Timer run for:");
            r3.push(g(t3 < 1e3 ? t3 + "ms" : (t3 / 1e3).toFixed(2) + "s"));
            this._log(r3.join(" "), this._stream, "timer");
            return { label: e3, span: t3 };
          }
        }
      }
      e2.exports = Signale;
    }, 616: (e2, t2, r2) => {
      "use strict";
      const n = r2(877);
      e2.exports = { error: { badge: n.cross, color: "red", label: "error", logLevel: "error" }, fatal: { badge: n.cross, color: "red", label: "fatal", logLevel: "error" }, fav: { badge: n("\u2764"), color: "magenta", label: "favorite", logLevel: "info" }, info: { badge: n.info, color: "blue", label: "info", logLevel: "info" }, star: { badge: n.star, color: "yellow", label: "star", logLevel: "info" }, success: { badge: n.tick, color: "green", label: "success", logLevel: "info" }, wait: { badge: n.ellipsis, color: "blue", label: "waiting", logLevel: "info" }, warn: { badge: n.warning, color: "yellow", label: "warning", logLevel: "warn" }, complete: { badge: n.checkboxOn, color: "cyan", label: "complete", logLevel: "info" }, pending: { badge: n.checkboxOff, color: "magenta", label: "pending", logLevel: "info" }, note: { badge: n.bullet, color: "blue", label: "note", logLevel: "info" }, start: { badge: n.play, color: "green", label: "start", logLevel: "info" }, pause: { badge: n.squareSmallFilled, color: "yellow", label: "pause", logLevel: "info" }, debug: { badge: n("\u2B24"), color: "red", label: "debug", logLevel: "debug" }, await: { badge: n.ellipsis, color: "blue", label: "awaiting", logLevel: "info" }, watch: { badge: n.ellipsis, color: "yellow", label: "watching", logLevel: "info" }, log: { badge: "", color: "", label: "", logLevel: "info" } };
    }, 308: (e2) => {
      "use strict";
      e2.exports = (e3) => {
        if (typeof e3 !== "string") {
          throw new TypeError("Expected a string, got " + typeof e3);
        }
        if (e3.charCodeAt(0) === 65279) {
          return e3.slice(1);
        }
        return e3;
      };
    }, 234: (e2) => {
      "use strict";
      e2.exports = require_chalk();
    }, 684: (e2) => {
      "use strict";
      e2.exports = (init_package(), __toCommonJS(package_exports));
    }, 491: (e2) => {
      "use strict";
      e2.exports = __require("assert");
    }, 57: (e2) => {
      "use strict";
      e2.exports = __require("constants");
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    }, 521: (e2) => {
      "use strict";
      e2.exports = __require("readline");
    }, 781: (e2) => {
      "use strict";
      e2.exports = __require("stream");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var n = t[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var i = t[r2] = { exports: {} };
      var s = true;
      try {
        e[r2](i, i.exports, __nccwpck_require__);
        s = false;
      } finally {
        if (s)
          delete t[r2];
      }
      return i.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(567);
    module2.exports = r;
  })();
});
var require_url_join = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 670: function(e2) {
      (function(r2, i2, t) {
        if (e2.exports)
          e2.exports = t();
        else if (typeof define === "function" && define.amd)
          define(t);
        else
          i2[r2] = t();
      })("urljoin", this, function() {
        function normalize(e3) {
          var r2 = [];
          if (e3.length === 0) {
            return "";
          }
          if (typeof e3[0] !== "string") {
            throw new TypeError("Url must be a string. Received " + e3[0]);
          }
          if (e3[0].match(/^[^/:]+:\/*$/) && e3.length > 1) {
            var i2 = e3.shift();
            e3[0] = i2 + e3[0];
          }
          if (e3[0].match(/^file:\/\/\//)) {
            e3[0] = e3[0].replace(/^([^/:]+):\/*/, "$1:///");
          } else {
            e3[0] = e3[0].replace(/^([^/:]+):\/*/, "$1://");
          }
          for (var t = 0; t < e3.length; t++) {
            var n = e3[t];
            if (typeof n !== "string") {
              throw new TypeError("Url must be a string. Received " + n);
            }
            if (n === "") {
              continue;
            }
            if (t > 0) {
              n = n.replace(/^[\/]+/, "");
            }
            if (t < e3.length - 1) {
              n = n.replace(/[\/]+$/, "");
            } else {
              n = n.replace(/[\/]+$/, "/");
            }
            r2.push(n);
          }
          var a = r2.join("/");
          a = a.replace(/\/(\?|&|#[^!])/g, "$1");
          var f = a.split("?");
          a = f.shift() + (f.length > 0 ? "?" : "") + f.join("&");
          return a;
        }
        return function() {
          var e3;
          if (typeof arguments[0] === "object") {
            e3 = arguments[0];
          } else {
            e3 = [].slice.call(arguments);
          }
          return normalize(e3);
        };
      });
    } };
    var r = {};
    function __nccwpck_require__(i2) {
      var t = r[i2];
      if (t !== void 0) {
        return t.exports;
      }
      var n = r[i2] = { exports: {} };
      var a = true;
      try {
        e[i2].call(n.exports, n, n.exports, __nccwpck_require__);
        a = false;
      } finally {
        if (a)
          delete r[i2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var i = __nccwpck_require__(670);
    module2.exports = i;
  })();
});
var require_minimist = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 319: (e2) => {
      e2.exports = function(e3, t2) {
        if (!t2)
          t2 = {};
        var r2 = { bools: {}, strings: {}, unknownFn: null };
        if (typeof t2["unknown"] === "function") {
          r2.unknownFn = t2["unknown"];
        }
        if (typeof t2["boolean"] === "boolean" && t2["boolean"]) {
          r2.allBools = true;
        } else {
          [].concat(t2["boolean"]).filter(Boolean).forEach(function(e4) {
            r2.bools[e4] = true;
          });
        }
        var n = {};
        Object.keys(t2.alias || {}).forEach(function(e4) {
          n[e4] = [].concat(t2.alias[e4]);
          n[e4].forEach(function(t3) {
            n[t3] = [e4].concat(n[e4].filter(function(e5) {
              return t3 !== e5;
            }));
          });
        });
        [].concat(t2.string).filter(Boolean).forEach(function(e4) {
          r2.strings[e4] = true;
          if (n[e4]) {
            r2.strings[n[e4]] = true;
          }
        });
        var o = t2["default"] || {};
        var s = { _: [] };
        Object.keys(r2.bools).forEach(function(e4) {
          setArg(e4, o[e4] === void 0 ? false : o[e4]);
        });
        var i = [];
        if (e3.indexOf("--") !== -1) {
          i = e3.slice(e3.indexOf("--") + 1);
          e3 = e3.slice(0, e3.indexOf("--"));
        }
        function argDefined(e4, t3) {
          return r2.allBools && /^--[^=]+$/.test(t3) || r2.strings[e4] || r2.bools[e4] || n[e4];
        }
        function setArg(e4, t3, o2) {
          if (o2 && r2.unknownFn && !argDefined(e4, o2)) {
            if (r2.unknownFn(o2) === false)
              return;
          }
          var i2 = !r2.strings[e4] && isNumber(t3) ? Number(t3) : t3;
          setKey(s, e4.split("."), i2);
          (n[e4] || []).forEach(function(e5) {
            setKey(s, e5.split("."), i2);
          });
        }
        function setKey(e4, t3, n2) {
          var o2 = e4;
          for (var s2 = 0; s2 < t3.length - 1; s2++) {
            var i2 = t3[s2];
            if (isConstructorOrProto(o2, i2))
              return;
            if (o2[i2] === void 0)
              o2[i2] = {};
            if (o2[i2] === Object.prototype || o2[i2] === Number.prototype || o2[i2] === String.prototype)
              o2[i2] = {};
            if (o2[i2] === Array.prototype)
              o2[i2] = [];
            o2 = o2[i2];
          }
          var i2 = t3[t3.length - 1];
          if (isConstructorOrProto(o2, i2))
            return;
          if (o2 === Object.prototype || o2 === Number.prototype || o2 === String.prototype)
            o2 = {};
          if (o2 === Array.prototype)
            o2 = [];
          if (o2[i2] === void 0 || r2.bools[i2] || typeof o2[i2] === "boolean") {
            o2[i2] = n2;
          } else if (Array.isArray(o2[i2])) {
            o2[i2].push(n2);
          } else {
            o2[i2] = [o2[i2], n2];
          }
        }
        function aliasIsBoolean(e4) {
          return n[e4].some(function(e5) {
            return r2.bools[e5];
          });
        }
        for (var a = 0; a < e3.length; a++) {
          var f = e3[a];
          if (/^--.+=/.test(f)) {
            var u = f.match(/^--([^=]+)=([\s\S]*)$/);
            var l = u[1];
            var c = u[2];
            if (r2.bools[l]) {
              c = c !== "false";
            }
            setArg(l, c, f);
          } else if (/^--no-.+/.test(f)) {
            var l = f.match(/^--no-(.+)/)[1];
            setArg(l, false, f);
          } else if (/^--.+/.test(f)) {
            var l = f.match(/^--(.+)/)[1];
            var p = e3[a + 1];
            if (p !== void 0 && !/^-/.test(p) && !r2.bools[l] && !r2.allBools && (n[l] ? !aliasIsBoolean(l) : true)) {
              setArg(l, p, f);
              a++;
            } else if (/^(true|false)$/.test(p)) {
              setArg(l, p === "true", f);
              a++;
            } else {
              setArg(l, r2.strings[l] ? "" : true, f);
            }
          } else if (/^-[^-]+/.test(f)) {
            var b = f.slice(1, -1).split("");
            var _ = false;
            for (var g = 0; g < b.length; g++) {
              var p = f.slice(g + 2);
              if (p === "-") {
                setArg(b[g], p, f);
                continue;
              }
              if (/[A-Za-z]/.test(b[g]) && /=/.test(p)) {
                setArg(b[g], p.split("=")[1], f);
                _ = true;
                break;
              }
              if (/[A-Za-z]/.test(b[g]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(p)) {
                setArg(b[g], p, f);
                _ = true;
                break;
              }
              if (b[g + 1] && b[g + 1].match(/\W/)) {
                setArg(b[g], f.slice(g + 2), f);
                _ = true;
                break;
              } else {
                setArg(b[g], r2.strings[b[g]] ? "" : true, f);
              }
            }
            var l = f.slice(-1)[0];
            if (!_ && l !== "-") {
              if (e3[a + 1] && !/^(-|--)[^-]/.test(e3[a + 1]) && !r2.bools[l] && (n[l] ? !aliasIsBoolean(l) : true)) {
                setArg(l, e3[a + 1], f);
                a++;
              } else if (e3[a + 1] && /^(true|false)$/.test(e3[a + 1])) {
                setArg(l, e3[a + 1] === "true", f);
                a++;
              } else {
                setArg(l, r2.strings[l] ? "" : true, f);
              }
            }
          } else {
            if (!r2.unknownFn || r2.unknownFn(f) !== false) {
              s._.push(r2.strings["_"] || !isNumber(f) ? f : Number(f));
            }
            if (t2.stopEarly) {
              s._.push.apply(s._, e3.slice(a + 1));
              break;
            }
          }
        }
        Object.keys(o).forEach(function(e4) {
          if (!hasKey(s, e4.split("."))) {
            setKey(s, e4.split("."), o[e4]);
            (n[e4] || []).forEach(function(t3) {
              setKey(s, t3.split("."), o[e4]);
            });
          }
        });
        if (t2["--"]) {
          s["--"] = new Array();
          i.forEach(function(e4) {
            s["--"].push(e4);
          });
        } else {
          i.forEach(function(e4) {
            s._.push(e4);
          });
        }
        return s;
      };
      function hasKey(e3, t2) {
        var r2 = e3;
        t2.slice(0, -1).forEach(function(e4) {
          r2 = r2[e4] || {};
        });
        var n = t2[t2.length - 1];
        return n in r2;
      }
      function isNumber(e3) {
        if (typeof e3 === "number")
          return true;
        if (/^0x[0-9a-f]+$/i.test(e3))
          return true;
        return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e3);
      }
      function isConstructorOrProto(e3, t2) {
        return t2 === "constructor" && typeof e3[t2] === "function" || t2 === "__proto__";
      }
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var n = t[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var o = t[r2] = { exports: {} };
      var s = true;
      try {
        e[r2](o, o.exports, __nccwpck_require__);
        s = false;
      } finally {
        if (s)
          delete t[r2];
      }
      return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(319);
    module2.exports = r;
  })();
});
var require_filesize = __commonJSMin((exports, module2) => {
  (() => {
    var i = { 823: function(i2) {
      (function(e2, t2) {
        true ? i2.exports = t2() : 0;
      })(this, function() {
        "use strict";
        var i3 = /^(b|B)$/, e2 = { iec: { bits: ["bit", "Kibit", "Mibit", "Gibit", "Tibit", "Pibit", "Eibit", "Zibit", "Yibit"], bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"] }, jedec: { bits: ["bit", "Kbit", "Mbit", "Gbit", "Tbit", "Pbit", "Ebit", "Zbit", "Ybit"], bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"] } }, t2 = { iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"], jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"] }, r = { floor: Math.floor, ceil: Math.ceil };
        function filesize(o) {
          var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var n = [], s = 0, f, b, l, u, c, p, d, _, B, v, h, g, x, y, M, m, w, k, N, z, E;
          if (isNaN(o)) {
            throw new TypeError("Invalid number");
          }
          l = a.bits === true;
          M = a.unix === true;
          g = a.pad === true;
          b = a.base || 10;
          x = a.round !== void 0 ? a.round : M ? 1 : 2;
          d = a.locale !== void 0 ? a.locale : "";
          _ = a.localeOptions || {};
          m = a.separator !== void 0 ? a.separator : "";
          w = a.spacer !== void 0 ? a.spacer : M ? "" : " ";
          N = a.symbols || {};
          k = b === 2 ? a.standard || "iec" : "jedec";
          h = a.output || "string";
          c = a.fullform === true;
          p = a.fullforms instanceof Array ? a.fullforms : [];
          f = a.exponent !== void 0 ? a.exponent : -1;
          z = r[a.roundingMethod] || Math.round;
          v = Number(o);
          B = v < 0;
          u = b > 2 ? 1e3 : 1024;
          E = isNaN(a.precision) === false ? parseInt(a.precision, 10) : 0;
          if (B) {
            v = -v;
          }
          if (f === -1 || isNaN(f)) {
            f = Math.floor(Math.log(v) / Math.log(u));
            if (f < 0) {
              f = 0;
            }
          }
          if (f > 8) {
            if (E > 0) {
              E += 8 - f;
            }
            f = 8;
          }
          if (h === "exponent") {
            return f;
          }
          if (v === 0) {
            n[0] = 0;
            y = n[1] = M ? "" : e2[k][l ? "bits" : "bytes"][f];
          } else {
            s = v / (b === 2 ? Math.pow(2, f * 10) : Math.pow(1e3, f));
            if (l) {
              s = s * 8;
              if (s >= u && f < 8) {
                s = s / u;
                f++;
              }
            }
            var j = Math.pow(10, f > 0 ? x : 0);
            n[0] = z(s * j) / j;
            if (n[0] === u && f < 8 && a.exponent === void 0) {
              n[0] = 1;
              f++;
            }
            y = n[1] = b === 10 && f === 1 ? l ? "kbit" : "kB" : e2[k][l ? "bits" : "bytes"][f];
            if (M) {
              n[1] = n[1].charAt(0);
              if (i3.test(n[1])) {
                n[0] = Math.floor(n[0]);
                n[1] = "";
              }
            }
          }
          if (B) {
            n[0] = -n[0];
          }
          if (E > 0) {
            n[0] = n[0].toPrecision(E);
          }
          n[1] = N[n[1]] || n[1];
          if (d === true) {
            n[0] = n[0].toLocaleString();
          } else if (d.length > 0) {
            n[0] = n[0].toLocaleString(d, _);
          } else if (m.length > 0) {
            n[0] = n[0].toString().replace(".", m);
          }
          if (g && Number.isInteger(n[0]) === false && x > 0) {
            var q = m || ".", P = n[0].toString().split(q), T = P[1] || "", G = T.length, K = x - G;
            n[0] = "".concat(P[0]).concat(q).concat(T.padEnd(G + K, "0"));
          }
          if (c) {
            n[1] = p[f] ? p[f] : t2[k][f] + (l ? "bit" : "byte") + (n[0] === 1 ? "" : "s");
          }
          return h === "array" ? n : h === "object" ? { value: n[0], symbol: n[1], exponent: f, unit: y } : n.join(w);
        }
        filesize.partial = function(i4) {
          return function(e3) {
            return filesize(e3, i4);
          };
        };
        return filesize;
      });
    } };
    var e = {};
    function __nccwpck_require__(t2) {
      var r = e[t2];
      if (r !== void 0) {
        return r.exports;
      }
      var o = e[t2] = { exports: {} };
      var a = true;
      try {
        i[t2].call(o.exports, o, o.exports, __nccwpck_require__);
        a = false;
      } finally {
        if (a)
          delete e[t2];
      }
      return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var t = __nccwpck_require__(823);
    module2.exports = t;
  })();
});
var require_gzip_size = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 325: (e2, r2, t2) => {
      var n = t2(781);
      var o = ["write", "end", "destroy"];
      var i = ["resume", "pause"];
      var a = ["data", "close"];
      var s = Array.prototype.slice;
      e2.exports = duplex;
      function forEach(e3, r3) {
        if (e3.forEach) {
          return e3.forEach(r3);
        }
        for (var t3 = 0; t3 < e3.length; t3++) {
          r3(e3[t3], t3);
        }
      }
      function duplex(e3, r3) {
        var t3 = new n();
        var p = false;
        forEach(o, proxyWriter);
        forEach(i, proxyReader);
        forEach(a, proxyStream);
        r3.on("end", handleEnd);
        e3.on("drain", function() {
          t3.emit("drain");
        });
        e3.on("error", reemit);
        r3.on("error", reemit);
        t3.writable = e3.writable;
        t3.readable = r3.readable;
        return t3;
        function proxyWriter(r4) {
          t3[r4] = method;
          function method() {
            return e3[r4].apply(e3, arguments);
          }
        }
        function proxyReader(e4) {
          t3[e4] = method;
          function method() {
            t3.emit(e4);
            var n2 = r3[e4];
            if (n2) {
              return n2.apply(r3, arguments);
            }
            r3.emit(e4);
          }
        }
        function proxyStream(e4) {
          r3.on(e4, reemit2);
          function reemit2() {
            var r4 = s.call(arguments);
            r4.unshift(e4);
            t3.emit.apply(t3, r4);
          }
        }
        function handleEnd() {
          if (p) {
            return;
          }
          p = true;
          var e4 = s.call(arguments);
          e4.unshift("end");
          t3.emit.apply(t3, e4);
        }
        function reemit(e4) {
          t3.emit("error", e4);
        }
      }
    }, 423: (e2, r2, t2) => {
      "use strict";
      const n = t2(147);
      const o = t2(781);
      const i = t2(796);
      const { promisify: a } = t2(837);
      const s = t2(325);
      const getOptions = (e3) => ({ level: 9, ...e3 });
      const p = a(i.gzip);
      e2.exports = async (e3, r3) => {
        if (!e3) {
          return 0;
        }
        const t3 = await p(e3, getOptions(r3));
        return t3.length;
      };
      e2.exports.sync = (e3, r3) => i.gzipSync(e3, getOptions(r3)).length;
      e2.exports.stream = (e3) => {
        const r3 = new o.PassThrough();
        const t3 = new o.PassThrough();
        const n2 = s(r3, t3);
        let a2 = 0;
        const p2 = i.createGzip(getOptions(e3)).on("data", (e4) => {
          a2 += e4.length;
        }).on("error", () => {
          n2.gzipSize = 0;
        }).on("end", () => {
          n2.gzipSize = a2;
          n2.emit("gzip-size", a2);
          t3.end();
        });
        r3.pipe(p2);
        r3.pipe(t3, { end: false });
        return n2;
      };
      e2.exports.file = (r3, t3) => new Promise((o2, i2) => {
        const a2 = n.createReadStream(r3);
        a2.on("error", i2);
        const s2 = a2.pipe(e2.exports.stream(t3));
        s2.on("error", i2);
        s2.on("gzip-size", o2);
      });
      e2.exports.fileSync = (r3, t3) => e2.exports.sync(n.readFileSync(r3), t3);
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 781: (e2) => {
      "use strict";
      e2.exports = __require("stream");
    }, 837: (e2) => {
      "use strict";
      e2.exports = __require("util");
    }, 796: (e2) => {
      "use strict";
      e2.exports = __require("zlib");
    } };
    var r = {};
    function __nccwpck_require__(t2) {
      var n = r[t2];
      if (n !== void 0) {
        return n.exports;
      }
      var o = r[t2] = { exports: {} };
      var i = true;
      try {
        e[t2](o, o.exports, __nccwpck_require__);
        i = false;
      } finally {
        if (i)
          delete r[t2];
      }
      return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var t = __nccwpck_require__(423);
    module2.exports = t;
  })();
});
var require_dotenv_expand = __commonJSMin((exports, module2) => {
  (() => {
    "use strict";
    var r = { 926: (r2) => {
      var dotenvExpand = function(r3) {
        var e2 = r3.ignoreProcessEnv ? {} : process.env;
        var interpolate = function(a3) {
          var _2 = a3.match(/(.?\${?(?:[a-zA-Z0-9_]+)?}?)/g) || [];
          return _2.reduce(function(a4, _3) {
            var n2 = /(.?)\${?([a-zA-Z0-9_]+)?}?/g.exec(_3);
            var t = n2[1];
            var s, p;
            if (t === "\\") {
              p = n2[0];
              s = p.replace("\\$", "$");
            } else {
              var i = n2[2];
              p = n2[0].substring(t.length);
              s = e2.hasOwnProperty(i) ? e2[i] : r3.parsed[i] || "";
              s = interpolate(s);
            }
            return a4.replace(p, s);
          }, a3);
        };
        for (var a2 in r3.parsed) {
          var _ = e2.hasOwnProperty(a2) ? e2[a2] : r3.parsed[a2];
          r3.parsed[a2] = interpolate(_);
        }
        for (var n in r3.parsed) {
          e2[n] = r3.parsed[n];
        }
        return r3;
      };
      r2.exports = dotenvExpand;
    } };
    var e = {};
    function __nccwpck_require__(a2) {
      var _ = e[a2];
      if (_ !== void 0) {
        return _.exports;
      }
      var n = e[a2] = { exports: {} };
      var t = true;
      try {
        r[a2](n, n.exports, __nccwpck_require__);
        t = false;
      } finally {
        if (t)
          delete e[a2];
      }
      return n.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var a = __nccwpck_require__(926);
    module2.exports = a;
  })();
});
var require_browsers = __commonJSMin((exports, module2) => {
  module2.exports = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
});
var require_browsers2 = __commonJSMin((exports, module2) => {
  module2.exports.browsers = require_browsers();
});
var require_browserVersions = __commonJSMin((exports, module2) => {
  module2.exports = { "0": "31", "1": "32", "2": "33", "3": "34", "4": "35", "5": "36", "6": "37", "7": "38", "8": "39", "9": "40", A: "10", B: "11", C: "12", D: "7", E: "8", F: "9", G: "15", H: "103", I: "4", J: "6", K: "13", L: "14", M: "16", N: "17", O: "18", P: "79", Q: "80", R: "81", S: "83", T: "84", U: "85", V: "86", W: "87", X: "101", Y: "64", Z: "88", a: "89", b: "90", c: "91", d: "92", e: "93", f: "94", g: "95", h: "96", i: "97", j: "98", k: "99", l: "100", m: "102", n: "5", o: "19", p: "20", q: "21", r: "22", s: "23", t: "24", u: "25", v: "26", w: "27", x: "28", y: "29", z: "30", AB: "41", BB: "42", CB: "43", DB: "44", EB: "45", FB: "46", GB: "47", HB: "48", IB: "49", JB: "50", KB: "51", LB: "52", MB: "53", NB: "54", OB: "55", PB: "56", QB: "57", RB: "58", SB: "60", TB: "62", UB: "63", VB: "65", WB: "66", XB: "67", YB: "68", ZB: "69", aB: "70", bB: "71", cB: "72", dB: "73", eB: "74", fB: "75", gB: "76", hB: "77", iB: "78", jB: "11.1", kB: "12.1", lB: "16.0", mB: "3", nB: "59", oB: "61", pB: "82", qB: "104", rB: "3.2", sB: "10.1", tB: "15.2-15.3", uB: "15.4", vB: "15.5", wB: "11.5", xB: "4.2-4.3", yB: "5.5", zB: "2", "0B": "3.5", "1B": "3.6", "2B": "105", "3B": "106", "4B": "3.1", "5B": "5.1", "6B": "6.1", "7B": "7.1", "8B": "9.1", "9B": "13.1", AC: "14.1", BC: "15.1", CC: "15.6", DC: "TP", EC: "9.5-9.6", FC: "10.0-10.1", GC: "10.5", HC: "10.6", IC: "11.6", JC: "4.0-4.1", KC: "5.0-5.1", LC: "6.0-6.1", MC: "7.0-7.1", NC: "8.1-8.4", OC: "9.0-9.2", PC: "9.3", QC: "10.0-10.2", RC: "10.3", SC: "11.0-11.2", TC: "11.3-11.4", UC: "12.0-12.1", VC: "12.2-12.5", WC: "13.0-13.1", XC: "13.2", YC: "13.3", ZC: "13.4-13.7", aC: "14.0-14.4", bC: "14.5-14.8", cC: "15.0-15.1", dC: "all", eC: "2.1", fC: "2.2", gC: "2.3", hC: "4.1", iC: "4.4", jC: "4.4.3-4.4.4", kC: "12.12", lC: "5.0-5.4", mC: "6.2-6.4", nC: "7.2-7.4", oC: "8.2", pC: "9.2", qC: "11.1-11.2", rC: "12.0", sC: "13.0", tC: "14.0", uC: "15.0", vC: "17.0", wC: "10.4", xC: "7.12", yC: "2.5" };
});
var require_browserVersions2 = __commonJSMin((exports, module2) => {
  module2.exports.browserVersions = require_browserVersions();
});
var require_agents = __commonJSMin((exports, module2) => {
  module2.exports = { A: { A: { J: 0.0131217, D: 621152e-8, E: 0.0145876, F: 0.0364691, A: 556471e-8, B: 0.488685, yB: 9298e-6 }, B: "ms", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "yB", "J", "D", "E", "F", "A", "B", "", "", ""], E: "IE", F: { yB: 962323200, J: 998870400, D: 1161129600, E: 1237420800, F: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { C: 3801e-6, K: 4267e-6, L: 4268e-6, G: 3801e-6, M: 3801e-6, N: 7602e-6, O: 0.022806, P: 0, Q: 4298e-6, R: 944e-5, S: 4043e-6, T: 3801e-6, U: 7602e-6, V: 3801e-6, W: 3801e-6, Z: 4318e-6, a: 7602e-6, b: 4118e-6, c: 3939e-6, d: 7602e-6, e: 4118e-6, f: 3939e-6, g: 3801e-6, h: 7602e-6, i: 7602e-6, j: 0.011403, k: 0.019005, l: 0.034209, X: 0.444717, m: 2.86595, H: 0.589155 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "K", "L", "G", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "X", "m", "H", "", "", ""], E: "Edge", F: { C: 1438128e3, K: 1447286400, L: 1470096e3, G: 1491868800, M: 1508198400, N: 1525046400, O: 1542067200, P: 1579046400, Q: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, Z: 161136e4, a: 1614816e3, b: 1618358400, c: 1622073600, d: 1626912e3, e: 1630627200, f: 1632441600, g: 1634774400, h: 1637539200, i: 1641427200, j: 1643932800, k: 1646265600, l: 1649635200, X: 1651190400, m: 1653955200, H: 1655942400 }, D: { C: "ms", K: "ms", L: "ms", G: "ms", M: "ms", N: "ms", O: "ms" } }, C: { A: { "0": 8928e-6, "1": 4471e-6, "2": 9284e-6, "3": 4707e-6, "4": 9076e-6, "5": 7602e-6, "6": 4783e-6, "7": 4271e-6, "8": 4783e-6, "9": 487e-5, zB: 4118e-6, mB: 4271e-6, I: 0.019005, n: 4879e-6, J: 0.020136, D: 5725e-6, E: 4525e-6, F: 533e-5, A: 4283e-6, B: 0.011403, C: 4471e-6, K: 4486e-6, L: 453e-5, G: 8322e-6, M: 4417e-6, N: 4425e-6, O: 4161e-6, o: 4443e-6, p: 4283e-6, q: 8322e-6, r: 0.013698, s: 4161e-6, t: 8786e-6, u: 4118e-6, v: 4317e-6, w: 4393e-6, x: 4418e-6, y: 8834e-6, z: 8322e-6, AB: 5029e-6, BB: 47e-4, CB: 0.019005, DB: 7602e-6, EB: 3867e-6, FB: 4525e-6, GB: 4293e-6, HB: 3801e-6, IB: 4538e-6, JB: 8282e-6, KB: 0.011601, LB: 0.060816, MB: 0.011601, NB: 7602e-6, OB: 3801e-6, PB: 7602e-6, QB: 0.011601, RB: 3939e-6, nB: 3801e-6, SB: 3801e-6, oB: 4356e-6, TB: 4425e-6, UB: 8322e-6, Y: 415e-5, VB: 4267e-6, WB: 3801e-6, XB: 4267e-6, YB: 7602e-6, ZB: 415e-5, aB: 4293e-6, bB: 4425e-6, cB: 3801e-6, dB: 415e-5, eB: 415e-5, fB: 4318e-6, gB: 4356e-6, hB: 3801e-6, iB: 0.041811, P: 3801e-6, Q: 3801e-6, R: 0.011403, pB: 3801e-6, S: 3801e-6, T: 7602e-6, U: 4268e-6, V: 3801e-6, W: 0.011403, Z: 0.011403, a: 7602e-6, b: 7602e-6, c: 0.095025, d: 3801e-6, e: 7602e-6, f: 0.022806, g: 7602e-6, h: 7602e-6, i: 0.011403, j: 0.015204, k: 0.045612, l: 0.288876, X: 2.00313, m: 0.083622, H: 0, qB: 0, "0B": 8786e-6, "1B": 487e-5 }, B: "moz", C: ["zB", "mB", "0B", "1B", "I", "n", "J", "D", "E", "F", "A", "B", "C", "K", "L", "G", "M", "N", "O", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "nB", "SB", "oB", "TB", "UB", "Y", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "P", "Q", "R", "pB", "S", "T", "U", "V", "W", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "X", "m", "H", "qB", ""], E: "Firefox", F: { "0": 1405987200, "1": 1409616e3, "2": 1413244800, "3": 1417392e3, "4": 1421107200, "5": 1424736e3, "6": 1428278400, "7": 1431475200, "8": 1435881600, "9": 1439251200, zB: 1161648e3, mB: 1213660800, "0B": 124632e4, "1B": 1264032e3, I: 1300752e3, n: 1308614400, J: 1313452800, D: 1317081600, E: 1317081600, F: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800, K: 1335225600, L: 1338854400, G: 1342483200, M: 1346112e3, N: 1349740800, O: 1353628800, o: 1357603200, p: 1361232e3, q: 1364860800, r: 1368489600, s: 1372118400, t: 1375747200, u: 1379376e3, v: 1386633600, w: 1391472e3, x: 1395100800, y: 1398729600, z: 1402358400, AB: 144288e4, BB: 1446508800, CB: 1450137600, DB: 1453852800, EB: 1457395200, FB: 1461628800, GB: 1465257600, HB: 1470096e3, IB: 1474329600, JB: 1479168e3, KB: 1485216e3, LB: 1488844800, MB: 149256e4, NB: 1497312e3, OB: 1502150400, PB: 1506556800, QB: 1510617600, RB: 1516665600, nB: 1520985600, SB: 1525824e3, oB: 1529971200, TB: 1536105600, UB: 1540252800, Y: 1544486400, VB: 154872e4, WB: 1552953600, XB: 1558396800, YB: 1562630400, ZB: 1567468800, aB: 1571788800, bB: 1575331200, cB: 1578355200, dB: 1581379200, eB: 1583798400, fB: 1586304e3, gB: 1588636800, hB: 1591056e3, iB: 1593475200, P: 1595894400, Q: 1598313600, R: 1600732800, pB: 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400, W: 1616457600, Z: 1618790400, a: 1622505600, b: 1626134400, c: 1628553600, d: 1630972800, e: 1633392e3, f: 1635811200, g: 1638835200, h: 1641859200, i: 1644364800, j: 1646697600, k: 1649116800, l: 1651536e3, X: 1653955200, m: 1656374400, H: null, qB: null } }, D: { A: { "0": 8596e-6, "1": 4566e-6, "2": 4118e-6, "3": 7602e-6, "4": 3801e-6, "5": 4335e-6, "6": 4464e-6, "7": 0.019005, "8": 3867e-6, "9": 0.011403, I: 4706e-6, n: 4879e-6, J: 4879e-6, D: 5591e-6, E: 5591e-6, F: 5591e-6, A: 4534e-6, B: 4464e-6, C: 0.010424, K: 83e-4, L: 4706e-6, G: 0.015087, M: 4393e-6, N: 4393e-6, O: 8652e-6, o: 8322e-6, p: 4393e-6, q: 4317e-6, r: 7602e-6, s: 8786e-6, t: 3939e-6, u: 4461e-6, v: 4141e-6, w: 4326e-6, x: 47e-4, y: 4538e-6, z: 8322e-6, AB: 7734e-6, BB: 7734e-6, CB: 7602e-6, DB: 3867e-6, EB: 3867e-6, FB: 3867e-6, GB: 0.011403, HB: 0.019005, IB: 0.053214, JB: 3867e-6, KB: 3801e-6, LB: 3801e-6, MB: 0.011403, NB: 3867e-6, OB: 3801e-6, PB: 0.026607, QB: 3801e-6, RB: 7602e-6, nB: 3801e-6, SB: 0.011403, oB: 0.011403, TB: 7602e-6, UB: 0.011403, Y: 7602e-6, VB: 0.011403, WB: 0.026607, XB: 0.011403, YB: 7602e-6, ZB: 0.049413, aB: 0.022806, bB: 0.011403, cB: 0.026607, dB: 7602e-6, eB: 0.022806, fB: 0.060816, gB: 0.060816, hB: 0.011403, iB: 0.034209, P: 0.193851, Q: 0.03801, R: 0.034209, S: 0.110229, T: 0.049413, U: 0.07602, V: 0.072219, W: 0.448518, Z: 0.019005, a: 0.060816, b: 0.026607, c: 0.072219, d: 0.053214, e: 0.045612, f: 0.049413, g: 0.034209, h: 0.106428, i: 0.098826, j: 0.129234, k: 0.163443, l: 0.387702, X: 1.47099, m: 17.8077, H: 1.61923, qB: 0.015204, "2B": 0.011403, "3B": 0 }, B: "webkit", C: ["", "", "", "", "I", "n", "J", "D", "E", "F", "A", "B", "C", "K", "L", "G", "M", "N", "O", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "nB", "SB", "oB", "TB", "UB", "Y", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "P", "Q", "R", "S", "T", "U", "V", "W", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "X", "m", "H", "qB", "2B", "3B"], E: "Chrome", F: { "0": 1384214400, "1": 1389657600, "2": 1392940800, "3": 1397001600, "4": 1400544e3, "5": 1405468800, "6": 1409011200, "7": 141264e4, "8": 1416268800, "9": 1421798400, I: 1264377600, n: 1274745600, J: 1283385600, D: 1287619200, E: 1291248e3, F: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800, K: 1312243200, L: 1316131200, G: 1316131200, M: 1319500800, N: 1323734400, O: 1328659200, o: 1332892800, p: 133704e4, q: 1340668800, r: 1343692800, s: 1348531200, t: 1352246400, u: 1357862400, v: 1361404800, w: 1364428800, x: 1369094400, y: 1374105600, z: 1376956800, AB: 1425513600, BB: 1429401600, CB: 143208e4, DB: 1437523200, EB: 1441152e3, FB: 1444780800, GB: 1449014400, HB: 1453248e3, IB: 1456963200, JB: 1460592e3, KB: 1464134400, LB: 1469059200, MB: 1472601600, NB: 1476230400, OB: 1480550400, PB: 1485302400, QB: 1489017600, RB: 149256e4, nB: 1496707200, SB: 1500940800, oB: 1504569600, TB: 1508198400, UB: 1512518400, Y: 1516752e3, VB: 1520294400, WB: 1523923200, XB: 1527552e3, YB: 1532390400, ZB: 1536019200, aB: 1539648e3, bB: 1543968e3, cB: 154872e4, dB: 1552348800, eB: 1555977600, fB: 1559606400, gB: 1564444800, hB: 1568073600, iB: 1571702400, P: 1575936e3, Q: 1580860800, R: 1586304e3, S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, Z: 1611014400, a: 1614556800, b: 1618272e3, c: 1621987200, d: 1626739200, e: 1630368e3, f: 1632268800, g: 1634601600, h: 1637020800, i: 1641340800, j: 1643673600, k: 1646092800, l: 1648512e3, X: 1650931200, m: 1653350400, H: 1655769600, qB: null, "2B": null, "3B": null } }, E: { A: { I: 0, n: 8322e-6, J: 4656e-6, D: 4465e-6, E: 4356e-6, F: 4891e-6, A: 4425e-6, B: 4318e-6, C: 3801e-6, K: 0.034209, L: 0.140637, G: 0.045612, "4B": 0, rB: 8692e-6, "5B": 7602e-6, "6B": 456e-5, "7B": 4283e-6, "8B": 0.015204, sB: 7602e-6, jB: 0.022806, kB: 0.045612, "9B": 0.254667, AC: 0.41811, BC: 0.083622, tB: 0.079821, uB: 0.528339, vB: 1.47859, CC: 0, lB: 3801e-6, DC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "4B", "rB", "I", "n", "5B", "J", "6B", "D", "7B", "E", "F", "8B", "A", "sB", "B", "jB", "C", "kB", "K", "9B", "L", "AC", "G", "BC", "tB", "uB", "vB", "CC", "lB", "DC"], E: "Safari", F: { "4B": 1205798400, rB: 1226534400, I: 1244419200, n: 1275868800, "5B": 131112e4, J: 1343174400, "6B": 13824e5, D: 13824e5, "7B": 1410998400, E: 1413417600, F: 1443657600, "8B": 1458518400, A: 1474329600, sB: 1490572800, B: 1505779200, jB: 1522281600, C: 1537142400, kB: 1553472e3, K: 1568851200, "9B": 1585008e3, L: 1600214400, AC: 1619395200, G: 1632096e3, BC: 1635292800, tB: 1639353600, uB: 1647216e3, vB: 1652745600, CC: null, lB: null, DC: null } }, F: { A: { "0": 3801e-6, "1": 5152e-6, "2": 5014e-6, "3": 9758e-6, "4": 4879e-6, "5": 3801e-6, "6": 4283e-6, "7": 4367e-6, "8": 4534e-6, "9": 7602e-6, F: 82e-4, B: 0.016581, C: 4317e-6, G: 685e-5, M: 685e-5, N: 685e-5, O: 5014e-6, o: 6015e-6, p: 4879e-6, q: 6597e-6, r: 6597e-6, s: 0.013434, t: 6702e-6, u: 6015e-6, v: 5595e-6, w: 4393e-6, x: 7602e-6, y: 4879e-6, z: 4879e-6, AB: 4227e-6, BB: 4418e-6, CB: 4161e-6, DB: 4227e-6, EB: 4725e-6, FB: 0.011403, GB: 8942e-6, HB: 4707e-6, IB: 4827e-6, JB: 4707e-6, KB: 4707e-6, LB: 4326e-6, MB: 8922e-6, NB: 0.014349, OB: 4425e-6, PB: 472e-5, QB: 4425e-6, RB: 4425e-6, SB: 472e-5, TB: 4532e-6, UB: 4566e-6, Y: 0.02283, VB: 867e-5, WB: 4656e-6, XB: 4642e-6, YB: 3867e-6, ZB: 944e-5, aB: 4293e-6, bB: 3867e-6, cB: 4298e-6, dB: 0.096692, eB: 4201e-6, fB: 4141e-6, gB: 4257e-6, hB: 3939e-6, iB: 8236e-6, P: 3939e-6, Q: 3939e-6, R: 8514e-6, pB: 3939e-6, S: 3939e-6, T: 3801e-6, U: 0.034209, V: 0.300279, W: 0.592956, EC: 685e-5, FC: 0, GC: 8392e-6, HC: 4706e-6, jB: 6229e-6, wB: 4879e-6, IC: 8786e-6, kB: 472e-5 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "F", "EC", "FC", "GC", "HC", "B", "jB", "wB", "IC", "C", "kB", "G", "M", "N", "O", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "Y", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "P", "Q", "R", "pB", "S", "T", "U", "V", "W", "", ""], E: "Opera", F: { "0": 1438646400, "1": 1442448e3, "2": 1445904e3, "3": 1449100800, "4": 1454371200, "5": 1457308800, "6": 146232e4, "7": 1465344e3, "8": 1470096e3, "9": 1474329600, F: 1150761600, EC: 1223424e3, FC: 1251763200, GC: 1267488e3, HC: 1277942400, B: 1292457600, jB: 1302566400, wB: 1309219200, IC: 1323129600, C: 1323129600, kB: 1352073600, G: 1372723200, M: 1377561600, N: 1381104e3, O: 1386288e3, o: 1390867200, p: 1393891200, q: 1399334400, r: 1401753600, s: 1405987200, t: 1409616e3, u: 1413331200, v: 1417132800, w: 1422316800, x: 1425945600, y: 1430179200, z: 1433808e3, AB: 1477267200, BB: 1481587200, CB: 1486425600, DB: 1490054400, EB: 1494374400, FB: 1498003200, GB: 1502236800, HB: 1506470400, IB: 1510099200, JB: 1515024e3, KB: 1517961600, LB: 1521676800, MB: 1525910400, NB: 1530144e3, OB: 1534982400, PB: 1537833600, QB: 1543363200, RB: 1548201600, SB: 1554768e3, TB: 1561593600, UB: 1566259200, Y: 1570406400, VB: 1573689600, WB: 1578441600, XB: 1583971200, YB: 1587513600, ZB: 1592956800, aB: 1595894400, bB: 1600128e3, cB: 1603238400, dB: 161352e4, eB: 1612224e3, fB: 1616544e3, gB: 1619568e3, hB: 1623715200, iB: 1627948800, P: 1631577600, Q: 1633392e3, R: 1635984e3, pB: 1638403200, S: 1642550400, T: 1644969600, U: 1647993600, V: 1650412800, W: null }, D: { F: "o", B: "o", C: "o", EC: "o", FC: "o", GC: "o", HC: "o", jB: "o", wB: "o", IC: "o", kB: "o" } }, G: { A: { E: 0, rB: 149648e-8, JC: 0, xB: 149648e-8, KC: 448945e-8, LC: 448945e-8, MC: 0.0164613, NC: 748241e-8, OC: 0.0164613, PC: 0.0748241, QC: 897889e-8, RC: 0.0823065, SC: 0.040405, TC: 0.0299296, UC: 0.0299296, VC: 0.559684, WC: 0.0254402, XC: 0.0119719, YC: 0.0553698, ZC: 0.173592, aC: 0.528258, bC: 1.278, cC: 0.399561, tB: 0.749737, uB: 2.16691, vB: 8.63769, lB: 0.0284332 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "rB", "JC", "xB", "KC", "LC", "MC", "E", "NC", "OC", "PC", "QC", "RC", "SC", "TC", "UC", "VC", "WC", "XC", "YC", "ZC", "aC", "bC", "cC", "tB", "uB", "vB", "lB", "", ""], E: "Safari on iOS", F: { rB: 1270252800, JC: 1283904e3, xB: 1299628800, KC: 1331078400, LC: 1359331200, MC: 1394409600, E: 1410912e3, NC: 1413763200, OC: 1442361600, PC: 1458518400, QC: 1473724800, RC: 1490572800, SC: 1505779200, TC: 1522281600, UC: 1537142400, VC: 1553472e3, WC: 1568851200, XC: 1572220800, YC: 1580169600, ZC: 1585008e3, aC: 1600214400, bC: 1619395200, cC: 1632096e3, tB: 1639353600, uB: 1647216e3, vB: 1652659200, lB: null } }, H: { A: { dC: 0.950748 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "dC", "", "", ""], E: "Opera Mini", F: { dC: 1426464e3 } }, I: { A: { mB: 0, I: 0.0154975, H: 0, eC: 0, fC: 0, gC: 0, hC: 0.0206633, xB: 0.06199, iC: 0, jC: 0.304784 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "eC", "fC", "gC", "mB", "I", "hC", "xB", "iC", "jC", "H", "", "", ""], E: "Android Browser", F: { eC: 1256515200, fC: 1274313600, gC: 1291593600, mB: 1298332800, I: 1318896e3, hC: 1341792e3, xB: 1374624e3, iC: 1386547200, jC: 1401667200, H: 1655856e3 } }, J: { A: { D: 0, A: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "D", "A", "", "", ""], E: "Blackberry Browser", F: { D: 1325376e3, A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, Y: 0.0111391, jB: 0, wB: 0, kB: 0 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A", "B", "jB", "wB", "C", "kB", "Y", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, jB: 1314835200, wB: 1318291200, C: 1330300800, kB: 1349740800, Y: 1613433600 }, D: { Y: "webkit" } }, L: { A: { H: 42.3898 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "H", "", "", ""], E: "Chrome for Android", F: { H: 1655769600 } }, M: { A: { X: 0.30995 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "X", "", "", ""], E: "Firefox for Android", F: { X: 1653955200 } }, N: { A: { A: 0.0115934, B: 0.022664 }, B: "ms", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A", "B", "", "", ""], E: "IE Mobile", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { kC: 0.712885 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "kC", "", "", ""], E: "UC Browser for Android", F: { kC: 1471392e3 }, D: { kC: "webkit" } }, P: { A: { I: 0.207064, lC: 0.0103543, mC: 0.010304, nC: 0.0828255, oC: 0.0103584, pC: 0.0103532, sB: 0.0105043, qC: 0.0414128, rC: 0.0207064, sC: 0.0828255, tC: 0.0931787, uC: 0.0931787, lB: 0.238123, vC: 2.11205 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "I", "lC", "mC", "nC", "oC", "pC", "sB", "qC", "rC", "sC", "tC", "uC", "lB", "vC", "", "", ""], E: "Samsung Internet", F: { I: 1461024e3, lC: 1481846400, mC: 1509408e3, nC: 1528329600, oC: 1546128e3, pC: 1554163200, sB: 1567900800, qC: 1582588800, rC: 1593475200, sC: 1605657600, tC: 1618531200, uC: 1629072e3, lB: 1640736e3, vC: 1651708800 } }, Q: { A: { wC: 0.142577 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "wC", "", "", ""], E: "QQ Browser", F: { wC: 1589846400 } }, R: { A: { xC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "xC", "", "", ""], E: "Baidu Browser", F: { xC: 1491004800 } }, S: { A: { yC: 0.049592 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "yC", "", "", ""], E: "KaiOS Browser", F: { yC: 1527811200 } } };
});
var require_agents2 = __commonJSMin((exports, module2) => {
  "use strict";
  var browsers = require_browsers2().browsers;
  var versions = require_browserVersions2().browserVersions;
  var agentsData = require_agents();
  function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version2) => {
      usage[versions[version2]] = versionsData[version2];
      return usage;
    }, {});
  }
  module2.exports.agents = Object.keys(agentsData).reduce((map, key) => {
    let versionsData = agentsData[key];
    map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
      if (entry === "A") {
        data.usage_global = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "C") {
        data.versions = versionsData[entry].reduce((list, version2) => {
          if (version2 === "") {
            list.push(null);
          } else {
            list.push(versions[version2]);
          }
          return list;
        }, []);
      } else if (entry === "D") {
        data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "E") {
        data.browser = versionsData[entry];
      } else if (entry === "F") {
        data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2) => {
          map2[versions[key2]] = versionsData[entry][key2];
          return map2;
        }, {});
      } else {
        data.prefix = versionsData[entry];
      }
      return data;
    }, {});
    return map;
  }, {});
});
var require_statuses = __commonJSMin((exports, module2) => {
  module2.exports = {
    1: "ls",
    2: "rec",
    3: "pr",
    4: "cr",
    5: "wd",
    6: "other",
    7: "unoff"
  };
});
var require_supported = __commonJSMin((exports, module2) => {
  module2.exports = {
    y: 1 << 0,
    n: 1 << 1,
    a: 1 << 2,
    p: 1 << 3,
    u: 1 << 4,
    x: 1 << 5,
    d: 1 << 6
  };
});
var require_feature = __commonJSMin((exports, module2) => {
  "use strict";
  var statuses = require_statuses();
  var supported = require_supported();
  var browsers = require_browsers2().browsers;
  var versions = require_browserVersions2().browserVersions;
  var MATH2LOG = Math.log(2);
  function unpackSupport(cipher) {
    let stats = Object.keys(supported).reduce((list, support) => {
      if (cipher & supported[support])
        list.push(support);
      return list;
    }, []);
    let notes = cipher >> 7;
    let notesArray = [];
    while (notes) {
      let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
      notesArray.unshift(`#${note}`);
      notes -= Math.pow(2, note - 1);
    }
    return stats.concat(notesArray).join(" ");
  }
  function unpackFeature(packed) {
    let unpacked = { status: statuses[packed.B], title: packed.C };
    unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
      let browser = packed.A[key];
      browserStats[browsers[key]] = Object.keys(browser).reduce((stats, support) => {
        let packedVersions = browser[support].split(" ");
        let unpacked2 = unpackSupport(support);
        packedVersions.forEach((v) => stats[versions[v]] = unpacked2);
        return stats;
      }, {});
      return browserStats;
    }, {});
    return unpacked;
  }
  module2.exports = unpackFeature;
  module2.exports.default = unpackFeature;
});
var require_region = __commonJSMin((exports, module2) => {
  "use strict";
  var browsers = require_browsers2().browsers;
  function unpackRegion(packed) {
    return Object.keys(packed).reduce((list, browser) => {
      let data = packed[browser];
      list[browsers[browser]] = Object.keys(data).reduce((memo, key) => {
        let stats = data[key];
        if (key === "_") {
          stats.split(" ").forEach((version2) => memo[version2] = null);
        } else {
          memo[key] = stats;
        }
        return memo;
      }, {});
      return list;
    }, {});
  }
  module2.exports = unpackRegion;
  module2.exports.default = unpackRegion;
});
var require_browserslist = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 923: (e2) => {
      function BrowserslistError(e3) {
        this.name = "BrowserslistError";
        this.message = e3;
        this.browserslist = true;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, BrowserslistError);
        }
      }
      BrowserslistError.prototype = Error.prototype;
      e2.exports = BrowserslistError;
    }, 751: (e2, s2, r2) => {
      var n = r2(936);
      var t = r2(768).agents;
      var a = r2(178);
      var i = r2(17);
      var o = r2(158);
      var l = r2(923);
      var f = r2(347);
      var u = 365.259641 * 24 * 60 * 60 * 1e3;
      var d = 37;
      var c = 1;
      var v = 2;
      function isVersionsMatch(e3, s3) {
        return (e3 + ".").indexOf(s3 + ".") === 0;
      }
      function isEolReleased(e3) {
        var s3 = e3.slice(1);
        return browserslist.nodeVersions.some(function(e4) {
          return isVersionsMatch(e4, s3);
        });
      }
      function normalize(e3) {
        return e3.filter(function(e4) {
          return typeof e4 === "string";
        });
      }
      function normalizeElectron(e3) {
        var s3 = e3;
        if (e3.split(".").length === 3) {
          s3 = e3.split(".").slice(0, -1).join(".");
        }
        return s3;
      }
      function nameMapper(e3) {
        return function mapName(s3) {
          return e3 + " " + s3;
        };
      }
      function getMajor(e3) {
        return parseInt(e3.split(".")[0]);
      }
      function getMajorVersions(e3, s3) {
        if (e3.length === 0)
          return [];
        var r3 = uniq(e3.map(getMajor));
        var n2 = r3[r3.length - s3];
        if (!n2) {
          return e3;
        }
        var t2 = [];
        for (var a2 = e3.length - 1; a2 >= 0; a2--) {
          if (n2 > getMajor(e3[a2]))
            break;
          t2.unshift(e3[a2]);
        }
        return t2;
      }
      function uniq(e3) {
        var s3 = [];
        for (var r3 = 0; r3 < e3.length; r3++) {
          if (s3.indexOf(e3[r3]) === -1)
            s3.push(e3[r3]);
        }
        return s3;
      }
      function fillUsage(e3, s3, r3) {
        for (var n2 in r3) {
          e3[s3 + " " + n2] = r3[n2];
        }
      }
      function generateFilter(e3, s3) {
        s3 = parseFloat(s3);
        if (e3 === ">") {
          return function(e4) {
            return parseFloat(e4) > s3;
          };
        } else if (e3 === ">=") {
          return function(e4) {
            return parseFloat(e4) >= s3;
          };
        } else if (e3 === "<") {
          return function(e4) {
            return parseFloat(e4) < s3;
          };
        } else {
          return function(e4) {
            return parseFloat(e4) <= s3;
          };
        }
      }
      function generateSemverFilter(e3, s3) {
        s3 = s3.split(".").map(parseSimpleInt);
        s3[1] = s3[1] || 0;
        s3[2] = s3[2] || 0;
        if (e3 === ">") {
          return function(e4) {
            e4 = e4.split(".").map(parseSimpleInt);
            return compareSemver(e4, s3) > 0;
          };
        } else if (e3 === ">=") {
          return function(e4) {
            e4 = e4.split(".").map(parseSimpleInt);
            return compareSemver(e4, s3) >= 0;
          };
        } else if (e3 === "<") {
          return function(e4) {
            e4 = e4.split(".").map(parseSimpleInt);
            return compareSemver(s3, e4) > 0;
          };
        } else {
          return function(e4) {
            e4 = e4.split(".").map(parseSimpleInt);
            return compareSemver(s3, e4) >= 0;
          };
        }
      }
      function parseSimpleInt(e3) {
        return parseInt(e3);
      }
      function compare(e3, s3) {
        if (e3 < s3)
          return -1;
        if (e3 > s3)
          return 1;
        return 0;
      }
      function compareSemver(e3, s3) {
        return compare(parseInt(e3[0]), parseInt(s3[0])) || compare(parseInt(e3[1] || "0"), parseInt(s3[1] || "0")) || compare(parseInt(e3[2] || "0"), parseInt(s3[2] || "0"));
      }
      function semverFilterLoose(e3, s3) {
        s3 = s3.split(".").map(parseSimpleInt);
        if (typeof s3[1] === "undefined") {
          s3[1] = "x";
        }
        switch (e3) {
          case "<=":
            return function(e4) {
              e4 = e4.split(".").map(parseSimpleInt);
              return compareSemverLoose(e4, s3) <= 0;
            };
          case ">=":
          default:
            return function(e4) {
              e4 = e4.split(".").map(parseSimpleInt);
              return compareSemverLoose(e4, s3) >= 0;
            };
        }
      }
      function compareSemverLoose(e3, s3) {
        if (e3[0] !== s3[0]) {
          return e3[0] < s3[0] ? -1 : 1;
        }
        if (s3[1] === "x") {
          return 0;
        }
        if (e3[1] !== s3[1]) {
          return e3[1] < s3[1] ? -1 : 1;
        }
        return 0;
      }
      function resolveVersion(e3, s3) {
        if (e3.versions.indexOf(s3) !== -1) {
          return s3;
        } else if (browserslist.versionAliases[e3.name][s3]) {
          return browserslist.versionAliases[e3.name][s3];
        } else {
          return false;
        }
      }
      function normalizeVersion(e3, s3) {
        var r3 = resolveVersion(e3, s3);
        if (r3) {
          return r3;
        } else if (e3.versions.length === 1) {
          return e3.versions[0];
        } else {
          return false;
        }
      }
      function filterByYear(e3, s3) {
        e3 = e3 / 1e3;
        return Object.keys(t).reduce(function(r3, n2) {
          var t2 = byName(n2, s3);
          if (!t2)
            return r3;
          var a2 = Object.keys(t2.releaseDate).filter(function(s4) {
            var r4 = t2.releaseDate[s4];
            return r4 !== null && r4 >= e3;
          });
          return r3.concat(a2.map(nameMapper(t2.name)));
        }, []);
      }
      function cloneData(e3) {
        return { name: e3.name, versions: e3.versions, released: e3.released, releaseDate: e3.releaseDate };
      }
      function mapVersions(e3, s3) {
        e3.versions = e3.versions.map(function(e4) {
          return s3[e4] || e4;
        });
        e3.released = e3.versions.map(function(e4) {
          return s3[e4] || e4;
        });
        var r3 = {};
        for (var n2 in e3.releaseDate) {
          r3[s3[n2] || n2] = e3.releaseDate[n2];
        }
        e3.releaseDate = r3;
        return e3;
      }
      function byName(e3, s3) {
        e3 = e3.toLowerCase();
        e3 = browserslist.aliases[e3] || e3;
        if (s3.mobileToDesktop && browserslist.desktopNames[e3]) {
          var r3 = browserslist.data[browserslist.desktopNames[e3]];
          if (e3 === "android") {
            return normalizeAndroidData(cloneData(browserslist.data[e3]), r3);
          } else {
            var n2 = cloneData(r3);
            n2.name = e3;
            if (e3 === "op_mob") {
              n2 = mapVersions(n2, { "10.0-10.1": "10" });
            }
            return n2;
          }
        }
        return browserslist.data[e3];
      }
      function normalizeAndroidVersions(e3, s3) {
        var r3 = d;
        var n2 = s3[s3.length - 1];
        return e3.filter(function(e4) {
          return /^(?:[2-4]\.|[34]$)/.test(e4);
        }).concat(s3.slice(r3 - n2 - 1));
      }
      function normalizeAndroidData(e3, s3) {
        e3.released = normalizeAndroidVersions(e3.released, s3.released);
        e3.versions = normalizeAndroidVersions(e3.versions, s3.versions);
        return e3;
      }
      function checkName(e3, s3) {
        var r3 = byName(e3, s3);
        if (!r3)
          throw new l("Unknown browser " + e3);
        return r3;
      }
      function unknownQuery(e3) {
        return new l("Unknown browser query `" + e3 + "`. Maybe you are using old Browserslist or made typo in query.");
      }
      function filterAndroid(e3, s3, r3) {
        if (r3.mobileToDesktop)
          return e3;
        var n2 = browserslist.data.android.released;
        var t2 = n2[n2.length - 1];
        var a2 = t2 - d - s3;
        if (a2 > 0) {
          return e3.slice(-1);
        } else {
          return e3.slice(a2 - 1);
        }
      }
      function resolve(e3, s3) {
        if (Array.isArray(e3)) {
          e3 = flatten2(e3.map(parse4));
        } else {
          e3 = parse4(e3);
        }
        return e3.reduce(function(e4, r3, n2) {
          var t2 = r3.queryString;
          var a2 = t2.indexOf("not ") === 0;
          if (a2) {
            if (n2 === 0) {
              throw new l("Write any browsers query (for instance, `defaults`) before `" + t2 + "`");
            }
            t2 = t2.slice(4);
          }
          for (var i2 = 0; i2 < p.length; i2++) {
            var o2 = p[i2];
            var f2 = t2.match(o2.regexp);
            if (f2) {
              var u2 = [s3].concat(f2.slice(1));
              var d2 = o2.select.apply(browserslist, u2).map(function(e5) {
                var r4 = e5.split(" ");
                if (r4[1] === "0") {
                  return r4[0] + " " + byName(r4[0], s3).versions[0];
                } else {
                  return e5;
                }
              });
              switch (r3.type) {
                case v:
                  if (a2) {
                    return e4.filter(function(e5) {
                      return d2.indexOf(e5) === -1;
                    });
                  } else {
                    return e4.filter(function(e5) {
                      return d2.indexOf(e5) !== -1;
                    });
                  }
                case c:
                default:
                  if (a2) {
                    var m2 = {};
                    d2.forEach(function(e5) {
                      m2[e5] = true;
                    });
                    return e4.filter(function(e5) {
                      return !m2[e5];
                    });
                  }
                  return e4.concat(d2);
              }
            }
          }
          throw unknownQuery(t2);
        }, []);
      }
      var m = {};
      function browserslist(e3, s3) {
        if (typeof s3 === "undefined")
          s3 = {};
        if (typeof s3.path === "undefined") {
          s3.path = i.resolve ? i.resolve(".") : ".";
        }
        if (typeof e3 === "undefined" || e3 === null) {
          var r3 = browserslist.loadConfig(s3);
          if (r3) {
            e3 = r3;
          } else {
            e3 = browserslist.defaults;
          }
        }
        if (!(typeof e3 === "string" || Array.isArray(e3))) {
          throw new l("Browser queries must be an array or string. Got " + typeof e3 + ".");
        }
        var n2 = { ignoreUnknownVersions: s3.ignoreUnknownVersions, dangerousExtend: s3.dangerousExtend, mobileToDesktop: s3.mobileToDesktop, path: s3.path, env: s3.env };
        f.oldDataWarning(browserslist.data);
        var t2 = f.getStat(s3, browserslist.data);
        if (t2) {
          n2.customUsage = {};
          for (var a2 in t2) {
            fillUsage(n2.customUsage, a2, t2[a2]);
          }
        }
        var o2 = JSON.stringify([e3, n2]);
        if (m[o2])
          return m[o2];
        var u2 = uniq(resolve(e3, n2)).sort(function(e4, s4) {
          e4 = e4.split(" ");
          s4 = s4.split(" ");
          if (e4[0] === s4[0]) {
            var r4 = e4[1].split("-")[0];
            var n3 = s4[1].split("-")[0];
            return compareSemver(n3.split("."), r4.split("."));
          } else {
            return compare(e4[0], s4[0]);
          }
        });
        if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
          m[o2] = u2;
        }
        return u2;
      }
      function parse4(e3) {
        var s3 = [];
        do {
          e3 = doMatch(e3, s3);
        } while (e3);
        return s3;
      }
      function doMatch(e3, s3) {
        var r3 = /^(?:,\s*|\s+or\s+)(.*)/i;
        var n2 = /^\s+and\s+(.*)/i;
        return find2(e3, function(e4, t2, a2) {
          if (n2.test(e4)) {
            s3.unshift({ type: v, queryString: e4.match(n2)[1] });
            return true;
          } else if (r3.test(e4)) {
            s3.unshift({ type: c, queryString: e4.match(r3)[1] });
            return true;
          } else if (t2 === a2) {
            s3.unshift({ type: c, queryString: e4.trim() });
            return true;
          }
          return false;
        });
      }
      function find2(e3, s3) {
        for (var r3 = 1, n2 = e3.length; r3 <= n2; r3++) {
          var t2 = e3.substr(-r3, r3);
          if (s3(t2, r3, n2)) {
            return e3.slice(0, -r3);
          }
        }
        return "";
      }
      function flatten2(e3) {
        if (!Array.isArray(e3))
          return [e3];
        return e3.reduce(function(e4, s3) {
          return e4.concat(flatten2(s3));
        }, []);
      }
      browserslist.cache = {};
      browserslist.data = {};
      browserslist.usage = { global: {}, custom: null };
      browserslist.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
      browserslist.aliases = { fx: "firefox", ff: "firefox", ios: "ios_saf", explorer: "ie", blackberry: "bb", explorermobile: "ie_mob", operamini: "op_mini", operamobile: "op_mob", chromeandroid: "and_chr", firefoxandroid: "and_ff", ucandroid: "and_uc", qqandroid: "and_qq" };
      browserslist.desktopNames = { and_chr: "chrome", and_ff: "firefox", ie_mob: "ie", op_mob: "opera", android: "chrome" };
      browserslist.versionAliases = {};
      browserslist.clearCaches = f.clearCaches;
      browserslist.parseConfig = f.parseConfig;
      browserslist.readConfig = f.readConfig;
      browserslist.findConfig = f.findConfig;
      browserslist.loadConfig = f.loadConfig;
      browserslist.coverage = function(e3, s3) {
        var r3;
        if (typeof s3 === "undefined") {
          r3 = browserslist.usage.global;
        } else if (s3 === "my stats") {
          var n2 = {};
          n2.path = i.resolve ? i.resolve(".") : ".";
          var t2 = f.getStat(n2);
          if (!t2) {
            throw new l("Custom usage statistics was not provided");
          }
          r3 = {};
          for (var a2 in t2) {
            fillUsage(r3, a2, t2[a2]);
          }
        } else if (typeof s3 === "string") {
          if (s3.length > 2) {
            s3 = s3.toLowerCase();
          } else {
            s3 = s3.toUpperCase();
          }
          f.loadCountry(browserslist.usage, s3, browserslist.data);
          r3 = browserslist.usage[s3];
        } else {
          if ("dataByBrowser" in s3) {
            s3 = s3.dataByBrowser;
          }
          r3 = {};
          for (var o2 in s3) {
            for (var u2 in s3[o2]) {
              r3[o2 + " " + u2] = s3[o2][u2];
            }
          }
        }
        return e3.reduce(function(e4, s4) {
          var n3 = r3[s4];
          if (n3 === void 0) {
            n3 = r3[s4.replace(/ \S+$/, " 0")];
          }
          return e4 + (n3 || 0);
        }, 0);
      };
      function nodeQuery(e3, s3) {
        var r3 = browserslist.nodeVersions.filter(function(e4) {
          return isVersionsMatch(e4, s3);
        });
        if (r3.length === 0) {
          if (e3.ignoreUnknownVersions) {
            return [];
          } else {
            throw new l("Unknown version " + s3 + " of Node.js");
          }
        }
        return ["node " + r3[r3.length - 1]];
      }
      function sinceQuery(e3, s3, r3, n2) {
        s3 = parseInt(s3);
        r3 = parseInt(r3 || "01") - 1;
        n2 = parseInt(n2 || "01");
        return filterByYear(Date.UTC(s3, r3, n2, 0, 0, 0), e3);
      }
      function coverQuery(e3, s3, r3) {
        s3 = parseFloat(s3);
        var n2 = browserslist.usage.global;
        if (r3) {
          if (r3.match(/^my\s+stats$/i)) {
            if (!e3.customUsage) {
              throw new l("Custom usage statistics was not provided");
            }
            n2 = e3.customUsage;
          } else {
            var t2;
            if (r3.length === 2) {
              t2 = r3.toUpperCase();
            } else {
              t2 = r3.toLowerCase();
            }
            f.loadCountry(browserslist.usage, t2, browserslist.data);
            n2 = browserslist.usage[t2];
          }
        }
        var a2 = Object.keys(n2).sort(function(e4, s4) {
          return n2[s4] - n2[e4];
        });
        var i2 = 0;
        var o2 = [];
        var u2;
        for (var d2 = 0; d2 < a2.length; d2++) {
          u2 = a2[d2];
          if (n2[u2] === 0)
            break;
          i2 += n2[u2];
          o2.push(u2);
          if (i2 >= s3)
            break;
        }
        return o2;
      }
      var p = [{ regexp: /^last\s+(\d+)\s+major\s+versions?$/i, select: function(e3, s3) {
        return Object.keys(t).reduce(function(r3, n2) {
          var t2 = byName(n2, e3);
          if (!t2)
            return r3;
          var a2 = getMajorVersions(t2.released, s3);
          a2 = a2.map(nameMapper(t2.name));
          if (t2.name === "android") {
            a2 = filterAndroid(a2, s3, e3);
          }
          return r3.concat(a2);
        }, []);
      } }, { regexp: /^last\s+(\d+)\s+versions?$/i, select: function(e3, s3) {
        return Object.keys(t).reduce(function(r3, n2) {
          var t2 = byName(n2, e3);
          if (!t2)
            return r3;
          var a2 = t2.released.slice(-s3);
          a2 = a2.map(nameMapper(t2.name));
          if (t2.name === "android") {
            a2 = filterAndroid(a2, s3, e3);
          }
          return r3.concat(a2);
        }, []);
      } }, { regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i, select: function(e3, s3) {
        var r3 = getMajorVersions(Object.keys(o), s3);
        return r3.map(function(e4) {
          return "chrome " + o[e4];
        });
      } }, { regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i, select: function(e3, s3) {
        return getMajorVersions(browserslist.nodeVersions, s3).map(function(e4) {
          return "node " + e4;
        });
      } }, { regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i, select: function(e3, s3, r3) {
        var n2 = checkName(r3, e3);
        var t2 = getMajorVersions(n2.released, s3);
        var a2 = t2.map(nameMapper(n2.name));
        if (n2.name === "android") {
          a2 = filterAndroid(a2, s3, e3);
        }
        return a2;
      } }, { regexp: /^last\s+(\d+)\s+electron\s+versions?$/i, select: function(e3, s3) {
        return Object.keys(o).slice(-s3).map(function(e4) {
          return "chrome " + o[e4];
        });
      } }, { regexp: /^last\s+(\d+)\s+node\s+versions?$/i, select: function(e3, s3) {
        return browserslist.nodeVersions.slice(-s3).map(function(e4) {
          return "node " + e4;
        });
      } }, { regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i, select: function(e3, s3, r3) {
        var n2 = checkName(r3, e3);
        var t2 = n2.released.slice(-s3).map(nameMapper(n2.name));
        if (n2.name === "android") {
          t2 = filterAndroid(t2, s3, e3);
        }
        return t2;
      } }, { regexp: /^unreleased\s+versions$/i, select: function(e3) {
        return Object.keys(t).reduce(function(s3, r3) {
          var n2 = byName(r3, e3);
          if (!n2)
            return s3;
          var t2 = n2.versions.filter(function(e4) {
            return n2.released.indexOf(e4) === -1;
          });
          t2 = t2.map(nameMapper(n2.name));
          return s3.concat(t2);
        }, []);
      } }, { regexp: /^unreleased\s+electron\s+versions?$/i, select: function() {
        return [];
      } }, { regexp: /^unreleased\s+(\w+)\s+versions?$/i, select: function(e3, s3) {
        var r3 = checkName(s3, e3);
        return r3.versions.filter(function(e4) {
          return r3.released.indexOf(e4) === -1;
        }).map(nameMapper(r3.name));
      } }, { regexp: /^last\s+(\d*.?\d+)\s+years?$/i, select: function(e3, s3) {
        return filterByYear(Date.now() - u * s3, e3);
      } }, { regexp: /^since (\d+)$/i, select: sinceQuery }, { regexp: /^since (\d+)-(\d+)$/i, select: sinceQuery }, { regexp: /^since (\d+)-(\d+)-(\d+)$/i, select: sinceQuery }, { regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/, select: function(e3, s3, r3) {
        r3 = parseFloat(r3);
        var n2 = browserslist.usage.global;
        return Object.keys(n2).reduce(function(e4, t2) {
          if (s3 === ">") {
            if (n2[t2] > r3) {
              e4.push(t2);
            }
          } else if (s3 === "<") {
            if (n2[t2] < r3) {
              e4.push(t2);
            }
          } else if (s3 === "<=") {
            if (n2[t2] <= r3) {
              e4.push(t2);
            }
          } else if (n2[t2] >= r3) {
            e4.push(t2);
          }
          return e4;
        }, []);
      } }, { regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/, select: function(e3, s3, r3) {
        r3 = parseFloat(r3);
        if (!e3.customUsage) {
          throw new l("Custom usage statistics was not provided");
        }
        var n2 = e3.customUsage;
        return Object.keys(n2).reduce(function(e4, t2) {
          var a2 = n2[t2];
          if (a2 == null) {
            return e4;
          }
          if (s3 === ">") {
            if (a2 > r3) {
              e4.push(t2);
            }
          } else if (s3 === "<") {
            if (a2 < r3) {
              e4.push(t2);
            }
          } else if (s3 === "<=") {
            if (a2 <= r3) {
              e4.push(t2);
            }
          } else if (a2 >= r3) {
            e4.push(t2);
          }
          return e4;
        }, []);
      } }, { regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/, select: function(e3, s3, r3, n2) {
        r3 = parseFloat(r3);
        var t2 = f.loadStat(e3, n2, browserslist.data);
        if (t2) {
          e3.customUsage = {};
          for (var a2 in t2) {
            fillUsage(e3.customUsage, a2, t2[a2]);
          }
        }
        if (!e3.customUsage) {
          throw new l("Custom usage statistics was not provided");
        }
        var i2 = e3.customUsage;
        return Object.keys(i2).reduce(function(e4, n3) {
          var t3 = i2[n3];
          if (t3 == null) {
            return e4;
          }
          if (s3 === ">") {
            if (t3 > r3) {
              e4.push(n3);
            }
          } else if (s3 === "<") {
            if (t3 < r3) {
              e4.push(n3);
            }
          } else if (s3 === "<=") {
            if (t3 <= r3) {
              e4.push(n3);
            }
          } else if (t3 >= r3) {
            e4.push(n3);
          }
          return e4;
        }, []);
      } }, { regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/, select: function(e3, s3, r3, n2) {
        r3 = parseFloat(r3);
        if (n2.length === 2) {
          n2 = n2.toUpperCase();
        } else {
          n2 = n2.toLowerCase();
        }
        f.loadCountry(browserslist.usage, n2, browserslist.data);
        var t2 = browserslist.usage[n2];
        return Object.keys(t2).reduce(function(e4, n3) {
          var a2 = t2[n3];
          if (a2 == null) {
            return e4;
          }
          if (s3 === ">") {
            if (a2 > r3) {
              e4.push(n3);
            }
          } else if (s3 === "<") {
            if (a2 < r3) {
              e4.push(n3);
            }
          } else if (s3 === "<=") {
            if (a2 <= r3) {
              e4.push(n3);
            }
          } else if (a2 >= r3) {
            e4.push(n3);
          }
          return e4;
        }, []);
      } }, { regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i, select: coverQuery }, { regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i, select: coverQuery }, { regexp: /^supports\s+([\w-]+)$/, select: function(e3, s3) {
        f.loadFeature(browserslist.cache, s3);
        var r3 = browserslist.cache[s3];
        return Object.keys(r3).reduce(function(e4, s4) {
          var n2 = r3[s4];
          if (n2.indexOf("y") >= 0 || n2.indexOf("a") >= 0) {
            e4.push(s4);
          }
          return e4;
        }, []);
      } }, { regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i, select: function(e3, s3, r3) {
        var n2 = normalizeElectron(s3);
        var t2 = normalizeElectron(r3);
        if (!o[n2]) {
          throw new l("Unknown version " + s3 + " of electron");
        }
        if (!o[t2]) {
          throw new l("Unknown version " + r3 + " of electron");
        }
        s3 = parseFloat(s3);
        r3 = parseFloat(r3);
        return Object.keys(o).filter(function(e4) {
          var n3 = parseFloat(e4);
          return n3 >= s3 && n3 <= r3;
        }).map(function(e4) {
          return "chrome " + o[e4];
        });
      } }, { regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i, select: function(e3, s3, r3) {
        return browserslist.nodeVersions.filter(semverFilterLoose(">=", s3)).filter(semverFilterLoose("<=", r3)).map(function(e4) {
          return "node " + e4;
        });
      } }, { regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i, select: function(e3, s3, r3, n2) {
        var t2 = checkName(s3, e3);
        r3 = parseFloat(normalizeVersion(t2, r3) || r3);
        n2 = parseFloat(normalizeVersion(t2, n2) || n2);
        function filter(e4) {
          var s4 = parseFloat(e4);
          return s4 >= r3 && s4 <= n2;
        }
        return t2.released.filter(filter).map(nameMapper(t2.name));
      } }, { regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i, select: function(e3, s3, r3) {
        var n2 = normalizeElectron(r3);
        return Object.keys(o).filter(generateFilter(s3, n2)).map(function(e4) {
          return "chrome " + o[e4];
        });
      } }, { regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i, select: function(e3, s3, r3) {
        return browserslist.nodeVersions.filter(generateSemverFilter(s3, r3)).map(function(e4) {
          return "node " + e4;
        });
      } }, { regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/, select: function(e3, s3, r3, n2) {
        var t2 = checkName(s3, e3);
        var a2 = browserslist.versionAliases[t2.name][n2];
        if (a2) {
          n2 = a2;
        }
        return t2.released.filter(generateFilter(r3, n2)).map(function(e4) {
          return t2.name + " " + e4;
        });
      } }, { regexp: /^(firefox|ff|fx)\s+esr$/i, select: function() {
        return ["firefox 91"];
      } }, { regexp: /(operamini|op_mini)\s+all/i, select: function() {
        return ["op_mini all"];
      } }, { regexp: /^electron\s+([\d.]+)$/i, select: function(e3, s3) {
        var r3 = normalizeElectron(s3);
        var n2 = o[r3];
        if (!n2) {
          throw new l("Unknown version " + s3 + " of electron");
        }
        return ["chrome " + n2];
      } }, { regexp: /^node\s+(\d+)$/i, select: nodeQuery }, { regexp: /^node\s+(\d+\.\d+)$/i, select: nodeQuery }, { regexp: /^node\s+(\d+\.\d+\.\d+)$/i, select: nodeQuery }, { regexp: /^current\s+node$/i, select: function(e3) {
        return [f.currentNode(resolve, e3)];
      } }, { regexp: /^maintained\s+node\s+versions$/i, select: function(e3) {
        var s3 = Date.now();
        var r3 = Object.keys(a).filter(function(e4) {
          return s3 < Date.parse(a[e4].end) && s3 > Date.parse(a[e4].start) && isEolReleased(e4);
        }).map(function(e4) {
          return "node " + e4.slice(1);
        });
        return resolve(r3, e3);
      } }, { regexp: /^phantomjs\s+1.9$/i, select: function() {
        return ["safari 5"];
      } }, { regexp: /^phantomjs\s+2.1$/i, select: function() {
        return ["safari 6"];
      } }, { regexp: /^(\w+)\s+(tp|[\d.]+)$/i, select: function(e3, s3, r3) {
        if (/^tp$/i.test(r3))
          r3 = "TP";
        var n2 = checkName(s3, e3);
        var t2 = normalizeVersion(n2, r3);
        if (t2) {
          r3 = t2;
        } else {
          if (r3.indexOf(".") === -1) {
            t2 = r3 + ".0";
          } else {
            t2 = r3.replace(/\.0$/, "");
          }
          t2 = normalizeVersion(n2, t2);
          if (t2) {
            r3 = t2;
          } else if (e3.ignoreUnknownVersions) {
            return [];
          } else {
            throw new l("Unknown version " + r3 + " of " + s3);
          }
        }
        return [n2.name + " " + r3];
      } }, { regexp: /^browserslist config$/i, select: function(e3) {
        return browserslist(void 0, e3);
      } }, { regexp: /^extends (.+)$/i, select: function(e3, s3) {
        return resolve(f.loadQueries(e3, s3), e3);
      } }, { regexp: /^defaults$/i, select: function(e3) {
        return resolve(browserslist.defaults, e3);
      } }, { regexp: /^dead$/i, select: function(e3) {
        var s3 = ["ie <= 10", "ie_mob <= 11", "bb <= 10", "op_mob <= 12.1", "samsung 4"];
        return resolve(s3, e3);
      } }, { regexp: /^(\w+)$/i, select: function(e3, s3) {
        if (byName(s3, e3)) {
          throw new l("Specify versions in Browserslist query for browser " + s3);
        } else {
          throw unknownQuery(s3);
        }
      } }];
      (function() {
        for (var e3 in t) {
          var s3 = t[e3];
          browserslist.data[e3] = { name: e3, versions: normalize(t[e3].versions), released: normalize(t[e3].versions.slice(0, -3)), releaseDate: t[e3].release_date };
          fillUsage(browserslist.usage.global, e3, s3.usage_global);
          browserslist.versionAliases[e3] = {};
          for (var r3 = 0; r3 < s3.versions.length; r3++) {
            var a2 = s3.versions[r3];
            if (!a2)
              continue;
            if (a2.indexOf("-") !== -1) {
              var i2 = a2.split("-");
              for (var o2 = 0; o2 < i2.length; o2++) {
                browserslist.versionAliases[e3][i2[o2]] = a2;
              }
            }
          }
        }
        browserslist.versionAliases.op_mob["59"] = "58";
        browserslist.nodeVersions = n.map(function(e4) {
          return e4.version;
        });
      })();
      e2.exports = browserslist;
    }, 347: (e2, s2, r2) => {
      var n = r2(711)["default"];
      var t = r2(225)["default"];
      var a = r2(17);
      var i = r2(147);
      var o = r2(923);
      var l = /^\s*\[(.+)]\s*$/;
      var f = /^browserslist-config-/;
      var u = /@[^/]+\/browserslist-config(-|$|\/)/;
      var d = 6 * 30 * 24 * 60 * 60 * 1e3;
      var c = "Browserslist config should be a string or an array of strings with browser queries";
      var v = false;
      var m = {};
      var p = {};
      function checkExtend(e3) {
        var s3 = " Use `dangerousExtend` option to disable.";
        if (!f.test(e3) && !u.test(e3)) {
          throw new o("Browserslist config needs `browserslist-config-` prefix. " + s3);
        }
        if (e3.replace(/^@[^/]+\//, "").indexOf(".") !== -1) {
          throw new o("`.` not allowed in Browserslist config name. " + s3);
        }
        if (e3.indexOf("node_modules") !== -1) {
          throw new o("`node_modules` not allowed in Browserslist config." + s3);
        }
      }
      function isFile(e3) {
        if (e3 in m) {
          return m[e3];
        }
        var s3 = i.existsSync(e3) && i.statSync(e3).isFile();
        if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
          m[e3] = s3;
        }
        return s3;
      }
      function eachParent(e3, s3) {
        var r3 = isFile(e3) ? a.dirname(e3) : e3;
        var n2 = a.resolve(r3);
        do {
          var t2 = s3(n2);
          if (typeof t2 !== "undefined")
            return t2;
        } while (n2 !== (n2 = a.dirname(n2)));
        return void 0;
      }
      function check(e3) {
        if (Array.isArray(e3)) {
          for (var s3 = 0; s3 < e3.length; s3++) {
            if (typeof e3[s3] !== "string") {
              throw new o(c);
            }
          }
        } else if (typeof e3 !== "string") {
          throw new o(c);
        }
      }
      function pickEnv(e3, s3) {
        if (typeof e3 !== "object")
          return e3;
        var r3;
        if (typeof s3.env === "string") {
          r3 = s3.env;
        } else if (process.env.BROWSERSLIST_ENV) {
          r3 = process.env.BROWSERSLIST_ENV;
        } else if ("production") {
          r3 = "production";
        } else {
          r3 = "production";
        }
        if (s3.throwOnMissing) {
          if (r3 && r3 !== "defaults" && !e3[r3]) {
            throw new o("Missing config for Browserslist environment `" + r3 + "`");
          }
        }
        return e3[r3] || e3.defaults;
      }
      function parsePackage(e3) {
        var s3 = JSON.parse(i.readFileSync(e3));
        if (s3.browserlist && !s3.browserslist) {
          throw new o("`browserlist` key instead of `browserslist` in " + e3);
        }
        var r3 = s3.browserslist;
        if (Array.isArray(r3) || typeof r3 === "string") {
          r3 = { defaults: r3 };
        }
        for (var n2 in r3) {
          check(r3[n2]);
        }
        return r3;
      }
      function latestReleaseTime(e3) {
        var s3 = 0;
        for (var r3 in e3) {
          var n2 = e3[r3].releaseDate || {};
          for (var t2 in n2) {
            if (s3 < n2[t2]) {
              s3 = n2[t2];
            }
          }
        }
        return s3 * 1e3;
      }
      function normalizeStats(e3, s3) {
        if (!e3) {
          e3 = {};
        }
        if (s3 && "dataByBrowser" in s3) {
          s3 = s3.dataByBrowser;
        }
        if (typeof s3 !== "object")
          return void 0;
        var r3 = {};
        for (var n2 in s3) {
          var t2 = Object.keys(s3[n2]);
          if (t2.length === 1 && e3[n2] && e3[n2].versions.length === 1) {
            var a2 = e3[n2].versions[0];
            r3[n2] = {};
            r3[n2][a2] = s3[n2][t2[0]];
          } else {
            r3[n2] = s3[n2];
          }
        }
        return r3;
      }
      function normalizeUsageData(e3, s3) {
        for (var r3 in e3) {
          var n2 = e3[r3];
          if ("0" in n2) {
            var t2 = s3[r3].versions;
            n2[t2[t2.length - 1]] = n2[0];
            delete n2[0];
          }
        }
      }
      e2.exports = { loadQueries: function loadQueries(e3, s3) {
        if (!e3.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
          checkExtend(s3);
        }
        var n2 = __require(r2(174).resolve(s3, { paths: [".", e3.path] }));
        if (n2) {
          if (Array.isArray(n2)) {
            return n2;
          } else if (typeof n2 === "object") {
            if (!n2.defaults)
              n2.defaults = [];
            return pickEnv(n2, e3, s3);
          }
        }
        throw new o("`" + s3 + "` config exports not an array of queries or an object of envs");
      }, loadStat: function loadStat(e3, s3, n2) {
        if (!e3.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
          checkExtend(s3);
        }
        var t2 = __require(r2(174).resolve(a.join(s3, "browserslist-stats.json"), { paths: ["."] }));
        return normalizeStats(n2, t2);
      }, getStat: function getStat(e3, s3) {
        var r3;
        if (e3.stats) {
          r3 = e3.stats;
        } else if (process.env.BROWSERSLIST_STATS) {
          r3 = process.env.BROWSERSLIST_STATS;
        } else if (e3.path && a.resolve && i.existsSync) {
          r3 = eachParent(e3.path, function(e4) {
            var s4 = a.join(e4, "browserslist-stats.json");
            return isFile(s4) ? s4 : void 0;
          });
        }
        if (typeof r3 === "string") {
          try {
            r3 = JSON.parse(i.readFileSync(r3));
          } catch (e4) {
            throw new o("Can't read " + r3);
          }
        }
        return normalizeStats(s3, r3);
      }, loadConfig: function loadConfig(s3) {
        if (process.env.BROWSERSLIST) {
          return process.env.BROWSERSLIST;
        } else if (s3.config || process.env.BROWSERSLIST_CONFIG) {
          var r3 = s3.config || process.env.BROWSERSLIST_CONFIG;
          if (a.basename(r3) === "package.json") {
            return pickEnv(parsePackage(r3), s3);
          } else {
            return pickEnv(e2.exports.readConfig(r3), s3);
          }
        } else if (s3.path) {
          return pickEnv(e2.exports.findConfig(s3.path), s3);
        } else {
          return void 0;
        }
      }, loadCountry: function loadCountry(e3, s3, r3) {
        var n2 = s3.replace(/[^\w-]/g, "");
        if (!e3[n2]) {
          var a2 = __require("caniuse-lite/data/regions/" + n2 + ".js");
          var i2 = t(a2);
          normalizeUsageData(i2, r3);
          e3[s3] = {};
          for (var o2 in i2) {
            for (var l2 in i2[o2]) {
              e3[s3][o2 + " " + l2] = i2[o2][l2];
            }
          }
        }
      }, loadFeature: function loadFeature(e3, s3) {
        s3 = s3.replace(/[^\w-]/g, "");
        if (e3[s3])
          return;
        var r3 = __require("caniuse-lite/data/features/" + s3 + ".js");
        var t2 = n(r3).stats;
        e3[s3] = {};
        for (var a2 in t2) {
          for (var i2 in t2[a2]) {
            e3[s3][a2 + " " + i2] = t2[a2][i2];
          }
        }
      }, parseConfig: function parseConfig(e3) {
        var s3 = { defaults: [] };
        var r3 = ["defaults"];
        e3.toString().replace(/#[^\n]*/g, "").split(/\n|,/).map(function(e4) {
          return e4.trim();
        }).filter(function(e4) {
          return e4 !== "";
        }).forEach(function(e4) {
          if (l.test(e4)) {
            r3 = e4.match(l)[1].trim().split(" ");
            r3.forEach(function(e5) {
              if (s3[e5]) {
                throw new o("Duplicate section " + e5 + " in Browserslist config");
              }
              s3[e5] = [];
            });
          } else {
            r3.forEach(function(r4) {
              s3[r4].push(e4);
            });
          }
        });
        return s3;
      }, readConfig: function readConfig(s3) {
        if (!isFile(s3)) {
          throw new o("Can't read " + s3 + " config");
        }
        return e2.exports.parseConfig(i.readFileSync(s3));
      }, findConfig: function findConfig(s3) {
        s3 = a.resolve(s3);
        var r3 = [];
        var n2 = eachParent(s3, function(s4) {
          if (s4 in p) {
            return p[s4];
          }
          r3.push(s4);
          var n3 = a.join(s4, "browserslist");
          var t2 = a.join(s4, "package.json");
          var i2 = a.join(s4, ".browserslistrc");
          var l2;
          if (isFile(t2)) {
            try {
              l2 = parsePackage(t2);
            } catch (e3) {
              if (e3.name === "BrowserslistError")
                throw e3;
              console.warn("[Browserslist] Could not parse " + t2 + ". Ignoring it.");
            }
          }
          if (isFile(n3) && l2) {
            throw new o(s4 + " contains both browserslist and package.json with browsers");
          } else if (isFile(i2) && l2) {
            throw new o(s4 + " contains both .browserslistrc and package.json with browsers");
          } else if (isFile(n3) && isFile(i2)) {
            throw new o(s4 + " contains both .browserslistrc and browserslist");
          } else if (isFile(n3)) {
            return e2.exports.readConfig(n3);
          } else if (isFile(i2)) {
            return e2.exports.readConfig(i2);
          } else {
            return l2;
          }
        });
        if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
          r3.forEach(function(e3) {
            p[e3] = n2;
          });
        }
        return n2;
      }, clearCaches: function clearCaches() {
        v = false;
        m = {};
        p = {};
        this.cache = {};
      }, oldDataWarning: function oldDataWarning(e3) {
        if (v)
          return;
        v = true;
        if (process.env.BROWSERSLIST_IGNORE_OLD_DATA)
          return;
        var s3 = latestReleaseTime(e3);
        var r3 = Date.now() - d;
        if (s3 !== 0 && s3 < r3) {
          console.warn("Browserslist: caniuse-lite is outdated. Please run:\n  npx browserslist@latest --update-db\n  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating");
        }
      }, currentNode: function currentNode() {
        return "node " + process.versions.node;
      } };
    }, 158: (e2) => {
      e2.exports = { "0.20": "39", 0.21: "41", 0.22: "41", 0.23: "41", 0.24: "41", 0.25: "42", 0.26: "42", 0.27: "43", 0.28: "43", 0.29: "43", "0.30": "44", 0.31: "45", 0.32: "45", 0.33: "45", 0.34: "45", 0.35: "45", 0.36: "47", 0.37: "49", "1.0": "49", 1.1: "50", 1.2: "51", 1.3: "52", 1.4: "53", 1.5: "54", 1.6: "56", 1.7: "58", 1.8: "59", "2.0": "61", 2.1: "61", "3.0": "66", 3.1: "66", "4.0": "69", 4.1: "69", 4.2: "69", "5.0": "73", "6.0": "76", 6.1: "76", "7.0": "78", 7.1: "78", 7.2: "78", 7.3: "78", "8.0": "80", 8.1: "80", 8.2: "80", 8.3: "80", 8.4: "80", 8.5: "80", "9.0": "83", 9.1: "83", 9.2: "83", 9.3: "83", 9.4: "83", "10.0": "85", 10.1: "85", 10.2: "85", 10.3: "85", 10.4: "85", "11.0": "87", 11.1: "87", 11.2: "87", 11.3: "87", 11.4: "87", 11.5: "87", "12.0": "89", 12.1: "89", 12.2: "89", "13.0": "91", 13.1: "91", 13.2: "91", 13.3: "91", 13.4: "91", 13.5: "91", 13.6: "91", "14.0": "93", 14.1: "93", 14.2: "93", "15.0": "94", 15.1: "94", 15.2: "94", 15.3: "94", 15.4: "94", "16.0": "96", 16.1: "96", "17.0": "98", 17.1: "98", "18.0": "100" };
    }, 174: (e2) => {
      function webpackEmptyContext(e3) {
        var s2 = new Error("Cannot find module '" + e3 + "'");
        s2.code = "MODULE_NOT_FOUND";
        throw s2;
      }
      webpackEmptyContext.keys = () => [];
      webpackEmptyContext.resolve = webpackEmptyContext;
      webpackEmptyContext.id = 174;
      e2.exports = webpackEmptyContext;
    }, 768: (e2) => {
      "use strict";
      e2.exports = require_agents2();
    }, 711: (e2) => {
      "use strict";
      e2.exports = require_feature();
    }, 225: (e2) => {
      "use strict";
      e2.exports = require_region();
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    }, 936: (e2) => {
      "use strict";
      e2.exports = JSON.parse('[{"name":"nodejs","version":"0.2.0","date":"2011-08-26","lts":false,"security":false},{"name":"nodejs","version":"0.3.0","date":"2011-08-26","lts":false,"security":false},{"name":"nodejs","version":"0.4.0","date":"2011-08-26","lts":false,"security":false},{"name":"nodejs","version":"0.5.0","date":"2011-08-26","lts":false,"security":false},{"name":"nodejs","version":"0.6.0","date":"2011-11-04","lts":false,"security":false},{"name":"nodejs","version":"0.7.0","date":"2012-01-17","lts":false,"security":false},{"name":"nodejs","version":"0.8.0","date":"2012-06-22","lts":false,"security":false},{"name":"nodejs","version":"0.9.0","date":"2012-07-20","lts":false,"security":false},{"name":"nodejs","version":"0.10.0","date":"2013-03-11","lts":false,"security":false},{"name":"nodejs","version":"0.11.0","date":"2013-03-28","lts":false,"security":false},{"name":"nodejs","version":"0.12.0","date":"2015-02-06","lts":false,"security":false},{"name":"nodejs","version":"4.0.0","date":"2015-09-08","lts":false,"security":false},{"name":"nodejs","version":"4.1.0","date":"2015-09-17","lts":false,"security":false},{"name":"nodejs","version":"4.2.0","date":"2015-10-12","lts":"Argon","security":false},{"name":"nodejs","version":"4.3.0","date":"2016-02-09","lts":"Argon","security":false},{"name":"nodejs","version":"4.4.0","date":"2016-03-08","lts":"Argon","security":false},{"name":"nodejs","version":"4.5.0","date":"2016-08-16","lts":"Argon","security":false},{"name":"nodejs","version":"4.6.0","date":"2016-09-27","lts":"Argon","security":true},{"name":"nodejs","version":"4.7.0","date":"2016-12-06","lts":"Argon","security":false},{"name":"nodejs","version":"4.8.0","date":"2017-02-21","lts":"Argon","security":false},{"name":"nodejs","version":"4.9.0","date":"2018-03-28","lts":"Argon","security":true},{"name":"nodejs","version":"5.0.0","date":"2015-10-29","lts":false,"security":false},{"name":"nodejs","version":"5.1.0","date":"2015-11-17","lts":false,"security":false},{"name":"nodejs","version":"5.2.0","date":"2015-12-09","lts":false,"security":false},{"name":"nodejs","version":"5.3.0","date":"2015-12-15","lts":false,"security":false},{"name":"nodejs","version":"5.4.0","date":"2016-01-06","lts":false,"security":false},{"name":"nodejs","version":"5.5.0","date":"2016-01-21","lts":false,"security":false},{"name":"nodejs","version":"5.6.0","date":"2016-02-09","lts":false,"security":false},{"name":"nodejs","version":"5.7.0","date":"2016-02-23","lts":false,"security":false},{"name":"nodejs","version":"5.8.0","date":"2016-03-09","lts":false,"security":false},{"name":"nodejs","version":"5.9.0","date":"2016-03-16","lts":false,"security":false},{"name":"nodejs","version":"5.10.0","date":"2016-04-01","lts":false,"security":false},{"name":"nodejs","version":"5.11.0","date":"2016-04-21","lts":false,"security":false},{"name":"nodejs","version":"5.12.0","date":"2016-06-23","lts":false,"security":false},{"name":"nodejs","version":"6.0.0","date":"2016-04-26","lts":false,"security":false},{"name":"nodejs","version":"6.1.0","date":"2016-05-05","lts":false,"security":false},{"name":"nodejs","version":"6.2.0","date":"2016-05-17","lts":false,"security":false},{"name":"nodejs","version":"6.3.0","date":"2016-07-06","lts":false,"security":false},{"name":"nodejs","version":"6.4.0","date":"2016-08-12","lts":false,"security":false},{"name":"nodejs","version":"6.5.0","date":"2016-08-26","lts":false,"security":false},{"name":"nodejs","version":"6.6.0","date":"2016-09-14","lts":false,"security":false},{"name":"nodejs","version":"6.7.0","date":"2016-09-27","lts":false,"security":true},{"name":"nodejs","version":"6.8.0","date":"2016-10-12","lts":false,"security":false},{"name":"nodejs","version":"6.9.0","date":"2016-10-18","lts":"Boron","security":false},{"name":"nodejs","version":"6.10.0","date":"2017-02-21","lts":"Boron","security":false},{"name":"nodejs","version":"6.11.0","date":"2017-06-06","lts":"Boron","security":false},{"name":"nodejs","version":"6.12.0","date":"2017-11-06","lts":"Boron","security":false},{"name":"nodejs","version":"6.13.0","date":"2018-02-10","lts":"Boron","security":false},{"name":"nodejs","version":"6.14.0","date":"2018-03-28","lts":"Boron","security":true},{"name":"nodejs","version":"6.15.0","date":"2018-11-27","lts":"Boron","security":true},{"name":"nodejs","version":"6.16.0","date":"2018-12-26","lts":"Boron","security":false},{"name":"nodejs","version":"6.17.0","date":"2019-02-28","lts":"Boron","security":true},{"name":"nodejs","version":"7.0.0","date":"2016-10-25","lts":false,"security":false},{"name":"nodejs","version":"7.1.0","date":"2016-11-08","lts":false,"security":false},{"name":"nodejs","version":"7.2.0","date":"2016-11-22","lts":false,"security":false},{"name":"nodejs","version":"7.3.0","date":"2016-12-20","lts":false,"security":false},{"name":"nodejs","version":"7.4.0","date":"2017-01-04","lts":false,"security":false},{"name":"nodejs","version":"7.5.0","date":"2017-01-31","lts":false,"security":false},{"name":"nodejs","version":"7.6.0","date":"2017-02-21","lts":false,"security":false},{"name":"nodejs","version":"7.7.0","date":"2017-02-28","lts":false,"security":false},{"name":"nodejs","version":"7.8.0","date":"2017-03-29","lts":false,"security":false},{"name":"nodejs","version":"7.9.0","date":"2017-04-11","lts":false,"security":false},{"name":"nodejs","version":"7.10.0","date":"2017-05-02","lts":false,"security":false},{"name":"nodejs","version":"8.0.0","date":"2017-05-30","lts":false,"security":false},{"name":"nodejs","version":"8.1.0","date":"2017-06-08","lts":false,"security":false},{"name":"nodejs","version":"8.2.0","date":"2017-07-19","lts":false,"security":false},{"name":"nodejs","version":"8.3.0","date":"2017-08-08","lts":false,"security":false},{"name":"nodejs","version":"8.4.0","date":"2017-08-15","lts":false,"security":false},{"name":"nodejs","version":"8.5.0","date":"2017-09-12","lts":false,"security":false},{"name":"nodejs","version":"8.6.0","date":"2017-09-26","lts":false,"security":false},{"name":"nodejs","version":"8.7.0","date":"2017-10-11","lts":false,"security":false},{"name":"nodejs","version":"8.8.0","date":"2017-10-24","lts":false,"security":false},{"name":"nodejs","version":"8.9.0","date":"2017-10-31","lts":"Carbon","security":false},{"name":"nodejs","version":"8.10.0","date":"2018-03-06","lts":"Carbon","security":false},{"name":"nodejs","version":"8.11.0","date":"2018-03-28","lts":"Carbon","security":true},{"name":"nodejs","version":"8.12.0","date":"2018-09-10","lts":"Carbon","security":false},{"name":"nodejs","version":"8.13.0","date":"2018-11-20","lts":"Carbon","security":false},{"name":"nodejs","version":"8.14.0","date":"2018-11-27","lts":"Carbon","security":true},{"name":"nodejs","version":"8.15.0","date":"2018-12-26","lts":"Carbon","security":false},{"name":"nodejs","version":"8.16.0","date":"2019-04-16","lts":"Carbon","security":false},{"name":"nodejs","version":"8.17.0","date":"2019-12-17","lts":"Carbon","security":true},{"name":"nodejs","version":"9.0.0","date":"2017-10-31","lts":false,"security":false},{"name":"nodejs","version":"9.1.0","date":"2017-11-07","lts":false,"security":false},{"name":"nodejs","version":"9.2.0","date":"2017-11-14","lts":false,"security":false},{"name":"nodejs","version":"9.3.0","date":"2017-12-12","lts":false,"security":false},{"name":"nodejs","version":"9.4.0","date":"2018-01-10","lts":false,"security":false},{"name":"nodejs","version":"9.5.0","date":"2018-01-31","lts":false,"security":false},{"name":"nodejs","version":"9.6.0","date":"2018-02-21","lts":false,"security":false},{"name":"nodejs","version":"9.7.0","date":"2018-03-01","lts":false,"security":false},{"name":"nodejs","version":"9.8.0","date":"2018-03-07","lts":false,"security":false},{"name":"nodejs","version":"9.9.0","date":"2018-03-21","lts":false,"security":false},{"name":"nodejs","version":"9.10.0","date":"2018-03-28","lts":false,"security":true},{"name":"nodejs","version":"9.11.0","date":"2018-04-04","lts":false,"security":false},{"name":"nodejs","version":"10.0.0","date":"2018-04-24","lts":false,"security":false},{"name":"nodejs","version":"10.1.0","date":"2018-05-08","lts":false,"security":false},{"name":"nodejs","version":"10.2.0","date":"2018-05-23","lts":false,"security":false},{"name":"nodejs","version":"10.3.0","date":"2018-05-29","lts":false,"security":false},{"name":"nodejs","version":"10.4.0","date":"2018-06-06","lts":false,"security":false},{"name":"nodejs","version":"10.5.0","date":"2018-06-20","lts":false,"security":false},{"name":"nodejs","version":"10.6.0","date":"2018-07-04","lts":false,"security":false},{"name":"nodejs","version":"10.7.0","date":"2018-07-18","lts":false,"security":false},{"name":"nodejs","version":"10.8.0","date":"2018-08-01","lts":false,"security":false},{"name":"nodejs","version":"10.9.0","date":"2018-08-15","lts":false,"security":false},{"name":"nodejs","version":"10.10.0","date":"2018-09-06","lts":false,"security":false},{"name":"nodejs","version":"10.11.0","date":"2018-09-19","lts":false,"security":false},{"name":"nodejs","version":"10.12.0","date":"2018-10-10","lts":false,"security":false},{"name":"nodejs","version":"10.13.0","date":"2018-10-30","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.14.0","date":"2018-11-27","lts":"Dubnium","security":true},{"name":"nodejs","version":"10.15.0","date":"2018-12-26","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.16.0","date":"2019-05-28","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.17.0","date":"2019-10-22","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.18.0","date":"2019-12-17","lts":"Dubnium","security":true},{"name":"nodejs","version":"10.19.0","date":"2020-02-05","lts":"Dubnium","security":true},{"name":"nodejs","version":"10.20.0","date":"2020-03-26","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.21.0","date":"2020-06-02","lts":"Dubnium","security":true},{"name":"nodejs","version":"10.22.0","date":"2020-07-21","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.23.0","date":"2020-10-27","lts":"Dubnium","security":false},{"name":"nodejs","version":"10.24.0","date":"2021-02-23","lts":"Dubnium","security":true},{"name":"nodejs","version":"11.0.0","date":"2018-10-23","lts":false,"security":false},{"name":"nodejs","version":"11.1.0","date":"2018-10-30","lts":false,"security":false},{"name":"nodejs","version":"11.2.0","date":"2018-11-15","lts":false,"security":false},{"name":"nodejs","version":"11.3.0","date":"2018-11-27","lts":false,"security":true},{"name":"nodejs","version":"11.4.0","date":"2018-12-07","lts":false,"security":false},{"name":"nodejs","version":"11.5.0","date":"2018-12-18","lts":false,"security":false},{"name":"nodejs","version":"11.6.0","date":"2018-12-26","lts":false,"security":false},{"name":"nodejs","version":"11.7.0","date":"2019-01-17","lts":false,"security":false},{"name":"nodejs","version":"11.8.0","date":"2019-01-24","lts":false,"security":false},{"name":"nodejs","version":"11.9.0","date":"2019-01-30","lts":false,"security":false},{"name":"nodejs","version":"11.10.0","date":"2019-02-14","lts":false,"security":false},{"name":"nodejs","version":"11.11.0","date":"2019-03-05","lts":false,"security":false},{"name":"nodejs","version":"11.12.0","date":"2019-03-14","lts":false,"security":false},{"name":"nodejs","version":"11.13.0","date":"2019-03-28","lts":false,"security":false},{"name":"nodejs","version":"11.14.0","date":"2019-04-10","lts":false,"security":false},{"name":"nodejs","version":"11.15.0","date":"2019-04-30","lts":false,"security":false},{"name":"nodejs","version":"12.0.0","date":"2019-04-23","lts":false,"security":false},{"name":"nodejs","version":"12.1.0","date":"2019-04-29","lts":false,"security":false},{"name":"nodejs","version":"12.2.0","date":"2019-05-07","lts":false,"security":false},{"name":"nodejs","version":"12.3.0","date":"2019-05-21","lts":false,"security":false},{"name":"nodejs","version":"12.4.0","date":"2019-06-04","lts":false,"security":false},{"name":"nodejs","version":"12.5.0","date":"2019-06-26","lts":false,"security":false},{"name":"nodejs","version":"12.6.0","date":"2019-07-03","lts":false,"security":false},{"name":"nodejs","version":"12.7.0","date":"2019-07-23","lts":false,"security":false},{"name":"nodejs","version":"12.8.0","date":"2019-08-06","lts":false,"security":false},{"name":"nodejs","version":"12.9.0","date":"2019-08-20","lts":false,"security":false},{"name":"nodejs","version":"12.10.0","date":"2019-09-04","lts":false,"security":false},{"name":"nodejs","version":"12.11.0","date":"2019-09-25","lts":false,"security":false},{"name":"nodejs","version":"12.12.0","date":"2019-10-11","lts":false,"security":false},{"name":"nodejs","version":"12.13.0","date":"2019-10-21","lts":"Erbium","security":false},{"name":"nodejs","version":"12.14.0","date":"2019-12-17","lts":"Erbium","security":true},{"name":"nodejs","version":"12.15.0","date":"2020-02-05","lts":"Erbium","security":true},{"name":"nodejs","version":"12.16.0","date":"2020-02-11","lts":"Erbium","security":false},{"name":"nodejs","version":"12.17.0","date":"2020-05-26","lts":"Erbium","security":false},{"name":"nodejs","version":"12.18.0","date":"2020-06-02","lts":"Erbium","security":true},{"name":"nodejs","version":"12.19.0","date":"2020-10-06","lts":"Erbium","security":false},{"name":"nodejs","version":"12.20.0","date":"2020-11-24","lts":"Erbium","security":false},{"name":"nodejs","version":"12.21.0","date":"2021-02-23","lts":"Erbium","security":true},{"name":"nodejs","version":"12.22.0","date":"2021-03-30","lts":"Erbium","security":false},{"name":"nodejs","version":"13.0.0","date":"2019-10-22","lts":false,"security":false},{"name":"nodejs","version":"13.1.0","date":"2019-11-05","lts":false,"security":false},{"name":"nodejs","version":"13.2.0","date":"2019-11-21","lts":false,"security":false},{"name":"nodejs","version":"13.3.0","date":"2019-12-03","lts":false,"security":false},{"name":"nodejs","version":"13.4.0","date":"2019-12-17","lts":false,"security":true},{"name":"nodejs","version":"13.5.0","date":"2019-12-18","lts":false,"security":false},{"name":"nodejs","version":"13.6.0","date":"2020-01-07","lts":false,"security":false},{"name":"nodejs","version":"13.7.0","date":"2020-01-21","lts":false,"security":false},{"name":"nodejs","version":"13.8.0","date":"2020-02-05","lts":false,"security":true},{"name":"nodejs","version":"13.9.0","date":"2020-02-18","lts":false,"security":false},{"name":"nodejs","version":"13.10.0","date":"2020-03-04","lts":false,"security":false},{"name":"nodejs","version":"13.11.0","date":"2020-03-12","lts":false,"security":false},{"name":"nodejs","version":"13.12.0","date":"2020-03-26","lts":false,"security":false},{"name":"nodejs","version":"13.13.0","date":"2020-04-14","lts":false,"security":false},{"name":"nodejs","version":"13.14.0","date":"2020-04-29","lts":false,"security":false},{"name":"nodejs","version":"14.0.0","date":"2020-04-21","lts":false,"security":false},{"name":"nodejs","version":"14.1.0","date":"2020-04-29","lts":false,"security":false},{"name":"nodejs","version":"14.2.0","date":"2020-05-05","lts":false,"security":false},{"name":"nodejs","version":"14.3.0","date":"2020-05-19","lts":false,"security":false},{"name":"nodejs","version":"14.4.0","date":"2020-06-02","lts":false,"security":true},{"name":"nodejs","version":"14.5.0","date":"2020-06-30","lts":false,"security":false},{"name":"nodejs","version":"14.6.0","date":"2020-07-20","lts":false,"security":false},{"name":"nodejs","version":"14.7.0","date":"2020-07-29","lts":false,"security":false},{"name":"nodejs","version":"14.8.0","date":"2020-08-11","lts":false,"security":false},{"name":"nodejs","version":"14.9.0","date":"2020-08-27","lts":false,"security":false},{"name":"nodejs","version":"14.10.0","date":"2020-09-08","lts":false,"security":false},{"name":"nodejs","version":"14.11.0","date":"2020-09-15","lts":false,"security":true},{"name":"nodejs","version":"14.12.0","date":"2020-09-22","lts":false,"security":false},{"name":"nodejs","version":"14.13.0","date":"2020-09-29","lts":false,"security":false},{"name":"nodejs","version":"14.14.0","date":"2020-10-15","lts":false,"security":false},{"name":"nodejs","version":"14.15.0","date":"2020-10-27","lts":"Fermium","security":false},{"name":"nodejs","version":"14.16.0","date":"2021-02-23","lts":"Fermium","security":true},{"name":"nodejs","version":"14.17.0","date":"2021-05-11","lts":"Fermium","security":false},{"name":"nodejs","version":"14.18.0","date":"2021-09-28","lts":"Fermium","security":false},{"name":"nodejs","version":"14.19.0","date":"2022-02-01","lts":"Fermium","security":false},{"name":"nodejs","version":"15.0.0","date":"2020-10-20","lts":false,"security":false},{"name":"nodejs","version":"15.1.0","date":"2020-11-04","lts":false,"security":false},{"name":"nodejs","version":"15.2.0","date":"2020-11-10","lts":false,"security":false},{"name":"nodejs","version":"15.3.0","date":"2020-11-24","lts":false,"security":false},{"name":"nodejs","version":"15.4.0","date":"2020-12-09","lts":false,"security":false},{"name":"nodejs","version":"15.5.0","date":"2020-12-22","lts":false,"security":false},{"name":"nodejs","version":"15.6.0","date":"2021-01-14","lts":false,"security":false},{"name":"nodejs","version":"15.7.0","date":"2021-01-25","lts":false,"security":false},{"name":"nodejs","version":"15.8.0","date":"2021-02-02","lts":false,"security":false},{"name":"nodejs","version":"15.9.0","date":"2021-02-18","lts":false,"security":false},{"name":"nodejs","version":"15.10.0","date":"2021-02-23","lts":false,"security":true},{"name":"nodejs","version":"15.11.0","date":"2021-03-03","lts":false,"security":false},{"name":"nodejs","version":"15.12.0","date":"2021-03-17","lts":false,"security":false},{"name":"nodejs","version":"15.13.0","date":"2021-03-31","lts":false,"security":false},{"name":"nodejs","version":"15.14.0","date":"2021-04-06","lts":false,"security":false},{"name":"nodejs","version":"16.0.0","date":"2021-04-20","lts":false,"security":false},{"name":"nodejs","version":"16.1.0","date":"2021-05-04","lts":false,"security":false},{"name":"nodejs","version":"16.2.0","date":"2021-05-19","lts":false,"security":false},{"name":"nodejs","version":"16.3.0","date":"2021-06-03","lts":false,"security":false},{"name":"nodejs","version":"16.4.0","date":"2021-06-23","lts":false,"security":false},{"name":"nodejs","version":"16.5.0","date":"2021-07-14","lts":false,"security":false},{"name":"nodejs","version":"16.6.0","date":"2021-07-29","lts":false,"security":true},{"name":"nodejs","version":"16.7.0","date":"2021-08-18","lts":false,"security":false},{"name":"nodejs","version":"16.8.0","date":"2021-08-25","lts":false,"security":false},{"name":"nodejs","version":"16.9.0","date":"2021-09-07","lts":false,"security":false},{"name":"nodejs","version":"16.10.0","date":"2021-09-22","lts":false,"security":false},{"name":"nodejs","version":"16.11.0","date":"2021-10-08","lts":false,"security":false},{"name":"nodejs","version":"16.12.0","date":"2021-10-20","lts":false,"security":false},{"name":"nodejs","version":"16.13.0","date":"2021-10-26","lts":"Gallium","security":false},{"name":"nodejs","version":"17.0.0","date":"2021-10-19","lts":false,"security":false},{"name":"nodejs","version":"17.1.0","date":"2021-11-09","lts":false,"security":false},{"name":"nodejs","version":"17.2.0","date":"2021-11-30","lts":false,"security":false},{"name":"nodejs","version":"17.3.0","date":"2021-12-17","lts":false,"security":false},{"name":"nodejs","version":"17.4.0","date":"2022-01-18","lts":false,"security":false}]');
    }, 178: (e2) => {
      "use strict";
      e2.exports = JSON.parse('{"v0.8":{"start":"2012-06-25","end":"2014-07-31"},"v0.10":{"start":"2013-03-11","end":"2016-10-31"},"v0.12":{"start":"2015-02-06","end":"2016-12-31"},"v4":{"start":"2015-09-08","lts":"2015-10-12","maintenance":"2017-04-01","end":"2018-04-30","codename":"Argon"},"v5":{"start":"2015-10-29","maintenance":"2016-04-30","end":"2016-06-30"},"v6":{"start":"2016-04-26","lts":"2016-10-18","maintenance":"2018-04-30","end":"2019-04-30","codename":"Boron"},"v7":{"start":"2016-10-25","maintenance":"2017-04-30","end":"2017-06-30"},"v8":{"start":"2017-05-30","lts":"2017-10-31","maintenance":"2019-01-01","end":"2019-12-31","codename":"Carbon"},"v9":{"start":"2017-10-01","maintenance":"2018-04-01","end":"2018-06-30"},"v10":{"start":"2018-04-24","lts":"2018-10-30","maintenance":"2020-05-19","end":"2021-04-30","codename":"Dubnium"},"v11":{"start":"2018-10-23","maintenance":"2019-04-22","end":"2019-06-01"},"v12":{"start":"2019-04-23","lts":"2019-10-21","maintenance":"2020-11-30","end":"2022-04-30","codename":"Erbium"},"v13":{"start":"2019-10-22","maintenance":"2020-04-01","end":"2020-06-01"},"v14":{"start":"2020-04-21","lts":"2020-10-27","maintenance":"2021-10-19","end":"2023-04-30","codename":"Fermium"},"v15":{"start":"2020-10-20","maintenance":"2021-04-01","end":"2021-06-01"},"v16":{"start":"2021-04-20","lts":"2021-10-26","maintenance":"2022-10-18","end":"2024-04-30","codename":"Gallium"},"v17":{"start":"2021-10-19","maintenance":"2022-04-01","end":"2022-06-01"},"v18":{"start":"2022-04-19","lts":"2022-10-25","maintenance":"2023-10-18","end":"2025-04-30","codename":""}}');
    } };
    var s = {};
    function __nccwpck_require__(r2) {
      var n = s[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var t = s[r2] = { exports: {} };
      var a = true;
      try {
        e[r2](t, t.exports, __nccwpck_require__);
        a = false;
      } finally {
        if (a)
          delete s[r2];
      }
      return t.exports;
    }
    (() => {
      __nccwpck_require__.o = (e2, s2) => Object.prototype.hasOwnProperty.call(e2, s2);
    })();
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(751);
    module2.exports = r;
  })();
});
var require_recursive_readdir = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 155: (e2) => {
      "use strict";
      e2.exports = balanced;
      function balanced(e3, t2, r2) {
        if (e3 instanceof RegExp)
          e3 = maybeMatch(e3, r2);
        if (t2 instanceof RegExp)
          t2 = maybeMatch(t2, r2);
        var n = range(e3, t2, r2);
        return n && { start: n[0], end: n[1], pre: r2.slice(0, n[0]), body: r2.slice(n[0] + e3.length, n[1]), post: r2.slice(n[1] + t2.length) };
      }
      function maybeMatch(e3, t2) {
        var r2 = t2.match(e3);
        return r2 ? r2[0] : null;
      }
      balanced.range = range;
      function range(e3, t2, r2) {
        var n, a, i, s, c;
        var o = r2.indexOf(e3);
        var u = r2.indexOf(t2, o + 1);
        var f = o;
        if (o >= 0 && u > 0) {
          if (e3 === t2) {
            return [o, u];
          }
          n = [];
          i = r2.length;
          while (f >= 0 && !c) {
            if (f == o) {
              n.push(f);
              o = r2.indexOf(e3, f + 1);
            } else if (n.length == 1) {
              c = [n.pop(), u];
            } else {
              a = n.pop();
              if (a < i) {
                i = a;
                s = u;
              }
              u = r2.indexOf(t2, f + 1);
            }
            f = o < u && o >= 0 ? o : u;
          }
          if (n.length) {
            c = [i, s];
          }
        }
        return c;
      }
    }, 847: (e2, t2, r2) => {
      var n = r2(62);
      var a = r2(155);
      e2.exports = expandTop;
      var i = "\0SLASH" + Math.random() + "\0";
      var s = "\0OPEN" + Math.random() + "\0";
      var c = "\0CLOSE" + Math.random() + "\0";
      var o = "\0COMMA" + Math.random() + "\0";
      var u = "\0PERIOD" + Math.random() + "\0";
      function numeric(e3) {
        return parseInt(e3, 10) == e3 ? parseInt(e3, 10) : e3.charCodeAt(0);
      }
      function escapeBraces(e3) {
        return e3.split("\\\\").join(i).split("\\{").join(s).split("\\}").join(c).split("\\,").join(o).split("\\.").join(u);
      }
      function unescapeBraces(e3) {
        return e3.split(i).join("\\").split(s).join("{").split(c).join("}").split(o).join(",").split(u).join(".");
      }
      function parseCommaParts(e3) {
        if (!e3)
          return [""];
        var t3 = [];
        var r3 = a("{", "}", e3);
        if (!r3)
          return e3.split(",");
        var n2 = r3.pre;
        var i2 = r3.body;
        var s2 = r3.post;
        var c2 = n2.split(",");
        c2[c2.length - 1] += "{" + i2 + "}";
        var o2 = parseCommaParts(s2);
        if (s2.length) {
          c2[c2.length - 1] += o2.shift();
          c2.push.apply(c2, o2);
        }
        t3.push.apply(t3, c2);
        return t3;
      }
      function expandTop(e3) {
        if (!e3)
          return [];
        if (e3.substr(0, 2) === "{}") {
          e3 = "\\{\\}" + e3.substr(2);
        }
        return expand2(escapeBraces(e3), true).map(unescapeBraces);
      }
      function identity(e3) {
        return e3;
      }
      function embrace(e3) {
        return "{" + e3 + "}";
      }
      function isPadded(e3) {
        return /^-?0\d/.test(e3);
      }
      function lte(e3, t3) {
        return e3 <= t3;
      }
      function gte(e3, t3) {
        return e3 >= t3;
      }
      function expand2(e3, t3) {
        var r3 = [];
        var i2 = a("{", "}", e3);
        if (!i2 || /\$$/.test(i2.pre))
          return [e3];
        var s2 = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(i2.body);
        var o2 = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(i2.body);
        var u2 = s2 || o2;
        var f = i2.body.indexOf(",") >= 0;
        if (!u2 && !f) {
          if (i2.post.match(/,.*\}/)) {
            e3 = i2.pre + "{" + i2.body + c + i2.post;
            return expand2(e3);
          }
          return [e3];
        }
        var h;
        if (u2) {
          h = i2.body.split(/\.\./);
        } else {
          h = parseCommaParts(i2.body);
          if (h.length === 1) {
            h = expand2(h[0], false).map(embrace);
            if (h.length === 1) {
              var p = i2.post.length ? expand2(i2.post, false) : [""];
              return p.map(function(e4) {
                return i2.pre + h[0] + e4;
              });
            }
          }
        }
        var l = i2.pre;
        var p = i2.post.length ? expand2(i2.post, false) : [""];
        var m;
        if (u2) {
          var g = numeric(h[0]);
          var v = numeric(h[1]);
          var d = Math.max(h[0].length, h[1].length);
          var b = h.length == 3 ? Math.abs(numeric(h[2])) : 1;
          var y = lte;
          var x = v < g;
          if (x) {
            b *= -1;
            y = gte;
          }
          var M = h.some(isPadded);
          m = [];
          for (var w = g; y(w, v); w += b) {
            var E;
            if (o2) {
              E = String.fromCharCode(w);
              if (E === "\\")
                E = "";
            } else {
              E = String(w);
              if (M) {
                var _ = d - E.length;
                if (_ > 0) {
                  var j = new Array(_ + 1).join("0");
                  if (w < 0)
                    E = "-" + j + E.slice(1);
                  else
                    E = j + E;
                }
              }
            }
            m.push(E);
          }
        } else {
          m = n(h, function(e4) {
            return expand2(e4, false);
          });
        }
        for (var S = 0; S < m.length; S++) {
          for (var O = 0; O < p.length; O++) {
            var k = l + m[S] + p[O];
            if (!t3 || u2 || k)
              r3.push(k);
          }
        }
        return r3;
      }
    }, 62: (e2) => {
      e2.exports = function(e3, r2) {
        var n = [];
        for (var a = 0; a < e3.length; a++) {
          var i = r2(e3[a], a);
          if (t2(i))
            n.push.apply(n, i);
          else
            n.push(i);
        }
        return n;
      };
      var t2 = Array.isArray || function(e3) {
        return Object.prototype.toString.call(e3) === "[object Array]";
      };
    }, 435: (e2, t2, r2) => {
      e2.exports = minimatch;
      minimatch.Minimatch = Minimatch;
      var n = { sep: "/" };
      try {
        n = r2(17);
      } catch (e3) {
      }
      var a = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
      var i = r2(847);
      var s = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } };
      var c = "[^/]";
      var o = c + "*?";
      var u = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
      var f = "(?:(?!(?:\\/|^)\\.).)*?";
      var h = charSet("().*{}+?[]^$\\!");
      function charSet(e3) {
        return e3.split("").reduce(function(e4, t3) {
          e4[t3] = true;
          return e4;
        }, {});
      }
      var p = /\/+/;
      minimatch.filter = filter;
      function filter(e3, t3) {
        t3 = t3 || {};
        return function(r3, n2, a2) {
          return minimatch(r3, e3, t3);
        };
      }
      function ext(e3, t3) {
        e3 = e3 || {};
        t3 = t3 || {};
        var r3 = {};
        Object.keys(t3).forEach(function(e4) {
          r3[e4] = t3[e4];
        });
        Object.keys(e3).forEach(function(t4) {
          r3[t4] = e3[t4];
        });
        return r3;
      }
      minimatch.defaults = function(e3) {
        if (!e3 || !Object.keys(e3).length)
          return minimatch;
        var t3 = minimatch;
        var r3 = function minimatch2(r4, n2, a2) {
          return t3.minimatch(r4, n2, ext(e3, a2));
        };
        r3.Minimatch = function Minimatch2(r4, n2) {
          return new t3.Minimatch(r4, ext(e3, n2));
        };
        return r3;
      };
      Minimatch.defaults = function(e3) {
        if (!e3 || !Object.keys(e3).length)
          return Minimatch;
        return minimatch.defaults(e3).Minimatch;
      };
      function minimatch(e3, t3, r3) {
        if (typeof t3 !== "string") {
          throw new TypeError("glob pattern string required");
        }
        if (!r3)
          r3 = {};
        if (!r3.nocomment && t3.charAt(0) === "#") {
          return false;
        }
        if (t3.trim() === "")
          return e3 === "";
        return new Minimatch(t3, r3).match(e3);
      }
      function Minimatch(e3, t3) {
        if (!(this instanceof Minimatch)) {
          return new Minimatch(e3, t3);
        }
        if (typeof e3 !== "string") {
          throw new TypeError("glob pattern string required");
        }
        if (!t3)
          t3 = {};
        e3 = e3.trim();
        if (n.sep !== "/") {
          e3 = e3.split(n.sep).join("/");
        }
        this.options = t3;
        this.set = [];
        this.pattern = e3;
        this.regexp = null;
        this.negate = false;
        this.comment = false;
        this.empty = false;
        this.make();
      }
      Minimatch.prototype.debug = function() {
      };
      Minimatch.prototype.make = make;
      function make() {
        if (this._made)
          return;
        var e3 = this.pattern;
        var t3 = this.options;
        if (!t3.nocomment && e3.charAt(0) === "#") {
          this.comment = true;
          return;
        }
        if (!e3) {
          this.empty = true;
          return;
        }
        this.parseNegate();
        var r3 = this.globSet = this.braceExpand();
        if (t3.debug)
          this.debug = console.error;
        this.debug(this.pattern, r3);
        r3 = this.globParts = r3.map(function(e4) {
          return e4.split(p);
        });
        this.debug(this.pattern, r3);
        r3 = r3.map(function(e4, t4, r4) {
          return e4.map(this.parse, this);
        }, this);
        this.debug(this.pattern, r3);
        r3 = r3.filter(function(e4) {
          return e4.indexOf(false) === -1;
        });
        this.debug(this.pattern, r3);
        this.set = r3;
      }
      Minimatch.prototype.parseNegate = parseNegate;
      function parseNegate() {
        var e3 = this.pattern;
        var t3 = false;
        var r3 = this.options;
        var n2 = 0;
        if (r3.nonegate)
          return;
        for (var a2 = 0, i2 = e3.length; a2 < i2 && e3.charAt(a2) === "!"; a2++) {
          t3 = !t3;
          n2++;
        }
        if (n2)
          this.pattern = e3.substr(n2);
        this.negate = t3;
      }
      minimatch.braceExpand = function(e3, t3) {
        return braceExpand(e3, t3);
      };
      Minimatch.prototype.braceExpand = braceExpand;
      function braceExpand(e3, t3) {
        if (!t3) {
          if (this instanceof Minimatch) {
            t3 = this.options;
          } else {
            t3 = {};
          }
        }
        e3 = typeof e3 === "undefined" ? this.pattern : e3;
        if (typeof e3 === "undefined") {
          throw new TypeError("undefined pattern");
        }
        if (t3.nobrace || !e3.match(/\{.*\}/)) {
          return [e3];
        }
        return i(e3);
      }
      Minimatch.prototype.parse = parse4;
      var l = {};
      function parse4(e3, t3) {
        if (e3.length > 1024 * 64) {
          throw new TypeError("pattern is too long");
        }
        var r3 = this.options;
        if (!r3.noglobstar && e3 === "**")
          return a;
        if (e3 === "")
          return "";
        var n2 = "";
        var i2 = !!r3.nocase;
        var u2 = false;
        var f2 = [];
        var p2 = [];
        var m;
        var g = false;
        var v = -1;
        var d = -1;
        var b = e3.charAt(0) === "." ? "" : r3.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
        var y = this;
        function clearStateChar() {
          if (m) {
            switch (m) {
              case "*":
                n2 += o;
                i2 = true;
                break;
              case "?":
                n2 += c;
                i2 = true;
                break;
              default:
                n2 += "\\" + m;
                break;
            }
            y.debug("clearStateChar %j %j", m, n2);
            m = false;
          }
        }
        for (var x = 0, M = e3.length, w; x < M && (w = e3.charAt(x)); x++) {
          this.debug("%s	%s %s %j", e3, x, n2, w);
          if (u2 && h[w]) {
            n2 += "\\" + w;
            u2 = false;
            continue;
          }
          switch (w) {
            case "/":
              return false;
            case "\\":
              clearStateChar();
              u2 = true;
              continue;
            case "?":
            case "*":
            case "+":
            case "@":
            case "!":
              this.debug("%s	%s %s %j <-- stateChar", e3, x, n2, w);
              if (g) {
                this.debug("  in class");
                if (w === "!" && x === d + 1)
                  w = "^";
                n2 += w;
                continue;
              }
              y.debug("call clearStateChar %j", m);
              clearStateChar();
              m = w;
              if (r3.noext)
                clearStateChar();
              continue;
            case "(":
              if (g) {
                n2 += "(";
                continue;
              }
              if (!m) {
                n2 += "\\(";
                continue;
              }
              f2.push({ type: m, start: x - 1, reStart: n2.length, open: s[m].open, close: s[m].close });
              n2 += m === "!" ? "(?:(?!(?:" : "(?:";
              this.debug("plType %j %j", m, n2);
              m = false;
              continue;
            case ")":
              if (g || !f2.length) {
                n2 += "\\)";
                continue;
              }
              clearStateChar();
              i2 = true;
              var E = f2.pop();
              n2 += E.close;
              if (E.type === "!") {
                p2.push(E);
              }
              E.reEnd = n2.length;
              continue;
            case "|":
              if (g || !f2.length || u2) {
                n2 += "\\|";
                u2 = false;
                continue;
              }
              clearStateChar();
              n2 += "|";
              continue;
            case "[":
              clearStateChar();
              if (g) {
                n2 += "\\" + w;
                continue;
              }
              g = true;
              d = x;
              v = n2.length;
              n2 += w;
              continue;
            case "]":
              if (x === d + 1 || !g) {
                n2 += "\\" + w;
                u2 = false;
                continue;
              }
              if (g) {
                var _ = e3.substring(d + 1, x);
                try {
                  RegExp("[" + _ + "]");
                } catch (e4) {
                  var j = this.parse(_, l);
                  n2 = n2.substr(0, v) + "\\[" + j[0] + "\\]";
                  i2 = i2 || j[1];
                  g = false;
                  continue;
                }
              }
              i2 = true;
              g = false;
              n2 += w;
              continue;
            default:
              clearStateChar();
              if (u2) {
                u2 = false;
              } else if (h[w] && !(w === "^" && g)) {
                n2 += "\\";
              }
              n2 += w;
          }
        }
        if (g) {
          _ = e3.substr(d + 1);
          j = this.parse(_, l);
          n2 = n2.substr(0, v) + "\\[" + j[0];
          i2 = i2 || j[1];
        }
        for (E = f2.pop(); E; E = f2.pop()) {
          var S = n2.slice(E.reStart + E.open.length);
          this.debug("setting tail", n2, E);
          S = S.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(e4, t4, r4) {
            if (!r4) {
              r4 = "\\";
            }
            return t4 + t4 + r4 + "|";
          });
          this.debug("tail=%j\n   %s", S, S, E, n2);
          var O = E.type === "*" ? o : E.type === "?" ? c : "\\" + E.type;
          i2 = true;
          n2 = n2.slice(0, E.reStart) + O + "\\(" + S;
        }
        clearStateChar();
        if (u2) {
          n2 += "\\\\";
        }
        var k = false;
        switch (n2.charAt(0)) {
          case ".":
          case "[":
          case "(":
            k = true;
        }
        for (var C = p2.length - 1; C > -1; C--) {
          var A = p2[C];
          var R = n2.slice(0, A.reStart);
          var $ = n2.slice(A.reStart, A.reEnd - 8);
          var T = n2.slice(A.reEnd - 8, A.reEnd);
          var q = n2.slice(A.reEnd);
          T += q;
          var B = R.split("(").length - 1;
          var P = q;
          for (x = 0; x < B; x++) {
            P = P.replace(/\)[+*?]?/, "");
          }
          q = P;
          var L = "";
          if (q === "" && t3 !== l) {
            L = "$";
          }
          var N = R + $ + q + L + T;
          n2 = N;
        }
        if (n2 !== "" && i2) {
          n2 = "(?=.)" + n2;
        }
        if (k) {
          n2 = b + n2;
        }
        if (t3 === l) {
          return [n2, i2];
        }
        if (!i2) {
          return globUnescape(e3);
        }
        var F = r3.nocase ? "i" : "";
        try {
          var G = new RegExp("^" + n2 + "$", F);
        } catch (e4) {
          return new RegExp("$.");
        }
        G._glob = e3;
        G._src = n2;
        return G;
      }
      minimatch.makeRe = function(e3, t3) {
        return new Minimatch(e3, t3 || {}).makeRe();
      };
      Minimatch.prototype.makeRe = makeRe;
      function makeRe() {
        if (this.regexp || this.regexp === false)
          return this.regexp;
        var e3 = this.set;
        if (!e3.length) {
          this.regexp = false;
          return this.regexp;
        }
        var t3 = this.options;
        var r3 = t3.noglobstar ? o : t3.dot ? u : f;
        var n2 = t3.nocase ? "i" : "";
        var i2 = e3.map(function(e4) {
          return e4.map(function(e5) {
            return e5 === a ? r3 : typeof e5 === "string" ? regExpEscape(e5) : e5._src;
          }).join("\\/");
        }).join("|");
        i2 = "^(?:" + i2 + ")$";
        if (this.negate)
          i2 = "^(?!" + i2 + ").*$";
        try {
          this.regexp = new RegExp(i2, n2);
        } catch (e4) {
          this.regexp = false;
        }
        return this.regexp;
      }
      minimatch.match = function(e3, t3, r3) {
        r3 = r3 || {};
        var n2 = new Minimatch(t3, r3);
        e3 = e3.filter(function(e4) {
          return n2.match(e4);
        });
        if (n2.options.nonull && !e3.length) {
          e3.push(t3);
        }
        return e3;
      };
      Minimatch.prototype.match = match;
      function match(e3, t3) {
        this.debug("match", e3, this.pattern);
        if (this.comment)
          return false;
        if (this.empty)
          return e3 === "";
        if (e3 === "/" && t3)
          return true;
        var r3 = this.options;
        if (n.sep !== "/") {
          e3 = e3.split(n.sep).join("/");
        }
        e3 = e3.split(p);
        this.debug(this.pattern, "split", e3);
        var a2 = this.set;
        this.debug(this.pattern, "set", a2);
        var i2;
        var s2;
        for (s2 = e3.length - 1; s2 >= 0; s2--) {
          i2 = e3[s2];
          if (i2)
            break;
        }
        for (s2 = 0; s2 < a2.length; s2++) {
          var c2 = a2[s2];
          var o2 = e3;
          if (r3.matchBase && c2.length === 1) {
            o2 = [i2];
          }
          var u2 = this.matchOne(o2, c2, t3);
          if (u2) {
            if (r3.flipNegate)
              return true;
            return !this.negate;
          }
        }
        if (r3.flipNegate)
          return false;
        return this.negate;
      }
      Minimatch.prototype.matchOne = function(e3, t3, r3) {
        var n2 = this.options;
        this.debug("matchOne", { this: this, file: e3, pattern: t3 });
        this.debug("matchOne", e3.length, t3.length);
        for (var i2 = 0, s2 = 0, c2 = e3.length, o2 = t3.length; i2 < c2 && s2 < o2; i2++, s2++) {
          this.debug("matchOne loop");
          var u2 = t3[s2];
          var f2 = e3[i2];
          this.debug(t3, u2, f2);
          if (u2 === false)
            return false;
          if (u2 === a) {
            this.debug("GLOBSTAR", [t3, u2, f2]);
            var h2 = i2;
            var p2 = s2 + 1;
            if (p2 === o2) {
              this.debug("** at the end");
              for (; i2 < c2; i2++) {
                if (e3[i2] === "." || e3[i2] === ".." || !n2.dot && e3[i2].charAt(0) === ".")
                  return false;
              }
              return true;
            }
            while (h2 < c2) {
              var l2 = e3[h2];
              this.debug("\nglobstar while", e3, h2, t3, p2, l2);
              if (this.matchOne(e3.slice(h2), t3.slice(p2), r3)) {
                this.debug("globstar found match!", h2, c2, l2);
                return true;
              } else {
                if (l2 === "." || l2 === ".." || !n2.dot && l2.charAt(0) === ".") {
                  this.debug("dot detected!", e3, h2, t3, p2);
                  break;
                }
                this.debug("globstar swallow a segment, and continue");
                h2++;
              }
            }
            if (r3) {
              this.debug("\n>>> no match, partial?", e3, h2, t3, p2);
              if (h2 === c2)
                return true;
            }
            return false;
          }
          var m;
          if (typeof u2 === "string") {
            if (n2.nocase) {
              m = f2.toLowerCase() === u2.toLowerCase();
            } else {
              m = f2 === u2;
            }
            this.debug("string match", u2, f2, m);
          } else {
            m = f2.match(u2);
            this.debug("pattern match", u2, f2, m);
          }
          if (!m)
            return false;
        }
        if (i2 === c2 && s2 === o2) {
          return true;
        } else if (i2 === c2) {
          return r3;
        } else if (s2 === o2) {
          var g = i2 === c2 - 1 && e3[i2] === "";
          return g;
        }
        throw new Error("wtf?");
      };
      function globUnescape(e3) {
        return e3.replace(/\\(.)/g, "$1");
      }
      function regExpEscape(e3) {
        return e3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }
    }, 736: (e2, t2, r2) => {
      var n = r2(147);
      var a = r2(17);
      var i = r2(435);
      function patternMatcher(e3) {
        return function(t3, r3) {
          var n2 = new i.Minimatch(e3, { matchBase: true });
          return (!n2.negate || r3.isFile()) && n2.match(t3);
        };
      }
      function toMatcherFunction(e3) {
        if (typeof e3 == "function") {
          return e3;
        } else {
          return patternMatcher(e3);
        }
      }
      function readdir(e3, t3, r3) {
        if (typeof t3 == "function") {
          r3 = t3;
          t3 = [];
        }
        if (!r3) {
          return new Promise(function(r4, n2) {
            readdir(e3, t3 || [], function(e4, t4) {
              if (e4) {
                n2(e4);
              } else {
                r4(t4);
              }
            });
          });
        }
        t3 = t3.map(toMatcherFunction);
        var i2 = [];
        n.readdir(e3, function(s, c) {
          if (s) {
            return r3(s);
          }
          var o = c.length;
          if (!o) {
            return r3(null, i2);
          }
          c.forEach(function(s2) {
            var c2 = a.join(e3, s2);
            n.stat(c2, function(e4, n2) {
              if (e4) {
                return r3(e4);
              }
              if (t3.some(function(e5) {
                return e5(c2, n2);
              })) {
                o -= 1;
                if (!o) {
                  return r3(null, i2);
                }
                return null;
              }
              if (n2.isDirectory()) {
                readdir(c2, t3, function(e5, t4) {
                  if (e5) {
                    return r3(e5);
                  }
                  i2 = i2.concat(t4);
                  o -= 1;
                  if (!o) {
                    return r3(null, i2);
                  }
                });
              } else {
                i2.push(c2);
                o -= 1;
                if (!o) {
                  return r3(null, i2);
                }
              }
            });
          });
        });
      }
      e2.exports = readdir;
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    } };
    var t = {};
    function __nccwpck_require__(r2) {
      var n = t[r2];
      if (n !== void 0) {
        return n.exports;
      }
      var a = t[r2] = { exports: {} };
      var i = true;
      try {
        e[r2](a, a.exports, __nccwpck_require__);
        i = false;
      } finally {
        if (i)
          delete t[r2];
      }
      return a.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var r = __nccwpck_require__(736);
    module2.exports = r;
  })();
});
var require_commander = __commonJSMin((exports, module2) => {
  (() => {
    var e = { 81: (e2) => {
      "use strict";
      e2.exports = __require("child_process");
    }, 361: (e2) => {
      "use strict";
      e2.exports = __require("events");
    }, 147: (e2) => {
      "use strict";
      e2.exports = __require("fs");
    }, 17: (e2) => {
      "use strict";
      e2.exports = __require("path");
    }, 922: (e2, t2, i2) => {
      const { Argument: n } = i2(969);
      const { Command: s } = i2(694);
      const { CommanderError: r, InvalidArgumentError: o } = i2(967);
      const { Help: a } = i2(34);
      const { Option: h } = i2(278);
      t2 = e2.exports = new s();
      t2.program = t2;
      t2.Argument = n;
      t2.Command = s;
      t2.CommanderError = r;
      t2.Help = a;
      t2.InvalidArgumentError = o;
      t2.InvalidOptionArgumentError = o;
      t2.Option = h;
    }, 969: (e2, t2, i2) => {
      const { InvalidArgumentError: n } = i2(967);
      class Argument {
        constructor(e3, t3) {
          this.description = t3 || "";
          this.variadic = false;
          this.parseArg = void 0;
          this.defaultValue = void 0;
          this.defaultValueDescription = void 0;
          this.argChoices = void 0;
          switch (e3[0]) {
            case "<":
              this.required = true;
              this._name = e3.slice(1, -1);
              break;
            case "[":
              this.required = false;
              this._name = e3.slice(1, -1);
              break;
            default:
              this.required = true;
              this._name = e3;
              break;
          }
          if (this._name.length > 3 && this._name.slice(-3) === "...") {
            this.variadic = true;
            this._name = this._name.slice(0, -3);
          }
        }
        name() {
          return this._name;
        }
        _concatValue(e3, t3) {
          if (t3 === this.defaultValue || !Array.isArray(t3)) {
            return [e3];
          }
          return t3.concat(e3);
        }
        default(e3, t3) {
          this.defaultValue = e3;
          this.defaultValueDescription = t3;
          return this;
        }
        argParser(e3) {
          this.parseArg = e3;
          return this;
        }
        choices(e3) {
          this.argChoices = e3;
          this.parseArg = (t3, i3) => {
            if (!e3.includes(t3)) {
              throw new n(`Allowed choices are ${e3.join(", ")}.`);
            }
            if (this.variadic) {
              return this._concatValue(t3, i3);
            }
            return t3;
          };
          return this;
        }
        argRequired() {
          this.required = true;
          return this;
        }
        argOptional() {
          this.required = false;
          return this;
        }
      }
      function humanReadableArgName(e3) {
        const t3 = e3.name() + (e3.variadic === true ? "..." : "");
        return e3.required ? "<" + t3 + ">" : "[" + t3 + "]";
      }
      t2.Argument = Argument;
      t2.humanReadableArgName = humanReadableArgName;
    }, 694: (e2, t2, i2) => {
      const n = i2(361).EventEmitter;
      const s = i2(81);
      const r = i2(17);
      const o = i2(147);
      const { Argument: a, humanReadableArgName: h } = i2(969);
      const { CommanderError: l } = i2(967);
      const { Help: u } = i2(34);
      const { Option: c, splitOptionFlags: p } = i2(278);
      const { suggestSimilar: m } = i2(461);
      class Command extends n {
        constructor(e3) {
          super();
          this.commands = [];
          this.options = [];
          this.parent = null;
          this._allowUnknownOption = false;
          this._allowExcessArguments = true;
          this._args = [];
          this.args = [];
          this.rawArgs = [];
          this.processedArgs = [];
          this._scriptPath = null;
          this._name = e3 || "";
          this._optionValues = {};
          this._optionValueSources = {};
          this._storeOptionsAsProperties = false;
          this._actionHandler = null;
          this._executableHandler = false;
          this._executableFile = null;
          this._defaultCommandName = null;
          this._exitCallback = null;
          this._aliases = [];
          this._combineFlagAndOptionalValue = true;
          this._description = "";
          this._argsDescription = void 0;
          this._enablePositionalOptions = false;
          this._passThroughOptions = false;
          this._lifeCycleHooks = {};
          this._showHelpAfterError = false;
          this._showSuggestionAfterError = false;
          this._outputConfiguration = { writeOut: (e4) => process.stdout.write(e4), writeErr: (e4) => process.stderr.write(e4), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : void 0, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : void 0, outputError: (e4, t3) => t3(e4) };
          this._hidden = false;
          this._hasHelpOption = true;
          this._helpFlags = "-h, --help";
          this._helpDescription = "display help for command";
          this._helpShortFlag = "-h";
          this._helpLongFlag = "--help";
          this._addImplicitHelpCommand = void 0;
          this._helpCommandName = "help";
          this._helpCommandnameAndArgs = "help [command]";
          this._helpCommandDescription = "display help for command";
          this._helpConfiguration = {};
        }
        copyInheritedSettings(e3) {
          this._outputConfiguration = e3._outputConfiguration;
          this._hasHelpOption = e3._hasHelpOption;
          this._helpFlags = e3._helpFlags;
          this._helpDescription = e3._helpDescription;
          this._helpShortFlag = e3._helpShortFlag;
          this._helpLongFlag = e3._helpLongFlag;
          this._helpCommandName = e3._helpCommandName;
          this._helpCommandnameAndArgs = e3._helpCommandnameAndArgs;
          this._helpCommandDescription = e3._helpCommandDescription;
          this._helpConfiguration = e3._helpConfiguration;
          this._exitCallback = e3._exitCallback;
          this._storeOptionsAsProperties = e3._storeOptionsAsProperties;
          this._combineFlagAndOptionalValue = e3._combineFlagAndOptionalValue;
          this._allowExcessArguments = e3._allowExcessArguments;
          this._enablePositionalOptions = e3._enablePositionalOptions;
          this._showHelpAfterError = e3._showHelpAfterError;
          this._showSuggestionAfterError = e3._showSuggestionAfterError;
          return this;
        }
        command(e3, t3, i3) {
          let n2 = t3;
          let s2 = i3;
          if (typeof n2 === "object" && n2 !== null) {
            s2 = n2;
            n2 = null;
          }
          s2 = s2 || {};
          const [, r2, o2] = e3.match(/([^ ]+) *(.*)/);
          const a2 = this.createCommand(r2);
          if (n2) {
            a2.description(n2);
            a2._executableHandler = true;
          }
          if (s2.isDefault)
            this._defaultCommandName = a2._name;
          a2._hidden = !!(s2.noHelp || s2.hidden);
          a2._executableFile = s2.executableFile || null;
          if (o2)
            a2.arguments(o2);
          this.commands.push(a2);
          a2.parent = this;
          a2.copyInheritedSettings(this);
          if (n2)
            return this;
          return a2;
        }
        createCommand(e3) {
          return new Command(e3);
        }
        createHelp() {
          return Object.assign(new u(), this.configureHelp());
        }
        configureHelp(e3) {
          if (e3 === void 0)
            return this._helpConfiguration;
          this._helpConfiguration = e3;
          return this;
        }
        configureOutput(e3) {
          if (e3 === void 0)
            return this._outputConfiguration;
          Object.assign(this._outputConfiguration, e3);
          return this;
        }
        showHelpAfterError(e3 = true) {
          if (typeof e3 !== "string")
            e3 = !!e3;
          this._showHelpAfterError = e3;
          return this;
        }
        showSuggestionAfterError(e3 = true) {
          this._showSuggestionAfterError = !!e3;
          return this;
        }
        addCommand(e3, t3) {
          if (!e3._name)
            throw new Error("Command passed to .addCommand() must have a name");
          function checkExplicitNames(e4) {
            e4.forEach((e5) => {
              if (e5._executableHandler && !e5._executableFile) {
                throw new Error(`Must specify executableFile for deeply nested executable: ${e5.name()}`);
              }
              checkExplicitNames(e5.commands);
            });
          }
          checkExplicitNames(e3.commands);
          t3 = t3 || {};
          if (t3.isDefault)
            this._defaultCommandName = e3._name;
          if (t3.noHelp || t3.hidden)
            e3._hidden = true;
          this.commands.push(e3);
          e3.parent = this;
          return this;
        }
        createArgument(e3, t3) {
          return new a(e3, t3);
        }
        argument(e3, t3, i3, n2) {
          const s2 = this.createArgument(e3, t3);
          if (typeof i3 === "function") {
            s2.default(n2).argParser(i3);
          } else {
            s2.default(i3);
          }
          this.addArgument(s2);
          return this;
        }
        arguments(e3) {
          e3.split(/ +/).forEach((e4) => {
            this.argument(e4);
          });
          return this;
        }
        addArgument(e3) {
          const t3 = this._args.slice(-1)[0];
          if (t3 && t3.variadic) {
            throw new Error(`only the last argument can be variadic '${t3.name()}'`);
          }
          if (e3.required && e3.defaultValue !== void 0 && e3.parseArg === void 0) {
            throw new Error(`a default value for a required argument is never used: '${e3.name()}'`);
          }
          this._args.push(e3);
          return this;
        }
        addHelpCommand(e3, t3) {
          if (e3 === false) {
            this._addImplicitHelpCommand = false;
          } else {
            this._addImplicitHelpCommand = true;
            if (typeof e3 === "string") {
              this._helpCommandName = e3.split(" ")[0];
              this._helpCommandnameAndArgs = e3;
            }
            this._helpCommandDescription = t3 || this._helpCommandDescription;
          }
          return this;
        }
        _hasImplicitHelpCommand() {
          if (this._addImplicitHelpCommand === void 0) {
            return this.commands.length && !this._actionHandler && !this._findCommand("help");
          }
          return this._addImplicitHelpCommand;
        }
        hook(e3, t3) {
          const i3 = ["preAction", "postAction"];
          if (!i3.includes(e3)) {
            throw new Error(`Unexpected value for event passed to hook : '${e3}'.
Expecting one of '${i3.join("', '")}'`);
          }
          if (this._lifeCycleHooks[e3]) {
            this._lifeCycleHooks[e3].push(t3);
          } else {
            this._lifeCycleHooks[e3] = [t3];
          }
          return this;
        }
        exitOverride(e3) {
          if (e3) {
            this._exitCallback = e3;
          } else {
            this._exitCallback = (e4) => {
              if (e4.code !== "commander.executeSubCommandAsync") {
                throw e4;
              } else {
              }
            };
          }
          return this;
        }
        _exit(e3, t3, i3) {
          if (this._exitCallback) {
            this._exitCallback(new l(e3, t3, i3));
          }
          process.exit(e3);
        }
        action(e3) {
          const listener = (t3) => {
            const i3 = this._args.length;
            const n2 = t3.slice(0, i3);
            if (this._storeOptionsAsProperties) {
              n2[i3] = this;
            } else {
              n2[i3] = this.opts();
            }
            n2.push(this);
            return e3.apply(this, n2);
          };
          this._actionHandler = listener;
          return this;
        }
        createOption(e3, t3) {
          return new c(e3, t3);
        }
        addOption(e3) {
          const t3 = e3.name();
          const i3 = e3.attributeName();
          let n2 = e3.defaultValue;
          if (e3.negate || e3.optional || e3.required || typeof n2 === "boolean") {
            if (e3.negate) {
              const t4 = e3.long.replace(/^--no-/, "--");
              n2 = this._findOption(t4) ? this.getOptionValue(i3) : true;
            }
            if (n2 !== void 0) {
              this.setOptionValueWithSource(i3, n2, "default");
            }
          }
          this.options.push(e3);
          const handleOptionValue = (t4, s2, r2) => {
            const o2 = this.getOptionValue(i3);
            if (t4 !== null && e3.parseArg) {
              try {
                t4 = e3.parseArg(t4, o2 === void 0 ? n2 : o2);
              } catch (e4) {
                if (e4.code === "commander.invalidArgument") {
                  const t5 = `${s2} ${e4.message}`;
                  this._displayError(e4.exitCode, e4.code, t5);
                }
                throw e4;
              }
            } else if (t4 !== null && e3.variadic) {
              t4 = e3._concatValue(t4, o2);
            }
            if (typeof o2 === "boolean" || typeof o2 === "undefined") {
              if (t4 == null) {
                this.setOptionValueWithSource(i3, e3.negate ? false : n2 || true, r2);
              } else {
                this.setOptionValueWithSource(i3, t4, r2);
              }
            } else if (t4 !== null) {
              this.setOptionValueWithSource(i3, e3.negate ? false : t4, r2);
            }
          };
          this.on("option:" + t3, (t4) => {
            const i4 = `error: option '${e3.flags}' argument '${t4}' is invalid.`;
            handleOptionValue(t4, i4, "cli");
          });
          if (e3.envVar) {
            this.on("optionEnv:" + t3, (t4) => {
              const i4 = `error: option '${e3.flags}' value '${t4}' from env '${e3.envVar}' is invalid.`;
              handleOptionValue(t4, i4, "env");
            });
          }
          return this;
        }
        _optionEx(e3, t3, i3, n2, s2) {
          const r2 = this.createOption(t3, i3);
          r2.makeOptionMandatory(!!e3.mandatory);
          if (typeof n2 === "function") {
            r2.default(s2).argParser(n2);
          } else if (n2 instanceof RegExp) {
            const e4 = n2;
            n2 = (t4, i4) => {
              const n3 = e4.exec(t4);
              return n3 ? n3[0] : i4;
            };
            r2.default(s2).argParser(n2);
          } else {
            r2.default(n2);
          }
          return this.addOption(r2);
        }
        option(e3, t3, i3, n2) {
          return this._optionEx({}, e3, t3, i3, n2);
        }
        requiredOption(e3, t3, i3, n2) {
          return this._optionEx({ mandatory: true }, e3, t3, i3, n2);
        }
        combineFlagAndOptionalValue(e3 = true) {
          this._combineFlagAndOptionalValue = !!e3;
          return this;
        }
        allowUnknownOption(e3 = true) {
          this._allowUnknownOption = !!e3;
          return this;
        }
        allowExcessArguments(e3 = true) {
          this._allowExcessArguments = !!e3;
          return this;
        }
        enablePositionalOptions(e3 = true) {
          this._enablePositionalOptions = !!e3;
          return this;
        }
        passThroughOptions(e3 = true) {
          this._passThroughOptions = !!e3;
          if (!!this.parent && e3 && !this.parent._enablePositionalOptions) {
            throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
          }
          return this;
        }
        storeOptionsAsProperties(e3 = true) {
          this._storeOptionsAsProperties = !!e3;
          if (this.options.length) {
            throw new Error("call .storeOptionsAsProperties() before adding options");
          }
          return this;
        }
        getOptionValue(e3) {
          if (this._storeOptionsAsProperties) {
            return this[e3];
          }
          return this._optionValues[e3];
        }
        setOptionValue(e3, t3) {
          if (this._storeOptionsAsProperties) {
            this[e3] = t3;
          } else {
            this._optionValues[e3] = t3;
          }
          return this;
        }
        setOptionValueWithSource(e3, t3, i3) {
          this.setOptionValue(e3, t3);
          this._optionValueSources[e3] = i3;
          return this;
        }
        getOptionValueSource(e3) {
          return this._optionValueSources[e3];
        }
        _prepareUserArgs(e3, t3) {
          if (e3 !== void 0 && !Array.isArray(e3)) {
            throw new Error("first parameter to parse must be array or undefined");
          }
          t3 = t3 || {};
          if (e3 === void 0) {
            e3 = process.argv;
            if (process.versions && process.versions.electron) {
              t3.from = "electron";
            }
          }
          this.rawArgs = e3.slice();
          let i3;
          switch (t3.from) {
            case void 0:
            case "node":
              this._scriptPath = e3[1];
              i3 = e3.slice(2);
              break;
            case "electron":
              if (process.defaultApp) {
                this._scriptPath = e3[1];
                i3 = e3.slice(2);
              } else {
                i3 = e3.slice(1);
              }
              break;
            case "user":
              i3 = e3.slice(0);
              break;
            default:
              throw new Error(`unexpected parse option { from: '${t3.from}' }`);
          }
          if (!this._scriptPath && __require.main) {
            this._scriptPath = __require.main.filename;
          }
          this._name = this._name || this._scriptPath && r.basename(this._scriptPath, r.extname(this._scriptPath));
          return i3;
        }
        parse(e3, t3) {
          const i3 = this._prepareUserArgs(e3, t3);
          this._parseCommand([], i3);
          return this;
        }
        async parseAsync(e3, t3) {
          const i3 = this._prepareUserArgs(e3, t3);
          await this._parseCommand([], i3);
          return this;
        }
        _executeSubCommand(e3, t3) {
          t3 = t3.slice();
          let i3 = false;
          const n2 = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
          this._checkForMissingMandatoryOptions();
          let a2 = this._scriptPath;
          if (!a2 && __require.main) {
            a2 = __require.main.filename;
          }
          let h2;
          try {
            const e4 = o.realpathSync(a2);
            h2 = r.dirname(e4);
          } catch (e4) {
            h2 = ".";
          }
          let u2 = r.basename(a2, r.extname(a2)) + "-" + e3._name;
          if (e3._executableFile) {
            u2 = e3._executableFile;
          }
          const c2 = r.join(h2, u2);
          if (o.existsSync(c2)) {
            u2 = c2;
          } else {
            n2.forEach((e4) => {
              if (o.existsSync(`${c2}${e4}`)) {
                u2 = `${c2}${e4}`;
              }
            });
          }
          i3 = n2.includes(r.extname(u2));
          let p2;
          if (process.platform !== "win32") {
            if (i3) {
              t3.unshift(u2);
              t3 = incrementNodeInspectorPort(process.execArgv).concat(t3);
              p2 = s.spawn(process.argv[0], t3, { stdio: "inherit" });
            } else {
              p2 = s.spawn(u2, t3, { stdio: "inherit" });
            }
          } else {
            t3.unshift(u2);
            t3 = incrementNodeInspectorPort(process.execArgv).concat(t3);
            p2 = s.spawn(process.execPath, t3, { stdio: "inherit" });
          }
          const m2 = ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"];
          m2.forEach((e4) => {
            process.on(e4, () => {
              if (p2.killed === false && p2.exitCode === null) {
                p2.kill(e4);
              }
            });
          });
          const d = this._exitCallback;
          if (!d) {
            p2.on("close", process.exit.bind(process));
          } else {
            p2.on("close", () => {
              d(new l(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
            });
          }
          p2.on("error", (t4) => {
            if (t4.code === "ENOENT") {
              const t5 = `'${u2}' does not exist
 - if '${e3._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
              throw new Error(t5);
            } else if (t4.code === "EACCES") {
              throw new Error(`'${u2}' not executable`);
            }
            if (!d) {
              process.exit(1);
            } else {
              const e4 = new l(1, "commander.executeSubCommandAsync", "(error)");
              e4.nestedError = t4;
              d(e4);
            }
          });
          this.runningCommand = p2;
        }
        _dispatchSubcommand(e3, t3, i3) {
          const n2 = this._findCommand(e3);
          if (!n2)
            this.help({ error: true });
          if (n2._executableHandler) {
            this._executeSubCommand(n2, t3.concat(i3));
          } else {
            return n2._parseCommand(t3, i3);
          }
        }
        _checkNumberOfArguments() {
          this._args.forEach((e3, t3) => {
            if (e3.required && this.args[t3] == null) {
              this.missingArgument(e3.name());
            }
          });
          if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {
            return;
          }
          if (this.args.length > this._args.length) {
            this._excessArguments(this.args);
          }
        }
        _processArguments() {
          const myParseArg = (e4, t3, i3) => {
            let n2 = t3;
            if (t3 !== null && e4.parseArg) {
              try {
                n2 = e4.parseArg(t3, i3);
              } catch (i4) {
                if (i4.code === "commander.invalidArgument") {
                  const n3 = `error: command-argument value '${t3}' is invalid for argument '${e4.name()}'. ${i4.message}`;
                  this._displayError(i4.exitCode, i4.code, n3);
                }
                throw i4;
              }
            }
            return n2;
          };
          this._checkNumberOfArguments();
          const e3 = [];
          this._args.forEach((t3, i3) => {
            let n2 = t3.defaultValue;
            if (t3.variadic) {
              if (i3 < this.args.length) {
                n2 = this.args.slice(i3);
                if (t3.parseArg) {
                  n2 = n2.reduce((e4, i4) => myParseArg(t3, i4, e4), t3.defaultValue);
                }
              } else if (n2 === void 0) {
                n2 = [];
              }
            } else if (i3 < this.args.length) {
              n2 = this.args[i3];
              if (t3.parseArg) {
                n2 = myParseArg(t3, n2, t3.defaultValue);
              }
            }
            e3[i3] = n2;
          });
          this.processedArgs = e3;
        }
        _chainOrCall(e3, t3) {
          if (e3 && e3.then && typeof e3.then === "function") {
            return e3.then(() => t3());
          }
          return t3();
        }
        _chainOrCallHooks(e3, t3) {
          let i3 = e3;
          const n2 = [];
          getCommandAndParents(this).reverse().filter((e4) => e4._lifeCycleHooks[t3] !== void 0).forEach((e4) => {
            e4._lifeCycleHooks[t3].forEach((t4) => {
              n2.push({ hookedCommand: e4, callback: t4 });
            });
          });
          if (t3 === "postAction") {
            n2.reverse();
          }
          n2.forEach((e4) => {
            i3 = this._chainOrCall(i3, () => e4.callback(e4.hookedCommand, this));
          });
          return i3;
        }
        _parseCommand(e3, t3) {
          const i3 = this.parseOptions(t3);
          this._parseOptionsEnv();
          e3 = e3.concat(i3.operands);
          t3 = i3.unknown;
          this.args = e3.concat(t3);
          if (e3 && this._findCommand(e3[0])) {
            return this._dispatchSubcommand(e3[0], e3.slice(1), t3);
          }
          if (this._hasImplicitHelpCommand() && e3[0] === this._helpCommandName) {
            if (e3.length === 1) {
              this.help();
            }
            return this._dispatchSubcommand(e3[1], [], [this._helpLongFlag]);
          }
          if (this._defaultCommandName) {
            outputHelpIfRequested(this, t3);
            return this._dispatchSubcommand(this._defaultCommandName, e3, t3);
          }
          if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {
            this.help({ error: true });
          }
          outputHelpIfRequested(this, i3.unknown);
          this._checkForMissingMandatoryOptions();
          const checkForUnknownOptions = () => {
            if (i3.unknown.length > 0) {
              this.unknownOption(i3.unknown[0]);
            }
          };
          const n2 = `command:${this.name()}`;
          if (this._actionHandler) {
            checkForUnknownOptions();
            this._processArguments();
            let i4;
            i4 = this._chainOrCallHooks(i4, "preAction");
            i4 = this._chainOrCall(i4, () => this._actionHandler(this.processedArgs));
            if (this.parent)
              this.parent.emit(n2, e3, t3);
            i4 = this._chainOrCallHooks(i4, "postAction");
            return i4;
          }
          if (this.parent && this.parent.listenerCount(n2)) {
            checkForUnknownOptions();
            this._processArguments();
            this.parent.emit(n2, e3, t3);
          } else if (e3.length) {
            if (this._findCommand("*")) {
              return this._dispatchSubcommand("*", e3, t3);
            }
            if (this.listenerCount("command:*")) {
              this.emit("command:*", e3, t3);
            } else if (this.commands.length) {
              this.unknownCommand();
            } else {
              checkForUnknownOptions();
              this._processArguments();
            }
          } else if (this.commands.length) {
            checkForUnknownOptions();
            this.help({ error: true });
          } else {
            checkForUnknownOptions();
            this._processArguments();
          }
        }
        _findCommand(e3) {
          if (!e3)
            return void 0;
          return this.commands.find((t3) => t3._name === e3 || t3._aliases.includes(e3));
        }
        _findOption(e3) {
          return this.options.find((t3) => t3.is(e3));
        }
        _checkForMissingMandatoryOptions() {
          for (let e3 = this; e3; e3 = e3.parent) {
            e3.options.forEach((t3) => {
              if (t3.mandatory && e3.getOptionValue(t3.attributeName()) === void 0) {
                e3.missingMandatoryOptionValue(t3);
              }
            });
          }
        }
        parseOptions(e3) {
          const t3 = [];
          const i3 = [];
          let n2 = t3;
          const s2 = e3.slice();
          function maybeOption(e4) {
            return e4.length > 1 && e4[0] === "-";
          }
          let r2 = null;
          while (s2.length) {
            const e4 = s2.shift();
            if (e4 === "--") {
              if (n2 === i3)
                n2.push(e4);
              n2.push(...s2);
              break;
            }
            if (r2 && !maybeOption(e4)) {
              this.emit(`option:${r2.name()}`, e4);
              continue;
            }
            r2 = null;
            if (maybeOption(e4)) {
              const t4 = this._findOption(e4);
              if (t4) {
                if (t4.required) {
                  const e5 = s2.shift();
                  if (e5 === void 0)
                    this.optionMissingArgument(t4);
                  this.emit(`option:${t4.name()}`, e5);
                } else if (t4.optional) {
                  let e5 = null;
                  if (s2.length > 0 && !maybeOption(s2[0])) {
                    e5 = s2.shift();
                  }
                  this.emit(`option:${t4.name()}`, e5);
                } else {
                  this.emit(`option:${t4.name()}`);
                }
                r2 = t4.variadic ? t4 : null;
                continue;
              }
            }
            if (e4.length > 2 && e4[0] === "-" && e4[1] !== "-") {
              const t4 = this._findOption(`-${e4[1]}`);
              if (t4) {
                if (t4.required || t4.optional && this._combineFlagAndOptionalValue) {
                  this.emit(`option:${t4.name()}`, e4.slice(2));
                } else {
                  this.emit(`option:${t4.name()}`);
                  s2.unshift(`-${e4.slice(2)}`);
                }
                continue;
              }
            }
            if (/^--[^=]+=/.test(e4)) {
              const t4 = e4.indexOf("=");
              const i4 = this._findOption(e4.slice(0, t4));
              if (i4 && (i4.required || i4.optional)) {
                this.emit(`option:${i4.name()}`, e4.slice(t4 + 1));
                continue;
              }
            }
            if (maybeOption(e4)) {
              n2 = i3;
            }
            if ((this._enablePositionalOptions || this._passThroughOptions) && t3.length === 0 && i3.length === 0) {
              if (this._findCommand(e4)) {
                t3.push(e4);
                if (s2.length > 0)
                  i3.push(...s2);
                break;
              } else if (e4 === this._helpCommandName && this._hasImplicitHelpCommand()) {
                t3.push(e4);
                if (s2.length > 0)
                  t3.push(...s2);
                break;
              } else if (this._defaultCommandName) {
                i3.push(e4);
                if (s2.length > 0)
                  i3.push(...s2);
                break;
              }
            }
            if (this._passThroughOptions) {
              n2.push(e4);
              if (s2.length > 0)
                n2.push(...s2);
              break;
            }
            n2.push(e4);
          }
          return { operands: t3, unknown: i3 };
        }
        opts() {
          if (this._storeOptionsAsProperties) {
            const e3 = {};
            const t3 = this.options.length;
            for (let i3 = 0; i3 < t3; i3++) {
              const t4 = this.options[i3].attributeName();
              e3[t4] = t4 === this._versionOptionName ? this._version : this[t4];
            }
            return e3;
          }
          return this._optionValues;
        }
        _displayError(e3, t3, i3) {
          this._outputConfiguration.outputError(`${i3}
`, this._outputConfiguration.writeErr);
          if (typeof this._showHelpAfterError === "string") {
            this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`);
          } else if (this._showHelpAfterError) {
            this._outputConfiguration.writeErr("\n");
            this.outputHelp({ error: true });
          }
          this._exit(e3, t3, i3);
        }
        _parseOptionsEnv() {
          this.options.forEach((e3) => {
            if (e3.envVar && e3.envVar in process.env) {
              const t3 = e3.attributeName();
              if (this.getOptionValue(t3) === void 0 || ["default", "config", "env"].includes(this.getOptionValueSource(t3))) {
                if (e3.required || e3.optional) {
                  this.emit(`optionEnv:${e3.name()}`, process.env[e3.envVar]);
                } else {
                  this.emit(`optionEnv:${e3.name()}`);
                }
              }
            }
          });
        }
        missingArgument(e3) {
          const t3 = `error: missing required argument '${e3}'`;
          this._displayError(1, "commander.missingArgument", t3);
        }
        optionMissingArgument(e3) {
          const t3 = `error: option '${e3.flags}' argument missing`;
          this._displayError(1, "commander.optionMissingArgument", t3);
        }
        missingMandatoryOptionValue(e3) {
          const t3 = `error: required option '${e3.flags}' not specified`;
          this._displayError(1, "commander.missingMandatoryOptionValue", t3);
        }
        unknownOption(e3) {
          if (this._allowUnknownOption)
            return;
          let t3 = "";
          if (e3.startsWith("--") && this._showSuggestionAfterError) {
            let i4 = [];
            let n2 = this;
            do {
              const e4 = n2.createHelp().visibleOptions(n2).filter((e5) => e5.long).map((e5) => e5.long);
              i4 = i4.concat(e4);
              n2 = n2.parent;
            } while (n2 && !n2._enablePositionalOptions);
            t3 = m(e3, i4);
          }
          const i3 = `error: unknown option '${e3}'${t3}`;
          this._displayError(1, "commander.unknownOption", i3);
        }
        _excessArguments(e3) {
          if (this._allowExcessArguments)
            return;
          const t3 = this._args.length;
          const i3 = t3 === 1 ? "" : "s";
          const n2 = this.parent ? ` for '${this.name()}'` : "";
          const s2 = `error: too many arguments${n2}. Expected ${t3} argument${i3} but got ${e3.length}.`;
          this._displayError(1, "commander.excessArguments", s2);
        }
        unknownCommand() {
          const e3 = this.args[0];
          let t3 = "";
          if (this._showSuggestionAfterError) {
            const i4 = [];
            this.createHelp().visibleCommands(this).forEach((e4) => {
              i4.push(e4.name());
              if (e4.alias())
                i4.push(e4.alias());
            });
            t3 = m(e3, i4);
          }
          const i3 = `error: unknown command '${e3}'${t3}`;
          this._displayError(1, "commander.unknownCommand", i3);
        }
        version(e3, t3, i3) {
          if (e3 === void 0)
            return this._version;
          this._version = e3;
          t3 = t3 || "-V, --version";
          i3 = i3 || "output the version number";
          const n2 = this.createOption(t3, i3);
          this._versionOptionName = n2.attributeName();
          this.options.push(n2);
          this.on("option:" + n2.name(), () => {
            this._outputConfiguration.writeOut(`${e3}
`);
            this._exit(0, "commander.version", e3);
          });
          return this;
        }
        description(e3, t3) {
          if (e3 === void 0 && t3 === void 0)
            return this._description;
          this._description = e3;
          if (t3) {
            this._argsDescription = t3;
          }
          return this;
        }
        alias(e3) {
          if (e3 === void 0)
            return this._aliases[0];
          let t3 = this;
          if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {
            t3 = this.commands[this.commands.length - 1];
          }
          if (e3 === t3._name)
            throw new Error("Command alias can't be the same as its name");
          t3._aliases.push(e3);
          return this;
        }
        aliases(e3) {
          if (e3 === void 0)
            return this._aliases;
          e3.forEach((e4) => this.alias(e4));
          return this;
        }
        usage(e3) {
          if (e3 === void 0) {
            if (this._usage)
              return this._usage;
            const e4 = this._args.map((e5) => h(e5));
            return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? e4 : []).join(" ");
          }
          this._usage = e3;
          return this;
        }
        name(e3) {
          if (e3 === void 0)
            return this._name;
          this._name = e3;
          return this;
        }
        helpInformation(e3) {
          const t3 = this.createHelp();
          if (t3.helpWidth === void 0) {
            t3.helpWidth = e3 && e3.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();
          }
          return t3.formatHelp(this, t3);
        }
        _getHelpContext(e3) {
          e3 = e3 || {};
          const t3 = { error: !!e3.error };
          let i3;
          if (t3.error) {
            i3 = (e4) => this._outputConfiguration.writeErr(e4);
          } else {
            i3 = (e4) => this._outputConfiguration.writeOut(e4);
          }
          t3.write = e3.write || i3;
          t3.command = this;
          return t3;
        }
        outputHelp(e3) {
          let t3;
          if (typeof e3 === "function") {
            t3 = e3;
            e3 = void 0;
          }
          const i3 = this._getHelpContext(e3);
          getCommandAndParents(this).reverse().forEach((e4) => e4.emit("beforeAllHelp", i3));
          this.emit("beforeHelp", i3);
          let n2 = this.helpInformation(i3);
          if (t3) {
            n2 = t3(n2);
            if (typeof n2 !== "string" && !Buffer.isBuffer(n2)) {
              throw new Error("outputHelp callback must return a string or a Buffer");
            }
          }
          i3.write(n2);
          this.emit(this._helpLongFlag);
          this.emit("afterHelp", i3);
          getCommandAndParents(this).forEach((e4) => e4.emit("afterAllHelp", i3));
        }
        helpOption(e3, t3) {
          if (typeof e3 === "boolean") {
            this._hasHelpOption = e3;
            return this;
          }
          this._helpFlags = e3 || this._helpFlags;
          this._helpDescription = t3 || this._helpDescription;
          const i3 = p(this._helpFlags);
          this._helpShortFlag = i3.shortFlag;
          this._helpLongFlag = i3.longFlag;
          return this;
        }
        help(e3) {
          this.outputHelp(e3);
          let t3 = process.exitCode || 0;
          if (t3 === 0 && e3 && typeof e3 !== "function" && e3.error) {
            t3 = 1;
          }
          this._exit(t3, "commander.help", "(outputHelp)");
        }
        addHelpText(e3, t3) {
          const i3 = ["beforeAll", "before", "after", "afterAll"];
          if (!i3.includes(e3)) {
            throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${i3.join("', '")}'`);
          }
          const n2 = `${e3}Help`;
          this.on(n2, (e4) => {
            let i4;
            if (typeof t3 === "function") {
              i4 = t3({ error: e4.error, command: e4.command });
            } else {
              i4 = t3;
            }
            if (i4) {
              e4.write(`${i4}
`);
            }
          });
          return this;
        }
      }
      function outputHelpIfRequested(e3, t3) {
        const i3 = e3._hasHelpOption && t3.find((t4) => t4 === e3._helpLongFlag || t4 === e3._helpShortFlag);
        if (i3) {
          e3.outputHelp();
          e3._exit(0, "commander.helpDisplayed", "(outputHelp)");
        }
      }
      function incrementNodeInspectorPort(e3) {
        return e3.map((e4) => {
          if (!e4.startsWith("--inspect")) {
            return e4;
          }
          let t3;
          let i3 = "127.0.0.1";
          let n2 = "9229";
          let s2;
          if ((s2 = e4.match(/^(--inspect(-brk)?)$/)) !== null) {
            t3 = s2[1];
          } else if ((s2 = e4.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {
            t3 = s2[1];
            if (/^\d+$/.test(s2[3])) {
              n2 = s2[3];
            } else {
              i3 = s2[3];
            }
          } else if ((s2 = e4.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null) {
            t3 = s2[1];
            i3 = s2[3];
            n2 = s2[4];
          }
          if (t3 && n2 !== "0") {
            return `${t3}=${i3}:${parseInt(n2) + 1}`;
          }
          return e4;
        });
      }
      function getCommandAndParents(e3) {
        const t3 = [];
        for (let i3 = e3; i3; i3 = i3.parent) {
          t3.push(i3);
        }
        return t3;
      }
      t2.Command = Command;
    }, 967: (e2, t2) => {
      class CommanderError extends Error {
        constructor(e3, t3, i2) {
          super(i2);
          Error.captureStackTrace(this, this.constructor);
          this.name = this.constructor.name;
          this.code = t3;
          this.exitCode = e3;
          this.nestedError = void 0;
        }
      }
      class InvalidArgumentError extends CommanderError {
        constructor(e3) {
          super(1, "commander.invalidArgument", e3);
          Error.captureStackTrace(this, this.constructor);
          this.name = this.constructor.name;
        }
      }
      t2.CommanderError = CommanderError;
      t2.InvalidArgumentError = InvalidArgumentError;
    }, 34: (e2, t2, i2) => {
      const { humanReadableArgName: n } = i2(969);
      class Help {
        constructor() {
          this.helpWidth = void 0;
          this.sortSubcommands = false;
          this.sortOptions = false;
        }
        visibleCommands(e3) {
          const t3 = e3.commands.filter((e4) => !e4._hidden);
          if (e3._hasImplicitHelpCommand()) {
            const [, i3, n2] = e3._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
            const s = e3.createCommand(i3).helpOption(false);
            s.description(e3._helpCommandDescription);
            if (n2)
              s.arguments(n2);
            t3.push(s);
          }
          if (this.sortSubcommands) {
            t3.sort((e4, t4) => e4.name().localeCompare(t4.name()));
          }
          return t3;
        }
        visibleOptions(e3) {
          const t3 = e3.options.filter((e4) => !e4.hidden);
          const i3 = e3._hasHelpOption && e3._helpShortFlag && !e3._findOption(e3._helpShortFlag);
          const n2 = e3._hasHelpOption && !e3._findOption(e3._helpLongFlag);
          if (i3 || n2) {
            let s;
            if (!i3) {
              s = e3.createOption(e3._helpLongFlag, e3._helpDescription);
            } else if (!n2) {
              s = e3.createOption(e3._helpShortFlag, e3._helpDescription);
            } else {
              s = e3.createOption(e3._helpFlags, e3._helpDescription);
            }
            t3.push(s);
          }
          if (this.sortOptions) {
            const getSortKey = (e4) => e4.short ? e4.short.replace(/^-/, "") : e4.long.replace(/^--/, "");
            t3.sort((e4, t4) => getSortKey(e4).localeCompare(getSortKey(t4)));
          }
          return t3;
        }
        visibleArguments(e3) {
          if (e3._argsDescription) {
            e3._args.forEach((t3) => {
              t3.description = t3.description || e3._argsDescription[t3.name()] || "";
            });
          }
          if (e3._args.find((e4) => e4.description)) {
            return e3._args;
          }
          return [];
        }
        subcommandTerm(e3) {
          const t3 = e3._args.map((e4) => n(e4)).join(" ");
          return e3._name + (e3._aliases[0] ? "|" + e3._aliases[0] : "") + (e3.options.length ? " [options]" : "") + (t3 ? " " + t3 : "");
        }
        optionTerm(e3) {
          return e3.flags;
        }
        argumentTerm(e3) {
          return e3.name();
        }
        longestSubcommandTermLength(e3, t3) {
          return t3.visibleCommands(e3).reduce((e4, i3) => Math.max(e4, t3.subcommandTerm(i3).length), 0);
        }
        longestOptionTermLength(e3, t3) {
          return t3.visibleOptions(e3).reduce((e4, i3) => Math.max(e4, t3.optionTerm(i3).length), 0);
        }
        longestArgumentTermLength(e3, t3) {
          return t3.visibleArguments(e3).reduce((e4, i3) => Math.max(e4, t3.argumentTerm(i3).length), 0);
        }
        commandUsage(e3) {
          let t3 = e3._name;
          if (e3._aliases[0]) {
            t3 = t3 + "|" + e3._aliases[0];
          }
          let i3 = "";
          for (let t4 = e3.parent; t4; t4 = t4.parent) {
            i3 = t4.name() + " " + i3;
          }
          return i3 + t3 + " " + e3.usage();
        }
        commandDescription(e3) {
          return e3.description();
        }
        subcommandDescription(e3) {
          return e3.description();
        }
        optionDescription(e3) {
          const t3 = [];
          if (e3.argChoices && !e3.negate) {
            t3.push(`choices: ${e3.argChoices.map((e4) => JSON.stringify(e4)).join(", ")}`);
          }
          if (e3.defaultValue !== void 0 && !e3.negate) {
            t3.push(`default: ${e3.defaultValueDescription || JSON.stringify(e3.defaultValue)}`);
          }
          if (e3.envVar !== void 0) {
            t3.push(`env: ${e3.envVar}`);
          }
          if (t3.length > 0) {
            return `${e3.description} (${t3.join(", ")})`;
          }
          return e3.description;
        }
        argumentDescription(e3) {
          const t3 = [];
          if (e3.argChoices) {
            t3.push(`choices: ${e3.argChoices.map((e4) => JSON.stringify(e4)).join(", ")}`);
          }
          if (e3.defaultValue !== void 0) {
            t3.push(`default: ${e3.defaultValueDescription || JSON.stringify(e3.defaultValue)}`);
          }
          if (t3.length > 0) {
            const i3 = `(${t3.join(", ")})`;
            if (e3.description) {
              return `${e3.description} ${i3}`;
            }
            return i3;
          }
          return e3.description;
        }
        formatHelp(e3, t3) {
          const i3 = t3.padWidth(e3, t3);
          const n2 = t3.helpWidth || 80;
          const s = 2;
          const r = 2;
          function formatItem(e4, o2) {
            if (o2) {
              const a2 = `${e4.padEnd(i3 + r)}${o2}`;
              return t3.wrap(a2, n2 - s, i3 + r);
            }
            return e4;
          }
          function formatList(e4) {
            return e4.join("\n").replace(/^/gm, " ".repeat(s));
          }
          let o = [`Usage: ${t3.commandUsage(e3)}`, ""];
          const a = t3.commandDescription(e3);
          if (a.length > 0) {
            o = o.concat([a, ""]);
          }
          const h = t3.visibleArguments(e3).map((e4) => formatItem(t3.argumentTerm(e4), t3.argumentDescription(e4)));
          if (h.length > 0) {
            o = o.concat(["Arguments:", formatList(h), ""]);
          }
          const l = t3.visibleOptions(e3).map((e4) => formatItem(t3.optionTerm(e4), t3.optionDescription(e4)));
          if (l.length > 0) {
            o = o.concat(["Options:", formatList(l), ""]);
          }
          const u = t3.visibleCommands(e3).map((e4) => formatItem(t3.subcommandTerm(e4), t3.subcommandDescription(e4)));
          if (u.length > 0) {
            o = o.concat(["Commands:", formatList(u), ""]);
          }
          return o.join("\n");
        }
        padWidth(e3, t3) {
          return Math.max(t3.longestOptionTermLength(e3, t3), t3.longestSubcommandTermLength(e3, t3), t3.longestArgumentTermLength(e3, t3));
        }
        wrap(e3, t3, i3, n2 = 40) {
          if (e3.match(/[\n]\s+/))
            return e3;
          const s = t3 - i3;
          if (s < n2)
            return e3;
          const r = e3.substr(0, i3);
          const o = e3.substr(i3);
          const a = " ".repeat(i3);
          const h = new RegExp(".{1," + (s - 1) + "}([\\s\u200B]|$)|[^\\s\u200B]+?([\\s\u200B]|$)", "g");
          const l = o.match(h) || [];
          return r + l.map((e4, t4) => {
            if (e4.slice(-1) === "\n") {
              e4 = e4.slice(0, e4.length - 1);
            }
            return (t4 > 0 ? a : "") + e4.trimRight();
          }).join("\n");
        }
      }
      t2.Help = Help;
    }, 278: (e2, t2, i2) => {
      const { InvalidArgumentError: n } = i2(967);
      class Option {
        constructor(e3, t3) {
          this.flags = e3;
          this.description = t3 || "";
          this.required = e3.includes("<");
          this.optional = e3.includes("[");
          this.variadic = /\w\.\.\.[>\]]$/.test(e3);
          this.mandatory = false;
          const i3 = splitOptionFlags(e3);
          this.short = i3.shortFlag;
          this.long = i3.longFlag;
          this.negate = false;
          if (this.long) {
            this.negate = this.long.startsWith("--no-");
          }
          this.defaultValue = void 0;
          this.defaultValueDescription = void 0;
          this.envVar = void 0;
          this.parseArg = void 0;
          this.hidden = false;
          this.argChoices = void 0;
        }
        default(e3, t3) {
          this.defaultValue = e3;
          this.defaultValueDescription = t3;
          return this;
        }
        env(e3) {
          this.envVar = e3;
          return this;
        }
        argParser(e3) {
          this.parseArg = e3;
          return this;
        }
        makeOptionMandatory(e3 = true) {
          this.mandatory = !!e3;
          return this;
        }
        hideHelp(e3 = true) {
          this.hidden = !!e3;
          return this;
        }
        _concatValue(e3, t3) {
          if (t3 === this.defaultValue || !Array.isArray(t3)) {
            return [e3];
          }
          return t3.concat(e3);
        }
        choices(e3) {
          this.argChoices = e3;
          this.parseArg = (t3, i3) => {
            if (!e3.includes(t3)) {
              throw new n(`Allowed choices are ${e3.join(", ")}.`);
            }
            if (this.variadic) {
              return this._concatValue(t3, i3);
            }
            return t3;
          };
          return this;
        }
        name() {
          if (this.long) {
            return this.long.replace(/^--/, "");
          }
          return this.short.replace(/^-/, "");
        }
        attributeName() {
          return camelcase(this.name().replace(/^no-/, ""));
        }
        is(e3) {
          return this.short === e3 || this.long === e3;
        }
      }
      function camelcase(e3) {
        return e3.split("-").reduce((e4, t3) => e4 + t3[0].toUpperCase() + t3.slice(1));
      }
      function splitOptionFlags(e3) {
        let t3;
        let i3;
        const n2 = e3.split(/[ |,]+/);
        if (n2.length > 1 && !/^[[<]/.test(n2[1]))
          t3 = n2.shift();
        i3 = n2.shift();
        if (!t3 && /^-[^-]$/.test(i3)) {
          t3 = i3;
          i3 = void 0;
        }
        return { shortFlag: t3, longFlag: i3 };
      }
      t2.Option = Option;
      t2.splitOptionFlags = splitOptionFlags;
    }, 461: (e2, t2) => {
      const i2 = 3;
      function editDistance(e3, t3) {
        if (Math.abs(e3.length - t3.length) > i2)
          return Math.max(e3.length, t3.length);
        const n = [];
        for (let t4 = 0; t4 <= e3.length; t4++) {
          n[t4] = [t4];
        }
        for (let e4 = 0; e4 <= t3.length; e4++) {
          n[0][e4] = e4;
        }
        for (let i3 = 1; i3 <= t3.length; i3++) {
          for (let s = 1; s <= e3.length; s++) {
            let r = 1;
            if (e3[s - 1] === t3[i3 - 1]) {
              r = 0;
            } else {
              r = 1;
            }
            n[s][i3] = Math.min(n[s - 1][i3] + 1, n[s][i3 - 1] + 1, n[s - 1][i3 - 1] + r);
            if (s > 1 && i3 > 1 && e3[s - 1] === t3[i3 - 2] && e3[s - 2] === t3[i3 - 1]) {
              n[s][i3] = Math.min(n[s][i3], n[s - 2][i3 - 2] + 1);
            }
          }
        }
        return n[e3.length][t3.length];
      }
      function suggestSimilar(e3, t3) {
        if (!t3 || t3.length === 0)
          return "";
        t3 = Array.from(new Set(t3));
        const n = e3.startsWith("--");
        if (n) {
          e3 = e3.slice(2);
          t3 = t3.map((e4) => e4.slice(2));
        }
        let s = [];
        let r = i2;
        const o = 0.4;
        t3.forEach((t4) => {
          if (t4.length <= 1)
            return;
          const i3 = editDistance(e3, t4);
          const n2 = Math.max(e3.length, t4.length);
          const a = (n2 - i3) / n2;
          if (a > o) {
            if (i3 < r) {
              r = i3;
              s = [t4];
            } else if (i3 === r) {
              s.push(t4);
            }
          }
        });
        s.sort((e4, t4) => e4.localeCompare(t4));
        if (n) {
          s = s.map((e4) => `--${e4}`);
        }
        if (s.length > 1) {
          return `
(Did you mean one of ${s.join(", ")}?)`;
        }
        if (s.length === 1) {
          return `
(Did you mean ${s[0]}?)`;
        }
        return "";
      }
      t2.suggestSimilar = suggestSimilar;
    } };
    var t = {};
    function __nccwpck_require__(i2) {
      var n = t[i2];
      if (n !== void 0) {
        return n.exports;
      }
      var s = t[i2] = { exports: {} };
      var r = true;
      try {
        e[i2](s, s.exports, __nccwpck_require__);
        r = false;
      } finally {
        if (r)
          delete t[i2];
      }
      return s.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined")
      __nccwpck_require__.ab = __dirname + "/";
    var i = __nccwpck_require__(922);
    module2.exports = i;
  })();
});
var require_compiled = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.inquirer = exports.chokidar = exports.mime = exports.Signale = exports.Command = exports.program = exports.recursiveReaddir = exports.browserslist = exports.dotenvExpand = exports.stripAnsi = exports.gzipSize = exports.filesize = exports.fastGlob = exports.minimist = exports.urlJoin = exports.signale = exports.address = exports.globby = exports.lodash = exports.dotenv = exports.semver = exports.nanoid = exports.pkgUp = exports.upath = exports.json5 = exports.execa = exports.slash = exports.debug = exports.chalk = exports.yaml = exports.glob = exports.ora = exports.fs = void 0;
  var import_1 = require_import();
  var fs_extra_1 = require_fs_extra();
  Object.defineProperty(exports, "fs", { enumerable: true, get: function() {
    return __importDefault(fs_extra_1).default;
  } });
  var ora_1 = require_ora();
  Object.defineProperty(exports, "ora", { enumerable: true, get: function() {
    return __importDefault(ora_1).default;
  } });
  var glob_1 = require_glob();
  Object.defineProperty(exports, "glob", { enumerable: true, get: function() {
    return __importDefault(glob_1).default;
  } });
  var js_yaml_1 = require_js_yaml();
  Object.defineProperty(exports, "yaml", { enumerable: true, get: function() {
    return __importDefault(js_yaml_1).default;
  } });
  var chalk_1 = require_chalk();
  Object.defineProperty(exports, "chalk", { enumerable: true, get: function() {
    return __importDefault(chalk_1).default;
  } });
  var debug_1 = require_debug();
  Object.defineProperty(exports, "debug", { enumerable: true, get: function() {
    return __importDefault(debug_1).default;
  } });
  var slash_1 = require_slash();
  Object.defineProperty(exports, "slash", { enumerable: true, get: function() {
    return __importDefault(slash_1).default;
  } });
  var execa_1 = require_execa2();
  Object.defineProperty(exports, "execa", { enumerable: true, get: function() {
    return __importDefault(execa_1).default;
  } });
  var json5_1 = require_json5();
  Object.defineProperty(exports, "json5", { enumerable: true, get: function() {
    return __importDefault(json5_1).default;
  } });
  var upath_1 = require_upath();
  Object.defineProperty(exports, "upath", { enumerable: true, get: function() {
    return __importDefault(upath_1).default;
  } });
  var pkg_up_1 = require_pkg_up();
  Object.defineProperty(exports, "pkgUp", { enumerable: true, get: function() {
    return __importDefault(pkg_up_1).default;
  } });
  var nanoid_1 = require_nanoid();
  Object.defineProperty(exports, "nanoid", { enumerable: true, get: function() {
    return nanoid_1.nanoid;
  } });
  var semver_1 = require_semver();
  Object.defineProperty(exports, "semver", { enumerable: true, get: function() {
    return __importDefault(semver_1).default;
  } });
  var dotenv_1 = require_dotenv();
  Object.defineProperty(exports, "dotenv", { enumerable: true, get: function() {
    return __importDefault(dotenv_1).default;
  } });
  var lodash_1 = require_lodash2();
  Object.defineProperty(exports, "lodash", { enumerable: true, get: function() {
    return __importDefault(lodash_1).default;
  } });
  var globby_1 = require_globby();
  Object.defineProperty(exports, "globby", { enumerable: true, get: function() {
    return __importDefault(globby_1).default;
  } });
  var address_1 = require_address();
  Object.defineProperty(exports, "address", { enumerable: true, get: function() {
    return __importDefault(address_1).default;
  } });
  var signale_1 = require_signale();
  Object.defineProperty(exports, "signale", { enumerable: true, get: function() {
    return __importDefault(signale_1).default;
  } });
  var url_join_1 = require_url_join();
  Object.defineProperty(exports, "urlJoin", { enumerable: true, get: function() {
    return __importDefault(url_join_1).default;
  } });
  var minimist_1 = require_minimist();
  Object.defineProperty(exports, "minimist", { enumerable: true, get: function() {
    return __importDefault(minimist_1).default;
  } });
  var fast_glob_1 = require_fast_glob();
  Object.defineProperty(exports, "fastGlob", { enumerable: true, get: function() {
    return __importDefault(fast_glob_1).default;
  } });
  var filesize_1 = require_filesize();
  Object.defineProperty(exports, "filesize", { enumerable: true, get: function() {
    return __importDefault(filesize_1).default;
  } });
  var gzip_size_1 = require_gzip_size();
  Object.defineProperty(exports, "gzipSize", { enumerable: true, get: function() {
    return __importDefault(gzip_size_1).default;
  } });
  var strip_ansi_1 = require_strip_ansi();
  Object.defineProperty(exports, "stripAnsi", { enumerable: true, get: function() {
    return __importDefault(strip_ansi_1).default;
  } });
  var dotenv_expand_1 = require_dotenv_expand();
  Object.defineProperty(exports, "dotenvExpand", { enumerable: true, get: function() {
    return __importDefault(dotenv_expand_1).default;
  } });
  var browserslist_1 = require_browserslist();
  Object.defineProperty(exports, "browserslist", { enumerable: true, get: function() {
    return __importDefault(browserslist_1).default;
  } });
  var recursive_readdir_1 = require_recursive_readdir();
  Object.defineProperty(exports, "recursiveReaddir", { enumerable: true, get: function() {
    return __importDefault(recursive_readdir_1).default;
  } });
  var commander_1 = require_commander();
  Object.defineProperty(exports, "program", { enumerable: true, get: function() {
    return commander_1.program;
  } });
  Object.defineProperty(exports, "Command", { enumerable: true, get: function() {
    return commander_1.Command;
  } });
  var signale_2 = require_signale();
  Object.defineProperty(exports, "Signale", { enumerable: true, get: function() {
    return signale_2.Signale;
  } });
  exports.mime = import_1.Import.lazy("../compiled/mime-types", __require);
  exports.chokidar = import_1.Import.lazy("../compiled/chokidar", __require);
  exports.inquirer = import_1.Import.lazy("../compiled/inquirer", __require);
});
var require_format = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.formatProxyOptions = exports.formatWebpackMessages = void 0;
  var friendlySyntaxErrorLabel = "SyntaxError:";
  function isLikelyASyntaxError(message) {
    return message.includes(friendlySyntaxErrorLabel);
  }
  function formatMessage(stats) {
    let lines = [];
    let message;
    if (typeof stats === "object") {
      const fileName = stats.moduleName ? `File: ${stats.moduleName}
` : "";
      const mainMessage = stats.message;
      const details = stats.details ? `
Details: ${stats.details}
` : "";
      const stack = stats.stack ? `
${stats.stack}` : "";
      message = `${fileName}${mainMessage}${details}${stack}`;
    } else {
      message = stats;
    }
    lines = message.split("\n");
    lines = lines.map((line) => {
      const parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);
      if (!parsingError) {
        return line;
      }
      const [, errorLine, errorColumn, errorMessage] = parsingError;
      return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`;
    });
    message = lines.join("\n");
    message = message.replace(/SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, `${friendlySyntaxErrorLabel} $3 ($1:$2)
`);
    lines = message.split("\n");
    if (lines.length > 2 && lines[1].trim() === "") {
      lines.splice(1, 1);
    }
    lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, "$1");
    if (lines[1] && lines[1].indexOf("Module not found:") !== -1) {
      lines[1] = lines[1].replace("Error: ", "");
    }
    message = lines.join("\n");
    message = message.replace(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, "");
    message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, "");
    lines = message.split("\n");
    lines = lines.filter((line, index, arr) => index === 0 || line.trim() !== "" || line.trim() !== arr[index - 1].trim());
    message = lines.join("\n");
    return message.trim();
  }
  function formatWebpackMessages(json) {
    var _a, _b, _c;
    const formattedErrors = (_a = json.errors) === null || _a === void 0 ? void 0 : _a.map(formatMessage);
    const formattedWarnings = (_b = json.warnings) === null || _b === void 0 ? void 0 : _b.map(formatMessage);
    const result = {
      errors: formattedErrors || [],
      warnings: formattedWarnings || []
    };
    if ((_c = result.errors) === null || _c === void 0 ? void 0 : _c.some(isLikelyASyntaxError)) {
      result.errors = result.errors.filter(isLikelyASyntaxError);
    }
    if (result.errors.length > 1) {
      result.errors.length = 1;
    }
    return result;
  }
  exports.formatWebpackMessages = formatWebpackMessages;
  function formatProxyOptions(proxyOptions) {
    const formattedProxy = [];
    if (!Array.isArray(proxyOptions)) {
      if ("target" in proxyOptions) {
        formattedProxy.push(proxyOptions);
      } else {
        Array.prototype.push.apply(formattedProxy, Object.keys(proxyOptions).reduce((total, source) => {
          const option = proxyOptions[source];
          total.push({
            context: source,
            changeOrigin: true,
            logLevel: "warn",
            ...typeof option === "string" ? { target: option } : option
          });
          return total;
        }, []));
      }
    } else {
      formattedProxy.push(...proxyOptions);
    }
    return formattedProxy;
  }
  exports.formatProxyOptions = formatProxyOptions;
});
var require_logger = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.logger = exports.Logger = void 0;
  var chalk_1 = __importDefault(require_chalk());
  var { grey, underline } = chalk_1.default;
  var LOG_LEVEL = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
    log: 4
  };
  var LOG_TYPES = {
    error: {
      color: "red",
      label: "error",
      level: "error"
    },
    info: {
      color: "blue",
      label: "info",
      level: "info"
    },
    warn: {
      color: "yellow",
      label: "warning",
      level: "warn"
    },
    debug: {
      color: "red",
      label: "debug",
      level: "debug"
    },
    log: { level: "log" }
  };
  var DEFAULT_CONFIG = {
    displayLabel: true,
    underlineLabel: true,
    uppercaseLabel: false
  };
  var Logger = class {
    constructor(options2 = {}) {
      this.logCount = 200;
      this.history = {};
      this.level = options2.level || LOG_TYPES.log.level;
      this.config = { ...DEFAULT_CONFIG, ...options2.config || {} };
      this.types = {
        ...LOG_TYPES,
        ...options2.types || {}
      };
      this.longestLabel = this.getLongestLabel();
      Object.keys(this.types).forEach((type) => {
        this[type] = this._log.bind(this, type);
      });
    }
    retainLog(type, message) {
      if (!this.history[type]) {
        this.history[type] = [];
      }
      this.history[type].push(message);
      while (this.history[type].length > this.logCount) {
        this.history[type].shift();
      }
    }
    _log(type, message, ...args) {
      if (message === void 0) {
        console.log();
        return;
      }
      if (LOG_LEVEL[type] > LOG_LEVEL[this.level]) {
        return;
      }
      let label = "";
      let text = "";
      const logType = this.types[type];
      if (this.config.displayLabel && logType.label) {
        label = this.config.uppercaseLabel ? logType.label.toUpperCase() : logType.label;
        if (this.config.underlineLabel) {
          label = underline(label).padEnd(this.longestUnderlinedLabel.length + 1);
        } else {
          label = label.padEnd(this.longestLabel.length + 1);
        }
        label = logType.color ? chalk_1.default[logType.color](label) : label;
      }
      if (message instanceof Error) {
        if (message.stack) {
          const [name2, ...rest] = message.stack.split("\n");
          text = `${name2}
${grey(rest.join("\n"))}`;
        } else {
          text = message.message;
        }
      } else {
        text = `${message}`;
      }
      if (logType.level === "warn" || logType.level === "error") {
        this.retainLog(type, text);
      }
      const log = label.length > 0 ? `${label}  ${text}` : text;
      console.log(log, ...args);
    }
    getLongestLabel() {
      let longestLabel = "";
      Object.keys(this.types).forEach((type) => {
        const { label = "" } = this.types[type];
        if (label.length > longestLabel.length) {
          longestLabel = label;
        }
      });
      return longestLabel;
    }
    get longestUnderlinedLabel() {
      return underline(this.longestLabel);
    }
    getRetainedLogs(type) {
      return this.history[type] || [];
    }
    clearRetainedLogs(type) {
      if (type) {
        if (this.history[type]) {
          this.history[type] = [];
        }
      } else {
        this.history = {};
      }
    }
  };
  exports.Logger = Logger;
  var logger = new Logger();
  exports.logger = logger;
  logger.Logger = Logger;
});
var require_FileSizeReporter = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printFileSizesAfterBuild = exports.measureFileSizesBeforeBuild = void 0;
  var fs_1 = __importDefault(__require("fs"));
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var logger_1 = require_logger();
  function canReadAsset(asset) {
    return /\.(js|css)$/.test(asset) && !/service-worker\.js/.test(asset) && !/precache-manifest\.[0-9a-f]+\.js/.test(asset);
  }
  function printFileSizesAfterBuild(webpackStats, previousSizeMap, buildFolder, maxBundleGzipSize, maxChunkGzipSize) {
    var root = previousSizeMap.root;
    var sizes = previousSizeMap.sizes;
    var assets = (webpackStats.stats || [webpackStats]).map((stats) => stats.toJson({ all: false, assets: true }).assets.filter((asset) => canReadAsset(asset.name)).map((asset) => {
      var fileContents = fs_1.default.readFileSync(path_1.default.join(root, asset.name));
      var size = fileContents.length;
      var gzippedSize = compiled_1.gzipSize.sync(fileContents);
      var [previousSize, previousGzipSize] = sizes[removeFileNameHash(root, asset.name)] || [];
      var sizeDifference = getDifferenceLabel(size, previousSize);
      var gzipSizeDifference = getDifferenceLabel(gzippedSize, previousGzipSize);
      return {
        folder: path_1.default.join(path_1.default.basename(buildFolder), path_1.default.dirname(asset.name)),
        name: path_1.default.basename(asset.name),
        gzippedSize,
        sizeLabel: (0, compiled_1.filesize)(size) + (sizeDifference ? " (" + sizeDifference + ")" : ""),
        gzipSizeLabel: (0, compiled_1.filesize)(gzippedSize) + (gzipSizeDifference ? " (" + gzipSizeDifference + ")" : "")
      };
    })).reduce((single, all) => all.concat(single), []);
    assets.sort((a, b) => b.size - a.size);
    var longestSizeLabelLength = Math.max.apply(null, assets.map((a) => (0, compiled_1.stripAnsi)(a.sizeLabel).length));
    var longestFileNameLength = Math.max.apply(null, assets.map((a) => (0, compiled_1.stripAnsi)(a.folder + path_1.default.sep + a.name).length));
    printFileSizesHeader(longestFileNameLength, longestSizeLabelLength);
    var suggestBundleSplitting = false;
    assets.forEach((asset) => {
      var { folder, name: name2, sizeLabel, gzipSizeLabel, gzippedSize } = asset;
      var fileNameLength = (0, compiled_1.stripAnsi)(folder + path_1.default.sep + name2).length;
      var sizeLength = (0, compiled_1.stripAnsi)(sizeLabel).length;
      if (sizeLength < longestSizeLabelLength) {
        var rightPadding = " ".repeat(longestSizeLabelLength - sizeLength);
        sizeLabel += rightPadding;
      }
      var fileNameLabel = compiled_1.chalk.dim(asset.folder + path_1.default.sep) + compiled_1.chalk.cyan(asset.name);
      if (fileNameLength < longestFileNameLength) {
        var rightPadding = " ".repeat(longestFileNameLength - fileNameLength);
        fileNameLabel += rightPadding;
      }
      var isMainBundle = asset.name.indexOf("main.") === 0;
      var maxRecommendedSize = isMainBundle ? maxBundleGzipSize : maxChunkGzipSize;
      var isLarge = maxRecommendedSize && gzippedSize > maxRecommendedSize;
      if (isLarge && path_1.default.extname(asset.name) === ".js") {
        suggestBundleSplitting = true;
      }
      logger_1.logger.log("  " + fileNameLabel + "    " + sizeLabel + "    " + (isLarge ? compiled_1.chalk.yellow(gzipSizeLabel) : gzipSizeLabel));
    });
    if (suggestBundleSplitting) {
      logger_1.logger.log();
      logger_1.logger.warn("The bundle size is significantly larger than recommended.");
    }
  }
  exports.printFileSizesAfterBuild = printFileSizesAfterBuild;
  function printFileSizesHeader(longestFileNameLength, longestSizeLabelLength) {
    const longestLengths = [longestFileNameLength, longestSizeLabelLength];
    const headerRow = ["File", "Size", "Gzipped"].reduce((prev, cur, index) => {
      const length = longestLengths[index];
      let curLabel = cur;
      if (length) {
        curLabel = cur.length < length ? cur + " ".repeat(length - cur.length) : cur;
      }
      return prev + curLabel + "    ";
    }, "  ");
    logger_1.logger.log(compiled_1.chalk.bold(compiled_1.chalk.blue(headerRow)));
  }
  function removeFileNameHash(buildFolder, fileName) {
    return fileName.replace(buildFolder, "").replace(/\\/g, "/").replace(/\/?(.*)(\.[0-9a-f]+)(\.chunk)?(\.js|\.css)/, (match, p1, p2, p3, p4) => p1 + p4);
  }
  function getDifferenceLabel(currentSize, previousSize) {
    var FIFTY_KILOBYTES = 1024 * 50;
    var difference = currentSize - previousSize;
    var fileSize = !Number.isNaN(difference) ? (0, compiled_1.filesize)(difference) : 0;
    if (difference >= FIFTY_KILOBYTES) {
      return compiled_1.chalk.red("+" + fileSize);
    } else if (difference < FIFTY_KILOBYTES && difference > 0) {
      return compiled_1.chalk.yellow("+" + fileSize);
    } else if (difference < 0) {
      return compiled_1.chalk.green(fileSize);
    } else {
      return "";
    }
  }
  function measureFileSizesBeforeBuild(buildFolder) {
    return new Promise((resolve) => {
      (0, compiled_1.recursiveReaddir)(buildFolder, (err, fileNames) => {
        var sizes;
        if (!err && fileNames) {
          sizes = fileNames.filter(canReadAsset).reduce((memo, fileName) => {
            var contents = fs_1.default.readFileSync(fileName);
            var key = removeFileNameHash(buildFolder, fileName);
            memo[key] = [contents.length, compiled_1.gzipSize.sync(contents)];
            return memo;
          }, {});
        }
        resolve({
          root: buildFolder,
          sizes: sizes || {}
        });
      });
    });
  }
  exports.measureFileSizesBeforeBuild = measureFileSizesBeforeBuild;
});
var require_printBuildError = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printBuildError = void 0;
  var compiled_1 = require_compiled();
  var logger_1 = require_logger();
  function printBuildError(err) {
    const message = err != null && err.message;
    const stack = err != null && err.stack;
    if (stack && typeof message === "string" && message.indexOf("from Terser") !== -1) {
      try {
        const matched = /(.+)\[(.+):(.+),(.+)\]\[.+\]/.exec(stack);
        if (!matched) {
          throw new Error("Using errors for control flow is bad.");
        }
        const problemPath = matched[2];
        const line = matched[3];
        const column = matched[4];
        logger_1.logger.error(`Failed to minify the code from this file: 

 ${compiled_1.chalk.yellow(`	${problemPath}:${line}${column !== "0" ? ":" + column : ""}`)}
`);
      } catch (ignored) {
        logger_1.logger.error(`Failed to minify the bundle. ${err}
`);
      }
    } else {
      logger_1.logger.error((message || err) + "\n");
    }
    logger_1.logger.log();
  }
  exports.printBuildError = printBuildError;
});
var require_debug2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createDebugger = void 0;
  var debug_1 = require_debug();
  var createDebugger = (scope) => (0, debug_1.debug)(`modern-js:${scope}`);
  exports.createDebugger = createDebugger;
});
var require_findExists = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.findExists = void 0;
  var fs_1 = __importDefault(__require("fs"));
  var findExists = (files) => {
    for (const file of files) {
      if (fs_1.default.existsSync(file) && fs_1.default.statSync(file).isFile()) {
        return file;
      }
    }
    return false;
  };
  exports.findExists = findExists;
});
var require_node_env = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isProdProfile = exports.isTest = exports.isProd = exports.isDev = void 0;
  var isDev = () => false;
  exports.isDev = isDev;
  var isProd = () => true;
  exports.isProd = isProd;
  var isTest = () => false;
  exports.isTest = isTest;
  var isProdProfile = () => (0, exports.isProd)() && process.argv.includes("--profile");
  exports.isProdProfile = isProdProfile;
});
var require_platform = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isBrowser = exports.isNodeJS = void 0;
  var isNodeJS = () => typeof process !== "undefined" && process.versions != null && process.versions.node != null && process.versions.electron == null;
  exports.isNodeJS = isNodeJS;
  var isBrowser = () => typeof window !== "undefined";
  exports.isBrowser = isBrowser;
});
var require_type = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isRegExp = exports.isPromise = exports.isPlainObject = exports.isObject = exports.isFunction = exports.isArray = exports.isUndefined = exports.isString = void 0;
  function isString(str) {
    return typeof str === "string";
  }
  exports.isString = isString;
  function isUndefined(obj) {
    return typeof obj === "undefined";
  }
  exports.isUndefined = isUndefined;
  function isArray2(obj) {
    return Array.isArray(obj);
  }
  exports.isArray = isArray2;
  function isFunction(func) {
    return typeof func === "function";
  }
  exports.isFunction = isFunction;
  function isObject2(obj) {
    return obj !== null && typeof obj === "object";
  }
  exports.isObject = isObject2;
  function isPlainObject2(obj) {
    return isObject2(obj) && Object.prototype.toString.call(obj) === "[object Object]";
  }
  exports.isPlainObject = isPlainObject2;
  function isPromise(obj) {
    return Boolean(obj) && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
  }
  exports.isPromise = isPromise;
  function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  exports.isRegExp = isRegExp;
});
var require_is = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isFastRefresh = exports.isUseSSRBundle = exports.isSSR = exports.isEmpty = exports.isTypescript = exports.isDepExists = void 0;
  var fs_1 = __importDefault(__require("fs"));
  var path_1 = __importDefault(__require("path"));
  var node_env_1 = require_node_env();
  var isDepExists = (appDirectory, name2) => {
    const json = __require(path_1.default.resolve(appDirectory, "./package.json"));
    const { dependencies = {}, devDependencies = {} } = json;
    return dependencies.hasOwnProperty(name2) || devDependencies.hasOwnProperty(name2);
  };
  exports.isDepExists = isDepExists;
  var isTypescript = (root) => fs_1.default.existsSync(path_1.default.resolve(root, "./tsconfig.json"));
  exports.isTypescript = isTypescript;
  var isEmpty = (o) => Object.entries(o).length === 0 && o.constructor === Object;
  exports.isEmpty = isEmpty;
  var isSSR = (config) => {
    const { server } = config;
    if (server === null || server === void 0 ? void 0 : server.ssr) {
      return true;
    }
    if ((server === null || server === void 0 ? void 0 : server.ssrByEntries) && !(0, exports.isEmpty)(server.ssrByEntries)) {
      for (const name2 of Object.keys(server.ssrByEntries)) {
        if (server.ssrByEntries[name2]) {
          return true;
        }
      }
    }
    return false;
  };
  exports.isSSR = isSSR;
  var isUseSSRBundle = (config) => {
    const { output } = config;
    if (output === null || output === void 0 ? void 0 : output.ssg) {
      return true;
    }
    return (0, exports.isSSR)(config);
  };
  exports.isUseSSRBundle = isUseSSRBundle;
  var isFastRefresh = () => (0, node_env_1.isDev)() && process.env.FAST_REFRESH !== "false";
  exports.isFastRefresh = isFastRefresh;
  __exportStar(require_node_env(), exports);
  __exportStar(require_platform(), exports);
  __exportStar(require_type(), exports);
});
var require_compatRequire = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.cleanRequireCache = exports.requireExistModule = exports.compatRequire = void 0;
  var findExists_1 = require_findExists();
  var compatRequire = (filePath) => {
    const mod = __require(filePath);
    return (mod === null || mod === void 0 ? void 0 : mod.__esModule) ? mod.default : mod;
  };
  exports.compatRequire = compatRequire;
  var requireExistModule = (filename, extensions = [".ts", ".js"]) => {
    const exist = (0, findExists_1.findExists)(extensions.map((ext) => `${filename}${ext}`));
    if (!exist) {
      return null;
    }
    return (0, exports.compatRequire)(exist);
  };
  exports.requireExistModule = requireExistModule;
  var cleanRequireCache = (filelist) => {
    filelist.forEach((filepath) => {
      delete __require.cache[filepath];
    });
  };
  exports.cleanRequireCache = cleanRequireCache;
});
var require_constants = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PLUGIN_SCHEMAS = exports.INTERNAL_PLUGINS = exports.DEFAULT_SERVER_CONFIG = exports.OUTPUT_CONFIG_FILE = exports.CONFIG_FILE_EXTENSIONS = exports.CONFIG_CACHE_DIR = exports.SHARED_DIR = exports.SERVER_DIR = exports.API_DIR = exports.LOADABLE_STATS_FILE = exports.SERVER_RENDER_FUNCTION_NAME = exports.ENTRY_NAME_PATTERN = exports.SERVER_BUNDLE_DIRECTORY = exports.LAUNCH_EDITOR_ENDPOINT = exports.MAIN_ENTRY_NAME = exports.ROUTE_SPEC_FILE = exports.HMR_SOCK_PATH = void 0;
  exports.HMR_SOCK_PATH = "/_modern_js_hmr_ws";
  exports.ROUTE_SPEC_FILE = "route.json";
  exports.MAIN_ENTRY_NAME = "main";
  exports.LAUNCH_EDITOR_ENDPOINT = "/__open-stack-frame-in-editor";
  exports.SERVER_BUNDLE_DIRECTORY = "bundles";
  exports.ENTRY_NAME_PATTERN = "^[a-zA-Z0-9_-]+$";
  exports.SERVER_RENDER_FUNCTION_NAME = "serverRender";
  exports.LOADABLE_STATS_FILE = "loadable-stats.json";
  exports.API_DIR = "api";
  exports.SERVER_DIR = "server";
  exports.SHARED_DIR = "shared";
  exports.CONFIG_CACHE_DIR = "./node_modules/.cache/node-bundle-require";
  exports.CONFIG_FILE_EXTENSIONS = [".js", ".ts", ".ejs", ".mjs"];
  exports.OUTPUT_CONFIG_FILE = "modern.config.json";
  exports.DEFAULT_SERVER_CONFIG = "modern.server-runtime.config";
  exports.INTERNAL_PLUGINS = {
    "@modern-js/app-tools": { cli: "@modern-js/app-tools/cli" },
    "@modern-js/monorepo-tools": { cli: "@modern-js/monorepo-tools/cli" },
    "@modern-js/module-tools": { cli: "@modern-js/module-tools/cli" },
    "@modern-js/runtime": { cli: "@modern-js/runtime/cli" },
    "@modern-js/plugin-less": { cli: "@modern-js/plugin-less/cli" },
    "@modern-js/plugin-sass": { cli: "@modern-js/plugin-sass/cli" },
    "@modern-js/plugin-esbuild": { cli: "@modern-js/plugin-esbuild/cli" },
    "@modern-js/plugin-proxy": { cli: "@modern-js/plugin-proxy/cli" },
    "@modern-js/plugin-ssg": { cli: "@modern-js/plugin-ssg/cli" },
    "@modern-js/plugin-bff": {
      cli: "@modern-js/plugin-bff/cli",
      server: "@modern-js/plugin-bff/server"
    },
    "@modern-js/plugin-electron": { cli: "@modern-js/plugin-electron/cli" },
    "@modern-js/plugin-testing": { cli: "@modern-js/plugin-testing/cli" },
    "@modern-js/plugin-storybook": { cli: "@modern-js/plugin-storybook/cli" },
    "@modern-js/plugin-express": {
      cli: "@modern-js/plugin-express/cli",
      server: "@modern-js/plugin-express"
    },
    "@modern-js/plugin-egg": {
      cli: "@modern-js/plugin-egg/cli",
      server: "@modern-js/plugin-egg"
    },
    "@modern-js/plugin-koa": {
      cli: "@modern-js/plugin-koa/cli",
      server: "@modern-js/plugin-koa"
    },
    "@modern-js/plugin-nest": {
      cli: "@modern-js/plugin-nest/cli",
      server: "@modern-js/plugin-nest/server"
    },
    "@modern-js/plugin-unbundle": { cli: "@modern-js/plugin-unbundle" },
    "@modern-js/plugin-server": {
      cli: "@modern-js/plugin-server/cli",
      server: "@modern-js/plugin-server/server"
    },
    "@modern-js/plugin-garfish": {
      cli: "@modern-js/plugin-garfish/cli"
    },
    "@modern-js/plugin-tailwindcss": { cli: "@modern-js/plugin-tailwindcss/cli" },
    "@modern-js/plugin-lambda-fc": { cli: "@modern-js/plugin-lambda-fc/cli" },
    "@modern-js/plugin-lambda-scf": { cli: "@modern-js/plugin-lambda-scf/cli" },
    "@modern-js/plugin-cdn-oss": { cli: "@modern-js/plugin-cdn-oss/cli" },
    "@modern-js/plugin-cdn-cos": { cli: "@modern-js/plugin-cdn-cos/cli" },
    "@modern-js/plugin-static-hosting": {
      cli: "@modern-js/plugin-static-hosting/cli"
    },
    "@modern-js/plugin-polyfill": {
      cli: "@modern-js/plugin-polyfill/cli",
      server: "@modern-js/plugin-polyfill"
    },
    "@modern-js/plugin-multiprocess": {
      cli: "@modern-js/plugin-multiprocess/cli"
    },
    "@modern-js/plugin-nocode": { cli: "@modern-js/plugin-nocode/cli" }
  };
  exports.PLUGIN_SCHEMAS = {
    "@modern-js/runtime": [
      {
        target: "runtime",
        schema: {
          type: "object",
          additionalProperties: false
        }
      },
      {
        target: "runtimeByEntries",
        schema: {
          type: "object",
          patternProperties: { [exports.ENTRY_NAME_PATTERN]: { type: "object" } },
          additionalProperties: false
        }
      }
    ],
    "@modern-js/plugin-bff": [
      {
        target: "bff",
        schema: {
          type: "object",
          properties: {
            prefix: {
              type: ["string", "array"],
              items: { type: "string" }
            },
            fetcher: { type: "string" },
            proxy: { type: "object" },
            requestCreator: { type: "string" }
          }
        }
      }
    ],
    "@modern-js/plugin-esbuild": [
      {
        target: "tools.esbuild",
        schema: { typeof: ["object"] }
      }
    ],
    "@modern-js/plugin-less": [
      {
        target: "tools.less",
        schema: { typeof: ["object", "function"] }
      }
    ],
    "@modern-js/plugin-sass": [
      {
        target: "tools.sass",
        schema: { typeof: ["object", "function"] }
      }
    ],
    "@modern-js/plugin-tailwindcss": [
      {
        target: "tools.tailwindcss",
        schema: { typeof: ["object", "function"] }
      }
    ],
    "@modern-js/plugin-proxy": [
      {
        target: "dev.proxy",
        schema: { typeof: ["string", "object"] }
      }
    ],
    "@modern-js/plugin-unbundle": [
      {
        target: "output.disableAutoImportStyle",
        schema: { type: "boolean" }
      },
      {
        target: "dev.unbundle",
        schema: {
          type: "object",
          properties: {
            ignore: {
              type: ["string", "array"],
              items: { type: "string" }
            },
            ignoreModuleCache: { type: "boolean" },
            clearPdnCache: { type: "boolean" },
            pdnHost: { type: "string" }
          }
        }
      }
    ],
    "@modern-js/plugin-ssg": [
      {
        target: "output.ssg",
        schema: {
          oneOf: [
            { type: "boolean" },
            { type: "object" },
            { instanceof: "Function" }
          ]
        }
      }
    ],
    "@modern-js/plugin-state": [
      {
        target: "runtime.state",
        schema: { type: ["boolean", "object"] }
      }
    ],
    "@modern-js/plugin-design-token": [
      {
        target: "source.designSystem",
        schema: { typeof: ["object"] }
      },
      {
        target: "source.designSystem.supportStyledComponents",
        schema: { type: ["boolean"] }
      }
    ],
    "@modern-js/plugin-router": [
      {
        target: "runtime.router",
        schema: { type: ["boolean", "object"] }
      }
    ],
    "@modern-js/plugin-testing": [
      {
        target: "testing",
        schema: { typeof: ["object"] }
      },
      {
        target: "tools.jest",
        schema: { typeof: ["object", "function"] }
      }
    ],
    "@modern-js/plugin-garfish": [
      {
        target: "runtime.masterApp",
        schema: { type: ["boolean", "object"] }
      },
      {
        target: "dev.withMasterApp",
        schema: { type: ["object"] }
      },
      {
        target: "deploy.microFrontend",
        schema: { type: ["boolean", "object"] }
      }
    ],
    "@modern-js/plugin-nocode": []
  };
});
var require_ensureArray = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ensureArray = void 0;
  var ensureArray = (params) => {
    if (Array.isArray(params)) {
      return params;
    }
    return [params];
  };
  exports.ensureArray = ensureArray;
});
var require_ensureAbsolutePath = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ensureAbsolutePath = void 0;
  var path_1 = __importDefault(__require("path"));
  var ensureAbsolutePath = (base, filePath) => path_1.default.isAbsolute(filePath) ? filePath : path_1.default.resolve(base, filePath);
  exports.ensureAbsolutePath = ensureAbsolutePath;
});
var require_clearConsole = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.clearConsole = void 0;
  var clearConsole = () => {
    if (process.stdout.isTTY && !process.env.DEBUG) {
      process.stdout.write("\x1B[H\x1B[2J");
    }
  };
  exports.clearConsole = clearConsole;
});
var require_applyOptionsChain = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.applyOptionsChain = void 0;
  var index_1 = require_dist();
  function applyOptionsChain(defaults, options2, utils, mergeFn = Object.assign) {
    if (!options2) {
      return defaults;
    }
    if ((0, index_1.isPlainObject)(options2)) {
      return mergeFn(defaults, options2);
    } else if ((0, index_1.isFunction)(options2)) {
      const ret = options2(defaults, utils);
      if (ret) {
        if (!(0, index_1.isPlainObject)(ret)) {
          index_1.logger.warn(`${options2.name}: Function should mutate the config and return nothing, Or return a cloned or merged version of config object.`);
        }
        return ret;
      }
    } else if (Array.isArray(options2)) {
      return options2.reduce((memo, cur) => applyOptionsChain(memo, cur, utils, mergeFn), defaults);
    } else {
      throw new Error(`applyOptionsChain error:
default options is: ${JSON.stringify(defaults)}`);
    }
    return defaults;
  }
  exports.applyOptionsChain = applyOptionsChain;
});
var require_getBrowserslist = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getBrowserslist = exports.defaults = void 0;
  var compiled_1 = require_compiled();
  exports.defaults = ["> 0.01%", "not dead", "not op_mini all"];
  var getBrowserslist = (appDirectory) => compiled_1.browserslist.loadConfig({ path: appDirectory }) || exports.defaults;
  exports.getBrowserslist = getBrowserslist;
});
var require_removeSlash = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.removeSlash = exports.removeTailSlash = exports.removeLeadingSlash = void 0;
  var removeLeadingSlash = (s) => s.replace(/^\/+/, "");
  exports.removeLeadingSlash = removeLeadingSlash;
  var removeTailSlash = (s) => s.replace(/\/+$/, "");
  exports.removeTailSlash = removeTailSlash;
  var removeSlash = (s) => (0, exports.removeLeadingSlash)((0, exports.removeTailSlash)(s));
  exports.removeSlash = removeSlash;
});
var require_getEntryOptions = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getEntryOptions = void 0;
  var is_1 = require_is();
  var constants_1 = require_constants();
  var getEntryOptions = (name2, baseOptions, optionsByEntries, packageName) => {
    if (optionsByEntries) {
      let optionsByEntry = getOptionsByEntryName(name2, optionsByEntries);
      if (optionsByEntry === void 0 && name2 === constants_1.MAIN_ENTRY_NAME && packageName) {
        optionsByEntry = getOptionsByEntryName(packageName, optionsByEntries);
      }
      return optionsByEntry !== void 0 ? (0, is_1.isPlainObject)(optionsByEntry) && (0, is_1.isPlainObject)(baseOptions) ? { ...baseOptions, ...optionsByEntry } : optionsByEntry : baseOptions;
    } else {
      return baseOptions;
    }
  };
  exports.getEntryOptions = getEntryOptions;
  var getOptionsByEntryName = (name2, optionsByEntries) => optionsByEntries.hasOwnProperty(name2) ? optionsByEntries[name2] : void 0;
});
var require_getPort = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getPort = void 0;
  var net_1 = __importDefault(__require("net"));
  var compiled_1 = require_compiled();
  var logger_1 = require_logger();
  var getPort = async (port, tryLimits = 20) => {
    if (typeof port === "string") {
      port = parseInt(port, 10);
    }
    const original = port;
    let found = false;
    let attempts = 0;
    while (!found && attempts <= tryLimits) {
      try {
        await new Promise((resolve, reject) => {
          const server = net_1.default.createServer();
          server.unref();
          server.on("error", reject);
          server.listen({
            port,
            host: "0.0.0.0"
          }, () => {
            found = true;
            server.close(resolve);
          });
        });
      } catch (e) {
        if (e.code !== "EADDRINUSE") {
          throw e;
        }
        port++;
        attempts++;
      }
    }
    if (port !== original) {
      logger_1.logger.info(compiled_1.chalk.red(`Something is already running on port ${original}. ${compiled_1.chalk.yellow(`Use port ${port} instead.`)}`));
    }
    return port;
  };
  exports.getPort = getPort;
});
var require_monorepo = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getMonorepoPackages = exports.findMonorepoRoot = exports.isModernjsMonorepo = exports.isMonorepo = exports.isPnpmWorkspaces = exports.isYarnWorkspaces = exports.isLerna = void 0;
  var fs_1 = __importDefault(__require("fs"));
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var PACKAGE_MAX_DEPTH = 5;
  var WORKSPACE_FILES = {
    YARN: "package.json",
    PNPM: "pnpm-workspace.yaml",
    LERNA: "lerna.json"
  };
  var isLerna = (root) => fs_1.default.existsSync(path_1.default.join(root, WORKSPACE_FILES.LERNA));
  exports.isLerna = isLerna;
  var isYarnWorkspaces = (root) => {
    var _a;
    const pkg = path_1.default.join(root, WORKSPACE_FILES.YARN);
    if (!fs_1.default.existsSync(pkg)) {
      return false;
    }
    const json = JSON.parse(fs_1.default.readFileSync(pkg, "utf8"));
    return Boolean((_a = json.workspaces) === null || _a === void 0 ? void 0 : _a.packages);
  };
  exports.isYarnWorkspaces = isYarnWorkspaces;
  var isPnpmWorkspaces = (root) => fs_1.default.existsSync(path_1.default.join(root, WORKSPACE_FILES.PNPM));
  exports.isPnpmWorkspaces = isPnpmWorkspaces;
  var isMonorepo = (root) => (0, exports.isLerna)(root) || (0, exports.isYarnWorkspaces)(root) || (0, exports.isPnpmWorkspaces)(root);
  exports.isMonorepo = isMonorepo;
  var isModernjsMonorepo = (root) => {
    const pkgJsonPath = path_1.default.join(root, "package.json");
    if (!fs_1.default.existsSync(pkgJsonPath)) {
      return false;
    }
    const json = JSON.parse(fs_1.default.readFileSync(pkgJsonPath, "utf8"));
    const deps = {
      ...json.dependencies || {},
      ...json.devDependencies || {}
    };
    return Boolean(deps["@modern-js/monorepo-tools"]);
  };
  exports.isModernjsMonorepo = isModernjsMonorepo;
  var findMonorepoRoot = (appDirectory, maxDepth = PACKAGE_MAX_DEPTH) => {
    let inMonorepo = false;
    for (let depth = 0; depth < maxDepth; depth++) {
      if ((0, exports.isMonorepo)(appDirectory)) {
        inMonorepo = true;
        break;
      }
      appDirectory = path_1.default.dirname(appDirectory);
    }
    return inMonorepo ? appDirectory : void 0;
  };
  exports.findMonorepoRoot = findMonorepoRoot;
  var getMonorepoPackages = (root) => {
    let packages = [];
    if ((0, exports.isYarnWorkspaces)(root)) {
      const json = JSON.parse(fs_1.default.readFileSync(path_1.default.join(root, "package.json"), "utf8"));
      ({ packages } = json.workspaces);
    } else if ((0, exports.isLerna)(root)) {
      const json = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(root, "lerna.json"), "utf8"));
      ({ packages } = json);
    } else {
      ({ packages } = compiled_1.yaml.load(fs_1.default.readFileSync(path_1.default.join(root, WORKSPACE_FILES.PNPM), "utf8")));
    }
    if (packages) {
      return packages.map((name2) => compiled_1.glob.sync(path_1.default.join(root, `${name2}/`), {
        ignore: ["**/node_modules/**"]
      })).reduce((acc, val) => acc.concat(val), []).filter((filepath) => fs_1.default.existsSync(path_1.default.resolve(filepath, "package.json"))).map((filepath) => ({
        path: filepath,
        name: JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(filepath, "package.json"), "utf8")).name
      }));
    }
    return [];
  };
  exports.getMonorepoPackages = getMonorepoPackages;
});
var require_nodeEnv = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.canUsePnpm = exports.canUseYarn = exports.canUseNpm = void 0;
  var compiled_1 = require_compiled();
  async function canUseNpm() {
    try {
      await (0, compiled_1.execa)("npm", ["--version"], { env: process.env });
      return true;
    } catch (e) {
      return false;
    }
  }
  exports.canUseNpm = canUseNpm;
  async function canUseYarn2() {
    try {
      await (0, compiled_1.execa)("yarn", ["--version"], { env: process.env });
      return true;
    } catch (e) {
      return false;
    }
  }
  exports.canUseYarn = canUseYarn2;
  async function canUsePnpm2() {
    try {
      await (0, compiled_1.execa)("pnpm", ["--version"], { env: process.env });
      return true;
    } catch (e) {
      return false;
    }
  }
  exports.canUsePnpm = canUsePnpm2;
});
var require_getPackageManager = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getPackageManager = void 0;
  var os_1 = __importDefault(__require("os"));
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var nodeEnv_1 = require_nodeEnv();
  var MAX_TIMES = 5;
  async function getPackageManager3(cwd = process.cwd()) {
    let appDirectory = cwd;
    let times = 0;
    while (os_1.default.homedir() !== appDirectory && times < MAX_TIMES) {
      times++;
      if (compiled_1.fs.existsSync(path_1.default.resolve(appDirectory, "pnpm-lock.yaml"))) {
        return "pnpm";
      }
      if (compiled_1.fs.existsSync(path_1.default.resolve(appDirectory, "yarn.lock"))) {
        return "yarn";
      }
      if (compiled_1.fs.existsSync(path_1.default.resolve(appDirectory, "package-lock.json"))) {
        return "npm";
      }
      appDirectory = path_1.default.join(appDirectory, "..");
    }
    if (await (0, nodeEnv_1.canUsePnpm)()) {
      return "pnpm";
    }
    if (await (0, nodeEnv_1.canUseYarn)()) {
      return "yarn";
    }
    return "npm";
  }
  exports.getPackageManager = getPackageManager3;
});
var require_path = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.normalizeToPosixPath = exports.normalizeOutputPath = exports.isRelativePath = void 0;
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var isRelativePath = (test) => /^\.\.?($|[\\/])/.test(test);
  exports.isRelativePath = isRelativePath;
  var normalizeOutputPath = (s) => s.replace(/\\/g, "\\\\");
  exports.normalizeOutputPath = normalizeOutputPath;
  var normalizeToPosixPath = (p) => compiled_1.upath.normalizeSafe(path_1.default.normalize(p || ""));
  exports.normalizeToPosixPath = normalizeToPosixPath;
});
var require_runtimeExports = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createRuntimeExportsUtils = void 0;
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var path_2 = require_path();
  var memo = (fn) => {
    const cache = /* @__PURE__ */ new Map();
    return (...params) => {
      const stringifiedParams = JSON.stringify(params);
      const cachedResult = cache.get(stringifiedParams);
      if (cachedResult) {
        return cachedResult;
      }
      const res = fn(...params);
      cache.set(stringifiedParams, res);
      return res;
    };
  };
  exports.createRuntimeExportsUtils = memo((pwd = "", namespace, ts = false) => {
    const entryExportFile = path_1.default.join(pwd, `.runtime-exports/${namespace ? `${namespace}.js` : "index.js"}`);
    const entryExportTsFile = path_1.default.join(pwd, `.runtime-exports/${namespace ? `${namespace}.d.ts` : "index.d.ts"}`);
    const addExport = (statement) => {
      statement = (0, path_2.normalizeOutputPath)(statement);
      try {
        compiled_1.fs.ensureFileSync(entryExportFile);
        compiled_1.fs.ensureFileSync(entryExportTsFile);
        if (!compiled_1.fs.readFileSync(entryExportFile, "utf8").includes(statement)) {
          compiled_1.fs.appendFileSync(entryExportFile, `${statement}
`);
          ts && compiled_1.fs.appendFileSync(entryExportTsFile, `${statement.replace(".js", ".d")}
`);
        }
      } catch {
      }
    };
    const getPath = () => entryExportFile;
    return {
      addExport,
      getPath
    };
  });
});
var require_readTsConfig = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.readTsConfigByFile = exports.readTsConfig = void 0;
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var readTsConfig = (root) => {
    return (0, exports.readTsConfigByFile)(path_1.default.resolve(root, "./tsconfig.json"));
  };
  exports.readTsConfig = readTsConfig;
  var readTsConfigByFile = (filename) => {
    const content = compiled_1.fs.readFileSync(path_1.default.resolve(filename), "utf-8");
    return compiled_1.json5.parse(content);
  };
  exports.readTsConfigByFile = readTsConfigByFile;
});
var require_generateMetaTags = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.generateMetaTags = void 0;
  var tagObjectToString = (tagDefinition) => {
    const attributes = Object.keys(tagDefinition.attributes || {}).filter((attributeName) => tagDefinition.attributes[attributeName] !== false).map((attributeName) => {
      if (tagDefinition.attributes[attributeName] === true) {
        return attributeName;
      }
      return `${attributeName}="${tagDefinition.attributes[attributeName]}"`;
    });
    return `<${[tagDefinition.tagName].concat(attributes).join(" ")}>${tagDefinition.innerHTML || ""}${tagDefinition.voidTag ? "" : `</${tagDefinition.tagName}>`}`;
  };
  var generateMetaTags = (metaOptions) => {
    if (!metaOptions) {
      return "";
    }
    const metaTagAttributeObjects = Object.keys(metaOptions).map((metaName) => {
      const metaTagContent = metaOptions[metaName];
      return typeof metaTagContent === "string" ? {
        name: metaName,
        content: metaTagContent
      } : metaTagContent;
    }).filter((attribute) => attribute !== false);
    return metaTagAttributeObjects.map((metaTagAttributes) => {
      if (metaTagAttributes === false) {
        throw new Error("Invalid meta tag");
      }
      return {
        tagName: "meta",
        voidTag: true,
        attributes: metaTagAttributes
      };
    }).reduce((memo, tagObject) => `${memo}
${tagObjectToString(tagObject)}`, "");
  };
  exports.generateMetaTags = generateMetaTags;
});
var require_prettyInstructions = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.prettyInstructions = exports.getIpv4Interfaces = exports.isSingleEntry = void 0;
  var os_1 = __importDefault(__require("os"));
  var compiled_1 = require_compiled();
  var is_1 = require_is();
  var isSingleEntry = (entrypoints) => entrypoints.length === 1 && entrypoints[0].entryName === "main";
  exports.isSingleEntry = isSingleEntry;
  var normalizeUrl = (url) => url.replace(/([^:]\/)\/+/g, "$1");
  var getIpv4Interfaces = () => {
    const interfaces = os_1.default.networkInterfaces();
    const ipv4Interfaces = [];
    Object.keys(interfaces).forEach((key) => {
      interfaces[key].forEach((detail) => {
        const familyV4Value = typeof detail.family === "string" ? "IPv4" : 4;
        if (detail.family === familyV4Value) {
          ipv4Interfaces.push(detail);
        }
      });
    });
    return ipv4Interfaces;
  };
  exports.getIpv4Interfaces = getIpv4Interfaces;
  var getAddressUrls = (protocol = "http", port) => {
    const ipv4Interfaces = (0, exports.getIpv4Interfaces)();
    return ipv4Interfaces.reduce((memo, detail) => {
      let type = "Network:  ";
      let url = `${protocol}://${detail.address}:${port}`;
      if (detail.address.includes(`localhost`) || detail.internal) {
        type = "Local:  ";
        url = `${protocol}://localhost:${port}`;
      }
      memo.push({ type, url });
      return memo;
    }, []);
  };
  var prettyInstructions = (appContext, config) => {
    const { entrypoints, serverRoutes, port, apiOnly, checkedEntries } = appContext;
    const urls = getAddressUrls(config.dev.https && (0, is_1.isDev)() ? "https" : "http", port);
    const routes = !apiOnly ? serverRoutes.filter((route) => route.entryName) : serverRoutes;
    let message = "App running at:\n\n";
    if ((0, exports.isSingleEntry)(entrypoints) || apiOnly) {
      message += urls.map(({ type, url }) => `  ${compiled_1.chalk.bold(`> ${type.padEnd(10)}`)}${compiled_1.chalk.cyanBright(normalizeUrl(`${url}/${routes[0].urlPath}`))}
`).join("");
    } else {
      const maxNameLength = Math.max(...routes.map((r) => r.entryName.length));
      urls.forEach(({ type, url }) => {
        message += `  ${compiled_1.chalk.bold(`> ${type}`)}
`;
        routes.forEach(({ entryName, urlPath, isSSR }) => {
          if (!checkedEntries.includes(entryName)) {
            return;
          }
          message += `    ${compiled_1.chalk.yellowBright(isSSR ? "\u03BB" : "\u25CB")}  ${compiled_1.chalk.yellowBright(entryName.padEnd(maxNameLength + 8))}${compiled_1.chalk.cyanBright(normalizeUrl(`${url}/${urlPath}`))}
`;
        });
      });
      message += "\n";
      message += compiled_1.chalk.cyanBright("  \u03BB (Server) server-side renders at runtime\n");
      message += compiled_1.chalk.cyanBright("  \u25CB (Static) client-side renders as static HTML\n");
    }
    return message;
  };
  exports.prettyInstructions = prettyInstructions;
});
var require_alias = __commonJSMin((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getUserAlias = exports.getAlias = exports.validAlias = void 0;
  var fs_1 = __importDefault(__require("fs"));
  var path_1 = __importDefault(__require("path"));
  var compiled_1 = require_compiled();
  var readTsConfig_1 = require_readTsConfig();
  var applyOptionsChain_1 = require_applyOptionsChain();
  var validAlias = (modernConfig, { tsconfigPath }) => {
    const { source: { alias } } = modernConfig;
    if (!alias) {
      return null;
    }
    const isTsProject = fs_1.default.existsSync(tsconfigPath);
    if (!isTsProject) {
      return null;
    }
    const userAlias = (0, exports.getUserAlias)(alias);
    if (Object.keys(userAlias).length > 0) {
      return compiled_1.chalk.red('Note: Please use `compilerOptions.paths` in "tsconfig.json" file replace `source.alias` config in "modern.config.js/ts" when project is typescript');
    }
    return null;
  };
  exports.validAlias = validAlias;
  var getAlias = (aliasOption, option) => {
    var _a, _b;
    const isTsProject = fs_1.default.existsSync(option.tsconfigPath);
    let aliasConfig;
    if (!isTsProject) {
      aliasConfig = {
        absoluteBaseUrl: option.appDirectory,
        paths: (0, applyOptionsChain_1.applyOptionsChain)({ "@": ["./src"] }, aliasOption),
        isTsPath: false,
        isTsProject
      };
    } else {
      const tsconfig = (0, readTsConfig_1.readTsConfigByFile)(option.tsconfigPath);
      const baseUrl = (_a = tsconfig === null || tsconfig === void 0 ? void 0 : tsconfig.compilerOptions) === null || _a === void 0 ? void 0 : _a.baseUrl;
      aliasConfig = {
        absoluteBaseUrl: baseUrl ? path_1.default.join(option.appDirectory, baseUrl) : option.appDirectory,
        paths: {
          ...aliasOption || {},
          ...(_b = tsconfig === null || tsconfig === void 0 ? void 0 : tsconfig.compilerOptions) === null || _b === void 0 ? void 0 : _b.paths
        },
        isTsPath: true,
        isTsProject
      };
    }
    return aliasConfig;
  };
  exports.getAlias = getAlias;
  var getUserAlias = (alias = {}) => Object.keys(alias).reduce((o, k) => {
    if (Array.isArray(alias[k])) {
      o[k] = alias[k];
    }
    return o;
  }, {});
  exports.getUserAlias = getUserAlias;
});
var require_watch = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.watch = exports.WatchChangeType = void 0;
  var path9 = __importStar(__require("path"));
  var compiled_1 = require_compiled();
  exports.WatchChangeType = {
    ADD: "add",
    UNLINK: "unlink",
    CHANGE: "change"
  };
  var watch = (watchDir, runTask, ignored = []) => {
    let ready = false;
    const watcher = compiled_1.chokidar.watch(watchDir, {
      ignored
    });
    watcher.on("ready", () => ready = true);
    watcher.on("change", async (filePath) => {
      const changedFilePath = path9.resolve(filePath);
      await runTask({ changedFilePath, changeType: exports.WatchChangeType.CHANGE });
    });
    watcher.on("add", async (filePath) => {
      const changedFilePath = path9.resolve(filePath);
      if (ready) {
        await runTask({ changedFilePath, changeType: exports.WatchChangeType.ADD });
      }
    });
    watcher.on("unlink", async (filePath) => {
      const changedFilePath = path9.resolve(filePath);
      await runTask({ changedFilePath, changeType: exports.WatchChangeType.UNLINK });
    });
    watcher.on("error", (err) => {
      throw err;
    });
    return watcher;
  };
  exports.watch = watch;
});
var require_wait = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.wait = void 0;
  var wait = (time = 0) => new Promise((resolve) => {
    setTimeout(resolve, time);
  });
  exports.wait = wait;
});
var require_emptyDir = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.emptyDir = void 0;
  var compiled_1 = require_compiled();
  var emptyDir = async (dir) => {
    if (await compiled_1.fs.pathExists(dir)) {
      await compiled_1.fs.emptyDir(dir);
    }
  };
  exports.emptyDir = emptyDir;
});
var require_getServerConfig = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getServerConfig = void 0;
  var path9 = __importStar(__require("path"));
  var constants_1 = require_constants();
  var findExists_1 = require_findExists();
  var getServerConfig = async (appDirectory, configFile) => {
    const configFilePath = (0, findExists_1.findExists)(constants_1.CONFIG_FILE_EXTENSIONS.map((extension) => path9.resolve(appDirectory, `${configFile}${extension}`)));
    return configFilePath;
  };
  exports.getServerConfig = getServerConfig;
});
var require_storage = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createStorage = void 0;
  var ah = __importStar(__require("async_hooks"));
  var createStorage = () => {
    let storage;
    if (typeof ah.AsyncLocalStorage !== "undefined") {
      storage = new ah.AsyncLocalStorage();
    }
    const run = (context3, cb) => {
      if (!storage) {
        throw new Error(`Unable to use async_hook, please confirm the node version >= 12.17
        `);
      }
      return new Promise((resolve, reject) => {
        storage.run(context3, () => {
          try {
            return resolve(cb());
          } catch (error) {
            return reject(error);
          }
        });
      });
    };
    const useContext = () => {
      if (!storage) {
        throw new Error(`Unable to use async_hook, please confirm the node version >= 12.17
        `);
      }
      const context3 = storage.getStore();
      if (!context3) {
        throw new Error(`Can't call useContext out of scope, make sure @modern-js/utils is a single version in node_modules`);
      }
      return context3;
    };
    return {
      run,
      useContext
    };
  };
  exports.createStorage = createStorage;
});
var require_ssr = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.useHeaders = exports.run = void 0;
  var storage_1 = require_storage();
  var { run, useContext: useHeaders } = (0, storage_1.createStorage)();
  exports.run = run;
  exports.useHeaders = useHeaders;
});
var require_tryResolve = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isPackageInstalled = exports.tryResolve = void 0;
  var ensureArray_1 = require_ensureArray();
  var tryResolve = (name2, resolvePath) => {
    let filePath = "";
    try {
      filePath = __require.resolve(name2, { paths: [resolvePath] });
      delete __require.cache[filePath];
    } catch (err) {
      if (err.code === "MODULE_NOT_FOUND") {
        throw new Error(`Can not find module ${name2}.`);
      }
      throw err;
    }
    return filePath;
  };
  exports.tryResolve = tryResolve;
  var isPackageInstalled = (name2, resolvePaths) => {
    try {
      __require.resolve(name2, { paths: (0, ensureArray_1.ensureArray)(resolvePaths) });
      return true;
    } catch (err) {
      return false;
    }
  };
  exports.isPackageInstalled = isPackageInstalled;
});
var require_analyzeProject = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isApiOnly = void 0;
  var path9 = __importStar(__require("path"));
  var compiled_1 = require_compiled();
  var isApiOnly = async (appDirectory) => {
    const srcDir = path9.join(appDirectory, "src");
    const existSrc = await compiled_1.fs.pathExists(srcDir);
    const options2 = (0, compiled_1.minimist)(process.argv.slice(2));
    return !existSrc || Boolean(options2["api-only"]);
  };
  exports.isApiOnly = isApiOnly;
});
var require_chainId = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CHAIN_ID = void 0;
  exports.CHAIN_ID = {
    RULE: {
      MJS: "mjs",
      LOADERS: "loaders",
      FONT: "font",
      IMAGE: "image",
      JS: "js",
      TS: "ts",
      CSS: "css",
      LESS: "less",
      SASS: "sass"
    },
    ONE_OF: {
      JS: "js",
      TS: "ts",
      CSS: "css",
      LESS: "less",
      SASS: "sass",
      YAML: "yml",
      TOML: "toml",
      FALLBACK: "fallback",
      MARKDOWN: "markdown",
      BFF_CLIENT: "bff-client",
      CSS_MODULES: "css-modules",
      LESS_MODULES: "less-modules",
      SASS_MODULES: "sass-modules",
      SVG: "svg",
      SVG_URL: "svg-url",
      SVG_INLINE: "svg-inline",
      ASSETS: "assets",
      ASSETS_URL: "assets-url",
      ASSETS_INLINE: "assets-inline"
    },
    USE: {
      TS: "ts",
      CSS: "css",
      SASS: "sass",
      LESS: "less",
      URL: "url",
      FILE: "file",
      SVGR: "svgr",
      YAML: "yaml",
      TOML: "toml",
      HTML: "html",
      BABEL: "babel",
      STYLE: "style-loader",
      POSTCSS: "postcss",
      MARKDOWN: "markdown",
      CSS_MODULES_TS: "css-modules-typescript",
      MINI_CSS_EXTRACT: "mini-css-extract"
    },
    PLUGIN: {
      HMR: "hmr",
      COPY: "copy",
      HTML: "html",
      DEFINE: "define",
      IGNORE: "ignore",
      BANNER: "banner",
      PROGRESS: "progress",
      APP_ICON: "app-icon",
      LOADABLE: "loadable",
      MANIFEST: "webpack-manifest",
      TS_CHECKER: "ts-checker",
      INLINE_HTML: "inline-html",
      BUNDLE_ANALYZER: "bundle-analyze",
      BOTTOM_TEMPLATE: "bottom-template",
      MINI_CSS_EXTRACT: "mini-css-extract",
      REACT_FAST_REFRESH: "react-fast-refresh",
      NODE_POLYFILL_PROVIDE: "node-polyfill-provide"
    },
    MINIMIZER: {
      JS: "js",
      CSS: "css",
      ESBUILD: "js-css"
    },
    RESOLVE_PLUGIN: {
      MODULE_SCOPE: "module-scope",
      TS_CONFIG_PATHS: "ts-config-paths"
    }
  };
});
var require_dist = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(require_compiled(), exports);
  __exportStar(require_format(), exports);
  __exportStar(require_FileSizeReporter(), exports);
  __exportStar(require_printBuildError(), exports);
  __exportStar(require_debug2(), exports);
  __exportStar(require_findExists(), exports);
  __exportStar(require_is(), exports);
  __exportStar(require_compatRequire(), exports);
  __exportStar(require_logger(), exports);
  __exportStar(require_constants(), exports);
  __exportStar(require_ensureArray(), exports);
  __exportStar(require_ensureAbsolutePath(), exports);
  __exportStar(require_clearConsole(), exports);
  __exportStar(require_applyOptionsChain(), exports);
  __exportStar(require_getBrowserslist(), exports);
  __exportStar(require_removeSlash(), exports);
  __exportStar(require_getEntryOptions(), exports);
  __exportStar(require_getPort(), exports);
  __exportStar(require_monorepo(), exports);
  __exportStar(require_getPackageManager(), exports);
  __exportStar(require_runtimeExports(), exports);
  __exportStar(require_readTsConfig(), exports);
  __exportStar(require_path(), exports);
  __exportStar(require_generateMetaTags(), exports);
  __exportStar(require_prettyInstructions(), exports);
  __exportStar(require_alias(), exports);
  __exportStar(require_import(), exports);
  __exportStar(require_watch(), exports);
  __exportStar(require_nodeEnv(), exports);
  __exportStar(require_wait(), exports);
  __exportStar(require_emptyDir(), exports);
  __exportStar(require_getServerConfig(), exports);
  __exportStar(require_ssr(), exports);
  __exportStar(require_tryResolve(), exports);
  __exportStar(require_analyzeProject(), exports);
  __exportStar(require_chainId(), exports);
});
var require_context = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Context = void 0;
  var fs_1 = __require("fs");
  var os_1 = __require("os");
  var Context = class {
    constructor() {
      var _a, _b, _c;
      this.payload = {};
      if (process.env.GITHUB_EVENT_PATH) {
        if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
          this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
        } else {
          const path9 = process.env.GITHUB_EVENT_PATH;
          process.stdout.write(`GITHUB_EVENT_PATH ${path9} does not exist${os_1.EOL}`);
        }
      }
      this.eventName = process.env.GITHUB_EVENT_NAME;
      this.sha = process.env.GITHUB_SHA;
      this.ref = process.env.GITHUB_REF;
      this.workflow = process.env.GITHUB_WORKFLOW;
      this.action = process.env.GITHUB_ACTION;
      this.actor = process.env.GITHUB_ACTOR;
      this.job = process.env.GITHUB_JOB;
      this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
      this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
      this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
      this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
      this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
    }
    get issue() {
      const payload = this.payload;
      return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
    }
    get repo() {
      if (process.env.GITHUB_REPOSITORY) {
        const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
        return { owner, repo };
      }
      if (this.payload.repository) {
        return {
          owner: this.payload.repository.owner.login,
          repo: this.payload.repository.name
        };
      }
      throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
    }
  };
  exports.Context = Context;
});
var require_utils2 = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0;
  var httpClient = __importStar(require_lib());
  function getAuthString(token, options2) {
    if (!token && !options2.auth) {
      throw new Error("Parameter token or opts.auth is required");
    } else if (token && options2.auth) {
      throw new Error("Parameters token and opts.auth may not both be specified");
    }
    return typeof options2.auth === "string" ? options2.auth : `token ${token}`;
  }
  exports.getAuthString = getAuthString;
  function getProxyAgent(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgent(destinationUrl);
  }
  exports.getProxyAgent = getProxyAgent;
  function getApiBaseUrl() {
    return process.env["GITHUB_API_URL"] || "https://api.github.com";
  }
  exports.getApiBaseUrl = getApiBaseUrl;
});
function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }
  if (typeof process === "object" && "version" in process) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }
  return "<environment undetectable>";
}
var init_dist_web = __esmMin(() => {
});
var require_register = __commonJSMin((exports, module2) => {
  module2.exports = register;
  function register(state, name2, method, options2) {
    if (typeof method !== "function") {
      throw new Error("method for before hook must be a function");
    }
    if (!options2) {
      options2 = {};
    }
    if (Array.isArray(name2)) {
      return name2.reverse().reduce(function(callback, name3) {
        return register.bind(null, state, name3, callback, options2);
      }, method)();
    }
    return Promise.resolve().then(function() {
      if (!state.registry[name2]) {
        return method(options2);
      }
      return state.registry[name2].reduce(function(method2, registered) {
        return registered.hook.bind(null, method2, options2);
      }, method)();
    });
  }
});
var require_add = __commonJSMin((exports, module2) => {
  module2.exports = addHook;
  function addHook(state, kind, name2, hook2) {
    var orig = hook2;
    if (!state.registry[name2]) {
      state.registry[name2] = [];
    }
    if (kind === "before") {
      hook2 = function(method, options2) {
        return Promise.resolve().then(orig.bind(null, options2)).then(method.bind(null, options2));
      };
    }
    if (kind === "after") {
      hook2 = function(method, options2) {
        var result;
        return Promise.resolve().then(method.bind(null, options2)).then(function(result_) {
          result = result_;
          return orig(result, options2);
        }).then(function() {
          return result;
        });
      };
    }
    if (kind === "error") {
      hook2 = function(method, options2) {
        return Promise.resolve().then(method.bind(null, options2)).catch(function(error) {
          return orig(error, options2);
        });
      };
    }
    state.registry[name2].push({
      hook: hook2,
      orig
    });
  }
});
var require_remove = __commonJSMin((exports, module2) => {
  module2.exports = removeHook;
  function removeHook(state, name2, method) {
    if (!state.registry[name2]) {
      return;
    }
    var index = state.registry[name2].map(function(registered) {
      return registered.orig;
    }).indexOf(method);
    if (index === -1) {
      return;
    }
    state.registry[name2].splice(index, 1);
  }
});
var require_before_after_hook = __commonJSMin((exports, module2) => {
  var register = require_register();
  var addHook = require_add();
  var removeHook = require_remove();
  var bind = Function.bind;
  var bindable = bind.bind(bind);
  function bindApi(hook2, state, name2) {
    var removeHookRef = bindable(removeHook, null).apply(null, name2 ? [state, name2] : [state]);
    hook2.api = { remove: removeHookRef };
    hook2.remove = removeHookRef;
    ["before", "error", "after", "wrap"].forEach(function(kind) {
      var args = name2 ? [state, kind, name2] : [state, kind];
      hook2[kind] = hook2.api[kind] = bindable(addHook, null).apply(null, args);
    });
  }
  function HookSingular() {
    var singularHookName = "h";
    var singularHookState = {
      registry: {}
    };
    var singularHook = register.bind(null, singularHookState, singularHookName);
    bindApi(singularHook, singularHookState, singularHookName);
    return singularHook;
  }
  function HookCollection() {
    var state = {
      registry: {}
    };
    var hook2 = register.bind(null, state);
    bindApi(hook2, state);
    return hook2;
  }
  var collectionHookDeprecationMessageDisplayed = false;
  function Hook() {
    if (!collectionHookDeprecationMessageDisplayed) {
      console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
      collectionHookDeprecationMessageDisplayed = true;
    }
    return HookCollection();
  }
  Hook.Singular = HookSingular.bind();
  Hook.Collection = HookCollection.bind();
  module2.exports = Hook;
  module2.exports.Hook = Hook;
  module2.exports.Singular = Hook.Singular;
  module2.exports.Collection = Hook.Collection;
});
function isObject(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
  var ctor, prot;
  if (isObject(o) === false)
    return false;
  ctor = o.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
var init_is_plain_object = __esmMin(() => {
});
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}
function mergeDeep(defaults, options2) {
  const result = Object.assign({}, defaults);
  Object.keys(options2).forEach((key) => {
    if (isPlainObject(options2[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options2[key] });
      else
        result[key] = mergeDeep(defaults[key], options2[key]);
    } else {
      Object.assign(result, { [key]: options2[key] });
    }
  });
  return result;
}
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}
function merge(defaults, route, options2) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options2 = Object.assign(url ? { method, url } : { url: method }, options2);
  } else {
    options2 = Object.assign({}, route);
  }
  options2.headers = lowercaseKeys(options2.headers);
  removeUndefinedProperties(options2);
  removeUndefinedProperties(options2.headers);
  const mergedOptions = mergeDeep(defaults || {}, options2);
  if (defaults && defaults.mediaType.previews.length) {
    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
  }
  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
  return mergedOptions;
}
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name2) => {
    if (name2 === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name2}=${encodeURIComponent(parameters[name2])}`;
  }).join("&");
}
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}
function omit(object, keysToOmit) {
  return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
    obj[key] = object[key];
    return obj;
  }, {});
}
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context3, operator, key, modifier) {
  var value = context3[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context3) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
    if (expression) {
      let operator = "";
      const values = [];
      if (operators.indexOf(expression.charAt(0)) !== -1) {
        operator = expression.charAt(0);
        expression = expression.substr(1);
      }
      expression.split(/,/g).forEach(function(variable) {
        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
        values.push(getValues(context3, operator, tmp[1], tmp[2] || tmp[3]));
      });
      if (operator && operator !== "+") {
        var separator = ",";
        if (operator === "?") {
          separator = "&";
        } else if (operator !== "#") {
          separator = operator;
        }
        return (values.length !== 0 ? operator : "") + values.join(separator);
      } else {
        return values.join(",");
      }
    } else {
      return encodeReserved(literal);
    }
  });
}
function parse(options2) {
  let method = options2.method.toUpperCase();
  let url = (options2.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options2.headers);
  let body;
  let parameters = omit(options2, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options2.baseUrl + url;
  }
  const omittedParameters = Object.keys(options2).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options2.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options2.mediaType.format}`)).join(",");
    }
    if (options2.mediaType.previews.length) {
      const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
      headers.accept = previewsFromAcceptHeader.concat(options2.mediaType.previews).map((preview) => {
        const format2 = options2.mediaType.format ? `.${options2.mediaType.format}` : "+json";
        return `application/vnd.github.${preview}-preview${format2}`;
      }).join(",");
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      } else {
        headers["content-length"] = 0;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options2.request ? { request: options2.request } : null);
}
function endpointWithDefaults(defaults, route, options2) {
  return parse(merge(defaults, route, options2));
}
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}
var urlVariableRegex, VERSION, userAgent, DEFAULTS, endpoint;
var init_dist_web2 = __esmMin(() => {
  init_is_plain_object();
  init_dist_web();
  urlVariableRegex = /\{[^}]+\}/g;
  VERSION = "6.0.12";
  userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
  DEFAULTS = {
    method: "GET",
    baseUrl: "https://api.github.com",
    headers: {
      accept: "application/vnd.github.v3+json",
      "user-agent": userAgent
    },
    mediaType: {
      format: "",
      previews: []
    }
  };
  endpoint = withDefaults(null, DEFAULTS);
});
var require_lib2 = __commonJSMin((exports, module2) => {
  "use strict";
  var conversions = {};
  module2.exports = conversions;
  function sign(x) {
    return x < 0 ? -1 : 1;
  }
  function evenRound(x) {
    if (x % 1 === 0.5 && (x & 1) === 0) {
      return Math.floor(x);
    } else {
      return Math.round(x);
    }
  }
  function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
      --bitLength;
    }
    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    const upperBound = Math.pow(2, bitLength) - 1;
    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
    return function(V, opts) {
      if (!opts)
        opts = {};
      let x = +V;
      if (opts.enforceRange) {
        if (!Number.isFinite(x)) {
          throw new TypeError("Argument is not a finite number");
        }
        x = sign(x) * Math.floor(Math.abs(x));
        if (x < lowerBound || x > upperBound) {
          throw new TypeError("Argument is not in byte range");
        }
        return x;
      }
      if (!isNaN(x) && opts.clamp) {
        x = evenRound(x);
        if (x < lowerBound)
          x = lowerBound;
        if (x > upperBound)
          x = upperBound;
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      x = sign(x) * Math.floor(Math.abs(x));
      x = x % moduloVal;
      if (!typeOpts.unsigned && x >= moduloBound) {
        return x - moduloVal;
      } else if (typeOpts.unsigned) {
        if (x < 0) {
          x += moduloVal;
        } else if (x === -0) {
          return 0;
        }
      }
      return x;
    };
  }
  conversions["void"] = function() {
    return void 0;
  };
  conversions["boolean"] = function(val) {
    return !!val;
  };
  conversions["byte"] = createNumberConversion(8, { unsigned: false });
  conversions["octet"] = createNumberConversion(8, { unsigned: true });
  conversions["short"] = createNumberConversion(16, { unsigned: false });
  conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
  conversions["long"] = createNumberConversion(32, { unsigned: false });
  conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
  conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
  conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
  conversions["double"] = function(V) {
    const x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError("Argument is not a finite floating-point value");
    }
    return x;
  };
  conversions["unrestricted double"] = function(V) {
    const x = +V;
    if (isNaN(x)) {
      throw new TypeError("Argument is NaN");
    }
    return x;
  };
  conversions["float"] = conversions["double"];
  conversions["unrestricted float"] = conversions["unrestricted double"];
  conversions["DOMString"] = function(V, opts) {
    if (!opts)
      opts = {};
    if (opts.treatNullAsEmptyString && V === null) {
      return "";
    }
    return String(V);
  };
  conversions["ByteString"] = function(V, opts) {
    const x = String(V);
    let c = void 0;
    for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
      if (c > 255) {
        throw new TypeError("Argument is not a valid bytestring");
      }
    }
    return x;
  };
  conversions["USVString"] = function(V) {
    const S = String(V);
    const n = S.length;
    const U = [];
    for (let i = 0; i < n; ++i) {
      const c = S.charCodeAt(i);
      if (c < 55296 || c > 57343) {
        U.push(String.fromCodePoint(c));
      } else if (56320 <= c && c <= 57343) {
        U.push(String.fromCodePoint(65533));
      } else {
        if (i === n - 1) {
          U.push(String.fromCodePoint(65533));
        } else {
          const d = S.charCodeAt(i + 1);
          if (56320 <= d && d <= 57343) {
            const a = c & 1023;
            const b = d & 1023;
            U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
            ++i;
          } else {
            U.push(String.fromCodePoint(65533));
          }
        }
      }
    }
    return U.join("");
  };
  conversions["Date"] = function(V, opts) {
    if (!(V instanceof Date)) {
      throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
      return void 0;
    }
    return V;
  };
  conversions["RegExp"] = function(V, opts) {
    if (!(V instanceof RegExp)) {
      V = new RegExp(V);
    }
    return V;
  };
});
var require_utils3 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports.mixin = function mixin(target, source) {
    const keys = Object.getOwnPropertyNames(source);
    for (let i = 0; i < keys.length; ++i) {
      Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
    }
  };
  module2.exports.wrapperSymbol = Symbol("wrapper");
  module2.exports.implSymbol = Symbol("impl");
  module2.exports.wrapperForImpl = function(impl) {
    return impl[module2.exports.wrapperSymbol];
  };
  module2.exports.implForWrapper = function(wrapper) {
    return wrapper[module2.exports.implSymbol];
  };
});
var mappingTable_exports = {};
__export(mappingTable_exports, {
  default: () => mappingTable_default
});
var mappingTable_default;
var init_mappingTable = __esmMin(() => {
  mappingTable_default = [
    [
      [
        0,
        44
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        45,
        46
      ],
      "valid"
    ],
    [
      [
        47,
        47
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        48,
        57
      ],
      "valid"
    ],
    [
      [
        58,
        64
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        65,
        65
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        66,
        66
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        67,
        67
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        68,
        68
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        69,
        69
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        70,
        70
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        71,
        71
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        72,
        72
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        73,
        73
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        74,
        74
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        75,
        75
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        76,
        76
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        77,
        77
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        78,
        78
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        79,
        79
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        80,
        80
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        81,
        81
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        82,
        82
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        83,
        83
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        84,
        84
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        85,
        85
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        86,
        86
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        87,
        87
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        88,
        88
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        89,
        89
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        90,
        90
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        91,
        96
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        97,
        122
      ],
      "valid"
    ],
    [
      [
        123,
        127
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        128,
        159
      ],
      "disallowed"
    ],
    [
      [
        160,
        160
      ],
      "disallowed_STD3_mapped",
      [
        32
      ]
    ],
    [
      [
        161,
        167
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        168,
        168
      ],
      "disallowed_STD3_mapped",
      [
        32,
        776
      ]
    ],
    [
      [
        169,
        169
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        170,
        170
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        171,
        172
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        173,
        173
      ],
      "ignored"
    ],
    [
      [
        174,
        174
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        175,
        175
      ],
      "disallowed_STD3_mapped",
      [
        32,
        772
      ]
    ],
    [
      [
        176,
        177
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        178,
        178
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        179,
        179
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        180,
        180
      ],
      "disallowed_STD3_mapped",
      [
        32,
        769
      ]
    ],
    [
      [
        181,
        181
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        182,
        182
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        183,
        183
      ],
      "valid"
    ],
    [
      [
        184,
        184
      ],
      "disallowed_STD3_mapped",
      [
        32,
        807
      ]
    ],
    [
      [
        185,
        185
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        186,
        186
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        187,
        187
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        188,
        188
      ],
      "mapped",
      [
        49,
        8260,
        52
      ]
    ],
    [
      [
        189,
        189
      ],
      "mapped",
      [
        49,
        8260,
        50
      ]
    ],
    [
      [
        190,
        190
      ],
      "mapped",
      [
        51,
        8260,
        52
      ]
    ],
    [
      [
        191,
        191
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        192,
        192
      ],
      "mapped",
      [
        224
      ]
    ],
    [
      [
        193,
        193
      ],
      "mapped",
      [
        225
      ]
    ],
    [
      [
        194,
        194
      ],
      "mapped",
      [
        226
      ]
    ],
    [
      [
        195,
        195
      ],
      "mapped",
      [
        227
      ]
    ],
    [
      [
        196,
        196
      ],
      "mapped",
      [
        228
      ]
    ],
    [
      [
        197,
        197
      ],
      "mapped",
      [
        229
      ]
    ],
    [
      [
        198,
        198
      ],
      "mapped",
      [
        230
      ]
    ],
    [
      [
        199,
        199
      ],
      "mapped",
      [
        231
      ]
    ],
    [
      [
        200,
        200
      ],
      "mapped",
      [
        232
      ]
    ],
    [
      [
        201,
        201
      ],
      "mapped",
      [
        233
      ]
    ],
    [
      [
        202,
        202
      ],
      "mapped",
      [
        234
      ]
    ],
    [
      [
        203,
        203
      ],
      "mapped",
      [
        235
      ]
    ],
    [
      [
        204,
        204
      ],
      "mapped",
      [
        236
      ]
    ],
    [
      [
        205,
        205
      ],
      "mapped",
      [
        237
      ]
    ],
    [
      [
        206,
        206
      ],
      "mapped",
      [
        238
      ]
    ],
    [
      [
        207,
        207
      ],
      "mapped",
      [
        239
      ]
    ],
    [
      [
        208,
        208
      ],
      "mapped",
      [
        240
      ]
    ],
    [
      [
        209,
        209
      ],
      "mapped",
      [
        241
      ]
    ],
    [
      [
        210,
        210
      ],
      "mapped",
      [
        242
      ]
    ],
    [
      [
        211,
        211
      ],
      "mapped",
      [
        243
      ]
    ],
    [
      [
        212,
        212
      ],
      "mapped",
      [
        244
      ]
    ],
    [
      [
        213,
        213
      ],
      "mapped",
      [
        245
      ]
    ],
    [
      [
        214,
        214
      ],
      "mapped",
      [
        246
      ]
    ],
    [
      [
        215,
        215
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        216,
        216
      ],
      "mapped",
      [
        248
      ]
    ],
    [
      [
        217,
        217
      ],
      "mapped",
      [
        249
      ]
    ],
    [
      [
        218,
        218
      ],
      "mapped",
      [
        250
      ]
    ],
    [
      [
        219,
        219
      ],
      "mapped",
      [
        251
      ]
    ],
    [
      [
        220,
        220
      ],
      "mapped",
      [
        252
      ]
    ],
    [
      [
        221,
        221
      ],
      "mapped",
      [
        253
      ]
    ],
    [
      [
        222,
        222
      ],
      "mapped",
      [
        254
      ]
    ],
    [
      [
        223,
        223
      ],
      "deviation",
      [
        115,
        115
      ]
    ],
    [
      [
        224,
        246
      ],
      "valid"
    ],
    [
      [
        247,
        247
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        248,
        255
      ],
      "valid"
    ],
    [
      [
        256,
        256
      ],
      "mapped",
      [
        257
      ]
    ],
    [
      [
        257,
        257
      ],
      "valid"
    ],
    [
      [
        258,
        258
      ],
      "mapped",
      [
        259
      ]
    ],
    [
      [
        259,
        259
      ],
      "valid"
    ],
    [
      [
        260,
        260
      ],
      "mapped",
      [
        261
      ]
    ],
    [
      [
        261,
        261
      ],
      "valid"
    ],
    [
      [
        262,
        262
      ],
      "mapped",
      [
        263
      ]
    ],
    [
      [
        263,
        263
      ],
      "valid"
    ],
    [
      [
        264,
        264
      ],
      "mapped",
      [
        265
      ]
    ],
    [
      [
        265,
        265
      ],
      "valid"
    ],
    [
      [
        266,
        266
      ],
      "mapped",
      [
        267
      ]
    ],
    [
      [
        267,
        267
      ],
      "valid"
    ],
    [
      [
        268,
        268
      ],
      "mapped",
      [
        269
      ]
    ],
    [
      [
        269,
        269
      ],
      "valid"
    ],
    [
      [
        270,
        270
      ],
      "mapped",
      [
        271
      ]
    ],
    [
      [
        271,
        271
      ],
      "valid"
    ],
    [
      [
        272,
        272
      ],
      "mapped",
      [
        273
      ]
    ],
    [
      [
        273,
        273
      ],
      "valid"
    ],
    [
      [
        274,
        274
      ],
      "mapped",
      [
        275
      ]
    ],
    [
      [
        275,
        275
      ],
      "valid"
    ],
    [
      [
        276,
        276
      ],
      "mapped",
      [
        277
      ]
    ],
    [
      [
        277,
        277
      ],
      "valid"
    ],
    [
      [
        278,
        278
      ],
      "mapped",
      [
        279
      ]
    ],
    [
      [
        279,
        279
      ],
      "valid"
    ],
    [
      [
        280,
        280
      ],
      "mapped",
      [
        281
      ]
    ],
    [
      [
        281,
        281
      ],
      "valid"
    ],
    [
      [
        282,
        282
      ],
      "mapped",
      [
        283
      ]
    ],
    [
      [
        283,
        283
      ],
      "valid"
    ],
    [
      [
        284,
        284
      ],
      "mapped",
      [
        285
      ]
    ],
    [
      [
        285,
        285
      ],
      "valid"
    ],
    [
      [
        286,
        286
      ],
      "mapped",
      [
        287
      ]
    ],
    [
      [
        287,
        287
      ],
      "valid"
    ],
    [
      [
        288,
        288
      ],
      "mapped",
      [
        289
      ]
    ],
    [
      [
        289,
        289
      ],
      "valid"
    ],
    [
      [
        290,
        290
      ],
      "mapped",
      [
        291
      ]
    ],
    [
      [
        291,
        291
      ],
      "valid"
    ],
    [
      [
        292,
        292
      ],
      "mapped",
      [
        293
      ]
    ],
    [
      [
        293,
        293
      ],
      "valid"
    ],
    [
      [
        294,
        294
      ],
      "mapped",
      [
        295
      ]
    ],
    [
      [
        295,
        295
      ],
      "valid"
    ],
    [
      [
        296,
        296
      ],
      "mapped",
      [
        297
      ]
    ],
    [
      [
        297,
        297
      ],
      "valid"
    ],
    [
      [
        298,
        298
      ],
      "mapped",
      [
        299
      ]
    ],
    [
      [
        299,
        299
      ],
      "valid"
    ],
    [
      [
        300,
        300
      ],
      "mapped",
      [
        301
      ]
    ],
    [
      [
        301,
        301
      ],
      "valid"
    ],
    [
      [
        302,
        302
      ],
      "mapped",
      [
        303
      ]
    ],
    [
      [
        303,
        303
      ],
      "valid"
    ],
    [
      [
        304,
        304
      ],
      "mapped",
      [
        105,
        775
      ]
    ],
    [
      [
        305,
        305
      ],
      "valid"
    ],
    [
      [
        306,
        307
      ],
      "mapped",
      [
        105,
        106
      ]
    ],
    [
      [
        308,
        308
      ],
      "mapped",
      [
        309
      ]
    ],
    [
      [
        309,
        309
      ],
      "valid"
    ],
    [
      [
        310,
        310
      ],
      "mapped",
      [
        311
      ]
    ],
    [
      [
        311,
        312
      ],
      "valid"
    ],
    [
      [
        313,
        313
      ],
      "mapped",
      [
        314
      ]
    ],
    [
      [
        314,
        314
      ],
      "valid"
    ],
    [
      [
        315,
        315
      ],
      "mapped",
      [
        316
      ]
    ],
    [
      [
        316,
        316
      ],
      "valid"
    ],
    [
      [
        317,
        317
      ],
      "mapped",
      [
        318
      ]
    ],
    [
      [
        318,
        318
      ],
      "valid"
    ],
    [
      [
        319,
        320
      ],
      "mapped",
      [
        108,
        183
      ]
    ],
    [
      [
        321,
        321
      ],
      "mapped",
      [
        322
      ]
    ],
    [
      [
        322,
        322
      ],
      "valid"
    ],
    [
      [
        323,
        323
      ],
      "mapped",
      [
        324
      ]
    ],
    [
      [
        324,
        324
      ],
      "valid"
    ],
    [
      [
        325,
        325
      ],
      "mapped",
      [
        326
      ]
    ],
    [
      [
        326,
        326
      ],
      "valid"
    ],
    [
      [
        327,
        327
      ],
      "mapped",
      [
        328
      ]
    ],
    [
      [
        328,
        328
      ],
      "valid"
    ],
    [
      [
        329,
        329
      ],
      "mapped",
      [
        700,
        110
      ]
    ],
    [
      [
        330,
        330
      ],
      "mapped",
      [
        331
      ]
    ],
    [
      [
        331,
        331
      ],
      "valid"
    ],
    [
      [
        332,
        332
      ],
      "mapped",
      [
        333
      ]
    ],
    [
      [
        333,
        333
      ],
      "valid"
    ],
    [
      [
        334,
        334
      ],
      "mapped",
      [
        335
      ]
    ],
    [
      [
        335,
        335
      ],
      "valid"
    ],
    [
      [
        336,
        336
      ],
      "mapped",
      [
        337
      ]
    ],
    [
      [
        337,
        337
      ],
      "valid"
    ],
    [
      [
        338,
        338
      ],
      "mapped",
      [
        339
      ]
    ],
    [
      [
        339,
        339
      ],
      "valid"
    ],
    [
      [
        340,
        340
      ],
      "mapped",
      [
        341
      ]
    ],
    [
      [
        341,
        341
      ],
      "valid"
    ],
    [
      [
        342,
        342
      ],
      "mapped",
      [
        343
      ]
    ],
    [
      [
        343,
        343
      ],
      "valid"
    ],
    [
      [
        344,
        344
      ],
      "mapped",
      [
        345
      ]
    ],
    [
      [
        345,
        345
      ],
      "valid"
    ],
    [
      [
        346,
        346
      ],
      "mapped",
      [
        347
      ]
    ],
    [
      [
        347,
        347
      ],
      "valid"
    ],
    [
      [
        348,
        348
      ],
      "mapped",
      [
        349
      ]
    ],
    [
      [
        349,
        349
      ],
      "valid"
    ],
    [
      [
        350,
        350
      ],
      "mapped",
      [
        351
      ]
    ],
    [
      [
        351,
        351
      ],
      "valid"
    ],
    [
      [
        352,
        352
      ],
      "mapped",
      [
        353
      ]
    ],
    [
      [
        353,
        353
      ],
      "valid"
    ],
    [
      [
        354,
        354
      ],
      "mapped",
      [
        355
      ]
    ],
    [
      [
        355,
        355
      ],
      "valid"
    ],
    [
      [
        356,
        356
      ],
      "mapped",
      [
        357
      ]
    ],
    [
      [
        357,
        357
      ],
      "valid"
    ],
    [
      [
        358,
        358
      ],
      "mapped",
      [
        359
      ]
    ],
    [
      [
        359,
        359
      ],
      "valid"
    ],
    [
      [
        360,
        360
      ],
      "mapped",
      [
        361
      ]
    ],
    [
      [
        361,
        361
      ],
      "valid"
    ],
    [
      [
        362,
        362
      ],
      "mapped",
      [
        363
      ]
    ],
    [
      [
        363,
        363
      ],
      "valid"
    ],
    [
      [
        364,
        364
      ],
      "mapped",
      [
        365
      ]
    ],
    [
      [
        365,
        365
      ],
      "valid"
    ],
    [
      [
        366,
        366
      ],
      "mapped",
      [
        367
      ]
    ],
    [
      [
        367,
        367
      ],
      "valid"
    ],
    [
      [
        368,
        368
      ],
      "mapped",
      [
        369
      ]
    ],
    [
      [
        369,
        369
      ],
      "valid"
    ],
    [
      [
        370,
        370
      ],
      "mapped",
      [
        371
      ]
    ],
    [
      [
        371,
        371
      ],
      "valid"
    ],
    [
      [
        372,
        372
      ],
      "mapped",
      [
        373
      ]
    ],
    [
      [
        373,
        373
      ],
      "valid"
    ],
    [
      [
        374,
        374
      ],
      "mapped",
      [
        375
      ]
    ],
    [
      [
        375,
        375
      ],
      "valid"
    ],
    [
      [
        376,
        376
      ],
      "mapped",
      [
        255
      ]
    ],
    [
      [
        377,
        377
      ],
      "mapped",
      [
        378
      ]
    ],
    [
      [
        378,
        378
      ],
      "valid"
    ],
    [
      [
        379,
        379
      ],
      "mapped",
      [
        380
      ]
    ],
    [
      [
        380,
        380
      ],
      "valid"
    ],
    [
      [
        381,
        381
      ],
      "mapped",
      [
        382
      ]
    ],
    [
      [
        382,
        382
      ],
      "valid"
    ],
    [
      [
        383,
        383
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        384,
        384
      ],
      "valid"
    ],
    [
      [
        385,
        385
      ],
      "mapped",
      [
        595
      ]
    ],
    [
      [
        386,
        386
      ],
      "mapped",
      [
        387
      ]
    ],
    [
      [
        387,
        387
      ],
      "valid"
    ],
    [
      [
        388,
        388
      ],
      "mapped",
      [
        389
      ]
    ],
    [
      [
        389,
        389
      ],
      "valid"
    ],
    [
      [
        390,
        390
      ],
      "mapped",
      [
        596
      ]
    ],
    [
      [
        391,
        391
      ],
      "mapped",
      [
        392
      ]
    ],
    [
      [
        392,
        392
      ],
      "valid"
    ],
    [
      [
        393,
        393
      ],
      "mapped",
      [
        598
      ]
    ],
    [
      [
        394,
        394
      ],
      "mapped",
      [
        599
      ]
    ],
    [
      [
        395,
        395
      ],
      "mapped",
      [
        396
      ]
    ],
    [
      [
        396,
        397
      ],
      "valid"
    ],
    [
      [
        398,
        398
      ],
      "mapped",
      [
        477
      ]
    ],
    [
      [
        399,
        399
      ],
      "mapped",
      [
        601
      ]
    ],
    [
      [
        400,
        400
      ],
      "mapped",
      [
        603
      ]
    ],
    [
      [
        401,
        401
      ],
      "mapped",
      [
        402
      ]
    ],
    [
      [
        402,
        402
      ],
      "valid"
    ],
    [
      [
        403,
        403
      ],
      "mapped",
      [
        608
      ]
    ],
    [
      [
        404,
        404
      ],
      "mapped",
      [
        611
      ]
    ],
    [
      [
        405,
        405
      ],
      "valid"
    ],
    [
      [
        406,
        406
      ],
      "mapped",
      [
        617
      ]
    ],
    [
      [
        407,
        407
      ],
      "mapped",
      [
        616
      ]
    ],
    [
      [
        408,
        408
      ],
      "mapped",
      [
        409
      ]
    ],
    [
      [
        409,
        411
      ],
      "valid"
    ],
    [
      [
        412,
        412
      ],
      "mapped",
      [
        623
      ]
    ],
    [
      [
        413,
        413
      ],
      "mapped",
      [
        626
      ]
    ],
    [
      [
        414,
        414
      ],
      "valid"
    ],
    [
      [
        415,
        415
      ],
      "mapped",
      [
        629
      ]
    ],
    [
      [
        416,
        416
      ],
      "mapped",
      [
        417
      ]
    ],
    [
      [
        417,
        417
      ],
      "valid"
    ],
    [
      [
        418,
        418
      ],
      "mapped",
      [
        419
      ]
    ],
    [
      [
        419,
        419
      ],
      "valid"
    ],
    [
      [
        420,
        420
      ],
      "mapped",
      [
        421
      ]
    ],
    [
      [
        421,
        421
      ],
      "valid"
    ],
    [
      [
        422,
        422
      ],
      "mapped",
      [
        640
      ]
    ],
    [
      [
        423,
        423
      ],
      "mapped",
      [
        424
      ]
    ],
    [
      [
        424,
        424
      ],
      "valid"
    ],
    [
      [
        425,
        425
      ],
      "mapped",
      [
        643
      ]
    ],
    [
      [
        426,
        427
      ],
      "valid"
    ],
    [
      [
        428,
        428
      ],
      "mapped",
      [
        429
      ]
    ],
    [
      [
        429,
        429
      ],
      "valid"
    ],
    [
      [
        430,
        430
      ],
      "mapped",
      [
        648
      ]
    ],
    [
      [
        431,
        431
      ],
      "mapped",
      [
        432
      ]
    ],
    [
      [
        432,
        432
      ],
      "valid"
    ],
    [
      [
        433,
        433
      ],
      "mapped",
      [
        650
      ]
    ],
    [
      [
        434,
        434
      ],
      "mapped",
      [
        651
      ]
    ],
    [
      [
        435,
        435
      ],
      "mapped",
      [
        436
      ]
    ],
    [
      [
        436,
        436
      ],
      "valid"
    ],
    [
      [
        437,
        437
      ],
      "mapped",
      [
        438
      ]
    ],
    [
      [
        438,
        438
      ],
      "valid"
    ],
    [
      [
        439,
        439
      ],
      "mapped",
      [
        658
      ]
    ],
    [
      [
        440,
        440
      ],
      "mapped",
      [
        441
      ]
    ],
    [
      [
        441,
        443
      ],
      "valid"
    ],
    [
      [
        444,
        444
      ],
      "mapped",
      [
        445
      ]
    ],
    [
      [
        445,
        451
      ],
      "valid"
    ],
    [
      [
        452,
        454
      ],
      "mapped",
      [
        100,
        382
      ]
    ],
    [
      [
        455,
        457
      ],
      "mapped",
      [
        108,
        106
      ]
    ],
    [
      [
        458,
        460
      ],
      "mapped",
      [
        110,
        106
      ]
    ],
    [
      [
        461,
        461
      ],
      "mapped",
      [
        462
      ]
    ],
    [
      [
        462,
        462
      ],
      "valid"
    ],
    [
      [
        463,
        463
      ],
      "mapped",
      [
        464
      ]
    ],
    [
      [
        464,
        464
      ],
      "valid"
    ],
    [
      [
        465,
        465
      ],
      "mapped",
      [
        466
      ]
    ],
    [
      [
        466,
        466
      ],
      "valid"
    ],
    [
      [
        467,
        467
      ],
      "mapped",
      [
        468
      ]
    ],
    [
      [
        468,
        468
      ],
      "valid"
    ],
    [
      [
        469,
        469
      ],
      "mapped",
      [
        470
      ]
    ],
    [
      [
        470,
        470
      ],
      "valid"
    ],
    [
      [
        471,
        471
      ],
      "mapped",
      [
        472
      ]
    ],
    [
      [
        472,
        472
      ],
      "valid"
    ],
    [
      [
        473,
        473
      ],
      "mapped",
      [
        474
      ]
    ],
    [
      [
        474,
        474
      ],
      "valid"
    ],
    [
      [
        475,
        475
      ],
      "mapped",
      [
        476
      ]
    ],
    [
      [
        476,
        477
      ],
      "valid"
    ],
    [
      [
        478,
        478
      ],
      "mapped",
      [
        479
      ]
    ],
    [
      [
        479,
        479
      ],
      "valid"
    ],
    [
      [
        480,
        480
      ],
      "mapped",
      [
        481
      ]
    ],
    [
      [
        481,
        481
      ],
      "valid"
    ],
    [
      [
        482,
        482
      ],
      "mapped",
      [
        483
      ]
    ],
    [
      [
        483,
        483
      ],
      "valid"
    ],
    [
      [
        484,
        484
      ],
      "mapped",
      [
        485
      ]
    ],
    [
      [
        485,
        485
      ],
      "valid"
    ],
    [
      [
        486,
        486
      ],
      "mapped",
      [
        487
      ]
    ],
    [
      [
        487,
        487
      ],
      "valid"
    ],
    [
      [
        488,
        488
      ],
      "mapped",
      [
        489
      ]
    ],
    [
      [
        489,
        489
      ],
      "valid"
    ],
    [
      [
        490,
        490
      ],
      "mapped",
      [
        491
      ]
    ],
    [
      [
        491,
        491
      ],
      "valid"
    ],
    [
      [
        492,
        492
      ],
      "mapped",
      [
        493
      ]
    ],
    [
      [
        493,
        493
      ],
      "valid"
    ],
    [
      [
        494,
        494
      ],
      "mapped",
      [
        495
      ]
    ],
    [
      [
        495,
        496
      ],
      "valid"
    ],
    [
      [
        497,
        499
      ],
      "mapped",
      [
        100,
        122
      ]
    ],
    [
      [
        500,
        500
      ],
      "mapped",
      [
        501
      ]
    ],
    [
      [
        501,
        501
      ],
      "valid"
    ],
    [
      [
        502,
        502
      ],
      "mapped",
      [
        405
      ]
    ],
    [
      [
        503,
        503
      ],
      "mapped",
      [
        447
      ]
    ],
    [
      [
        504,
        504
      ],
      "mapped",
      [
        505
      ]
    ],
    [
      [
        505,
        505
      ],
      "valid"
    ],
    [
      [
        506,
        506
      ],
      "mapped",
      [
        507
      ]
    ],
    [
      [
        507,
        507
      ],
      "valid"
    ],
    [
      [
        508,
        508
      ],
      "mapped",
      [
        509
      ]
    ],
    [
      [
        509,
        509
      ],
      "valid"
    ],
    [
      [
        510,
        510
      ],
      "mapped",
      [
        511
      ]
    ],
    [
      [
        511,
        511
      ],
      "valid"
    ],
    [
      [
        512,
        512
      ],
      "mapped",
      [
        513
      ]
    ],
    [
      [
        513,
        513
      ],
      "valid"
    ],
    [
      [
        514,
        514
      ],
      "mapped",
      [
        515
      ]
    ],
    [
      [
        515,
        515
      ],
      "valid"
    ],
    [
      [
        516,
        516
      ],
      "mapped",
      [
        517
      ]
    ],
    [
      [
        517,
        517
      ],
      "valid"
    ],
    [
      [
        518,
        518
      ],
      "mapped",
      [
        519
      ]
    ],
    [
      [
        519,
        519
      ],
      "valid"
    ],
    [
      [
        520,
        520
      ],
      "mapped",
      [
        521
      ]
    ],
    [
      [
        521,
        521
      ],
      "valid"
    ],
    [
      [
        522,
        522
      ],
      "mapped",
      [
        523
      ]
    ],
    [
      [
        523,
        523
      ],
      "valid"
    ],
    [
      [
        524,
        524
      ],
      "mapped",
      [
        525
      ]
    ],
    [
      [
        525,
        525
      ],
      "valid"
    ],
    [
      [
        526,
        526
      ],
      "mapped",
      [
        527
      ]
    ],
    [
      [
        527,
        527
      ],
      "valid"
    ],
    [
      [
        528,
        528
      ],
      "mapped",
      [
        529
      ]
    ],
    [
      [
        529,
        529
      ],
      "valid"
    ],
    [
      [
        530,
        530
      ],
      "mapped",
      [
        531
      ]
    ],
    [
      [
        531,
        531
      ],
      "valid"
    ],
    [
      [
        532,
        532
      ],
      "mapped",
      [
        533
      ]
    ],
    [
      [
        533,
        533
      ],
      "valid"
    ],
    [
      [
        534,
        534
      ],
      "mapped",
      [
        535
      ]
    ],
    [
      [
        535,
        535
      ],
      "valid"
    ],
    [
      [
        536,
        536
      ],
      "mapped",
      [
        537
      ]
    ],
    [
      [
        537,
        537
      ],
      "valid"
    ],
    [
      [
        538,
        538
      ],
      "mapped",
      [
        539
      ]
    ],
    [
      [
        539,
        539
      ],
      "valid"
    ],
    [
      [
        540,
        540
      ],
      "mapped",
      [
        541
      ]
    ],
    [
      [
        541,
        541
      ],
      "valid"
    ],
    [
      [
        542,
        542
      ],
      "mapped",
      [
        543
      ]
    ],
    [
      [
        543,
        543
      ],
      "valid"
    ],
    [
      [
        544,
        544
      ],
      "mapped",
      [
        414
      ]
    ],
    [
      [
        545,
        545
      ],
      "valid"
    ],
    [
      [
        546,
        546
      ],
      "mapped",
      [
        547
      ]
    ],
    [
      [
        547,
        547
      ],
      "valid"
    ],
    [
      [
        548,
        548
      ],
      "mapped",
      [
        549
      ]
    ],
    [
      [
        549,
        549
      ],
      "valid"
    ],
    [
      [
        550,
        550
      ],
      "mapped",
      [
        551
      ]
    ],
    [
      [
        551,
        551
      ],
      "valid"
    ],
    [
      [
        552,
        552
      ],
      "mapped",
      [
        553
      ]
    ],
    [
      [
        553,
        553
      ],
      "valid"
    ],
    [
      [
        554,
        554
      ],
      "mapped",
      [
        555
      ]
    ],
    [
      [
        555,
        555
      ],
      "valid"
    ],
    [
      [
        556,
        556
      ],
      "mapped",
      [
        557
      ]
    ],
    [
      [
        557,
        557
      ],
      "valid"
    ],
    [
      [
        558,
        558
      ],
      "mapped",
      [
        559
      ]
    ],
    [
      [
        559,
        559
      ],
      "valid"
    ],
    [
      [
        560,
        560
      ],
      "mapped",
      [
        561
      ]
    ],
    [
      [
        561,
        561
      ],
      "valid"
    ],
    [
      [
        562,
        562
      ],
      "mapped",
      [
        563
      ]
    ],
    [
      [
        563,
        563
      ],
      "valid"
    ],
    [
      [
        564,
        566
      ],
      "valid"
    ],
    [
      [
        567,
        569
      ],
      "valid"
    ],
    [
      [
        570,
        570
      ],
      "mapped",
      [
        11365
      ]
    ],
    [
      [
        571,
        571
      ],
      "mapped",
      [
        572
      ]
    ],
    [
      [
        572,
        572
      ],
      "valid"
    ],
    [
      [
        573,
        573
      ],
      "mapped",
      [
        410
      ]
    ],
    [
      [
        574,
        574
      ],
      "mapped",
      [
        11366
      ]
    ],
    [
      [
        575,
        576
      ],
      "valid"
    ],
    [
      [
        577,
        577
      ],
      "mapped",
      [
        578
      ]
    ],
    [
      [
        578,
        578
      ],
      "valid"
    ],
    [
      [
        579,
        579
      ],
      "mapped",
      [
        384
      ]
    ],
    [
      [
        580,
        580
      ],
      "mapped",
      [
        649
      ]
    ],
    [
      [
        581,
        581
      ],
      "mapped",
      [
        652
      ]
    ],
    [
      [
        582,
        582
      ],
      "mapped",
      [
        583
      ]
    ],
    [
      [
        583,
        583
      ],
      "valid"
    ],
    [
      [
        584,
        584
      ],
      "mapped",
      [
        585
      ]
    ],
    [
      [
        585,
        585
      ],
      "valid"
    ],
    [
      [
        586,
        586
      ],
      "mapped",
      [
        587
      ]
    ],
    [
      [
        587,
        587
      ],
      "valid"
    ],
    [
      [
        588,
        588
      ],
      "mapped",
      [
        589
      ]
    ],
    [
      [
        589,
        589
      ],
      "valid"
    ],
    [
      [
        590,
        590
      ],
      "mapped",
      [
        591
      ]
    ],
    [
      [
        591,
        591
      ],
      "valid"
    ],
    [
      [
        592,
        680
      ],
      "valid"
    ],
    [
      [
        681,
        685
      ],
      "valid"
    ],
    [
      [
        686,
        687
      ],
      "valid"
    ],
    [
      [
        688,
        688
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        689,
        689
      ],
      "mapped",
      [
        614
      ]
    ],
    [
      [
        690,
        690
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        691,
        691
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        692,
        692
      ],
      "mapped",
      [
        633
      ]
    ],
    [
      [
        693,
        693
      ],
      "mapped",
      [
        635
      ]
    ],
    [
      [
        694,
        694
      ],
      "mapped",
      [
        641
      ]
    ],
    [
      [
        695,
        695
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        696,
        696
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        697,
        705
      ],
      "valid"
    ],
    [
      [
        706,
        709
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        710,
        721
      ],
      "valid"
    ],
    [
      [
        722,
        727
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        728,
        728
      ],
      "disallowed_STD3_mapped",
      [
        32,
        774
      ]
    ],
    [
      [
        729,
        729
      ],
      "disallowed_STD3_mapped",
      [
        32,
        775
      ]
    ],
    [
      [
        730,
        730
      ],
      "disallowed_STD3_mapped",
      [
        32,
        778
      ]
    ],
    [
      [
        731,
        731
      ],
      "disallowed_STD3_mapped",
      [
        32,
        808
      ]
    ],
    [
      [
        732,
        732
      ],
      "disallowed_STD3_mapped",
      [
        32,
        771
      ]
    ],
    [
      [
        733,
        733
      ],
      "disallowed_STD3_mapped",
      [
        32,
        779
      ]
    ],
    [
      [
        734,
        734
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        735,
        735
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        736,
        736
      ],
      "mapped",
      [
        611
      ]
    ],
    [
      [
        737,
        737
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        738,
        738
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        739,
        739
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        740,
        740
      ],
      "mapped",
      [
        661
      ]
    ],
    [
      [
        741,
        745
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        746,
        747
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        748,
        748
      ],
      "valid"
    ],
    [
      [
        749,
        749
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        750,
        750
      ],
      "valid"
    ],
    [
      [
        751,
        767
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        768,
        831
      ],
      "valid"
    ],
    [
      [
        832,
        832
      ],
      "mapped",
      [
        768
      ]
    ],
    [
      [
        833,
        833
      ],
      "mapped",
      [
        769
      ]
    ],
    [
      [
        834,
        834
      ],
      "valid"
    ],
    [
      [
        835,
        835
      ],
      "mapped",
      [
        787
      ]
    ],
    [
      [
        836,
        836
      ],
      "mapped",
      [
        776,
        769
      ]
    ],
    [
      [
        837,
        837
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        838,
        846
      ],
      "valid"
    ],
    [
      [
        847,
        847
      ],
      "ignored"
    ],
    [
      [
        848,
        855
      ],
      "valid"
    ],
    [
      [
        856,
        860
      ],
      "valid"
    ],
    [
      [
        861,
        863
      ],
      "valid"
    ],
    [
      [
        864,
        865
      ],
      "valid"
    ],
    [
      [
        866,
        866
      ],
      "valid"
    ],
    [
      [
        867,
        879
      ],
      "valid"
    ],
    [
      [
        880,
        880
      ],
      "mapped",
      [
        881
      ]
    ],
    [
      [
        881,
        881
      ],
      "valid"
    ],
    [
      [
        882,
        882
      ],
      "mapped",
      [
        883
      ]
    ],
    [
      [
        883,
        883
      ],
      "valid"
    ],
    [
      [
        884,
        884
      ],
      "mapped",
      [
        697
      ]
    ],
    [
      [
        885,
        885
      ],
      "valid"
    ],
    [
      [
        886,
        886
      ],
      "mapped",
      [
        887
      ]
    ],
    [
      [
        887,
        887
      ],
      "valid"
    ],
    [
      [
        888,
        889
      ],
      "disallowed"
    ],
    [
      [
        890,
        890
      ],
      "disallowed_STD3_mapped",
      [
        32,
        953
      ]
    ],
    [
      [
        891,
        893
      ],
      "valid"
    ],
    [
      [
        894,
        894
      ],
      "disallowed_STD3_mapped",
      [
        59
      ]
    ],
    [
      [
        895,
        895
      ],
      "mapped",
      [
        1011
      ]
    ],
    [
      [
        896,
        899
      ],
      "disallowed"
    ],
    [
      [
        900,
        900
      ],
      "disallowed_STD3_mapped",
      [
        32,
        769
      ]
    ],
    [
      [
        901,
        901
      ],
      "disallowed_STD3_mapped",
      [
        32,
        776,
        769
      ]
    ],
    [
      [
        902,
        902
      ],
      "mapped",
      [
        940
      ]
    ],
    [
      [
        903,
        903
      ],
      "mapped",
      [
        183
      ]
    ],
    [
      [
        904,
        904
      ],
      "mapped",
      [
        941
      ]
    ],
    [
      [
        905,
        905
      ],
      "mapped",
      [
        942
      ]
    ],
    [
      [
        906,
        906
      ],
      "mapped",
      [
        943
      ]
    ],
    [
      [
        907,
        907
      ],
      "disallowed"
    ],
    [
      [
        908,
        908
      ],
      "mapped",
      [
        972
      ]
    ],
    [
      [
        909,
        909
      ],
      "disallowed"
    ],
    [
      [
        910,
        910
      ],
      "mapped",
      [
        973
      ]
    ],
    [
      [
        911,
        911
      ],
      "mapped",
      [
        974
      ]
    ],
    [
      [
        912,
        912
      ],
      "valid"
    ],
    [
      [
        913,
        913
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        914,
        914
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        915,
        915
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        916,
        916
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        917,
        917
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        918,
        918
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        919,
        919
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        920,
        920
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        921,
        921
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        922,
        922
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        923,
        923
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        924,
        924
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        925,
        925
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        926,
        926
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        927,
        927
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        928,
        928
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        929,
        929
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        930,
        930
      ],
      "disallowed"
    ],
    [
      [
        931,
        931
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        932,
        932
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        933,
        933
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        934,
        934
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        935,
        935
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        936,
        936
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        937,
        937
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        938,
        938
      ],
      "mapped",
      [
        970
      ]
    ],
    [
      [
        939,
        939
      ],
      "mapped",
      [
        971
      ]
    ],
    [
      [
        940,
        961
      ],
      "valid"
    ],
    [
      [
        962,
        962
      ],
      "deviation",
      [
        963
      ]
    ],
    [
      [
        963,
        974
      ],
      "valid"
    ],
    [
      [
        975,
        975
      ],
      "mapped",
      [
        983
      ]
    ],
    [
      [
        976,
        976
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        977,
        977
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        978,
        978
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        979,
        979
      ],
      "mapped",
      [
        973
      ]
    ],
    [
      [
        980,
        980
      ],
      "mapped",
      [
        971
      ]
    ],
    [
      [
        981,
        981
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        982,
        982
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        983,
        983
      ],
      "valid"
    ],
    [
      [
        984,
        984
      ],
      "mapped",
      [
        985
      ]
    ],
    [
      [
        985,
        985
      ],
      "valid"
    ],
    [
      [
        986,
        986
      ],
      "mapped",
      [
        987
      ]
    ],
    [
      [
        987,
        987
      ],
      "valid"
    ],
    [
      [
        988,
        988
      ],
      "mapped",
      [
        989
      ]
    ],
    [
      [
        989,
        989
      ],
      "valid"
    ],
    [
      [
        990,
        990
      ],
      "mapped",
      [
        991
      ]
    ],
    [
      [
        991,
        991
      ],
      "valid"
    ],
    [
      [
        992,
        992
      ],
      "mapped",
      [
        993
      ]
    ],
    [
      [
        993,
        993
      ],
      "valid"
    ],
    [
      [
        994,
        994
      ],
      "mapped",
      [
        995
      ]
    ],
    [
      [
        995,
        995
      ],
      "valid"
    ],
    [
      [
        996,
        996
      ],
      "mapped",
      [
        997
      ]
    ],
    [
      [
        997,
        997
      ],
      "valid"
    ],
    [
      [
        998,
        998
      ],
      "mapped",
      [
        999
      ]
    ],
    [
      [
        999,
        999
      ],
      "valid"
    ],
    [
      [
        1e3,
        1e3
      ],
      "mapped",
      [
        1001
      ]
    ],
    [
      [
        1001,
        1001
      ],
      "valid"
    ],
    [
      [
        1002,
        1002
      ],
      "mapped",
      [
        1003
      ]
    ],
    [
      [
        1003,
        1003
      ],
      "valid"
    ],
    [
      [
        1004,
        1004
      ],
      "mapped",
      [
        1005
      ]
    ],
    [
      [
        1005,
        1005
      ],
      "valid"
    ],
    [
      [
        1006,
        1006
      ],
      "mapped",
      [
        1007
      ]
    ],
    [
      [
        1007,
        1007
      ],
      "valid"
    ],
    [
      [
        1008,
        1008
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        1009,
        1009
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        1010,
        1010
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        1011,
        1011
      ],
      "valid"
    ],
    [
      [
        1012,
        1012
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        1013,
        1013
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        1014,
        1014
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1015,
        1015
      ],
      "mapped",
      [
        1016
      ]
    ],
    [
      [
        1016,
        1016
      ],
      "valid"
    ],
    [
      [
        1017,
        1017
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        1018,
        1018
      ],
      "mapped",
      [
        1019
      ]
    ],
    [
      [
        1019,
        1019
      ],
      "valid"
    ],
    [
      [
        1020,
        1020
      ],
      "valid"
    ],
    [
      [
        1021,
        1021
      ],
      "mapped",
      [
        891
      ]
    ],
    [
      [
        1022,
        1022
      ],
      "mapped",
      [
        892
      ]
    ],
    [
      [
        1023,
        1023
      ],
      "mapped",
      [
        893
      ]
    ],
    [
      [
        1024,
        1024
      ],
      "mapped",
      [
        1104
      ]
    ],
    [
      [
        1025,
        1025
      ],
      "mapped",
      [
        1105
      ]
    ],
    [
      [
        1026,
        1026
      ],
      "mapped",
      [
        1106
      ]
    ],
    [
      [
        1027,
        1027
      ],
      "mapped",
      [
        1107
      ]
    ],
    [
      [
        1028,
        1028
      ],
      "mapped",
      [
        1108
      ]
    ],
    [
      [
        1029,
        1029
      ],
      "mapped",
      [
        1109
      ]
    ],
    [
      [
        1030,
        1030
      ],
      "mapped",
      [
        1110
      ]
    ],
    [
      [
        1031,
        1031
      ],
      "mapped",
      [
        1111
      ]
    ],
    [
      [
        1032,
        1032
      ],
      "mapped",
      [
        1112
      ]
    ],
    [
      [
        1033,
        1033
      ],
      "mapped",
      [
        1113
      ]
    ],
    [
      [
        1034,
        1034
      ],
      "mapped",
      [
        1114
      ]
    ],
    [
      [
        1035,
        1035
      ],
      "mapped",
      [
        1115
      ]
    ],
    [
      [
        1036,
        1036
      ],
      "mapped",
      [
        1116
      ]
    ],
    [
      [
        1037,
        1037
      ],
      "mapped",
      [
        1117
      ]
    ],
    [
      [
        1038,
        1038
      ],
      "mapped",
      [
        1118
      ]
    ],
    [
      [
        1039,
        1039
      ],
      "mapped",
      [
        1119
      ]
    ],
    [
      [
        1040,
        1040
      ],
      "mapped",
      [
        1072
      ]
    ],
    [
      [
        1041,
        1041
      ],
      "mapped",
      [
        1073
      ]
    ],
    [
      [
        1042,
        1042
      ],
      "mapped",
      [
        1074
      ]
    ],
    [
      [
        1043,
        1043
      ],
      "mapped",
      [
        1075
      ]
    ],
    [
      [
        1044,
        1044
      ],
      "mapped",
      [
        1076
      ]
    ],
    [
      [
        1045,
        1045
      ],
      "mapped",
      [
        1077
      ]
    ],
    [
      [
        1046,
        1046
      ],
      "mapped",
      [
        1078
      ]
    ],
    [
      [
        1047,
        1047
      ],
      "mapped",
      [
        1079
      ]
    ],
    [
      [
        1048,
        1048
      ],
      "mapped",
      [
        1080
      ]
    ],
    [
      [
        1049,
        1049
      ],
      "mapped",
      [
        1081
      ]
    ],
    [
      [
        1050,
        1050
      ],
      "mapped",
      [
        1082
      ]
    ],
    [
      [
        1051,
        1051
      ],
      "mapped",
      [
        1083
      ]
    ],
    [
      [
        1052,
        1052
      ],
      "mapped",
      [
        1084
      ]
    ],
    [
      [
        1053,
        1053
      ],
      "mapped",
      [
        1085
      ]
    ],
    [
      [
        1054,
        1054
      ],
      "mapped",
      [
        1086
      ]
    ],
    [
      [
        1055,
        1055
      ],
      "mapped",
      [
        1087
      ]
    ],
    [
      [
        1056,
        1056
      ],
      "mapped",
      [
        1088
      ]
    ],
    [
      [
        1057,
        1057
      ],
      "mapped",
      [
        1089
      ]
    ],
    [
      [
        1058,
        1058
      ],
      "mapped",
      [
        1090
      ]
    ],
    [
      [
        1059,
        1059
      ],
      "mapped",
      [
        1091
      ]
    ],
    [
      [
        1060,
        1060
      ],
      "mapped",
      [
        1092
      ]
    ],
    [
      [
        1061,
        1061
      ],
      "mapped",
      [
        1093
      ]
    ],
    [
      [
        1062,
        1062
      ],
      "mapped",
      [
        1094
      ]
    ],
    [
      [
        1063,
        1063
      ],
      "mapped",
      [
        1095
      ]
    ],
    [
      [
        1064,
        1064
      ],
      "mapped",
      [
        1096
      ]
    ],
    [
      [
        1065,
        1065
      ],
      "mapped",
      [
        1097
      ]
    ],
    [
      [
        1066,
        1066
      ],
      "mapped",
      [
        1098
      ]
    ],
    [
      [
        1067,
        1067
      ],
      "mapped",
      [
        1099
      ]
    ],
    [
      [
        1068,
        1068
      ],
      "mapped",
      [
        1100
      ]
    ],
    [
      [
        1069,
        1069
      ],
      "mapped",
      [
        1101
      ]
    ],
    [
      [
        1070,
        1070
      ],
      "mapped",
      [
        1102
      ]
    ],
    [
      [
        1071,
        1071
      ],
      "mapped",
      [
        1103
      ]
    ],
    [
      [
        1072,
        1103
      ],
      "valid"
    ],
    [
      [
        1104,
        1104
      ],
      "valid"
    ],
    [
      [
        1105,
        1116
      ],
      "valid"
    ],
    [
      [
        1117,
        1117
      ],
      "valid"
    ],
    [
      [
        1118,
        1119
      ],
      "valid"
    ],
    [
      [
        1120,
        1120
      ],
      "mapped",
      [
        1121
      ]
    ],
    [
      [
        1121,
        1121
      ],
      "valid"
    ],
    [
      [
        1122,
        1122
      ],
      "mapped",
      [
        1123
      ]
    ],
    [
      [
        1123,
        1123
      ],
      "valid"
    ],
    [
      [
        1124,
        1124
      ],
      "mapped",
      [
        1125
      ]
    ],
    [
      [
        1125,
        1125
      ],
      "valid"
    ],
    [
      [
        1126,
        1126
      ],
      "mapped",
      [
        1127
      ]
    ],
    [
      [
        1127,
        1127
      ],
      "valid"
    ],
    [
      [
        1128,
        1128
      ],
      "mapped",
      [
        1129
      ]
    ],
    [
      [
        1129,
        1129
      ],
      "valid"
    ],
    [
      [
        1130,
        1130
      ],
      "mapped",
      [
        1131
      ]
    ],
    [
      [
        1131,
        1131
      ],
      "valid"
    ],
    [
      [
        1132,
        1132
      ],
      "mapped",
      [
        1133
      ]
    ],
    [
      [
        1133,
        1133
      ],
      "valid"
    ],
    [
      [
        1134,
        1134
      ],
      "mapped",
      [
        1135
      ]
    ],
    [
      [
        1135,
        1135
      ],
      "valid"
    ],
    [
      [
        1136,
        1136
      ],
      "mapped",
      [
        1137
      ]
    ],
    [
      [
        1137,
        1137
      ],
      "valid"
    ],
    [
      [
        1138,
        1138
      ],
      "mapped",
      [
        1139
      ]
    ],
    [
      [
        1139,
        1139
      ],
      "valid"
    ],
    [
      [
        1140,
        1140
      ],
      "mapped",
      [
        1141
      ]
    ],
    [
      [
        1141,
        1141
      ],
      "valid"
    ],
    [
      [
        1142,
        1142
      ],
      "mapped",
      [
        1143
      ]
    ],
    [
      [
        1143,
        1143
      ],
      "valid"
    ],
    [
      [
        1144,
        1144
      ],
      "mapped",
      [
        1145
      ]
    ],
    [
      [
        1145,
        1145
      ],
      "valid"
    ],
    [
      [
        1146,
        1146
      ],
      "mapped",
      [
        1147
      ]
    ],
    [
      [
        1147,
        1147
      ],
      "valid"
    ],
    [
      [
        1148,
        1148
      ],
      "mapped",
      [
        1149
      ]
    ],
    [
      [
        1149,
        1149
      ],
      "valid"
    ],
    [
      [
        1150,
        1150
      ],
      "mapped",
      [
        1151
      ]
    ],
    [
      [
        1151,
        1151
      ],
      "valid"
    ],
    [
      [
        1152,
        1152
      ],
      "mapped",
      [
        1153
      ]
    ],
    [
      [
        1153,
        1153
      ],
      "valid"
    ],
    [
      [
        1154,
        1154
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1155,
        1158
      ],
      "valid"
    ],
    [
      [
        1159,
        1159
      ],
      "valid"
    ],
    [
      [
        1160,
        1161
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1162,
        1162
      ],
      "mapped",
      [
        1163
      ]
    ],
    [
      [
        1163,
        1163
      ],
      "valid"
    ],
    [
      [
        1164,
        1164
      ],
      "mapped",
      [
        1165
      ]
    ],
    [
      [
        1165,
        1165
      ],
      "valid"
    ],
    [
      [
        1166,
        1166
      ],
      "mapped",
      [
        1167
      ]
    ],
    [
      [
        1167,
        1167
      ],
      "valid"
    ],
    [
      [
        1168,
        1168
      ],
      "mapped",
      [
        1169
      ]
    ],
    [
      [
        1169,
        1169
      ],
      "valid"
    ],
    [
      [
        1170,
        1170
      ],
      "mapped",
      [
        1171
      ]
    ],
    [
      [
        1171,
        1171
      ],
      "valid"
    ],
    [
      [
        1172,
        1172
      ],
      "mapped",
      [
        1173
      ]
    ],
    [
      [
        1173,
        1173
      ],
      "valid"
    ],
    [
      [
        1174,
        1174
      ],
      "mapped",
      [
        1175
      ]
    ],
    [
      [
        1175,
        1175
      ],
      "valid"
    ],
    [
      [
        1176,
        1176
      ],
      "mapped",
      [
        1177
      ]
    ],
    [
      [
        1177,
        1177
      ],
      "valid"
    ],
    [
      [
        1178,
        1178
      ],
      "mapped",
      [
        1179
      ]
    ],
    [
      [
        1179,
        1179
      ],
      "valid"
    ],
    [
      [
        1180,
        1180
      ],
      "mapped",
      [
        1181
      ]
    ],
    [
      [
        1181,
        1181
      ],
      "valid"
    ],
    [
      [
        1182,
        1182
      ],
      "mapped",
      [
        1183
      ]
    ],
    [
      [
        1183,
        1183
      ],
      "valid"
    ],
    [
      [
        1184,
        1184
      ],
      "mapped",
      [
        1185
      ]
    ],
    [
      [
        1185,
        1185
      ],
      "valid"
    ],
    [
      [
        1186,
        1186
      ],
      "mapped",
      [
        1187
      ]
    ],
    [
      [
        1187,
        1187
      ],
      "valid"
    ],
    [
      [
        1188,
        1188
      ],
      "mapped",
      [
        1189
      ]
    ],
    [
      [
        1189,
        1189
      ],
      "valid"
    ],
    [
      [
        1190,
        1190
      ],
      "mapped",
      [
        1191
      ]
    ],
    [
      [
        1191,
        1191
      ],
      "valid"
    ],
    [
      [
        1192,
        1192
      ],
      "mapped",
      [
        1193
      ]
    ],
    [
      [
        1193,
        1193
      ],
      "valid"
    ],
    [
      [
        1194,
        1194
      ],
      "mapped",
      [
        1195
      ]
    ],
    [
      [
        1195,
        1195
      ],
      "valid"
    ],
    [
      [
        1196,
        1196
      ],
      "mapped",
      [
        1197
      ]
    ],
    [
      [
        1197,
        1197
      ],
      "valid"
    ],
    [
      [
        1198,
        1198
      ],
      "mapped",
      [
        1199
      ]
    ],
    [
      [
        1199,
        1199
      ],
      "valid"
    ],
    [
      [
        1200,
        1200
      ],
      "mapped",
      [
        1201
      ]
    ],
    [
      [
        1201,
        1201
      ],
      "valid"
    ],
    [
      [
        1202,
        1202
      ],
      "mapped",
      [
        1203
      ]
    ],
    [
      [
        1203,
        1203
      ],
      "valid"
    ],
    [
      [
        1204,
        1204
      ],
      "mapped",
      [
        1205
      ]
    ],
    [
      [
        1205,
        1205
      ],
      "valid"
    ],
    [
      [
        1206,
        1206
      ],
      "mapped",
      [
        1207
      ]
    ],
    [
      [
        1207,
        1207
      ],
      "valid"
    ],
    [
      [
        1208,
        1208
      ],
      "mapped",
      [
        1209
      ]
    ],
    [
      [
        1209,
        1209
      ],
      "valid"
    ],
    [
      [
        1210,
        1210
      ],
      "mapped",
      [
        1211
      ]
    ],
    [
      [
        1211,
        1211
      ],
      "valid"
    ],
    [
      [
        1212,
        1212
      ],
      "mapped",
      [
        1213
      ]
    ],
    [
      [
        1213,
        1213
      ],
      "valid"
    ],
    [
      [
        1214,
        1214
      ],
      "mapped",
      [
        1215
      ]
    ],
    [
      [
        1215,
        1215
      ],
      "valid"
    ],
    [
      [
        1216,
        1216
      ],
      "disallowed"
    ],
    [
      [
        1217,
        1217
      ],
      "mapped",
      [
        1218
      ]
    ],
    [
      [
        1218,
        1218
      ],
      "valid"
    ],
    [
      [
        1219,
        1219
      ],
      "mapped",
      [
        1220
      ]
    ],
    [
      [
        1220,
        1220
      ],
      "valid"
    ],
    [
      [
        1221,
        1221
      ],
      "mapped",
      [
        1222
      ]
    ],
    [
      [
        1222,
        1222
      ],
      "valid"
    ],
    [
      [
        1223,
        1223
      ],
      "mapped",
      [
        1224
      ]
    ],
    [
      [
        1224,
        1224
      ],
      "valid"
    ],
    [
      [
        1225,
        1225
      ],
      "mapped",
      [
        1226
      ]
    ],
    [
      [
        1226,
        1226
      ],
      "valid"
    ],
    [
      [
        1227,
        1227
      ],
      "mapped",
      [
        1228
      ]
    ],
    [
      [
        1228,
        1228
      ],
      "valid"
    ],
    [
      [
        1229,
        1229
      ],
      "mapped",
      [
        1230
      ]
    ],
    [
      [
        1230,
        1230
      ],
      "valid"
    ],
    [
      [
        1231,
        1231
      ],
      "valid"
    ],
    [
      [
        1232,
        1232
      ],
      "mapped",
      [
        1233
      ]
    ],
    [
      [
        1233,
        1233
      ],
      "valid"
    ],
    [
      [
        1234,
        1234
      ],
      "mapped",
      [
        1235
      ]
    ],
    [
      [
        1235,
        1235
      ],
      "valid"
    ],
    [
      [
        1236,
        1236
      ],
      "mapped",
      [
        1237
      ]
    ],
    [
      [
        1237,
        1237
      ],
      "valid"
    ],
    [
      [
        1238,
        1238
      ],
      "mapped",
      [
        1239
      ]
    ],
    [
      [
        1239,
        1239
      ],
      "valid"
    ],
    [
      [
        1240,
        1240
      ],
      "mapped",
      [
        1241
      ]
    ],
    [
      [
        1241,
        1241
      ],
      "valid"
    ],
    [
      [
        1242,
        1242
      ],
      "mapped",
      [
        1243
      ]
    ],
    [
      [
        1243,
        1243
      ],
      "valid"
    ],
    [
      [
        1244,
        1244
      ],
      "mapped",
      [
        1245
      ]
    ],
    [
      [
        1245,
        1245
      ],
      "valid"
    ],
    [
      [
        1246,
        1246
      ],
      "mapped",
      [
        1247
      ]
    ],
    [
      [
        1247,
        1247
      ],
      "valid"
    ],
    [
      [
        1248,
        1248
      ],
      "mapped",
      [
        1249
      ]
    ],
    [
      [
        1249,
        1249
      ],
      "valid"
    ],
    [
      [
        1250,
        1250
      ],
      "mapped",
      [
        1251
      ]
    ],
    [
      [
        1251,
        1251
      ],
      "valid"
    ],
    [
      [
        1252,
        1252
      ],
      "mapped",
      [
        1253
      ]
    ],
    [
      [
        1253,
        1253
      ],
      "valid"
    ],
    [
      [
        1254,
        1254
      ],
      "mapped",
      [
        1255
      ]
    ],
    [
      [
        1255,
        1255
      ],
      "valid"
    ],
    [
      [
        1256,
        1256
      ],
      "mapped",
      [
        1257
      ]
    ],
    [
      [
        1257,
        1257
      ],
      "valid"
    ],
    [
      [
        1258,
        1258
      ],
      "mapped",
      [
        1259
      ]
    ],
    [
      [
        1259,
        1259
      ],
      "valid"
    ],
    [
      [
        1260,
        1260
      ],
      "mapped",
      [
        1261
      ]
    ],
    [
      [
        1261,
        1261
      ],
      "valid"
    ],
    [
      [
        1262,
        1262
      ],
      "mapped",
      [
        1263
      ]
    ],
    [
      [
        1263,
        1263
      ],
      "valid"
    ],
    [
      [
        1264,
        1264
      ],
      "mapped",
      [
        1265
      ]
    ],
    [
      [
        1265,
        1265
      ],
      "valid"
    ],
    [
      [
        1266,
        1266
      ],
      "mapped",
      [
        1267
      ]
    ],
    [
      [
        1267,
        1267
      ],
      "valid"
    ],
    [
      [
        1268,
        1268
      ],
      "mapped",
      [
        1269
      ]
    ],
    [
      [
        1269,
        1269
      ],
      "valid"
    ],
    [
      [
        1270,
        1270
      ],
      "mapped",
      [
        1271
      ]
    ],
    [
      [
        1271,
        1271
      ],
      "valid"
    ],
    [
      [
        1272,
        1272
      ],
      "mapped",
      [
        1273
      ]
    ],
    [
      [
        1273,
        1273
      ],
      "valid"
    ],
    [
      [
        1274,
        1274
      ],
      "mapped",
      [
        1275
      ]
    ],
    [
      [
        1275,
        1275
      ],
      "valid"
    ],
    [
      [
        1276,
        1276
      ],
      "mapped",
      [
        1277
      ]
    ],
    [
      [
        1277,
        1277
      ],
      "valid"
    ],
    [
      [
        1278,
        1278
      ],
      "mapped",
      [
        1279
      ]
    ],
    [
      [
        1279,
        1279
      ],
      "valid"
    ],
    [
      [
        1280,
        1280
      ],
      "mapped",
      [
        1281
      ]
    ],
    [
      [
        1281,
        1281
      ],
      "valid"
    ],
    [
      [
        1282,
        1282
      ],
      "mapped",
      [
        1283
      ]
    ],
    [
      [
        1283,
        1283
      ],
      "valid"
    ],
    [
      [
        1284,
        1284
      ],
      "mapped",
      [
        1285
      ]
    ],
    [
      [
        1285,
        1285
      ],
      "valid"
    ],
    [
      [
        1286,
        1286
      ],
      "mapped",
      [
        1287
      ]
    ],
    [
      [
        1287,
        1287
      ],
      "valid"
    ],
    [
      [
        1288,
        1288
      ],
      "mapped",
      [
        1289
      ]
    ],
    [
      [
        1289,
        1289
      ],
      "valid"
    ],
    [
      [
        1290,
        1290
      ],
      "mapped",
      [
        1291
      ]
    ],
    [
      [
        1291,
        1291
      ],
      "valid"
    ],
    [
      [
        1292,
        1292
      ],
      "mapped",
      [
        1293
      ]
    ],
    [
      [
        1293,
        1293
      ],
      "valid"
    ],
    [
      [
        1294,
        1294
      ],
      "mapped",
      [
        1295
      ]
    ],
    [
      [
        1295,
        1295
      ],
      "valid"
    ],
    [
      [
        1296,
        1296
      ],
      "mapped",
      [
        1297
      ]
    ],
    [
      [
        1297,
        1297
      ],
      "valid"
    ],
    [
      [
        1298,
        1298
      ],
      "mapped",
      [
        1299
      ]
    ],
    [
      [
        1299,
        1299
      ],
      "valid"
    ],
    [
      [
        1300,
        1300
      ],
      "mapped",
      [
        1301
      ]
    ],
    [
      [
        1301,
        1301
      ],
      "valid"
    ],
    [
      [
        1302,
        1302
      ],
      "mapped",
      [
        1303
      ]
    ],
    [
      [
        1303,
        1303
      ],
      "valid"
    ],
    [
      [
        1304,
        1304
      ],
      "mapped",
      [
        1305
      ]
    ],
    [
      [
        1305,
        1305
      ],
      "valid"
    ],
    [
      [
        1306,
        1306
      ],
      "mapped",
      [
        1307
      ]
    ],
    [
      [
        1307,
        1307
      ],
      "valid"
    ],
    [
      [
        1308,
        1308
      ],
      "mapped",
      [
        1309
      ]
    ],
    [
      [
        1309,
        1309
      ],
      "valid"
    ],
    [
      [
        1310,
        1310
      ],
      "mapped",
      [
        1311
      ]
    ],
    [
      [
        1311,
        1311
      ],
      "valid"
    ],
    [
      [
        1312,
        1312
      ],
      "mapped",
      [
        1313
      ]
    ],
    [
      [
        1313,
        1313
      ],
      "valid"
    ],
    [
      [
        1314,
        1314
      ],
      "mapped",
      [
        1315
      ]
    ],
    [
      [
        1315,
        1315
      ],
      "valid"
    ],
    [
      [
        1316,
        1316
      ],
      "mapped",
      [
        1317
      ]
    ],
    [
      [
        1317,
        1317
      ],
      "valid"
    ],
    [
      [
        1318,
        1318
      ],
      "mapped",
      [
        1319
      ]
    ],
    [
      [
        1319,
        1319
      ],
      "valid"
    ],
    [
      [
        1320,
        1320
      ],
      "mapped",
      [
        1321
      ]
    ],
    [
      [
        1321,
        1321
      ],
      "valid"
    ],
    [
      [
        1322,
        1322
      ],
      "mapped",
      [
        1323
      ]
    ],
    [
      [
        1323,
        1323
      ],
      "valid"
    ],
    [
      [
        1324,
        1324
      ],
      "mapped",
      [
        1325
      ]
    ],
    [
      [
        1325,
        1325
      ],
      "valid"
    ],
    [
      [
        1326,
        1326
      ],
      "mapped",
      [
        1327
      ]
    ],
    [
      [
        1327,
        1327
      ],
      "valid"
    ],
    [
      [
        1328,
        1328
      ],
      "disallowed"
    ],
    [
      [
        1329,
        1329
      ],
      "mapped",
      [
        1377
      ]
    ],
    [
      [
        1330,
        1330
      ],
      "mapped",
      [
        1378
      ]
    ],
    [
      [
        1331,
        1331
      ],
      "mapped",
      [
        1379
      ]
    ],
    [
      [
        1332,
        1332
      ],
      "mapped",
      [
        1380
      ]
    ],
    [
      [
        1333,
        1333
      ],
      "mapped",
      [
        1381
      ]
    ],
    [
      [
        1334,
        1334
      ],
      "mapped",
      [
        1382
      ]
    ],
    [
      [
        1335,
        1335
      ],
      "mapped",
      [
        1383
      ]
    ],
    [
      [
        1336,
        1336
      ],
      "mapped",
      [
        1384
      ]
    ],
    [
      [
        1337,
        1337
      ],
      "mapped",
      [
        1385
      ]
    ],
    [
      [
        1338,
        1338
      ],
      "mapped",
      [
        1386
      ]
    ],
    [
      [
        1339,
        1339
      ],
      "mapped",
      [
        1387
      ]
    ],
    [
      [
        1340,
        1340
      ],
      "mapped",
      [
        1388
      ]
    ],
    [
      [
        1341,
        1341
      ],
      "mapped",
      [
        1389
      ]
    ],
    [
      [
        1342,
        1342
      ],
      "mapped",
      [
        1390
      ]
    ],
    [
      [
        1343,
        1343
      ],
      "mapped",
      [
        1391
      ]
    ],
    [
      [
        1344,
        1344
      ],
      "mapped",
      [
        1392
      ]
    ],
    [
      [
        1345,
        1345
      ],
      "mapped",
      [
        1393
      ]
    ],
    [
      [
        1346,
        1346
      ],
      "mapped",
      [
        1394
      ]
    ],
    [
      [
        1347,
        1347
      ],
      "mapped",
      [
        1395
      ]
    ],
    [
      [
        1348,
        1348
      ],
      "mapped",
      [
        1396
      ]
    ],
    [
      [
        1349,
        1349
      ],
      "mapped",
      [
        1397
      ]
    ],
    [
      [
        1350,
        1350
      ],
      "mapped",
      [
        1398
      ]
    ],
    [
      [
        1351,
        1351
      ],
      "mapped",
      [
        1399
      ]
    ],
    [
      [
        1352,
        1352
      ],
      "mapped",
      [
        1400
      ]
    ],
    [
      [
        1353,
        1353
      ],
      "mapped",
      [
        1401
      ]
    ],
    [
      [
        1354,
        1354
      ],
      "mapped",
      [
        1402
      ]
    ],
    [
      [
        1355,
        1355
      ],
      "mapped",
      [
        1403
      ]
    ],
    [
      [
        1356,
        1356
      ],
      "mapped",
      [
        1404
      ]
    ],
    [
      [
        1357,
        1357
      ],
      "mapped",
      [
        1405
      ]
    ],
    [
      [
        1358,
        1358
      ],
      "mapped",
      [
        1406
      ]
    ],
    [
      [
        1359,
        1359
      ],
      "mapped",
      [
        1407
      ]
    ],
    [
      [
        1360,
        1360
      ],
      "mapped",
      [
        1408
      ]
    ],
    [
      [
        1361,
        1361
      ],
      "mapped",
      [
        1409
      ]
    ],
    [
      [
        1362,
        1362
      ],
      "mapped",
      [
        1410
      ]
    ],
    [
      [
        1363,
        1363
      ],
      "mapped",
      [
        1411
      ]
    ],
    [
      [
        1364,
        1364
      ],
      "mapped",
      [
        1412
      ]
    ],
    [
      [
        1365,
        1365
      ],
      "mapped",
      [
        1413
      ]
    ],
    [
      [
        1366,
        1366
      ],
      "mapped",
      [
        1414
      ]
    ],
    [
      [
        1367,
        1368
      ],
      "disallowed"
    ],
    [
      [
        1369,
        1369
      ],
      "valid"
    ],
    [
      [
        1370,
        1375
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1376,
        1376
      ],
      "disallowed"
    ],
    [
      [
        1377,
        1414
      ],
      "valid"
    ],
    [
      [
        1415,
        1415
      ],
      "mapped",
      [
        1381,
        1410
      ]
    ],
    [
      [
        1416,
        1416
      ],
      "disallowed"
    ],
    [
      [
        1417,
        1417
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1418,
        1418
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1419,
        1420
      ],
      "disallowed"
    ],
    [
      [
        1421,
        1422
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1423,
        1423
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1424,
        1424
      ],
      "disallowed"
    ],
    [
      [
        1425,
        1441
      ],
      "valid"
    ],
    [
      [
        1442,
        1442
      ],
      "valid"
    ],
    [
      [
        1443,
        1455
      ],
      "valid"
    ],
    [
      [
        1456,
        1465
      ],
      "valid"
    ],
    [
      [
        1466,
        1466
      ],
      "valid"
    ],
    [
      [
        1467,
        1469
      ],
      "valid"
    ],
    [
      [
        1470,
        1470
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1471,
        1471
      ],
      "valid"
    ],
    [
      [
        1472,
        1472
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1473,
        1474
      ],
      "valid"
    ],
    [
      [
        1475,
        1475
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1476,
        1476
      ],
      "valid"
    ],
    [
      [
        1477,
        1477
      ],
      "valid"
    ],
    [
      [
        1478,
        1478
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1479,
        1479
      ],
      "valid"
    ],
    [
      [
        1480,
        1487
      ],
      "disallowed"
    ],
    [
      [
        1488,
        1514
      ],
      "valid"
    ],
    [
      [
        1515,
        1519
      ],
      "disallowed"
    ],
    [
      [
        1520,
        1524
      ],
      "valid"
    ],
    [
      [
        1525,
        1535
      ],
      "disallowed"
    ],
    [
      [
        1536,
        1539
      ],
      "disallowed"
    ],
    [
      [
        1540,
        1540
      ],
      "disallowed"
    ],
    [
      [
        1541,
        1541
      ],
      "disallowed"
    ],
    [
      [
        1542,
        1546
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1547,
        1547
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1548,
        1548
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1549,
        1551
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1552,
        1557
      ],
      "valid"
    ],
    [
      [
        1558,
        1562
      ],
      "valid"
    ],
    [
      [
        1563,
        1563
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1564,
        1564
      ],
      "disallowed"
    ],
    [
      [
        1565,
        1565
      ],
      "disallowed"
    ],
    [
      [
        1566,
        1566
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1567,
        1567
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1568,
        1568
      ],
      "valid"
    ],
    [
      [
        1569,
        1594
      ],
      "valid"
    ],
    [
      [
        1595,
        1599
      ],
      "valid"
    ],
    [
      [
        1600,
        1600
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1601,
        1618
      ],
      "valid"
    ],
    [
      [
        1619,
        1621
      ],
      "valid"
    ],
    [
      [
        1622,
        1624
      ],
      "valid"
    ],
    [
      [
        1625,
        1630
      ],
      "valid"
    ],
    [
      [
        1631,
        1631
      ],
      "valid"
    ],
    [
      [
        1632,
        1641
      ],
      "valid"
    ],
    [
      [
        1642,
        1645
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1646,
        1647
      ],
      "valid"
    ],
    [
      [
        1648,
        1652
      ],
      "valid"
    ],
    [
      [
        1653,
        1653
      ],
      "mapped",
      [
        1575,
        1652
      ]
    ],
    [
      [
        1654,
        1654
      ],
      "mapped",
      [
        1608,
        1652
      ]
    ],
    [
      [
        1655,
        1655
      ],
      "mapped",
      [
        1735,
        1652
      ]
    ],
    [
      [
        1656,
        1656
      ],
      "mapped",
      [
        1610,
        1652
      ]
    ],
    [
      [
        1657,
        1719
      ],
      "valid"
    ],
    [
      [
        1720,
        1721
      ],
      "valid"
    ],
    [
      [
        1722,
        1726
      ],
      "valid"
    ],
    [
      [
        1727,
        1727
      ],
      "valid"
    ],
    [
      [
        1728,
        1742
      ],
      "valid"
    ],
    [
      [
        1743,
        1743
      ],
      "valid"
    ],
    [
      [
        1744,
        1747
      ],
      "valid"
    ],
    [
      [
        1748,
        1748
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1749,
        1756
      ],
      "valid"
    ],
    [
      [
        1757,
        1757
      ],
      "disallowed"
    ],
    [
      [
        1758,
        1758
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1759,
        1768
      ],
      "valid"
    ],
    [
      [
        1769,
        1769
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1770,
        1773
      ],
      "valid"
    ],
    [
      [
        1774,
        1775
      ],
      "valid"
    ],
    [
      [
        1776,
        1785
      ],
      "valid"
    ],
    [
      [
        1786,
        1790
      ],
      "valid"
    ],
    [
      [
        1791,
        1791
      ],
      "valid"
    ],
    [
      [
        1792,
        1805
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        1806,
        1806
      ],
      "disallowed"
    ],
    [
      [
        1807,
        1807
      ],
      "disallowed"
    ],
    [
      [
        1808,
        1836
      ],
      "valid"
    ],
    [
      [
        1837,
        1839
      ],
      "valid"
    ],
    [
      [
        1840,
        1866
      ],
      "valid"
    ],
    [
      [
        1867,
        1868
      ],
      "disallowed"
    ],
    [
      [
        1869,
        1871
      ],
      "valid"
    ],
    [
      [
        1872,
        1901
      ],
      "valid"
    ],
    [
      [
        1902,
        1919
      ],
      "valid"
    ],
    [
      [
        1920,
        1968
      ],
      "valid"
    ],
    [
      [
        1969,
        1969
      ],
      "valid"
    ],
    [
      [
        1970,
        1983
      ],
      "disallowed"
    ],
    [
      [
        1984,
        2037
      ],
      "valid"
    ],
    [
      [
        2038,
        2042
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2043,
        2047
      ],
      "disallowed"
    ],
    [
      [
        2048,
        2093
      ],
      "valid"
    ],
    [
      [
        2094,
        2095
      ],
      "disallowed"
    ],
    [
      [
        2096,
        2110
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2111,
        2111
      ],
      "disallowed"
    ],
    [
      [
        2112,
        2139
      ],
      "valid"
    ],
    [
      [
        2140,
        2141
      ],
      "disallowed"
    ],
    [
      [
        2142,
        2142
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2143,
        2207
      ],
      "disallowed"
    ],
    [
      [
        2208,
        2208
      ],
      "valid"
    ],
    [
      [
        2209,
        2209
      ],
      "valid"
    ],
    [
      [
        2210,
        2220
      ],
      "valid"
    ],
    [
      [
        2221,
        2226
      ],
      "valid"
    ],
    [
      [
        2227,
        2228
      ],
      "valid"
    ],
    [
      [
        2229,
        2274
      ],
      "disallowed"
    ],
    [
      [
        2275,
        2275
      ],
      "valid"
    ],
    [
      [
        2276,
        2302
      ],
      "valid"
    ],
    [
      [
        2303,
        2303
      ],
      "valid"
    ],
    [
      [
        2304,
        2304
      ],
      "valid"
    ],
    [
      [
        2305,
        2307
      ],
      "valid"
    ],
    [
      [
        2308,
        2308
      ],
      "valid"
    ],
    [
      [
        2309,
        2361
      ],
      "valid"
    ],
    [
      [
        2362,
        2363
      ],
      "valid"
    ],
    [
      [
        2364,
        2381
      ],
      "valid"
    ],
    [
      [
        2382,
        2382
      ],
      "valid"
    ],
    [
      [
        2383,
        2383
      ],
      "valid"
    ],
    [
      [
        2384,
        2388
      ],
      "valid"
    ],
    [
      [
        2389,
        2389
      ],
      "valid"
    ],
    [
      [
        2390,
        2391
      ],
      "valid"
    ],
    [
      [
        2392,
        2392
      ],
      "mapped",
      [
        2325,
        2364
      ]
    ],
    [
      [
        2393,
        2393
      ],
      "mapped",
      [
        2326,
        2364
      ]
    ],
    [
      [
        2394,
        2394
      ],
      "mapped",
      [
        2327,
        2364
      ]
    ],
    [
      [
        2395,
        2395
      ],
      "mapped",
      [
        2332,
        2364
      ]
    ],
    [
      [
        2396,
        2396
      ],
      "mapped",
      [
        2337,
        2364
      ]
    ],
    [
      [
        2397,
        2397
      ],
      "mapped",
      [
        2338,
        2364
      ]
    ],
    [
      [
        2398,
        2398
      ],
      "mapped",
      [
        2347,
        2364
      ]
    ],
    [
      [
        2399,
        2399
      ],
      "mapped",
      [
        2351,
        2364
      ]
    ],
    [
      [
        2400,
        2403
      ],
      "valid"
    ],
    [
      [
        2404,
        2405
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2406,
        2415
      ],
      "valid"
    ],
    [
      [
        2416,
        2416
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2417,
        2418
      ],
      "valid"
    ],
    [
      [
        2419,
        2423
      ],
      "valid"
    ],
    [
      [
        2424,
        2424
      ],
      "valid"
    ],
    [
      [
        2425,
        2426
      ],
      "valid"
    ],
    [
      [
        2427,
        2428
      ],
      "valid"
    ],
    [
      [
        2429,
        2429
      ],
      "valid"
    ],
    [
      [
        2430,
        2431
      ],
      "valid"
    ],
    [
      [
        2432,
        2432
      ],
      "valid"
    ],
    [
      [
        2433,
        2435
      ],
      "valid"
    ],
    [
      [
        2436,
        2436
      ],
      "disallowed"
    ],
    [
      [
        2437,
        2444
      ],
      "valid"
    ],
    [
      [
        2445,
        2446
      ],
      "disallowed"
    ],
    [
      [
        2447,
        2448
      ],
      "valid"
    ],
    [
      [
        2449,
        2450
      ],
      "disallowed"
    ],
    [
      [
        2451,
        2472
      ],
      "valid"
    ],
    [
      [
        2473,
        2473
      ],
      "disallowed"
    ],
    [
      [
        2474,
        2480
      ],
      "valid"
    ],
    [
      [
        2481,
        2481
      ],
      "disallowed"
    ],
    [
      [
        2482,
        2482
      ],
      "valid"
    ],
    [
      [
        2483,
        2485
      ],
      "disallowed"
    ],
    [
      [
        2486,
        2489
      ],
      "valid"
    ],
    [
      [
        2490,
        2491
      ],
      "disallowed"
    ],
    [
      [
        2492,
        2492
      ],
      "valid"
    ],
    [
      [
        2493,
        2493
      ],
      "valid"
    ],
    [
      [
        2494,
        2500
      ],
      "valid"
    ],
    [
      [
        2501,
        2502
      ],
      "disallowed"
    ],
    [
      [
        2503,
        2504
      ],
      "valid"
    ],
    [
      [
        2505,
        2506
      ],
      "disallowed"
    ],
    [
      [
        2507,
        2509
      ],
      "valid"
    ],
    [
      [
        2510,
        2510
      ],
      "valid"
    ],
    [
      [
        2511,
        2518
      ],
      "disallowed"
    ],
    [
      [
        2519,
        2519
      ],
      "valid"
    ],
    [
      [
        2520,
        2523
      ],
      "disallowed"
    ],
    [
      [
        2524,
        2524
      ],
      "mapped",
      [
        2465,
        2492
      ]
    ],
    [
      [
        2525,
        2525
      ],
      "mapped",
      [
        2466,
        2492
      ]
    ],
    [
      [
        2526,
        2526
      ],
      "disallowed"
    ],
    [
      [
        2527,
        2527
      ],
      "mapped",
      [
        2479,
        2492
      ]
    ],
    [
      [
        2528,
        2531
      ],
      "valid"
    ],
    [
      [
        2532,
        2533
      ],
      "disallowed"
    ],
    [
      [
        2534,
        2545
      ],
      "valid"
    ],
    [
      [
        2546,
        2554
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2555,
        2555
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2556,
        2560
      ],
      "disallowed"
    ],
    [
      [
        2561,
        2561
      ],
      "valid"
    ],
    [
      [
        2562,
        2562
      ],
      "valid"
    ],
    [
      [
        2563,
        2563
      ],
      "valid"
    ],
    [
      [
        2564,
        2564
      ],
      "disallowed"
    ],
    [
      [
        2565,
        2570
      ],
      "valid"
    ],
    [
      [
        2571,
        2574
      ],
      "disallowed"
    ],
    [
      [
        2575,
        2576
      ],
      "valid"
    ],
    [
      [
        2577,
        2578
      ],
      "disallowed"
    ],
    [
      [
        2579,
        2600
      ],
      "valid"
    ],
    [
      [
        2601,
        2601
      ],
      "disallowed"
    ],
    [
      [
        2602,
        2608
      ],
      "valid"
    ],
    [
      [
        2609,
        2609
      ],
      "disallowed"
    ],
    [
      [
        2610,
        2610
      ],
      "valid"
    ],
    [
      [
        2611,
        2611
      ],
      "mapped",
      [
        2610,
        2620
      ]
    ],
    [
      [
        2612,
        2612
      ],
      "disallowed"
    ],
    [
      [
        2613,
        2613
      ],
      "valid"
    ],
    [
      [
        2614,
        2614
      ],
      "mapped",
      [
        2616,
        2620
      ]
    ],
    [
      [
        2615,
        2615
      ],
      "disallowed"
    ],
    [
      [
        2616,
        2617
      ],
      "valid"
    ],
    [
      [
        2618,
        2619
      ],
      "disallowed"
    ],
    [
      [
        2620,
        2620
      ],
      "valid"
    ],
    [
      [
        2621,
        2621
      ],
      "disallowed"
    ],
    [
      [
        2622,
        2626
      ],
      "valid"
    ],
    [
      [
        2627,
        2630
      ],
      "disallowed"
    ],
    [
      [
        2631,
        2632
      ],
      "valid"
    ],
    [
      [
        2633,
        2634
      ],
      "disallowed"
    ],
    [
      [
        2635,
        2637
      ],
      "valid"
    ],
    [
      [
        2638,
        2640
      ],
      "disallowed"
    ],
    [
      [
        2641,
        2641
      ],
      "valid"
    ],
    [
      [
        2642,
        2648
      ],
      "disallowed"
    ],
    [
      [
        2649,
        2649
      ],
      "mapped",
      [
        2582,
        2620
      ]
    ],
    [
      [
        2650,
        2650
      ],
      "mapped",
      [
        2583,
        2620
      ]
    ],
    [
      [
        2651,
        2651
      ],
      "mapped",
      [
        2588,
        2620
      ]
    ],
    [
      [
        2652,
        2652
      ],
      "valid"
    ],
    [
      [
        2653,
        2653
      ],
      "disallowed"
    ],
    [
      [
        2654,
        2654
      ],
      "mapped",
      [
        2603,
        2620
      ]
    ],
    [
      [
        2655,
        2661
      ],
      "disallowed"
    ],
    [
      [
        2662,
        2676
      ],
      "valid"
    ],
    [
      [
        2677,
        2677
      ],
      "valid"
    ],
    [
      [
        2678,
        2688
      ],
      "disallowed"
    ],
    [
      [
        2689,
        2691
      ],
      "valid"
    ],
    [
      [
        2692,
        2692
      ],
      "disallowed"
    ],
    [
      [
        2693,
        2699
      ],
      "valid"
    ],
    [
      [
        2700,
        2700
      ],
      "valid"
    ],
    [
      [
        2701,
        2701
      ],
      "valid"
    ],
    [
      [
        2702,
        2702
      ],
      "disallowed"
    ],
    [
      [
        2703,
        2705
      ],
      "valid"
    ],
    [
      [
        2706,
        2706
      ],
      "disallowed"
    ],
    [
      [
        2707,
        2728
      ],
      "valid"
    ],
    [
      [
        2729,
        2729
      ],
      "disallowed"
    ],
    [
      [
        2730,
        2736
      ],
      "valid"
    ],
    [
      [
        2737,
        2737
      ],
      "disallowed"
    ],
    [
      [
        2738,
        2739
      ],
      "valid"
    ],
    [
      [
        2740,
        2740
      ],
      "disallowed"
    ],
    [
      [
        2741,
        2745
      ],
      "valid"
    ],
    [
      [
        2746,
        2747
      ],
      "disallowed"
    ],
    [
      [
        2748,
        2757
      ],
      "valid"
    ],
    [
      [
        2758,
        2758
      ],
      "disallowed"
    ],
    [
      [
        2759,
        2761
      ],
      "valid"
    ],
    [
      [
        2762,
        2762
      ],
      "disallowed"
    ],
    [
      [
        2763,
        2765
      ],
      "valid"
    ],
    [
      [
        2766,
        2767
      ],
      "disallowed"
    ],
    [
      [
        2768,
        2768
      ],
      "valid"
    ],
    [
      [
        2769,
        2783
      ],
      "disallowed"
    ],
    [
      [
        2784,
        2784
      ],
      "valid"
    ],
    [
      [
        2785,
        2787
      ],
      "valid"
    ],
    [
      [
        2788,
        2789
      ],
      "disallowed"
    ],
    [
      [
        2790,
        2799
      ],
      "valid"
    ],
    [
      [
        2800,
        2800
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2801,
        2801
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2802,
        2808
      ],
      "disallowed"
    ],
    [
      [
        2809,
        2809
      ],
      "valid"
    ],
    [
      [
        2810,
        2816
      ],
      "disallowed"
    ],
    [
      [
        2817,
        2819
      ],
      "valid"
    ],
    [
      [
        2820,
        2820
      ],
      "disallowed"
    ],
    [
      [
        2821,
        2828
      ],
      "valid"
    ],
    [
      [
        2829,
        2830
      ],
      "disallowed"
    ],
    [
      [
        2831,
        2832
      ],
      "valid"
    ],
    [
      [
        2833,
        2834
      ],
      "disallowed"
    ],
    [
      [
        2835,
        2856
      ],
      "valid"
    ],
    [
      [
        2857,
        2857
      ],
      "disallowed"
    ],
    [
      [
        2858,
        2864
      ],
      "valid"
    ],
    [
      [
        2865,
        2865
      ],
      "disallowed"
    ],
    [
      [
        2866,
        2867
      ],
      "valid"
    ],
    [
      [
        2868,
        2868
      ],
      "disallowed"
    ],
    [
      [
        2869,
        2869
      ],
      "valid"
    ],
    [
      [
        2870,
        2873
      ],
      "valid"
    ],
    [
      [
        2874,
        2875
      ],
      "disallowed"
    ],
    [
      [
        2876,
        2883
      ],
      "valid"
    ],
    [
      [
        2884,
        2884
      ],
      "valid"
    ],
    [
      [
        2885,
        2886
      ],
      "disallowed"
    ],
    [
      [
        2887,
        2888
      ],
      "valid"
    ],
    [
      [
        2889,
        2890
      ],
      "disallowed"
    ],
    [
      [
        2891,
        2893
      ],
      "valid"
    ],
    [
      [
        2894,
        2901
      ],
      "disallowed"
    ],
    [
      [
        2902,
        2903
      ],
      "valid"
    ],
    [
      [
        2904,
        2907
      ],
      "disallowed"
    ],
    [
      [
        2908,
        2908
      ],
      "mapped",
      [
        2849,
        2876
      ]
    ],
    [
      [
        2909,
        2909
      ],
      "mapped",
      [
        2850,
        2876
      ]
    ],
    [
      [
        2910,
        2910
      ],
      "disallowed"
    ],
    [
      [
        2911,
        2913
      ],
      "valid"
    ],
    [
      [
        2914,
        2915
      ],
      "valid"
    ],
    [
      [
        2916,
        2917
      ],
      "disallowed"
    ],
    [
      [
        2918,
        2927
      ],
      "valid"
    ],
    [
      [
        2928,
        2928
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2929,
        2929
      ],
      "valid"
    ],
    [
      [
        2930,
        2935
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        2936,
        2945
      ],
      "disallowed"
    ],
    [
      [
        2946,
        2947
      ],
      "valid"
    ],
    [
      [
        2948,
        2948
      ],
      "disallowed"
    ],
    [
      [
        2949,
        2954
      ],
      "valid"
    ],
    [
      [
        2955,
        2957
      ],
      "disallowed"
    ],
    [
      [
        2958,
        2960
      ],
      "valid"
    ],
    [
      [
        2961,
        2961
      ],
      "disallowed"
    ],
    [
      [
        2962,
        2965
      ],
      "valid"
    ],
    [
      [
        2966,
        2968
      ],
      "disallowed"
    ],
    [
      [
        2969,
        2970
      ],
      "valid"
    ],
    [
      [
        2971,
        2971
      ],
      "disallowed"
    ],
    [
      [
        2972,
        2972
      ],
      "valid"
    ],
    [
      [
        2973,
        2973
      ],
      "disallowed"
    ],
    [
      [
        2974,
        2975
      ],
      "valid"
    ],
    [
      [
        2976,
        2978
      ],
      "disallowed"
    ],
    [
      [
        2979,
        2980
      ],
      "valid"
    ],
    [
      [
        2981,
        2983
      ],
      "disallowed"
    ],
    [
      [
        2984,
        2986
      ],
      "valid"
    ],
    [
      [
        2987,
        2989
      ],
      "disallowed"
    ],
    [
      [
        2990,
        2997
      ],
      "valid"
    ],
    [
      [
        2998,
        2998
      ],
      "valid"
    ],
    [
      [
        2999,
        3001
      ],
      "valid"
    ],
    [
      [
        3002,
        3005
      ],
      "disallowed"
    ],
    [
      [
        3006,
        3010
      ],
      "valid"
    ],
    [
      [
        3011,
        3013
      ],
      "disallowed"
    ],
    [
      [
        3014,
        3016
      ],
      "valid"
    ],
    [
      [
        3017,
        3017
      ],
      "disallowed"
    ],
    [
      [
        3018,
        3021
      ],
      "valid"
    ],
    [
      [
        3022,
        3023
      ],
      "disallowed"
    ],
    [
      [
        3024,
        3024
      ],
      "valid"
    ],
    [
      [
        3025,
        3030
      ],
      "disallowed"
    ],
    [
      [
        3031,
        3031
      ],
      "valid"
    ],
    [
      [
        3032,
        3045
      ],
      "disallowed"
    ],
    [
      [
        3046,
        3046
      ],
      "valid"
    ],
    [
      [
        3047,
        3055
      ],
      "valid"
    ],
    [
      [
        3056,
        3058
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3059,
        3066
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3067,
        3071
      ],
      "disallowed"
    ],
    [
      [
        3072,
        3072
      ],
      "valid"
    ],
    [
      [
        3073,
        3075
      ],
      "valid"
    ],
    [
      [
        3076,
        3076
      ],
      "disallowed"
    ],
    [
      [
        3077,
        3084
      ],
      "valid"
    ],
    [
      [
        3085,
        3085
      ],
      "disallowed"
    ],
    [
      [
        3086,
        3088
      ],
      "valid"
    ],
    [
      [
        3089,
        3089
      ],
      "disallowed"
    ],
    [
      [
        3090,
        3112
      ],
      "valid"
    ],
    [
      [
        3113,
        3113
      ],
      "disallowed"
    ],
    [
      [
        3114,
        3123
      ],
      "valid"
    ],
    [
      [
        3124,
        3124
      ],
      "valid"
    ],
    [
      [
        3125,
        3129
      ],
      "valid"
    ],
    [
      [
        3130,
        3132
      ],
      "disallowed"
    ],
    [
      [
        3133,
        3133
      ],
      "valid"
    ],
    [
      [
        3134,
        3140
      ],
      "valid"
    ],
    [
      [
        3141,
        3141
      ],
      "disallowed"
    ],
    [
      [
        3142,
        3144
      ],
      "valid"
    ],
    [
      [
        3145,
        3145
      ],
      "disallowed"
    ],
    [
      [
        3146,
        3149
      ],
      "valid"
    ],
    [
      [
        3150,
        3156
      ],
      "disallowed"
    ],
    [
      [
        3157,
        3158
      ],
      "valid"
    ],
    [
      [
        3159,
        3159
      ],
      "disallowed"
    ],
    [
      [
        3160,
        3161
      ],
      "valid"
    ],
    [
      [
        3162,
        3162
      ],
      "valid"
    ],
    [
      [
        3163,
        3167
      ],
      "disallowed"
    ],
    [
      [
        3168,
        3169
      ],
      "valid"
    ],
    [
      [
        3170,
        3171
      ],
      "valid"
    ],
    [
      [
        3172,
        3173
      ],
      "disallowed"
    ],
    [
      [
        3174,
        3183
      ],
      "valid"
    ],
    [
      [
        3184,
        3191
      ],
      "disallowed"
    ],
    [
      [
        3192,
        3199
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3200,
        3200
      ],
      "disallowed"
    ],
    [
      [
        3201,
        3201
      ],
      "valid"
    ],
    [
      [
        3202,
        3203
      ],
      "valid"
    ],
    [
      [
        3204,
        3204
      ],
      "disallowed"
    ],
    [
      [
        3205,
        3212
      ],
      "valid"
    ],
    [
      [
        3213,
        3213
      ],
      "disallowed"
    ],
    [
      [
        3214,
        3216
      ],
      "valid"
    ],
    [
      [
        3217,
        3217
      ],
      "disallowed"
    ],
    [
      [
        3218,
        3240
      ],
      "valid"
    ],
    [
      [
        3241,
        3241
      ],
      "disallowed"
    ],
    [
      [
        3242,
        3251
      ],
      "valid"
    ],
    [
      [
        3252,
        3252
      ],
      "disallowed"
    ],
    [
      [
        3253,
        3257
      ],
      "valid"
    ],
    [
      [
        3258,
        3259
      ],
      "disallowed"
    ],
    [
      [
        3260,
        3261
      ],
      "valid"
    ],
    [
      [
        3262,
        3268
      ],
      "valid"
    ],
    [
      [
        3269,
        3269
      ],
      "disallowed"
    ],
    [
      [
        3270,
        3272
      ],
      "valid"
    ],
    [
      [
        3273,
        3273
      ],
      "disallowed"
    ],
    [
      [
        3274,
        3277
      ],
      "valid"
    ],
    [
      [
        3278,
        3284
      ],
      "disallowed"
    ],
    [
      [
        3285,
        3286
      ],
      "valid"
    ],
    [
      [
        3287,
        3293
      ],
      "disallowed"
    ],
    [
      [
        3294,
        3294
      ],
      "valid"
    ],
    [
      [
        3295,
        3295
      ],
      "disallowed"
    ],
    [
      [
        3296,
        3297
      ],
      "valid"
    ],
    [
      [
        3298,
        3299
      ],
      "valid"
    ],
    [
      [
        3300,
        3301
      ],
      "disallowed"
    ],
    [
      [
        3302,
        3311
      ],
      "valid"
    ],
    [
      [
        3312,
        3312
      ],
      "disallowed"
    ],
    [
      [
        3313,
        3314
      ],
      "valid"
    ],
    [
      [
        3315,
        3328
      ],
      "disallowed"
    ],
    [
      [
        3329,
        3329
      ],
      "valid"
    ],
    [
      [
        3330,
        3331
      ],
      "valid"
    ],
    [
      [
        3332,
        3332
      ],
      "disallowed"
    ],
    [
      [
        3333,
        3340
      ],
      "valid"
    ],
    [
      [
        3341,
        3341
      ],
      "disallowed"
    ],
    [
      [
        3342,
        3344
      ],
      "valid"
    ],
    [
      [
        3345,
        3345
      ],
      "disallowed"
    ],
    [
      [
        3346,
        3368
      ],
      "valid"
    ],
    [
      [
        3369,
        3369
      ],
      "valid"
    ],
    [
      [
        3370,
        3385
      ],
      "valid"
    ],
    [
      [
        3386,
        3386
      ],
      "valid"
    ],
    [
      [
        3387,
        3388
      ],
      "disallowed"
    ],
    [
      [
        3389,
        3389
      ],
      "valid"
    ],
    [
      [
        3390,
        3395
      ],
      "valid"
    ],
    [
      [
        3396,
        3396
      ],
      "valid"
    ],
    [
      [
        3397,
        3397
      ],
      "disallowed"
    ],
    [
      [
        3398,
        3400
      ],
      "valid"
    ],
    [
      [
        3401,
        3401
      ],
      "disallowed"
    ],
    [
      [
        3402,
        3405
      ],
      "valid"
    ],
    [
      [
        3406,
        3406
      ],
      "valid"
    ],
    [
      [
        3407,
        3414
      ],
      "disallowed"
    ],
    [
      [
        3415,
        3415
      ],
      "valid"
    ],
    [
      [
        3416,
        3422
      ],
      "disallowed"
    ],
    [
      [
        3423,
        3423
      ],
      "valid"
    ],
    [
      [
        3424,
        3425
      ],
      "valid"
    ],
    [
      [
        3426,
        3427
      ],
      "valid"
    ],
    [
      [
        3428,
        3429
      ],
      "disallowed"
    ],
    [
      [
        3430,
        3439
      ],
      "valid"
    ],
    [
      [
        3440,
        3445
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3446,
        3448
      ],
      "disallowed"
    ],
    [
      [
        3449,
        3449
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3450,
        3455
      ],
      "valid"
    ],
    [
      [
        3456,
        3457
      ],
      "disallowed"
    ],
    [
      [
        3458,
        3459
      ],
      "valid"
    ],
    [
      [
        3460,
        3460
      ],
      "disallowed"
    ],
    [
      [
        3461,
        3478
      ],
      "valid"
    ],
    [
      [
        3479,
        3481
      ],
      "disallowed"
    ],
    [
      [
        3482,
        3505
      ],
      "valid"
    ],
    [
      [
        3506,
        3506
      ],
      "disallowed"
    ],
    [
      [
        3507,
        3515
      ],
      "valid"
    ],
    [
      [
        3516,
        3516
      ],
      "disallowed"
    ],
    [
      [
        3517,
        3517
      ],
      "valid"
    ],
    [
      [
        3518,
        3519
      ],
      "disallowed"
    ],
    [
      [
        3520,
        3526
      ],
      "valid"
    ],
    [
      [
        3527,
        3529
      ],
      "disallowed"
    ],
    [
      [
        3530,
        3530
      ],
      "valid"
    ],
    [
      [
        3531,
        3534
      ],
      "disallowed"
    ],
    [
      [
        3535,
        3540
      ],
      "valid"
    ],
    [
      [
        3541,
        3541
      ],
      "disallowed"
    ],
    [
      [
        3542,
        3542
      ],
      "valid"
    ],
    [
      [
        3543,
        3543
      ],
      "disallowed"
    ],
    [
      [
        3544,
        3551
      ],
      "valid"
    ],
    [
      [
        3552,
        3557
      ],
      "disallowed"
    ],
    [
      [
        3558,
        3567
      ],
      "valid"
    ],
    [
      [
        3568,
        3569
      ],
      "disallowed"
    ],
    [
      [
        3570,
        3571
      ],
      "valid"
    ],
    [
      [
        3572,
        3572
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3573,
        3584
      ],
      "disallowed"
    ],
    [
      [
        3585,
        3634
      ],
      "valid"
    ],
    [
      [
        3635,
        3635
      ],
      "mapped",
      [
        3661,
        3634
      ]
    ],
    [
      [
        3636,
        3642
      ],
      "valid"
    ],
    [
      [
        3643,
        3646
      ],
      "disallowed"
    ],
    [
      [
        3647,
        3647
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3648,
        3662
      ],
      "valid"
    ],
    [
      [
        3663,
        3663
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3664,
        3673
      ],
      "valid"
    ],
    [
      [
        3674,
        3675
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3676,
        3712
      ],
      "disallowed"
    ],
    [
      [
        3713,
        3714
      ],
      "valid"
    ],
    [
      [
        3715,
        3715
      ],
      "disallowed"
    ],
    [
      [
        3716,
        3716
      ],
      "valid"
    ],
    [
      [
        3717,
        3718
      ],
      "disallowed"
    ],
    [
      [
        3719,
        3720
      ],
      "valid"
    ],
    [
      [
        3721,
        3721
      ],
      "disallowed"
    ],
    [
      [
        3722,
        3722
      ],
      "valid"
    ],
    [
      [
        3723,
        3724
      ],
      "disallowed"
    ],
    [
      [
        3725,
        3725
      ],
      "valid"
    ],
    [
      [
        3726,
        3731
      ],
      "disallowed"
    ],
    [
      [
        3732,
        3735
      ],
      "valid"
    ],
    [
      [
        3736,
        3736
      ],
      "disallowed"
    ],
    [
      [
        3737,
        3743
      ],
      "valid"
    ],
    [
      [
        3744,
        3744
      ],
      "disallowed"
    ],
    [
      [
        3745,
        3747
      ],
      "valid"
    ],
    [
      [
        3748,
        3748
      ],
      "disallowed"
    ],
    [
      [
        3749,
        3749
      ],
      "valid"
    ],
    [
      [
        3750,
        3750
      ],
      "disallowed"
    ],
    [
      [
        3751,
        3751
      ],
      "valid"
    ],
    [
      [
        3752,
        3753
      ],
      "disallowed"
    ],
    [
      [
        3754,
        3755
      ],
      "valid"
    ],
    [
      [
        3756,
        3756
      ],
      "disallowed"
    ],
    [
      [
        3757,
        3762
      ],
      "valid"
    ],
    [
      [
        3763,
        3763
      ],
      "mapped",
      [
        3789,
        3762
      ]
    ],
    [
      [
        3764,
        3769
      ],
      "valid"
    ],
    [
      [
        3770,
        3770
      ],
      "disallowed"
    ],
    [
      [
        3771,
        3773
      ],
      "valid"
    ],
    [
      [
        3774,
        3775
      ],
      "disallowed"
    ],
    [
      [
        3776,
        3780
      ],
      "valid"
    ],
    [
      [
        3781,
        3781
      ],
      "disallowed"
    ],
    [
      [
        3782,
        3782
      ],
      "valid"
    ],
    [
      [
        3783,
        3783
      ],
      "disallowed"
    ],
    [
      [
        3784,
        3789
      ],
      "valid"
    ],
    [
      [
        3790,
        3791
      ],
      "disallowed"
    ],
    [
      [
        3792,
        3801
      ],
      "valid"
    ],
    [
      [
        3802,
        3803
      ],
      "disallowed"
    ],
    [
      [
        3804,
        3804
      ],
      "mapped",
      [
        3755,
        3737
      ]
    ],
    [
      [
        3805,
        3805
      ],
      "mapped",
      [
        3755,
        3745
      ]
    ],
    [
      [
        3806,
        3807
      ],
      "valid"
    ],
    [
      [
        3808,
        3839
      ],
      "disallowed"
    ],
    [
      [
        3840,
        3840
      ],
      "valid"
    ],
    [
      [
        3841,
        3850
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3851,
        3851
      ],
      "valid"
    ],
    [
      [
        3852,
        3852
      ],
      "mapped",
      [
        3851
      ]
    ],
    [
      [
        3853,
        3863
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3864,
        3865
      ],
      "valid"
    ],
    [
      [
        3866,
        3871
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3872,
        3881
      ],
      "valid"
    ],
    [
      [
        3882,
        3892
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3893,
        3893
      ],
      "valid"
    ],
    [
      [
        3894,
        3894
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3895,
        3895
      ],
      "valid"
    ],
    [
      [
        3896,
        3896
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3897,
        3897
      ],
      "valid"
    ],
    [
      [
        3898,
        3901
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3902,
        3906
      ],
      "valid"
    ],
    [
      [
        3907,
        3907
      ],
      "mapped",
      [
        3906,
        4023
      ]
    ],
    [
      [
        3908,
        3911
      ],
      "valid"
    ],
    [
      [
        3912,
        3912
      ],
      "disallowed"
    ],
    [
      [
        3913,
        3916
      ],
      "valid"
    ],
    [
      [
        3917,
        3917
      ],
      "mapped",
      [
        3916,
        4023
      ]
    ],
    [
      [
        3918,
        3921
      ],
      "valid"
    ],
    [
      [
        3922,
        3922
      ],
      "mapped",
      [
        3921,
        4023
      ]
    ],
    [
      [
        3923,
        3926
      ],
      "valid"
    ],
    [
      [
        3927,
        3927
      ],
      "mapped",
      [
        3926,
        4023
      ]
    ],
    [
      [
        3928,
        3931
      ],
      "valid"
    ],
    [
      [
        3932,
        3932
      ],
      "mapped",
      [
        3931,
        4023
      ]
    ],
    [
      [
        3933,
        3944
      ],
      "valid"
    ],
    [
      [
        3945,
        3945
      ],
      "mapped",
      [
        3904,
        4021
      ]
    ],
    [
      [
        3946,
        3946
      ],
      "valid"
    ],
    [
      [
        3947,
        3948
      ],
      "valid"
    ],
    [
      [
        3949,
        3952
      ],
      "disallowed"
    ],
    [
      [
        3953,
        3954
      ],
      "valid"
    ],
    [
      [
        3955,
        3955
      ],
      "mapped",
      [
        3953,
        3954
      ]
    ],
    [
      [
        3956,
        3956
      ],
      "valid"
    ],
    [
      [
        3957,
        3957
      ],
      "mapped",
      [
        3953,
        3956
      ]
    ],
    [
      [
        3958,
        3958
      ],
      "mapped",
      [
        4018,
        3968
      ]
    ],
    [
      [
        3959,
        3959
      ],
      "mapped",
      [
        4018,
        3953,
        3968
      ]
    ],
    [
      [
        3960,
        3960
      ],
      "mapped",
      [
        4019,
        3968
      ]
    ],
    [
      [
        3961,
        3961
      ],
      "mapped",
      [
        4019,
        3953,
        3968
      ]
    ],
    [
      [
        3962,
        3968
      ],
      "valid"
    ],
    [
      [
        3969,
        3969
      ],
      "mapped",
      [
        3953,
        3968
      ]
    ],
    [
      [
        3970,
        3972
      ],
      "valid"
    ],
    [
      [
        3973,
        3973
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        3974,
        3979
      ],
      "valid"
    ],
    [
      [
        3980,
        3983
      ],
      "valid"
    ],
    [
      [
        3984,
        3986
      ],
      "valid"
    ],
    [
      [
        3987,
        3987
      ],
      "mapped",
      [
        3986,
        4023
      ]
    ],
    [
      [
        3988,
        3989
      ],
      "valid"
    ],
    [
      [
        3990,
        3990
      ],
      "valid"
    ],
    [
      [
        3991,
        3991
      ],
      "valid"
    ],
    [
      [
        3992,
        3992
      ],
      "disallowed"
    ],
    [
      [
        3993,
        3996
      ],
      "valid"
    ],
    [
      [
        3997,
        3997
      ],
      "mapped",
      [
        3996,
        4023
      ]
    ],
    [
      [
        3998,
        4001
      ],
      "valid"
    ],
    [
      [
        4002,
        4002
      ],
      "mapped",
      [
        4001,
        4023
      ]
    ],
    [
      [
        4003,
        4006
      ],
      "valid"
    ],
    [
      [
        4007,
        4007
      ],
      "mapped",
      [
        4006,
        4023
      ]
    ],
    [
      [
        4008,
        4011
      ],
      "valid"
    ],
    [
      [
        4012,
        4012
      ],
      "mapped",
      [
        4011,
        4023
      ]
    ],
    [
      [
        4013,
        4013
      ],
      "valid"
    ],
    [
      [
        4014,
        4016
      ],
      "valid"
    ],
    [
      [
        4017,
        4023
      ],
      "valid"
    ],
    [
      [
        4024,
        4024
      ],
      "valid"
    ],
    [
      [
        4025,
        4025
      ],
      "mapped",
      [
        3984,
        4021
      ]
    ],
    [
      [
        4026,
        4028
      ],
      "valid"
    ],
    [
      [
        4029,
        4029
      ],
      "disallowed"
    ],
    [
      [
        4030,
        4037
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4038,
        4038
      ],
      "valid"
    ],
    [
      [
        4039,
        4044
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4045,
        4045
      ],
      "disallowed"
    ],
    [
      [
        4046,
        4046
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4047,
        4047
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4048,
        4049
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4050,
        4052
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4053,
        4056
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4057,
        4058
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4059,
        4095
      ],
      "disallowed"
    ],
    [
      [
        4096,
        4129
      ],
      "valid"
    ],
    [
      [
        4130,
        4130
      ],
      "valid"
    ],
    [
      [
        4131,
        4135
      ],
      "valid"
    ],
    [
      [
        4136,
        4136
      ],
      "valid"
    ],
    [
      [
        4137,
        4138
      ],
      "valid"
    ],
    [
      [
        4139,
        4139
      ],
      "valid"
    ],
    [
      [
        4140,
        4146
      ],
      "valid"
    ],
    [
      [
        4147,
        4149
      ],
      "valid"
    ],
    [
      [
        4150,
        4153
      ],
      "valid"
    ],
    [
      [
        4154,
        4159
      ],
      "valid"
    ],
    [
      [
        4160,
        4169
      ],
      "valid"
    ],
    [
      [
        4170,
        4175
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4176,
        4185
      ],
      "valid"
    ],
    [
      [
        4186,
        4249
      ],
      "valid"
    ],
    [
      [
        4250,
        4253
      ],
      "valid"
    ],
    [
      [
        4254,
        4255
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4256,
        4293
      ],
      "disallowed"
    ],
    [
      [
        4294,
        4294
      ],
      "disallowed"
    ],
    [
      [
        4295,
        4295
      ],
      "mapped",
      [
        11559
      ]
    ],
    [
      [
        4296,
        4300
      ],
      "disallowed"
    ],
    [
      [
        4301,
        4301
      ],
      "mapped",
      [
        11565
      ]
    ],
    [
      [
        4302,
        4303
      ],
      "disallowed"
    ],
    [
      [
        4304,
        4342
      ],
      "valid"
    ],
    [
      [
        4343,
        4344
      ],
      "valid"
    ],
    [
      [
        4345,
        4346
      ],
      "valid"
    ],
    [
      [
        4347,
        4347
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4348,
        4348
      ],
      "mapped",
      [
        4316
      ]
    ],
    [
      [
        4349,
        4351
      ],
      "valid"
    ],
    [
      [
        4352,
        4441
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4442,
        4446
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4447,
        4448
      ],
      "disallowed"
    ],
    [
      [
        4449,
        4514
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4515,
        4519
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4520,
        4601
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4602,
        4607
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4608,
        4614
      ],
      "valid"
    ],
    [
      [
        4615,
        4615
      ],
      "valid"
    ],
    [
      [
        4616,
        4678
      ],
      "valid"
    ],
    [
      [
        4679,
        4679
      ],
      "valid"
    ],
    [
      [
        4680,
        4680
      ],
      "valid"
    ],
    [
      [
        4681,
        4681
      ],
      "disallowed"
    ],
    [
      [
        4682,
        4685
      ],
      "valid"
    ],
    [
      [
        4686,
        4687
      ],
      "disallowed"
    ],
    [
      [
        4688,
        4694
      ],
      "valid"
    ],
    [
      [
        4695,
        4695
      ],
      "disallowed"
    ],
    [
      [
        4696,
        4696
      ],
      "valid"
    ],
    [
      [
        4697,
        4697
      ],
      "disallowed"
    ],
    [
      [
        4698,
        4701
      ],
      "valid"
    ],
    [
      [
        4702,
        4703
      ],
      "disallowed"
    ],
    [
      [
        4704,
        4742
      ],
      "valid"
    ],
    [
      [
        4743,
        4743
      ],
      "valid"
    ],
    [
      [
        4744,
        4744
      ],
      "valid"
    ],
    [
      [
        4745,
        4745
      ],
      "disallowed"
    ],
    [
      [
        4746,
        4749
      ],
      "valid"
    ],
    [
      [
        4750,
        4751
      ],
      "disallowed"
    ],
    [
      [
        4752,
        4782
      ],
      "valid"
    ],
    [
      [
        4783,
        4783
      ],
      "valid"
    ],
    [
      [
        4784,
        4784
      ],
      "valid"
    ],
    [
      [
        4785,
        4785
      ],
      "disallowed"
    ],
    [
      [
        4786,
        4789
      ],
      "valid"
    ],
    [
      [
        4790,
        4791
      ],
      "disallowed"
    ],
    [
      [
        4792,
        4798
      ],
      "valid"
    ],
    [
      [
        4799,
        4799
      ],
      "disallowed"
    ],
    [
      [
        4800,
        4800
      ],
      "valid"
    ],
    [
      [
        4801,
        4801
      ],
      "disallowed"
    ],
    [
      [
        4802,
        4805
      ],
      "valid"
    ],
    [
      [
        4806,
        4807
      ],
      "disallowed"
    ],
    [
      [
        4808,
        4814
      ],
      "valid"
    ],
    [
      [
        4815,
        4815
      ],
      "valid"
    ],
    [
      [
        4816,
        4822
      ],
      "valid"
    ],
    [
      [
        4823,
        4823
      ],
      "disallowed"
    ],
    [
      [
        4824,
        4846
      ],
      "valid"
    ],
    [
      [
        4847,
        4847
      ],
      "valid"
    ],
    [
      [
        4848,
        4878
      ],
      "valid"
    ],
    [
      [
        4879,
        4879
      ],
      "valid"
    ],
    [
      [
        4880,
        4880
      ],
      "valid"
    ],
    [
      [
        4881,
        4881
      ],
      "disallowed"
    ],
    [
      [
        4882,
        4885
      ],
      "valid"
    ],
    [
      [
        4886,
        4887
      ],
      "disallowed"
    ],
    [
      [
        4888,
        4894
      ],
      "valid"
    ],
    [
      [
        4895,
        4895
      ],
      "valid"
    ],
    [
      [
        4896,
        4934
      ],
      "valid"
    ],
    [
      [
        4935,
        4935
      ],
      "valid"
    ],
    [
      [
        4936,
        4954
      ],
      "valid"
    ],
    [
      [
        4955,
        4956
      ],
      "disallowed"
    ],
    [
      [
        4957,
        4958
      ],
      "valid"
    ],
    [
      [
        4959,
        4959
      ],
      "valid"
    ],
    [
      [
        4960,
        4960
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4961,
        4988
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        4989,
        4991
      ],
      "disallowed"
    ],
    [
      [
        4992,
        5007
      ],
      "valid"
    ],
    [
      [
        5008,
        5017
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5018,
        5023
      ],
      "disallowed"
    ],
    [
      [
        5024,
        5108
      ],
      "valid"
    ],
    [
      [
        5109,
        5109
      ],
      "valid"
    ],
    [
      [
        5110,
        5111
      ],
      "disallowed"
    ],
    [
      [
        5112,
        5112
      ],
      "mapped",
      [
        5104
      ]
    ],
    [
      [
        5113,
        5113
      ],
      "mapped",
      [
        5105
      ]
    ],
    [
      [
        5114,
        5114
      ],
      "mapped",
      [
        5106
      ]
    ],
    [
      [
        5115,
        5115
      ],
      "mapped",
      [
        5107
      ]
    ],
    [
      [
        5116,
        5116
      ],
      "mapped",
      [
        5108
      ]
    ],
    [
      [
        5117,
        5117
      ],
      "mapped",
      [
        5109
      ]
    ],
    [
      [
        5118,
        5119
      ],
      "disallowed"
    ],
    [
      [
        5120,
        5120
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5121,
        5740
      ],
      "valid"
    ],
    [
      [
        5741,
        5742
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5743,
        5750
      ],
      "valid"
    ],
    [
      [
        5751,
        5759
      ],
      "valid"
    ],
    [
      [
        5760,
        5760
      ],
      "disallowed"
    ],
    [
      [
        5761,
        5786
      ],
      "valid"
    ],
    [
      [
        5787,
        5788
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5789,
        5791
      ],
      "disallowed"
    ],
    [
      [
        5792,
        5866
      ],
      "valid"
    ],
    [
      [
        5867,
        5872
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5873,
        5880
      ],
      "valid"
    ],
    [
      [
        5881,
        5887
      ],
      "disallowed"
    ],
    [
      [
        5888,
        5900
      ],
      "valid"
    ],
    [
      [
        5901,
        5901
      ],
      "disallowed"
    ],
    [
      [
        5902,
        5908
      ],
      "valid"
    ],
    [
      [
        5909,
        5919
      ],
      "disallowed"
    ],
    [
      [
        5920,
        5940
      ],
      "valid"
    ],
    [
      [
        5941,
        5942
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        5943,
        5951
      ],
      "disallowed"
    ],
    [
      [
        5952,
        5971
      ],
      "valid"
    ],
    [
      [
        5972,
        5983
      ],
      "disallowed"
    ],
    [
      [
        5984,
        5996
      ],
      "valid"
    ],
    [
      [
        5997,
        5997
      ],
      "disallowed"
    ],
    [
      [
        5998,
        6e3
      ],
      "valid"
    ],
    [
      [
        6001,
        6001
      ],
      "disallowed"
    ],
    [
      [
        6002,
        6003
      ],
      "valid"
    ],
    [
      [
        6004,
        6015
      ],
      "disallowed"
    ],
    [
      [
        6016,
        6067
      ],
      "valid"
    ],
    [
      [
        6068,
        6069
      ],
      "disallowed"
    ],
    [
      [
        6070,
        6099
      ],
      "valid"
    ],
    [
      [
        6100,
        6102
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6103,
        6103
      ],
      "valid"
    ],
    [
      [
        6104,
        6107
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6108,
        6108
      ],
      "valid"
    ],
    [
      [
        6109,
        6109
      ],
      "valid"
    ],
    [
      [
        6110,
        6111
      ],
      "disallowed"
    ],
    [
      [
        6112,
        6121
      ],
      "valid"
    ],
    [
      [
        6122,
        6127
      ],
      "disallowed"
    ],
    [
      [
        6128,
        6137
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6138,
        6143
      ],
      "disallowed"
    ],
    [
      [
        6144,
        6149
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6150,
        6150
      ],
      "disallowed"
    ],
    [
      [
        6151,
        6154
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6155,
        6157
      ],
      "ignored"
    ],
    [
      [
        6158,
        6158
      ],
      "disallowed"
    ],
    [
      [
        6159,
        6159
      ],
      "disallowed"
    ],
    [
      [
        6160,
        6169
      ],
      "valid"
    ],
    [
      [
        6170,
        6175
      ],
      "disallowed"
    ],
    [
      [
        6176,
        6263
      ],
      "valid"
    ],
    [
      [
        6264,
        6271
      ],
      "disallowed"
    ],
    [
      [
        6272,
        6313
      ],
      "valid"
    ],
    [
      [
        6314,
        6314
      ],
      "valid"
    ],
    [
      [
        6315,
        6319
      ],
      "disallowed"
    ],
    [
      [
        6320,
        6389
      ],
      "valid"
    ],
    [
      [
        6390,
        6399
      ],
      "disallowed"
    ],
    [
      [
        6400,
        6428
      ],
      "valid"
    ],
    [
      [
        6429,
        6430
      ],
      "valid"
    ],
    [
      [
        6431,
        6431
      ],
      "disallowed"
    ],
    [
      [
        6432,
        6443
      ],
      "valid"
    ],
    [
      [
        6444,
        6447
      ],
      "disallowed"
    ],
    [
      [
        6448,
        6459
      ],
      "valid"
    ],
    [
      [
        6460,
        6463
      ],
      "disallowed"
    ],
    [
      [
        6464,
        6464
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6465,
        6467
      ],
      "disallowed"
    ],
    [
      [
        6468,
        6469
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6470,
        6509
      ],
      "valid"
    ],
    [
      [
        6510,
        6511
      ],
      "disallowed"
    ],
    [
      [
        6512,
        6516
      ],
      "valid"
    ],
    [
      [
        6517,
        6527
      ],
      "disallowed"
    ],
    [
      [
        6528,
        6569
      ],
      "valid"
    ],
    [
      [
        6570,
        6571
      ],
      "valid"
    ],
    [
      [
        6572,
        6575
      ],
      "disallowed"
    ],
    [
      [
        6576,
        6601
      ],
      "valid"
    ],
    [
      [
        6602,
        6607
      ],
      "disallowed"
    ],
    [
      [
        6608,
        6617
      ],
      "valid"
    ],
    [
      [
        6618,
        6618
      ],
      "valid",
      [],
      "XV8"
    ],
    [
      [
        6619,
        6621
      ],
      "disallowed"
    ],
    [
      [
        6622,
        6623
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6624,
        6655
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6656,
        6683
      ],
      "valid"
    ],
    [
      [
        6684,
        6685
      ],
      "disallowed"
    ],
    [
      [
        6686,
        6687
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6688,
        6750
      ],
      "valid"
    ],
    [
      [
        6751,
        6751
      ],
      "disallowed"
    ],
    [
      [
        6752,
        6780
      ],
      "valid"
    ],
    [
      [
        6781,
        6782
      ],
      "disallowed"
    ],
    [
      [
        6783,
        6793
      ],
      "valid"
    ],
    [
      [
        6794,
        6799
      ],
      "disallowed"
    ],
    [
      [
        6800,
        6809
      ],
      "valid"
    ],
    [
      [
        6810,
        6815
      ],
      "disallowed"
    ],
    [
      [
        6816,
        6822
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6823,
        6823
      ],
      "valid"
    ],
    [
      [
        6824,
        6829
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6830,
        6831
      ],
      "disallowed"
    ],
    [
      [
        6832,
        6845
      ],
      "valid"
    ],
    [
      [
        6846,
        6846
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        6847,
        6911
      ],
      "disallowed"
    ],
    [
      [
        6912,
        6987
      ],
      "valid"
    ],
    [
      [
        6988,
        6991
      ],
      "disallowed"
    ],
    [
      [
        6992,
        7001
      ],
      "valid"
    ],
    [
      [
        7002,
        7018
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7019,
        7027
      ],
      "valid"
    ],
    [
      [
        7028,
        7036
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7037,
        7039
      ],
      "disallowed"
    ],
    [
      [
        7040,
        7082
      ],
      "valid"
    ],
    [
      [
        7083,
        7085
      ],
      "valid"
    ],
    [
      [
        7086,
        7097
      ],
      "valid"
    ],
    [
      [
        7098,
        7103
      ],
      "valid"
    ],
    [
      [
        7104,
        7155
      ],
      "valid"
    ],
    [
      [
        7156,
        7163
      ],
      "disallowed"
    ],
    [
      [
        7164,
        7167
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7168,
        7223
      ],
      "valid"
    ],
    [
      [
        7224,
        7226
      ],
      "disallowed"
    ],
    [
      [
        7227,
        7231
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7232,
        7241
      ],
      "valid"
    ],
    [
      [
        7242,
        7244
      ],
      "disallowed"
    ],
    [
      [
        7245,
        7293
      ],
      "valid"
    ],
    [
      [
        7294,
        7295
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7296,
        7359
      ],
      "disallowed"
    ],
    [
      [
        7360,
        7367
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7368,
        7375
      ],
      "disallowed"
    ],
    [
      [
        7376,
        7378
      ],
      "valid"
    ],
    [
      [
        7379,
        7379
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        7380,
        7410
      ],
      "valid"
    ],
    [
      [
        7411,
        7414
      ],
      "valid"
    ],
    [
      [
        7415,
        7415
      ],
      "disallowed"
    ],
    [
      [
        7416,
        7417
      ],
      "valid"
    ],
    [
      [
        7418,
        7423
      ],
      "disallowed"
    ],
    [
      [
        7424,
        7467
      ],
      "valid"
    ],
    [
      [
        7468,
        7468
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        7469,
        7469
      ],
      "mapped",
      [
        230
      ]
    ],
    [
      [
        7470,
        7470
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        7471,
        7471
      ],
      "valid"
    ],
    [
      [
        7472,
        7472
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        7473,
        7473
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        7474,
        7474
      ],
      "mapped",
      [
        477
      ]
    ],
    [
      [
        7475,
        7475
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        7476,
        7476
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        7477,
        7477
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        7478,
        7478
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        7479,
        7479
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        7480,
        7480
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        7481,
        7481
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        7482,
        7482
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        7483,
        7483
      ],
      "valid"
    ],
    [
      [
        7484,
        7484
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        7485,
        7485
      ],
      "mapped",
      [
        547
      ]
    ],
    [
      [
        7486,
        7486
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        7487,
        7487
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        7488,
        7488
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        7489,
        7489
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        7490,
        7490
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        7491,
        7491
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        7492,
        7492
      ],
      "mapped",
      [
        592
      ]
    ],
    [
      [
        7493,
        7493
      ],
      "mapped",
      [
        593
      ]
    ],
    [
      [
        7494,
        7494
      ],
      "mapped",
      [
        7426
      ]
    ],
    [
      [
        7495,
        7495
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        7496,
        7496
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        7497,
        7497
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        7498,
        7498
      ],
      "mapped",
      [
        601
      ]
    ],
    [
      [
        7499,
        7499
      ],
      "mapped",
      [
        603
      ]
    ],
    [
      [
        7500,
        7500
      ],
      "mapped",
      [
        604
      ]
    ],
    [
      [
        7501,
        7501
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        7502,
        7502
      ],
      "valid"
    ],
    [
      [
        7503,
        7503
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        7504,
        7504
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        7505,
        7505
      ],
      "mapped",
      [
        331
      ]
    ],
    [
      [
        7506,
        7506
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        7507,
        7507
      ],
      "mapped",
      [
        596
      ]
    ],
    [
      [
        7508,
        7508
      ],
      "mapped",
      [
        7446
      ]
    ],
    [
      [
        7509,
        7509
      ],
      "mapped",
      [
        7447
      ]
    ],
    [
      [
        7510,
        7510
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        7511,
        7511
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        7512,
        7512
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        7513,
        7513
      ],
      "mapped",
      [
        7453
      ]
    ],
    [
      [
        7514,
        7514
      ],
      "mapped",
      [
        623
      ]
    ],
    [
      [
        7515,
        7515
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        7516,
        7516
      ],
      "mapped",
      [
        7461
      ]
    ],
    [
      [
        7517,
        7517
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        7518,
        7518
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        7519,
        7519
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        7520,
        7520
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        7521,
        7521
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        7522,
        7522
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        7523,
        7523
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        7524,
        7524
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        7525,
        7525
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        7526,
        7526
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        7527,
        7527
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        7528,
        7528
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        7529,
        7529
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        7530,
        7530
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        7531,
        7531
      ],
      "valid"
    ],
    [
      [
        7532,
        7543
      ],
      "valid"
    ],
    [
      [
        7544,
        7544
      ],
      "mapped",
      [
        1085
      ]
    ],
    [
      [
        7545,
        7578
      ],
      "valid"
    ],
    [
      [
        7579,
        7579
      ],
      "mapped",
      [
        594
      ]
    ],
    [
      [
        7580,
        7580
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        7581,
        7581
      ],
      "mapped",
      [
        597
      ]
    ],
    [
      [
        7582,
        7582
      ],
      "mapped",
      [
        240
      ]
    ],
    [
      [
        7583,
        7583
      ],
      "mapped",
      [
        604
      ]
    ],
    [
      [
        7584,
        7584
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        7585,
        7585
      ],
      "mapped",
      [
        607
      ]
    ],
    [
      [
        7586,
        7586
      ],
      "mapped",
      [
        609
      ]
    ],
    [
      [
        7587,
        7587
      ],
      "mapped",
      [
        613
      ]
    ],
    [
      [
        7588,
        7588
      ],
      "mapped",
      [
        616
      ]
    ],
    [
      [
        7589,
        7589
      ],
      "mapped",
      [
        617
      ]
    ],
    [
      [
        7590,
        7590
      ],
      "mapped",
      [
        618
      ]
    ],
    [
      [
        7591,
        7591
      ],
      "mapped",
      [
        7547
      ]
    ],
    [
      [
        7592,
        7592
      ],
      "mapped",
      [
        669
      ]
    ],
    [
      [
        7593,
        7593
      ],
      "mapped",
      [
        621
      ]
    ],
    [
      [
        7594,
        7594
      ],
      "mapped",
      [
        7557
      ]
    ],
    [
      [
        7595,
        7595
      ],
      "mapped",
      [
        671
      ]
    ],
    [
      [
        7596,
        7596
      ],
      "mapped",
      [
        625
      ]
    ],
    [
      [
        7597,
        7597
      ],
      "mapped",
      [
        624
      ]
    ],
    [
      [
        7598,
        7598
      ],
      "mapped",
      [
        626
      ]
    ],
    [
      [
        7599,
        7599
      ],
      "mapped",
      [
        627
      ]
    ],
    [
      [
        7600,
        7600
      ],
      "mapped",
      [
        628
      ]
    ],
    [
      [
        7601,
        7601
      ],
      "mapped",
      [
        629
      ]
    ],
    [
      [
        7602,
        7602
      ],
      "mapped",
      [
        632
      ]
    ],
    [
      [
        7603,
        7603
      ],
      "mapped",
      [
        642
      ]
    ],
    [
      [
        7604,
        7604
      ],
      "mapped",
      [
        643
      ]
    ],
    [
      [
        7605,
        7605
      ],
      "mapped",
      [
        427
      ]
    ],
    [
      [
        7606,
        7606
      ],
      "mapped",
      [
        649
      ]
    ],
    [
      [
        7607,
        7607
      ],
      "mapped",
      [
        650
      ]
    ],
    [
      [
        7608,
        7608
      ],
      "mapped",
      [
        7452
      ]
    ],
    [
      [
        7609,
        7609
      ],
      "mapped",
      [
        651
      ]
    ],
    [
      [
        7610,
        7610
      ],
      "mapped",
      [
        652
      ]
    ],
    [
      [
        7611,
        7611
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        7612,
        7612
      ],
      "mapped",
      [
        656
      ]
    ],
    [
      [
        7613,
        7613
      ],
      "mapped",
      [
        657
      ]
    ],
    [
      [
        7614,
        7614
      ],
      "mapped",
      [
        658
      ]
    ],
    [
      [
        7615,
        7615
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        7616,
        7619
      ],
      "valid"
    ],
    [
      [
        7620,
        7626
      ],
      "valid"
    ],
    [
      [
        7627,
        7654
      ],
      "valid"
    ],
    [
      [
        7655,
        7669
      ],
      "valid"
    ],
    [
      [
        7670,
        7675
      ],
      "disallowed"
    ],
    [
      [
        7676,
        7676
      ],
      "valid"
    ],
    [
      [
        7677,
        7677
      ],
      "valid"
    ],
    [
      [
        7678,
        7679
      ],
      "valid"
    ],
    [
      [
        7680,
        7680
      ],
      "mapped",
      [
        7681
      ]
    ],
    [
      [
        7681,
        7681
      ],
      "valid"
    ],
    [
      [
        7682,
        7682
      ],
      "mapped",
      [
        7683
      ]
    ],
    [
      [
        7683,
        7683
      ],
      "valid"
    ],
    [
      [
        7684,
        7684
      ],
      "mapped",
      [
        7685
      ]
    ],
    [
      [
        7685,
        7685
      ],
      "valid"
    ],
    [
      [
        7686,
        7686
      ],
      "mapped",
      [
        7687
      ]
    ],
    [
      [
        7687,
        7687
      ],
      "valid"
    ],
    [
      [
        7688,
        7688
      ],
      "mapped",
      [
        7689
      ]
    ],
    [
      [
        7689,
        7689
      ],
      "valid"
    ],
    [
      [
        7690,
        7690
      ],
      "mapped",
      [
        7691
      ]
    ],
    [
      [
        7691,
        7691
      ],
      "valid"
    ],
    [
      [
        7692,
        7692
      ],
      "mapped",
      [
        7693
      ]
    ],
    [
      [
        7693,
        7693
      ],
      "valid"
    ],
    [
      [
        7694,
        7694
      ],
      "mapped",
      [
        7695
      ]
    ],
    [
      [
        7695,
        7695
      ],
      "valid"
    ],
    [
      [
        7696,
        7696
      ],
      "mapped",
      [
        7697
      ]
    ],
    [
      [
        7697,
        7697
      ],
      "valid"
    ],
    [
      [
        7698,
        7698
      ],
      "mapped",
      [
        7699
      ]
    ],
    [
      [
        7699,
        7699
      ],
      "valid"
    ],
    [
      [
        7700,
        7700
      ],
      "mapped",
      [
        7701
      ]
    ],
    [
      [
        7701,
        7701
      ],
      "valid"
    ],
    [
      [
        7702,
        7702
      ],
      "mapped",
      [
        7703
      ]
    ],
    [
      [
        7703,
        7703
      ],
      "valid"
    ],
    [
      [
        7704,
        7704
      ],
      "mapped",
      [
        7705
      ]
    ],
    [
      [
        7705,
        7705
      ],
      "valid"
    ],
    [
      [
        7706,
        7706
      ],
      "mapped",
      [
        7707
      ]
    ],
    [
      [
        7707,
        7707
      ],
      "valid"
    ],
    [
      [
        7708,
        7708
      ],
      "mapped",
      [
        7709
      ]
    ],
    [
      [
        7709,
        7709
      ],
      "valid"
    ],
    [
      [
        7710,
        7710
      ],
      "mapped",
      [
        7711
      ]
    ],
    [
      [
        7711,
        7711
      ],
      "valid"
    ],
    [
      [
        7712,
        7712
      ],
      "mapped",
      [
        7713
      ]
    ],
    [
      [
        7713,
        7713
      ],
      "valid"
    ],
    [
      [
        7714,
        7714
      ],
      "mapped",
      [
        7715
      ]
    ],
    [
      [
        7715,
        7715
      ],
      "valid"
    ],
    [
      [
        7716,
        7716
      ],
      "mapped",
      [
        7717
      ]
    ],
    [
      [
        7717,
        7717
      ],
      "valid"
    ],
    [
      [
        7718,
        7718
      ],
      "mapped",
      [
        7719
      ]
    ],
    [
      [
        7719,
        7719
      ],
      "valid"
    ],
    [
      [
        7720,
        7720
      ],
      "mapped",
      [
        7721
      ]
    ],
    [
      [
        7721,
        7721
      ],
      "valid"
    ],
    [
      [
        7722,
        7722
      ],
      "mapped",
      [
        7723
      ]
    ],
    [
      [
        7723,
        7723
      ],
      "valid"
    ],
    [
      [
        7724,
        7724
      ],
      "mapped",
      [
        7725
      ]
    ],
    [
      [
        7725,
        7725
      ],
      "valid"
    ],
    [
      [
        7726,
        7726
      ],
      "mapped",
      [
        7727
      ]
    ],
    [
      [
        7727,
        7727
      ],
      "valid"
    ],
    [
      [
        7728,
        7728
      ],
      "mapped",
      [
        7729
      ]
    ],
    [
      [
        7729,
        7729
      ],
      "valid"
    ],
    [
      [
        7730,
        7730
      ],
      "mapped",
      [
        7731
      ]
    ],
    [
      [
        7731,
        7731
      ],
      "valid"
    ],
    [
      [
        7732,
        7732
      ],
      "mapped",
      [
        7733
      ]
    ],
    [
      [
        7733,
        7733
      ],
      "valid"
    ],
    [
      [
        7734,
        7734
      ],
      "mapped",
      [
        7735
      ]
    ],
    [
      [
        7735,
        7735
      ],
      "valid"
    ],
    [
      [
        7736,
        7736
      ],
      "mapped",
      [
        7737
      ]
    ],
    [
      [
        7737,
        7737
      ],
      "valid"
    ],
    [
      [
        7738,
        7738
      ],
      "mapped",
      [
        7739
      ]
    ],
    [
      [
        7739,
        7739
      ],
      "valid"
    ],
    [
      [
        7740,
        7740
      ],
      "mapped",
      [
        7741
      ]
    ],
    [
      [
        7741,
        7741
      ],
      "valid"
    ],
    [
      [
        7742,
        7742
      ],
      "mapped",
      [
        7743
      ]
    ],
    [
      [
        7743,
        7743
      ],
      "valid"
    ],
    [
      [
        7744,
        7744
      ],
      "mapped",
      [
        7745
      ]
    ],
    [
      [
        7745,
        7745
      ],
      "valid"
    ],
    [
      [
        7746,
        7746
      ],
      "mapped",
      [
        7747
      ]
    ],
    [
      [
        7747,
        7747
      ],
      "valid"
    ],
    [
      [
        7748,
        7748
      ],
      "mapped",
      [
        7749
      ]
    ],
    [
      [
        7749,
        7749
      ],
      "valid"
    ],
    [
      [
        7750,
        7750
      ],
      "mapped",
      [
        7751
      ]
    ],
    [
      [
        7751,
        7751
      ],
      "valid"
    ],
    [
      [
        7752,
        7752
      ],
      "mapped",
      [
        7753
      ]
    ],
    [
      [
        7753,
        7753
      ],
      "valid"
    ],
    [
      [
        7754,
        7754
      ],
      "mapped",
      [
        7755
      ]
    ],
    [
      [
        7755,
        7755
      ],
      "valid"
    ],
    [
      [
        7756,
        7756
      ],
      "mapped",
      [
        7757
      ]
    ],
    [
      [
        7757,
        7757
      ],
      "valid"
    ],
    [
      [
        7758,
        7758
      ],
      "mapped",
      [
        7759
      ]
    ],
    [
      [
        7759,
        7759
      ],
      "valid"
    ],
    [
      [
        7760,
        7760
      ],
      "mapped",
      [
        7761
      ]
    ],
    [
      [
        7761,
        7761
      ],
      "valid"
    ],
    [
      [
        7762,
        7762
      ],
      "mapped",
      [
        7763
      ]
    ],
    [
      [
        7763,
        7763
      ],
      "valid"
    ],
    [
      [
        7764,
        7764
      ],
      "mapped",
      [
        7765
      ]
    ],
    [
      [
        7765,
        7765
      ],
      "valid"
    ],
    [
      [
        7766,
        7766
      ],
      "mapped",
      [
        7767
      ]
    ],
    [
      [
        7767,
        7767
      ],
      "valid"
    ],
    [
      [
        7768,
        7768
      ],
      "mapped",
      [
        7769
      ]
    ],
    [
      [
        7769,
        7769
      ],
      "valid"
    ],
    [
      [
        7770,
        7770
      ],
      "mapped",
      [
        7771
      ]
    ],
    [
      [
        7771,
        7771
      ],
      "valid"
    ],
    [
      [
        7772,
        7772
      ],
      "mapped",
      [
        7773
      ]
    ],
    [
      [
        7773,
        7773
      ],
      "valid"
    ],
    [
      [
        7774,
        7774
      ],
      "mapped",
      [
        7775
      ]
    ],
    [
      [
        7775,
        7775
      ],
      "valid"
    ],
    [
      [
        7776,
        7776
      ],
      "mapped",
      [
        7777
      ]
    ],
    [
      [
        7777,
        7777
      ],
      "valid"
    ],
    [
      [
        7778,
        7778
      ],
      "mapped",
      [
        7779
      ]
    ],
    [
      [
        7779,
        7779
      ],
      "valid"
    ],
    [
      [
        7780,
        7780
      ],
      "mapped",
      [
        7781
      ]
    ],
    [
      [
        7781,
        7781
      ],
      "valid"
    ],
    [
      [
        7782,
        7782
      ],
      "mapped",
      [
        7783
      ]
    ],
    [
      [
        7783,
        7783
      ],
      "valid"
    ],
    [
      [
        7784,
        7784
      ],
      "mapped",
      [
        7785
      ]
    ],
    [
      [
        7785,
        7785
      ],
      "valid"
    ],
    [
      [
        7786,
        7786
      ],
      "mapped",
      [
        7787
      ]
    ],
    [
      [
        7787,
        7787
      ],
      "valid"
    ],
    [
      [
        7788,
        7788
      ],
      "mapped",
      [
        7789
      ]
    ],
    [
      [
        7789,
        7789
      ],
      "valid"
    ],
    [
      [
        7790,
        7790
      ],
      "mapped",
      [
        7791
      ]
    ],
    [
      [
        7791,
        7791
      ],
      "valid"
    ],
    [
      [
        7792,
        7792
      ],
      "mapped",
      [
        7793
      ]
    ],
    [
      [
        7793,
        7793
      ],
      "valid"
    ],
    [
      [
        7794,
        7794
      ],
      "mapped",
      [
        7795
      ]
    ],
    [
      [
        7795,
        7795
      ],
      "valid"
    ],
    [
      [
        7796,
        7796
      ],
      "mapped",
      [
        7797
      ]
    ],
    [
      [
        7797,
        7797
      ],
      "valid"
    ],
    [
      [
        7798,
        7798
      ],
      "mapped",
      [
        7799
      ]
    ],
    [
      [
        7799,
        7799
      ],
      "valid"
    ],
    [
      [
        7800,
        7800
      ],
      "mapped",
      [
        7801
      ]
    ],
    [
      [
        7801,
        7801
      ],
      "valid"
    ],
    [
      [
        7802,
        7802
      ],
      "mapped",
      [
        7803
      ]
    ],
    [
      [
        7803,
        7803
      ],
      "valid"
    ],
    [
      [
        7804,
        7804
      ],
      "mapped",
      [
        7805
      ]
    ],
    [
      [
        7805,
        7805
      ],
      "valid"
    ],
    [
      [
        7806,
        7806
      ],
      "mapped",
      [
        7807
      ]
    ],
    [
      [
        7807,
        7807
      ],
      "valid"
    ],
    [
      [
        7808,
        7808
      ],
      "mapped",
      [
        7809
      ]
    ],
    [
      [
        7809,
        7809
      ],
      "valid"
    ],
    [
      [
        7810,
        7810
      ],
      "mapped",
      [
        7811
      ]
    ],
    [
      [
        7811,
        7811
      ],
      "valid"
    ],
    [
      [
        7812,
        7812
      ],
      "mapped",
      [
        7813
      ]
    ],
    [
      [
        7813,
        7813
      ],
      "valid"
    ],
    [
      [
        7814,
        7814
      ],
      "mapped",
      [
        7815
      ]
    ],
    [
      [
        7815,
        7815
      ],
      "valid"
    ],
    [
      [
        7816,
        7816
      ],
      "mapped",
      [
        7817
      ]
    ],
    [
      [
        7817,
        7817
      ],
      "valid"
    ],
    [
      [
        7818,
        7818
      ],
      "mapped",
      [
        7819
      ]
    ],
    [
      [
        7819,
        7819
      ],
      "valid"
    ],
    [
      [
        7820,
        7820
      ],
      "mapped",
      [
        7821
      ]
    ],
    [
      [
        7821,
        7821
      ],
      "valid"
    ],
    [
      [
        7822,
        7822
      ],
      "mapped",
      [
        7823
      ]
    ],
    [
      [
        7823,
        7823
      ],
      "valid"
    ],
    [
      [
        7824,
        7824
      ],
      "mapped",
      [
        7825
      ]
    ],
    [
      [
        7825,
        7825
      ],
      "valid"
    ],
    [
      [
        7826,
        7826
      ],
      "mapped",
      [
        7827
      ]
    ],
    [
      [
        7827,
        7827
      ],
      "valid"
    ],
    [
      [
        7828,
        7828
      ],
      "mapped",
      [
        7829
      ]
    ],
    [
      [
        7829,
        7833
      ],
      "valid"
    ],
    [
      [
        7834,
        7834
      ],
      "mapped",
      [
        97,
        702
      ]
    ],
    [
      [
        7835,
        7835
      ],
      "mapped",
      [
        7777
      ]
    ],
    [
      [
        7836,
        7837
      ],
      "valid"
    ],
    [
      [
        7838,
        7838
      ],
      "mapped",
      [
        115,
        115
      ]
    ],
    [
      [
        7839,
        7839
      ],
      "valid"
    ],
    [
      [
        7840,
        7840
      ],
      "mapped",
      [
        7841
      ]
    ],
    [
      [
        7841,
        7841
      ],
      "valid"
    ],
    [
      [
        7842,
        7842
      ],
      "mapped",
      [
        7843
      ]
    ],
    [
      [
        7843,
        7843
      ],
      "valid"
    ],
    [
      [
        7844,
        7844
      ],
      "mapped",
      [
        7845
      ]
    ],
    [
      [
        7845,
        7845
      ],
      "valid"
    ],
    [
      [
        7846,
        7846
      ],
      "mapped",
      [
        7847
      ]
    ],
    [
      [
        7847,
        7847
      ],
      "valid"
    ],
    [
      [
        7848,
        7848
      ],
      "mapped",
      [
        7849
      ]
    ],
    [
      [
        7849,
        7849
      ],
      "valid"
    ],
    [
      [
        7850,
        7850
      ],
      "mapped",
      [
        7851
      ]
    ],
    [
      [
        7851,
        7851
      ],
      "valid"
    ],
    [
      [
        7852,
        7852
      ],
      "mapped",
      [
        7853
      ]
    ],
    [
      [
        7853,
        7853
      ],
      "valid"
    ],
    [
      [
        7854,
        7854
      ],
      "mapped",
      [
        7855
      ]
    ],
    [
      [
        7855,
        7855
      ],
      "valid"
    ],
    [
      [
        7856,
        7856
      ],
      "mapped",
      [
        7857
      ]
    ],
    [
      [
        7857,
        7857
      ],
      "valid"
    ],
    [
      [
        7858,
        7858
      ],
      "mapped",
      [
        7859
      ]
    ],
    [
      [
        7859,
        7859
      ],
      "valid"
    ],
    [
      [
        7860,
        7860
      ],
      "mapped",
      [
        7861
      ]
    ],
    [
      [
        7861,
        7861
      ],
      "valid"
    ],
    [
      [
        7862,
        7862
      ],
      "mapped",
      [
        7863
      ]
    ],
    [
      [
        7863,
        7863
      ],
      "valid"
    ],
    [
      [
        7864,
        7864
      ],
      "mapped",
      [
        7865
      ]
    ],
    [
      [
        7865,
        7865
      ],
      "valid"
    ],
    [
      [
        7866,
        7866
      ],
      "mapped",
      [
        7867
      ]
    ],
    [
      [
        7867,
        7867
      ],
      "valid"
    ],
    [
      [
        7868,
        7868
      ],
      "mapped",
      [
        7869
      ]
    ],
    [
      [
        7869,
        7869
      ],
      "valid"
    ],
    [
      [
        7870,
        7870
      ],
      "mapped",
      [
        7871
      ]
    ],
    [
      [
        7871,
        7871
      ],
      "valid"
    ],
    [
      [
        7872,
        7872
      ],
      "mapped",
      [
        7873
      ]
    ],
    [
      [
        7873,
        7873
      ],
      "valid"
    ],
    [
      [
        7874,
        7874
      ],
      "mapped",
      [
        7875
      ]
    ],
    [
      [
        7875,
        7875
      ],
      "valid"
    ],
    [
      [
        7876,
        7876
      ],
      "mapped",
      [
        7877
      ]
    ],
    [
      [
        7877,
        7877
      ],
      "valid"
    ],
    [
      [
        7878,
        7878
      ],
      "mapped",
      [
        7879
      ]
    ],
    [
      [
        7879,
        7879
      ],
      "valid"
    ],
    [
      [
        7880,
        7880
      ],
      "mapped",
      [
        7881
      ]
    ],
    [
      [
        7881,
        7881
      ],
      "valid"
    ],
    [
      [
        7882,
        7882
      ],
      "mapped",
      [
        7883
      ]
    ],
    [
      [
        7883,
        7883
      ],
      "valid"
    ],
    [
      [
        7884,
        7884
      ],
      "mapped",
      [
        7885
      ]
    ],
    [
      [
        7885,
        7885
      ],
      "valid"
    ],
    [
      [
        7886,
        7886
      ],
      "mapped",
      [
        7887
      ]
    ],
    [
      [
        7887,
        7887
      ],
      "valid"
    ],
    [
      [
        7888,
        7888
      ],
      "mapped",
      [
        7889
      ]
    ],
    [
      [
        7889,
        7889
      ],
      "valid"
    ],
    [
      [
        7890,
        7890
      ],
      "mapped",
      [
        7891
      ]
    ],
    [
      [
        7891,
        7891
      ],
      "valid"
    ],
    [
      [
        7892,
        7892
      ],
      "mapped",
      [
        7893
      ]
    ],
    [
      [
        7893,
        7893
      ],
      "valid"
    ],
    [
      [
        7894,
        7894
      ],
      "mapped",
      [
        7895
      ]
    ],
    [
      [
        7895,
        7895
      ],
      "valid"
    ],
    [
      [
        7896,
        7896
      ],
      "mapped",
      [
        7897
      ]
    ],
    [
      [
        7897,
        7897
      ],
      "valid"
    ],
    [
      [
        7898,
        7898
      ],
      "mapped",
      [
        7899
      ]
    ],
    [
      [
        7899,
        7899
      ],
      "valid"
    ],
    [
      [
        7900,
        7900
      ],
      "mapped",
      [
        7901
      ]
    ],
    [
      [
        7901,
        7901
      ],
      "valid"
    ],
    [
      [
        7902,
        7902
      ],
      "mapped",
      [
        7903
      ]
    ],
    [
      [
        7903,
        7903
      ],
      "valid"
    ],
    [
      [
        7904,
        7904
      ],
      "mapped",
      [
        7905
      ]
    ],
    [
      [
        7905,
        7905
      ],
      "valid"
    ],
    [
      [
        7906,
        7906
      ],
      "mapped",
      [
        7907
      ]
    ],
    [
      [
        7907,
        7907
      ],
      "valid"
    ],
    [
      [
        7908,
        7908
      ],
      "mapped",
      [
        7909
      ]
    ],
    [
      [
        7909,
        7909
      ],
      "valid"
    ],
    [
      [
        7910,
        7910
      ],
      "mapped",
      [
        7911
      ]
    ],
    [
      [
        7911,
        7911
      ],
      "valid"
    ],
    [
      [
        7912,
        7912
      ],
      "mapped",
      [
        7913
      ]
    ],
    [
      [
        7913,
        7913
      ],
      "valid"
    ],
    [
      [
        7914,
        7914
      ],
      "mapped",
      [
        7915
      ]
    ],
    [
      [
        7915,
        7915
      ],
      "valid"
    ],
    [
      [
        7916,
        7916
      ],
      "mapped",
      [
        7917
      ]
    ],
    [
      [
        7917,
        7917
      ],
      "valid"
    ],
    [
      [
        7918,
        7918
      ],
      "mapped",
      [
        7919
      ]
    ],
    [
      [
        7919,
        7919
      ],
      "valid"
    ],
    [
      [
        7920,
        7920
      ],
      "mapped",
      [
        7921
      ]
    ],
    [
      [
        7921,
        7921
      ],
      "valid"
    ],
    [
      [
        7922,
        7922
      ],
      "mapped",
      [
        7923
      ]
    ],
    [
      [
        7923,
        7923
      ],
      "valid"
    ],
    [
      [
        7924,
        7924
      ],
      "mapped",
      [
        7925
      ]
    ],
    [
      [
        7925,
        7925
      ],
      "valid"
    ],
    [
      [
        7926,
        7926
      ],
      "mapped",
      [
        7927
      ]
    ],
    [
      [
        7927,
        7927
      ],
      "valid"
    ],
    [
      [
        7928,
        7928
      ],
      "mapped",
      [
        7929
      ]
    ],
    [
      [
        7929,
        7929
      ],
      "valid"
    ],
    [
      [
        7930,
        7930
      ],
      "mapped",
      [
        7931
      ]
    ],
    [
      [
        7931,
        7931
      ],
      "valid"
    ],
    [
      [
        7932,
        7932
      ],
      "mapped",
      [
        7933
      ]
    ],
    [
      [
        7933,
        7933
      ],
      "valid"
    ],
    [
      [
        7934,
        7934
      ],
      "mapped",
      [
        7935
      ]
    ],
    [
      [
        7935,
        7935
      ],
      "valid"
    ],
    [
      [
        7936,
        7943
      ],
      "valid"
    ],
    [
      [
        7944,
        7944
      ],
      "mapped",
      [
        7936
      ]
    ],
    [
      [
        7945,
        7945
      ],
      "mapped",
      [
        7937
      ]
    ],
    [
      [
        7946,
        7946
      ],
      "mapped",
      [
        7938
      ]
    ],
    [
      [
        7947,
        7947
      ],
      "mapped",
      [
        7939
      ]
    ],
    [
      [
        7948,
        7948
      ],
      "mapped",
      [
        7940
      ]
    ],
    [
      [
        7949,
        7949
      ],
      "mapped",
      [
        7941
      ]
    ],
    [
      [
        7950,
        7950
      ],
      "mapped",
      [
        7942
      ]
    ],
    [
      [
        7951,
        7951
      ],
      "mapped",
      [
        7943
      ]
    ],
    [
      [
        7952,
        7957
      ],
      "valid"
    ],
    [
      [
        7958,
        7959
      ],
      "disallowed"
    ],
    [
      [
        7960,
        7960
      ],
      "mapped",
      [
        7952
      ]
    ],
    [
      [
        7961,
        7961
      ],
      "mapped",
      [
        7953
      ]
    ],
    [
      [
        7962,
        7962
      ],
      "mapped",
      [
        7954
      ]
    ],
    [
      [
        7963,
        7963
      ],
      "mapped",
      [
        7955
      ]
    ],
    [
      [
        7964,
        7964
      ],
      "mapped",
      [
        7956
      ]
    ],
    [
      [
        7965,
        7965
      ],
      "mapped",
      [
        7957
      ]
    ],
    [
      [
        7966,
        7967
      ],
      "disallowed"
    ],
    [
      [
        7968,
        7975
      ],
      "valid"
    ],
    [
      [
        7976,
        7976
      ],
      "mapped",
      [
        7968
      ]
    ],
    [
      [
        7977,
        7977
      ],
      "mapped",
      [
        7969
      ]
    ],
    [
      [
        7978,
        7978
      ],
      "mapped",
      [
        7970
      ]
    ],
    [
      [
        7979,
        7979
      ],
      "mapped",
      [
        7971
      ]
    ],
    [
      [
        7980,
        7980
      ],
      "mapped",
      [
        7972
      ]
    ],
    [
      [
        7981,
        7981
      ],
      "mapped",
      [
        7973
      ]
    ],
    [
      [
        7982,
        7982
      ],
      "mapped",
      [
        7974
      ]
    ],
    [
      [
        7983,
        7983
      ],
      "mapped",
      [
        7975
      ]
    ],
    [
      [
        7984,
        7991
      ],
      "valid"
    ],
    [
      [
        7992,
        7992
      ],
      "mapped",
      [
        7984
      ]
    ],
    [
      [
        7993,
        7993
      ],
      "mapped",
      [
        7985
      ]
    ],
    [
      [
        7994,
        7994
      ],
      "mapped",
      [
        7986
      ]
    ],
    [
      [
        7995,
        7995
      ],
      "mapped",
      [
        7987
      ]
    ],
    [
      [
        7996,
        7996
      ],
      "mapped",
      [
        7988
      ]
    ],
    [
      [
        7997,
        7997
      ],
      "mapped",
      [
        7989
      ]
    ],
    [
      [
        7998,
        7998
      ],
      "mapped",
      [
        7990
      ]
    ],
    [
      [
        7999,
        7999
      ],
      "mapped",
      [
        7991
      ]
    ],
    [
      [
        8e3,
        8005
      ],
      "valid"
    ],
    [
      [
        8006,
        8007
      ],
      "disallowed"
    ],
    [
      [
        8008,
        8008
      ],
      "mapped",
      [
        8e3
      ]
    ],
    [
      [
        8009,
        8009
      ],
      "mapped",
      [
        8001
      ]
    ],
    [
      [
        8010,
        8010
      ],
      "mapped",
      [
        8002
      ]
    ],
    [
      [
        8011,
        8011
      ],
      "mapped",
      [
        8003
      ]
    ],
    [
      [
        8012,
        8012
      ],
      "mapped",
      [
        8004
      ]
    ],
    [
      [
        8013,
        8013
      ],
      "mapped",
      [
        8005
      ]
    ],
    [
      [
        8014,
        8015
      ],
      "disallowed"
    ],
    [
      [
        8016,
        8023
      ],
      "valid"
    ],
    [
      [
        8024,
        8024
      ],
      "disallowed"
    ],
    [
      [
        8025,
        8025
      ],
      "mapped",
      [
        8017
      ]
    ],
    [
      [
        8026,
        8026
      ],
      "disallowed"
    ],
    [
      [
        8027,
        8027
      ],
      "mapped",
      [
        8019
      ]
    ],
    [
      [
        8028,
        8028
      ],
      "disallowed"
    ],
    [
      [
        8029,
        8029
      ],
      "mapped",
      [
        8021
      ]
    ],
    [
      [
        8030,
        8030
      ],
      "disallowed"
    ],
    [
      [
        8031,
        8031
      ],
      "mapped",
      [
        8023
      ]
    ],
    [
      [
        8032,
        8039
      ],
      "valid"
    ],
    [
      [
        8040,
        8040
      ],
      "mapped",
      [
        8032
      ]
    ],
    [
      [
        8041,
        8041
      ],
      "mapped",
      [
        8033
      ]
    ],
    [
      [
        8042,
        8042
      ],
      "mapped",
      [
        8034
      ]
    ],
    [
      [
        8043,
        8043
      ],
      "mapped",
      [
        8035
      ]
    ],
    [
      [
        8044,
        8044
      ],
      "mapped",
      [
        8036
      ]
    ],
    [
      [
        8045,
        8045
      ],
      "mapped",
      [
        8037
      ]
    ],
    [
      [
        8046,
        8046
      ],
      "mapped",
      [
        8038
      ]
    ],
    [
      [
        8047,
        8047
      ],
      "mapped",
      [
        8039
      ]
    ],
    [
      [
        8048,
        8048
      ],
      "valid"
    ],
    [
      [
        8049,
        8049
      ],
      "mapped",
      [
        940
      ]
    ],
    [
      [
        8050,
        8050
      ],
      "valid"
    ],
    [
      [
        8051,
        8051
      ],
      "mapped",
      [
        941
      ]
    ],
    [
      [
        8052,
        8052
      ],
      "valid"
    ],
    [
      [
        8053,
        8053
      ],
      "mapped",
      [
        942
      ]
    ],
    [
      [
        8054,
        8054
      ],
      "valid"
    ],
    [
      [
        8055,
        8055
      ],
      "mapped",
      [
        943
      ]
    ],
    [
      [
        8056,
        8056
      ],
      "valid"
    ],
    [
      [
        8057,
        8057
      ],
      "mapped",
      [
        972
      ]
    ],
    [
      [
        8058,
        8058
      ],
      "valid"
    ],
    [
      [
        8059,
        8059
      ],
      "mapped",
      [
        973
      ]
    ],
    [
      [
        8060,
        8060
      ],
      "valid"
    ],
    [
      [
        8061,
        8061
      ],
      "mapped",
      [
        974
      ]
    ],
    [
      [
        8062,
        8063
      ],
      "disallowed"
    ],
    [
      [
        8064,
        8064
      ],
      "mapped",
      [
        7936,
        953
      ]
    ],
    [
      [
        8065,
        8065
      ],
      "mapped",
      [
        7937,
        953
      ]
    ],
    [
      [
        8066,
        8066
      ],
      "mapped",
      [
        7938,
        953
      ]
    ],
    [
      [
        8067,
        8067
      ],
      "mapped",
      [
        7939,
        953
      ]
    ],
    [
      [
        8068,
        8068
      ],
      "mapped",
      [
        7940,
        953
      ]
    ],
    [
      [
        8069,
        8069
      ],
      "mapped",
      [
        7941,
        953
      ]
    ],
    [
      [
        8070,
        8070
      ],
      "mapped",
      [
        7942,
        953
      ]
    ],
    [
      [
        8071,
        8071
      ],
      "mapped",
      [
        7943,
        953
      ]
    ],
    [
      [
        8072,
        8072
      ],
      "mapped",
      [
        7936,
        953
      ]
    ],
    [
      [
        8073,
        8073
      ],
      "mapped",
      [
        7937,
        953
      ]
    ],
    [
      [
        8074,
        8074
      ],
      "mapped",
      [
        7938,
        953
      ]
    ],
    [
      [
        8075,
        8075
      ],
      "mapped",
      [
        7939,
        953
      ]
    ],
    [
      [
        8076,
        8076
      ],
      "mapped",
      [
        7940,
        953
      ]
    ],
    [
      [
        8077,
        8077
      ],
      "mapped",
      [
        7941,
        953
      ]
    ],
    [
      [
        8078,
        8078
      ],
      "mapped",
      [
        7942,
        953
      ]
    ],
    [
      [
        8079,
        8079
      ],
      "mapped",
      [
        7943,
        953
      ]
    ],
    [
      [
        8080,
        8080
      ],
      "mapped",
      [
        7968,
        953
      ]
    ],
    [
      [
        8081,
        8081
      ],
      "mapped",
      [
        7969,
        953
      ]
    ],
    [
      [
        8082,
        8082
      ],
      "mapped",
      [
        7970,
        953
      ]
    ],
    [
      [
        8083,
        8083
      ],
      "mapped",
      [
        7971,
        953
      ]
    ],
    [
      [
        8084,
        8084
      ],
      "mapped",
      [
        7972,
        953
      ]
    ],
    [
      [
        8085,
        8085
      ],
      "mapped",
      [
        7973,
        953
      ]
    ],
    [
      [
        8086,
        8086
      ],
      "mapped",
      [
        7974,
        953
      ]
    ],
    [
      [
        8087,
        8087
      ],
      "mapped",
      [
        7975,
        953
      ]
    ],
    [
      [
        8088,
        8088
      ],
      "mapped",
      [
        7968,
        953
      ]
    ],
    [
      [
        8089,
        8089
      ],
      "mapped",
      [
        7969,
        953
      ]
    ],
    [
      [
        8090,
        8090
      ],
      "mapped",
      [
        7970,
        953
      ]
    ],
    [
      [
        8091,
        8091
      ],
      "mapped",
      [
        7971,
        953
      ]
    ],
    [
      [
        8092,
        8092
      ],
      "mapped",
      [
        7972,
        953
      ]
    ],
    [
      [
        8093,
        8093
      ],
      "mapped",
      [
        7973,
        953
      ]
    ],
    [
      [
        8094,
        8094
      ],
      "mapped",
      [
        7974,
        953
      ]
    ],
    [
      [
        8095,
        8095
      ],
      "mapped",
      [
        7975,
        953
      ]
    ],
    [
      [
        8096,
        8096
      ],
      "mapped",
      [
        8032,
        953
      ]
    ],
    [
      [
        8097,
        8097
      ],
      "mapped",
      [
        8033,
        953
      ]
    ],
    [
      [
        8098,
        8098
      ],
      "mapped",
      [
        8034,
        953
      ]
    ],
    [
      [
        8099,
        8099
      ],
      "mapped",
      [
        8035,
        953
      ]
    ],
    [
      [
        8100,
        8100
      ],
      "mapped",
      [
        8036,
        953
      ]
    ],
    [
      [
        8101,
        8101
      ],
      "mapped",
      [
        8037,
        953
      ]
    ],
    [
      [
        8102,
        8102
      ],
      "mapped",
      [
        8038,
        953
      ]
    ],
    [
      [
        8103,
        8103
      ],
      "mapped",
      [
        8039,
        953
      ]
    ],
    [
      [
        8104,
        8104
      ],
      "mapped",
      [
        8032,
        953
      ]
    ],
    [
      [
        8105,
        8105
      ],
      "mapped",
      [
        8033,
        953
      ]
    ],
    [
      [
        8106,
        8106
      ],
      "mapped",
      [
        8034,
        953
      ]
    ],
    [
      [
        8107,
        8107
      ],
      "mapped",
      [
        8035,
        953
      ]
    ],
    [
      [
        8108,
        8108
      ],
      "mapped",
      [
        8036,
        953
      ]
    ],
    [
      [
        8109,
        8109
      ],
      "mapped",
      [
        8037,
        953
      ]
    ],
    [
      [
        8110,
        8110
      ],
      "mapped",
      [
        8038,
        953
      ]
    ],
    [
      [
        8111,
        8111
      ],
      "mapped",
      [
        8039,
        953
      ]
    ],
    [
      [
        8112,
        8113
      ],
      "valid"
    ],
    [
      [
        8114,
        8114
      ],
      "mapped",
      [
        8048,
        953
      ]
    ],
    [
      [
        8115,
        8115
      ],
      "mapped",
      [
        945,
        953
      ]
    ],
    [
      [
        8116,
        8116
      ],
      "mapped",
      [
        940,
        953
      ]
    ],
    [
      [
        8117,
        8117
      ],
      "disallowed"
    ],
    [
      [
        8118,
        8118
      ],
      "valid"
    ],
    [
      [
        8119,
        8119
      ],
      "mapped",
      [
        8118,
        953
      ]
    ],
    [
      [
        8120,
        8120
      ],
      "mapped",
      [
        8112
      ]
    ],
    [
      [
        8121,
        8121
      ],
      "mapped",
      [
        8113
      ]
    ],
    [
      [
        8122,
        8122
      ],
      "mapped",
      [
        8048
      ]
    ],
    [
      [
        8123,
        8123
      ],
      "mapped",
      [
        940
      ]
    ],
    [
      [
        8124,
        8124
      ],
      "mapped",
      [
        945,
        953
      ]
    ],
    [
      [
        8125,
        8125
      ],
      "disallowed_STD3_mapped",
      [
        32,
        787
      ]
    ],
    [
      [
        8126,
        8126
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        8127,
        8127
      ],
      "disallowed_STD3_mapped",
      [
        32,
        787
      ]
    ],
    [
      [
        8128,
        8128
      ],
      "disallowed_STD3_mapped",
      [
        32,
        834
      ]
    ],
    [
      [
        8129,
        8129
      ],
      "disallowed_STD3_mapped",
      [
        32,
        776,
        834
      ]
    ],
    [
      [
        8130,
        8130
      ],
      "mapped",
      [
        8052,
        953
      ]
    ],
    [
      [
        8131,
        8131
      ],
      "mapped",
      [
        951,
        953
      ]
    ],
    [
      [
        8132,
        8132
      ],
      "mapped",
      [
        942,
        953
      ]
    ],
    [
      [
        8133,
        8133
      ],
      "disallowed"
    ],
    [
      [
        8134,
        8134
      ],
      "valid"
    ],
    [
      [
        8135,
        8135
      ],
      "mapped",
      [
        8134,
        953
      ]
    ],
    [
      [
        8136,
        8136
      ],
      "mapped",
      [
        8050
      ]
    ],
    [
      [
        8137,
        8137
      ],
      "mapped",
      [
        941
      ]
    ],
    [
      [
        8138,
        8138
      ],
      "mapped",
      [
        8052
      ]
    ],
    [
      [
        8139,
        8139
      ],
      "mapped",
      [
        942
      ]
    ],
    [
      [
        8140,
        8140
      ],
      "mapped",
      [
        951,
        953
      ]
    ],
    [
      [
        8141,
        8141
      ],
      "disallowed_STD3_mapped",
      [
        32,
        787,
        768
      ]
    ],
    [
      [
        8142,
        8142
      ],
      "disallowed_STD3_mapped",
      [
        32,
        787,
        769
      ]
    ],
    [
      [
        8143,
        8143
      ],
      "disallowed_STD3_mapped",
      [
        32,
        787,
        834
      ]
    ],
    [
      [
        8144,
        8146
      ],
      "valid"
    ],
    [
      [
        8147,
        8147
      ],
      "mapped",
      [
        912
      ]
    ],
    [
      [
        8148,
        8149
      ],
      "disallowed"
    ],
    [
      [
        8150,
        8151
      ],
      "valid"
    ],
    [
      [
        8152,
        8152
      ],
      "mapped",
      [
        8144
      ]
    ],
    [
      [
        8153,
        8153
      ],
      "mapped",
      [
        8145
      ]
    ],
    [
      [
        8154,
        8154
      ],
      "mapped",
      [
        8054
      ]
    ],
    [
      [
        8155,
        8155
      ],
      "mapped",
      [
        943
      ]
    ],
    [
      [
        8156,
        8156
      ],
      "disallowed"
    ],
    [
      [
        8157,
        8157
      ],
      "disallowed_STD3_mapped",
      [
        32,
        788,
        768
      ]
    ],
    [
      [
        8158,
        8158
      ],
      "disallowed_STD3_mapped",
      [
        32,
        788,
        769
      ]
    ],
    [
      [
        8159,
        8159
      ],
      "disallowed_STD3_mapped",
      [
        32,
        788,
        834
      ]
    ],
    [
      [
        8160,
        8162
      ],
      "valid"
    ],
    [
      [
        8163,
        8163
      ],
      "mapped",
      [
        944
      ]
    ],
    [
      [
        8164,
        8167
      ],
      "valid"
    ],
    [
      [
        8168,
        8168
      ],
      "mapped",
      [
        8160
      ]
    ],
    [
      [
        8169,
        8169
      ],
      "mapped",
      [
        8161
      ]
    ],
    [
      [
        8170,
        8170
      ],
      "mapped",
      [
        8058
      ]
    ],
    [
      [
        8171,
        8171
      ],
      "mapped",
      [
        973
      ]
    ],
    [
      [
        8172,
        8172
      ],
      "mapped",
      [
        8165
      ]
    ],
    [
      [
        8173,
        8173
      ],
      "disallowed_STD3_mapped",
      [
        32,
        776,
        768
      ]
    ],
    [
      [
        8174,
        8174
      ],
      "disallowed_STD3_mapped",
      [
        32,
        776,
        769
      ]
    ],
    [
      [
        8175,
        8175
      ],
      "disallowed_STD3_mapped",
      [
        96
      ]
    ],
    [
      [
        8176,
        8177
      ],
      "disallowed"
    ],
    [
      [
        8178,
        8178
      ],
      "mapped",
      [
        8060,
        953
      ]
    ],
    [
      [
        8179,
        8179
      ],
      "mapped",
      [
        969,
        953
      ]
    ],
    [
      [
        8180,
        8180
      ],
      "mapped",
      [
        974,
        953
      ]
    ],
    [
      [
        8181,
        8181
      ],
      "disallowed"
    ],
    [
      [
        8182,
        8182
      ],
      "valid"
    ],
    [
      [
        8183,
        8183
      ],
      "mapped",
      [
        8182,
        953
      ]
    ],
    [
      [
        8184,
        8184
      ],
      "mapped",
      [
        8056
      ]
    ],
    [
      [
        8185,
        8185
      ],
      "mapped",
      [
        972
      ]
    ],
    [
      [
        8186,
        8186
      ],
      "mapped",
      [
        8060
      ]
    ],
    [
      [
        8187,
        8187
      ],
      "mapped",
      [
        974
      ]
    ],
    [
      [
        8188,
        8188
      ],
      "mapped",
      [
        969,
        953
      ]
    ],
    [
      [
        8189,
        8189
      ],
      "disallowed_STD3_mapped",
      [
        32,
        769
      ]
    ],
    [
      [
        8190,
        8190
      ],
      "disallowed_STD3_mapped",
      [
        32,
        788
      ]
    ],
    [
      [
        8191,
        8191
      ],
      "disallowed"
    ],
    [
      [
        8192,
        8202
      ],
      "disallowed_STD3_mapped",
      [
        32
      ]
    ],
    [
      [
        8203,
        8203
      ],
      "ignored"
    ],
    [
      [
        8204,
        8205
      ],
      "deviation",
      []
    ],
    [
      [
        8206,
        8207
      ],
      "disallowed"
    ],
    [
      [
        8208,
        8208
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8209,
        8209
      ],
      "mapped",
      [
        8208
      ]
    ],
    [
      [
        8210,
        8214
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8215,
        8215
      ],
      "disallowed_STD3_mapped",
      [
        32,
        819
      ]
    ],
    [
      [
        8216,
        8227
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8228,
        8230
      ],
      "disallowed"
    ],
    [
      [
        8231,
        8231
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8232,
        8238
      ],
      "disallowed"
    ],
    [
      [
        8239,
        8239
      ],
      "disallowed_STD3_mapped",
      [
        32
      ]
    ],
    [
      [
        8240,
        8242
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8243,
        8243
      ],
      "mapped",
      [
        8242,
        8242
      ]
    ],
    [
      [
        8244,
        8244
      ],
      "mapped",
      [
        8242,
        8242,
        8242
      ]
    ],
    [
      [
        8245,
        8245
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8246,
        8246
      ],
      "mapped",
      [
        8245,
        8245
      ]
    ],
    [
      [
        8247,
        8247
      ],
      "mapped",
      [
        8245,
        8245,
        8245
      ]
    ],
    [
      [
        8248,
        8251
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8252,
        8252
      ],
      "disallowed_STD3_mapped",
      [
        33,
        33
      ]
    ],
    [
      [
        8253,
        8253
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8254,
        8254
      ],
      "disallowed_STD3_mapped",
      [
        32,
        773
      ]
    ],
    [
      [
        8255,
        8262
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8263,
        8263
      ],
      "disallowed_STD3_mapped",
      [
        63,
        63
      ]
    ],
    [
      [
        8264,
        8264
      ],
      "disallowed_STD3_mapped",
      [
        63,
        33
      ]
    ],
    [
      [
        8265,
        8265
      ],
      "disallowed_STD3_mapped",
      [
        33,
        63
      ]
    ],
    [
      [
        8266,
        8269
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8270,
        8274
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8275,
        8276
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8277,
        8278
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8279,
        8279
      ],
      "mapped",
      [
        8242,
        8242,
        8242,
        8242
      ]
    ],
    [
      [
        8280,
        8286
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8287,
        8287
      ],
      "disallowed_STD3_mapped",
      [
        32
      ]
    ],
    [
      [
        8288,
        8288
      ],
      "ignored"
    ],
    [
      [
        8289,
        8291
      ],
      "disallowed"
    ],
    [
      [
        8292,
        8292
      ],
      "ignored"
    ],
    [
      [
        8293,
        8293
      ],
      "disallowed"
    ],
    [
      [
        8294,
        8297
      ],
      "disallowed"
    ],
    [
      [
        8298,
        8303
      ],
      "disallowed"
    ],
    [
      [
        8304,
        8304
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        8305,
        8305
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8306,
        8307
      ],
      "disallowed"
    ],
    [
      [
        8308,
        8308
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        8309,
        8309
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        8310,
        8310
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        8311,
        8311
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        8312,
        8312
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        8313,
        8313
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        8314,
        8314
      ],
      "disallowed_STD3_mapped",
      [
        43
      ]
    ],
    [
      [
        8315,
        8315
      ],
      "mapped",
      [
        8722
      ]
    ],
    [
      [
        8316,
        8316
      ],
      "disallowed_STD3_mapped",
      [
        61
      ]
    ],
    [
      [
        8317,
        8317
      ],
      "disallowed_STD3_mapped",
      [
        40
      ]
    ],
    [
      [
        8318,
        8318
      ],
      "disallowed_STD3_mapped",
      [
        41
      ]
    ],
    [
      [
        8319,
        8319
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        8320,
        8320
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        8321,
        8321
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        8322,
        8322
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        8323,
        8323
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        8324,
        8324
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        8325,
        8325
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        8326,
        8326
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        8327,
        8327
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        8328,
        8328
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        8329,
        8329
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        8330,
        8330
      ],
      "disallowed_STD3_mapped",
      [
        43
      ]
    ],
    [
      [
        8331,
        8331
      ],
      "mapped",
      [
        8722
      ]
    ],
    [
      [
        8332,
        8332
      ],
      "disallowed_STD3_mapped",
      [
        61
      ]
    ],
    [
      [
        8333,
        8333
      ],
      "disallowed_STD3_mapped",
      [
        40
      ]
    ],
    [
      [
        8334,
        8334
      ],
      "disallowed_STD3_mapped",
      [
        41
      ]
    ],
    [
      [
        8335,
        8335
      ],
      "disallowed"
    ],
    [
      [
        8336,
        8336
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        8337,
        8337
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        8338,
        8338
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        8339,
        8339
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        8340,
        8340
      ],
      "mapped",
      [
        601
      ]
    ],
    [
      [
        8341,
        8341
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        8342,
        8342
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        8343,
        8343
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        8344,
        8344
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        8345,
        8345
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        8346,
        8346
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        8347,
        8347
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        8348,
        8348
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        8349,
        8351
      ],
      "disallowed"
    ],
    [
      [
        8352,
        8359
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8360,
        8360
      ],
      "mapped",
      [
        114,
        115
      ]
    ],
    [
      [
        8361,
        8362
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8363,
        8363
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8364,
        8364
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8365,
        8367
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8368,
        8369
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8370,
        8373
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8374,
        8376
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8377,
        8377
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8378,
        8378
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8379,
        8381
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8382,
        8382
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8383,
        8399
      ],
      "disallowed"
    ],
    [
      [
        8400,
        8417
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8418,
        8419
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8420,
        8426
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8427,
        8427
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8428,
        8431
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8432,
        8432
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8433,
        8447
      ],
      "disallowed"
    ],
    [
      [
        8448,
        8448
      ],
      "disallowed_STD3_mapped",
      [
        97,
        47,
        99
      ]
    ],
    [
      [
        8449,
        8449
      ],
      "disallowed_STD3_mapped",
      [
        97,
        47,
        115
      ]
    ],
    [
      [
        8450,
        8450
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        8451,
        8451
      ],
      "mapped",
      [
        176,
        99
      ]
    ],
    [
      [
        8452,
        8452
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8453,
        8453
      ],
      "disallowed_STD3_mapped",
      [
        99,
        47,
        111
      ]
    ],
    [
      [
        8454,
        8454
      ],
      "disallowed_STD3_mapped",
      [
        99,
        47,
        117
      ]
    ],
    [
      [
        8455,
        8455
      ],
      "mapped",
      [
        603
      ]
    ],
    [
      [
        8456,
        8456
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8457,
        8457
      ],
      "mapped",
      [
        176,
        102
      ]
    ],
    [
      [
        8458,
        8458
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        8459,
        8462
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        8463,
        8463
      ],
      "mapped",
      [
        295
      ]
    ],
    [
      [
        8464,
        8465
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8466,
        8467
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        8468,
        8468
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8469,
        8469
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        8470,
        8470
      ],
      "mapped",
      [
        110,
        111
      ]
    ],
    [
      [
        8471,
        8472
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8473,
        8473
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        8474,
        8474
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        8475,
        8477
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        8478,
        8479
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8480,
        8480
      ],
      "mapped",
      [
        115,
        109
      ]
    ],
    [
      [
        8481,
        8481
      ],
      "mapped",
      [
        116,
        101,
        108
      ]
    ],
    [
      [
        8482,
        8482
      ],
      "mapped",
      [
        116,
        109
      ]
    ],
    [
      [
        8483,
        8483
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8484,
        8484
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        8485,
        8485
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8486,
        8486
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        8487,
        8487
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8488,
        8488
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        8489,
        8489
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8490,
        8490
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        8491,
        8491
      ],
      "mapped",
      [
        229
      ]
    ],
    [
      [
        8492,
        8492
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        8493,
        8493
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        8494,
        8494
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8495,
        8496
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        8497,
        8497
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        8498,
        8498
      ],
      "disallowed"
    ],
    [
      [
        8499,
        8499
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        8500,
        8500
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        8501,
        8501
      ],
      "mapped",
      [
        1488
      ]
    ],
    [
      [
        8502,
        8502
      ],
      "mapped",
      [
        1489
      ]
    ],
    [
      [
        8503,
        8503
      ],
      "mapped",
      [
        1490
      ]
    ],
    [
      [
        8504,
        8504
      ],
      "mapped",
      [
        1491
      ]
    ],
    [
      [
        8505,
        8505
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8506,
        8506
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8507,
        8507
      ],
      "mapped",
      [
        102,
        97,
        120
      ]
    ],
    [
      [
        8508,
        8508
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        8509,
        8510
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        8511,
        8511
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        8512,
        8512
      ],
      "mapped",
      [
        8721
      ]
    ],
    [
      [
        8513,
        8516
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8517,
        8518
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        8519,
        8519
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        8520,
        8520
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8521,
        8521
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        8522,
        8523
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8524,
        8524
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8525,
        8525
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8526,
        8526
      ],
      "valid"
    ],
    [
      [
        8527,
        8527
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8528,
        8528
      ],
      "mapped",
      [
        49,
        8260,
        55
      ]
    ],
    [
      [
        8529,
        8529
      ],
      "mapped",
      [
        49,
        8260,
        57
      ]
    ],
    [
      [
        8530,
        8530
      ],
      "mapped",
      [
        49,
        8260,
        49,
        48
      ]
    ],
    [
      [
        8531,
        8531
      ],
      "mapped",
      [
        49,
        8260,
        51
      ]
    ],
    [
      [
        8532,
        8532
      ],
      "mapped",
      [
        50,
        8260,
        51
      ]
    ],
    [
      [
        8533,
        8533
      ],
      "mapped",
      [
        49,
        8260,
        53
      ]
    ],
    [
      [
        8534,
        8534
      ],
      "mapped",
      [
        50,
        8260,
        53
      ]
    ],
    [
      [
        8535,
        8535
      ],
      "mapped",
      [
        51,
        8260,
        53
      ]
    ],
    [
      [
        8536,
        8536
      ],
      "mapped",
      [
        52,
        8260,
        53
      ]
    ],
    [
      [
        8537,
        8537
      ],
      "mapped",
      [
        49,
        8260,
        54
      ]
    ],
    [
      [
        8538,
        8538
      ],
      "mapped",
      [
        53,
        8260,
        54
      ]
    ],
    [
      [
        8539,
        8539
      ],
      "mapped",
      [
        49,
        8260,
        56
      ]
    ],
    [
      [
        8540,
        8540
      ],
      "mapped",
      [
        51,
        8260,
        56
      ]
    ],
    [
      [
        8541,
        8541
      ],
      "mapped",
      [
        53,
        8260,
        56
      ]
    ],
    [
      [
        8542,
        8542
      ],
      "mapped",
      [
        55,
        8260,
        56
      ]
    ],
    [
      [
        8543,
        8543
      ],
      "mapped",
      [
        49,
        8260
      ]
    ],
    [
      [
        8544,
        8544
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8545,
        8545
      ],
      "mapped",
      [
        105,
        105
      ]
    ],
    [
      [
        8546,
        8546
      ],
      "mapped",
      [
        105,
        105,
        105
      ]
    ],
    [
      [
        8547,
        8547
      ],
      "mapped",
      [
        105,
        118
      ]
    ],
    [
      [
        8548,
        8548
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        8549,
        8549
      ],
      "mapped",
      [
        118,
        105
      ]
    ],
    [
      [
        8550,
        8550
      ],
      "mapped",
      [
        118,
        105,
        105
      ]
    ],
    [
      [
        8551,
        8551
      ],
      "mapped",
      [
        118,
        105,
        105,
        105
      ]
    ],
    [
      [
        8552,
        8552
      ],
      "mapped",
      [
        105,
        120
      ]
    ],
    [
      [
        8553,
        8553
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        8554,
        8554
      ],
      "mapped",
      [
        120,
        105
      ]
    ],
    [
      [
        8555,
        8555
      ],
      "mapped",
      [
        120,
        105,
        105
      ]
    ],
    [
      [
        8556,
        8556
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        8557,
        8557
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        8558,
        8558
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        8559,
        8559
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        8560,
        8560
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        8561,
        8561
      ],
      "mapped",
      [
        105,
        105
      ]
    ],
    [
      [
        8562,
        8562
      ],
      "mapped",
      [
        105,
        105,
        105
      ]
    ],
    [
      [
        8563,
        8563
      ],
      "mapped",
      [
        105,
        118
      ]
    ],
    [
      [
        8564,
        8564
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        8565,
        8565
      ],
      "mapped",
      [
        118,
        105
      ]
    ],
    [
      [
        8566,
        8566
      ],
      "mapped",
      [
        118,
        105,
        105
      ]
    ],
    [
      [
        8567,
        8567
      ],
      "mapped",
      [
        118,
        105,
        105,
        105
      ]
    ],
    [
      [
        8568,
        8568
      ],
      "mapped",
      [
        105,
        120
      ]
    ],
    [
      [
        8569,
        8569
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        8570,
        8570
      ],
      "mapped",
      [
        120,
        105
      ]
    ],
    [
      [
        8571,
        8571
      ],
      "mapped",
      [
        120,
        105,
        105
      ]
    ],
    [
      [
        8572,
        8572
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        8573,
        8573
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        8574,
        8574
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        8575,
        8575
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        8576,
        8578
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8579,
        8579
      ],
      "disallowed"
    ],
    [
      [
        8580,
        8580
      ],
      "valid"
    ],
    [
      [
        8581,
        8584
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8585,
        8585
      ],
      "mapped",
      [
        48,
        8260,
        51
      ]
    ],
    [
      [
        8586,
        8587
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8588,
        8591
      ],
      "disallowed"
    ],
    [
      [
        8592,
        8682
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8683,
        8691
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8692,
        8703
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8704,
        8747
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8748,
        8748
      ],
      "mapped",
      [
        8747,
        8747
      ]
    ],
    [
      [
        8749,
        8749
      ],
      "mapped",
      [
        8747,
        8747,
        8747
      ]
    ],
    [
      [
        8750,
        8750
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8751,
        8751
      ],
      "mapped",
      [
        8750,
        8750
      ]
    ],
    [
      [
        8752,
        8752
      ],
      "mapped",
      [
        8750,
        8750,
        8750
      ]
    ],
    [
      [
        8753,
        8799
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8800,
        8800
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        8801,
        8813
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8814,
        8815
      ],
      "disallowed_STD3_valid"
    ],
    [
      [
        8816,
        8945
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8946,
        8959
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8960,
        8960
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8961,
        8961
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        8962,
        9e3
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9001,
        9001
      ],
      "mapped",
      [
        12296
      ]
    ],
    [
      [
        9002,
        9002
      ],
      "mapped",
      [
        12297
      ]
    ],
    [
      [
        9003,
        9082
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9083,
        9083
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9084,
        9084
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9085,
        9114
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9115,
        9166
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9167,
        9168
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9169,
        9179
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9180,
        9191
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9192,
        9192
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9193,
        9203
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9204,
        9210
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9211,
        9215
      ],
      "disallowed"
    ],
    [
      [
        9216,
        9252
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9253,
        9254
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9255,
        9279
      ],
      "disallowed"
    ],
    [
      [
        9280,
        9290
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9291,
        9311
      ],
      "disallowed"
    ],
    [
      [
        9312,
        9312
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        9313,
        9313
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        9314,
        9314
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        9315,
        9315
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        9316,
        9316
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        9317,
        9317
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        9318,
        9318
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        9319,
        9319
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        9320,
        9320
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        9321,
        9321
      ],
      "mapped",
      [
        49,
        48
      ]
    ],
    [
      [
        9322,
        9322
      ],
      "mapped",
      [
        49,
        49
      ]
    ],
    [
      [
        9323,
        9323
      ],
      "mapped",
      [
        49,
        50
      ]
    ],
    [
      [
        9324,
        9324
      ],
      "mapped",
      [
        49,
        51
      ]
    ],
    [
      [
        9325,
        9325
      ],
      "mapped",
      [
        49,
        52
      ]
    ],
    [
      [
        9326,
        9326
      ],
      "mapped",
      [
        49,
        53
      ]
    ],
    [
      [
        9327,
        9327
      ],
      "mapped",
      [
        49,
        54
      ]
    ],
    [
      [
        9328,
        9328
      ],
      "mapped",
      [
        49,
        55
      ]
    ],
    [
      [
        9329,
        9329
      ],
      "mapped",
      [
        49,
        56
      ]
    ],
    [
      [
        9330,
        9330
      ],
      "mapped",
      [
        49,
        57
      ]
    ],
    [
      [
        9331,
        9331
      ],
      "mapped",
      [
        50,
        48
      ]
    ],
    [
      [
        9332,
        9332
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        41
      ]
    ],
    [
      [
        9333,
        9333
      ],
      "disallowed_STD3_mapped",
      [
        40,
        50,
        41
      ]
    ],
    [
      [
        9334,
        9334
      ],
      "disallowed_STD3_mapped",
      [
        40,
        51,
        41
      ]
    ],
    [
      [
        9335,
        9335
      ],
      "disallowed_STD3_mapped",
      [
        40,
        52,
        41
      ]
    ],
    [
      [
        9336,
        9336
      ],
      "disallowed_STD3_mapped",
      [
        40,
        53,
        41
      ]
    ],
    [
      [
        9337,
        9337
      ],
      "disallowed_STD3_mapped",
      [
        40,
        54,
        41
      ]
    ],
    [
      [
        9338,
        9338
      ],
      "disallowed_STD3_mapped",
      [
        40,
        55,
        41
      ]
    ],
    [
      [
        9339,
        9339
      ],
      "disallowed_STD3_mapped",
      [
        40,
        56,
        41
      ]
    ],
    [
      [
        9340,
        9340
      ],
      "disallowed_STD3_mapped",
      [
        40,
        57,
        41
      ]
    ],
    [
      [
        9341,
        9341
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        48,
        41
      ]
    ],
    [
      [
        9342,
        9342
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        49,
        41
      ]
    ],
    [
      [
        9343,
        9343
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        50,
        41
      ]
    ],
    [
      [
        9344,
        9344
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        51,
        41
      ]
    ],
    [
      [
        9345,
        9345
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        52,
        41
      ]
    ],
    [
      [
        9346,
        9346
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        53,
        41
      ]
    ],
    [
      [
        9347,
        9347
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        54,
        41
      ]
    ],
    [
      [
        9348,
        9348
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        55,
        41
      ]
    ],
    [
      [
        9349,
        9349
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        56,
        41
      ]
    ],
    [
      [
        9350,
        9350
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49,
        57,
        41
      ]
    ],
    [
      [
        9351,
        9351
      ],
      "disallowed_STD3_mapped",
      [
        40,
        50,
        48,
        41
      ]
    ],
    [
      [
        9352,
        9371
      ],
      "disallowed"
    ],
    [
      [
        9372,
        9372
      ],
      "disallowed_STD3_mapped",
      [
        40,
        97,
        41
      ]
    ],
    [
      [
        9373,
        9373
      ],
      "disallowed_STD3_mapped",
      [
        40,
        98,
        41
      ]
    ],
    [
      [
        9374,
        9374
      ],
      "disallowed_STD3_mapped",
      [
        40,
        99,
        41
      ]
    ],
    [
      [
        9375,
        9375
      ],
      "disallowed_STD3_mapped",
      [
        40,
        100,
        41
      ]
    ],
    [
      [
        9376,
        9376
      ],
      "disallowed_STD3_mapped",
      [
        40,
        101,
        41
      ]
    ],
    [
      [
        9377,
        9377
      ],
      "disallowed_STD3_mapped",
      [
        40,
        102,
        41
      ]
    ],
    [
      [
        9378,
        9378
      ],
      "disallowed_STD3_mapped",
      [
        40,
        103,
        41
      ]
    ],
    [
      [
        9379,
        9379
      ],
      "disallowed_STD3_mapped",
      [
        40,
        104,
        41
      ]
    ],
    [
      [
        9380,
        9380
      ],
      "disallowed_STD3_mapped",
      [
        40,
        105,
        41
      ]
    ],
    [
      [
        9381,
        9381
      ],
      "disallowed_STD3_mapped",
      [
        40,
        106,
        41
      ]
    ],
    [
      [
        9382,
        9382
      ],
      "disallowed_STD3_mapped",
      [
        40,
        107,
        41
      ]
    ],
    [
      [
        9383,
        9383
      ],
      "disallowed_STD3_mapped",
      [
        40,
        108,
        41
      ]
    ],
    [
      [
        9384,
        9384
      ],
      "disallowed_STD3_mapped",
      [
        40,
        109,
        41
      ]
    ],
    [
      [
        9385,
        9385
      ],
      "disallowed_STD3_mapped",
      [
        40,
        110,
        41
      ]
    ],
    [
      [
        9386,
        9386
      ],
      "disallowed_STD3_mapped",
      [
        40,
        111,
        41
      ]
    ],
    [
      [
        9387,
        9387
      ],
      "disallowed_STD3_mapped",
      [
        40,
        112,
        41
      ]
    ],
    [
      [
        9388,
        9388
      ],
      "disallowed_STD3_mapped",
      [
        40,
        113,
        41
      ]
    ],
    [
      [
        9389,
        9389
      ],
      "disallowed_STD3_mapped",
      [
        40,
        114,
        41
      ]
    ],
    [
      [
        9390,
        9390
      ],
      "disallowed_STD3_mapped",
      [
        40,
        115,
        41
      ]
    ],
    [
      [
        9391,
        9391
      ],
      "disallowed_STD3_mapped",
      [
        40,
        116,
        41
      ]
    ],
    [
      [
        9392,
        9392
      ],
      "disallowed_STD3_mapped",
      [
        40,
        117,
        41
      ]
    ],
    [
      [
        9393,
        9393
      ],
      "disallowed_STD3_mapped",
      [
        40,
        118,
        41
      ]
    ],
    [
      [
        9394,
        9394
      ],
      "disallowed_STD3_mapped",
      [
        40,
        119,
        41
      ]
    ],
    [
      [
        9395,
        9395
      ],
      "disallowed_STD3_mapped",
      [
        40,
        120,
        41
      ]
    ],
    [
      [
        9396,
        9396
      ],
      "disallowed_STD3_mapped",
      [
        40,
        121,
        41
      ]
    ],
    [
      [
        9397,
        9397
      ],
      "disallowed_STD3_mapped",
      [
        40,
        122,
        41
      ]
    ],
    [
      [
        9398,
        9398
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        9399,
        9399
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        9400,
        9400
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        9401,
        9401
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        9402,
        9402
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        9403,
        9403
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        9404,
        9404
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        9405,
        9405
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        9406,
        9406
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        9407,
        9407
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        9408,
        9408
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        9409,
        9409
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        9410,
        9410
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        9411,
        9411
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        9412,
        9412
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        9413,
        9413
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        9414,
        9414
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        9415,
        9415
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        9416,
        9416
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        9417,
        9417
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        9418,
        9418
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        9419,
        9419
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        9420,
        9420
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        9421,
        9421
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        9422,
        9422
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        9423,
        9423
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        9424,
        9424
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        9425,
        9425
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        9426,
        9426
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        9427,
        9427
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        9428,
        9428
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        9429,
        9429
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        9430,
        9430
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        9431,
        9431
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        9432,
        9432
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        9433,
        9433
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        9434,
        9434
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        9435,
        9435
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        9436,
        9436
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        9437,
        9437
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        9438,
        9438
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        9439,
        9439
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        9440,
        9440
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        9441,
        9441
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        9442,
        9442
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        9443,
        9443
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        9444,
        9444
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        9445,
        9445
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        9446,
        9446
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        9447,
        9447
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        9448,
        9448
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        9449,
        9449
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        9450,
        9450
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        9451,
        9470
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9471,
        9471
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9472,
        9621
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9622,
        9631
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9632,
        9711
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9712,
        9719
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9720,
        9727
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9728,
        9747
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9748,
        9749
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9750,
        9751
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9752,
        9752
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9753,
        9753
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9754,
        9839
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9840,
        9841
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9842,
        9853
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9854,
        9855
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9856,
        9865
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9866,
        9873
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9874,
        9884
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9885,
        9885
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9886,
        9887
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9888,
        9889
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9890,
        9905
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9906,
        9906
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9907,
        9916
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9917,
        9919
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9920,
        9923
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9924,
        9933
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9934,
        9934
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9935,
        9953
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9954,
        9954
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9955,
        9955
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9956,
        9959
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9960,
        9983
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9984,
        9984
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9985,
        9988
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9989,
        9989
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9990,
        9993
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9994,
        9995
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        9996,
        10023
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10024,
        10024
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10025,
        10059
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10060,
        10060
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10061,
        10061
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10062,
        10062
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10063,
        10066
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10067,
        10069
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10070,
        10070
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10071,
        10071
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10072,
        10078
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10079,
        10080
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10081,
        10087
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10088,
        10101
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10102,
        10132
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10133,
        10135
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10136,
        10159
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10160,
        10160
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10161,
        10174
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10175,
        10175
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10176,
        10182
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10183,
        10186
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10187,
        10187
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10188,
        10188
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10189,
        10189
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10190,
        10191
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10192,
        10219
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10220,
        10223
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10224,
        10239
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10240,
        10495
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10496,
        10763
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10764,
        10764
      ],
      "mapped",
      [
        8747,
        8747,
        8747,
        8747
      ]
    ],
    [
      [
        10765,
        10867
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10868,
        10868
      ],
      "disallowed_STD3_mapped",
      [
        58,
        58,
        61
      ]
    ],
    [
      [
        10869,
        10869
      ],
      "disallowed_STD3_mapped",
      [
        61,
        61
      ]
    ],
    [
      [
        10870,
        10870
      ],
      "disallowed_STD3_mapped",
      [
        61,
        61,
        61
      ]
    ],
    [
      [
        10871,
        10971
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        10972,
        10972
      ],
      "mapped",
      [
        10973,
        824
      ]
    ],
    [
      [
        10973,
        11007
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11008,
        11021
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11022,
        11027
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11028,
        11034
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11035,
        11039
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11040,
        11043
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11044,
        11084
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11085,
        11087
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11088,
        11092
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11093,
        11097
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11098,
        11123
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11124,
        11125
      ],
      "disallowed"
    ],
    [
      [
        11126,
        11157
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11158,
        11159
      ],
      "disallowed"
    ],
    [
      [
        11160,
        11193
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11194,
        11196
      ],
      "disallowed"
    ],
    [
      [
        11197,
        11208
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11209,
        11209
      ],
      "disallowed"
    ],
    [
      [
        11210,
        11217
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11218,
        11243
      ],
      "disallowed"
    ],
    [
      [
        11244,
        11247
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11248,
        11263
      ],
      "disallowed"
    ],
    [
      [
        11264,
        11264
      ],
      "mapped",
      [
        11312
      ]
    ],
    [
      [
        11265,
        11265
      ],
      "mapped",
      [
        11313
      ]
    ],
    [
      [
        11266,
        11266
      ],
      "mapped",
      [
        11314
      ]
    ],
    [
      [
        11267,
        11267
      ],
      "mapped",
      [
        11315
      ]
    ],
    [
      [
        11268,
        11268
      ],
      "mapped",
      [
        11316
      ]
    ],
    [
      [
        11269,
        11269
      ],
      "mapped",
      [
        11317
      ]
    ],
    [
      [
        11270,
        11270
      ],
      "mapped",
      [
        11318
      ]
    ],
    [
      [
        11271,
        11271
      ],
      "mapped",
      [
        11319
      ]
    ],
    [
      [
        11272,
        11272
      ],
      "mapped",
      [
        11320
      ]
    ],
    [
      [
        11273,
        11273
      ],
      "mapped",
      [
        11321
      ]
    ],
    [
      [
        11274,
        11274
      ],
      "mapped",
      [
        11322
      ]
    ],
    [
      [
        11275,
        11275
      ],
      "mapped",
      [
        11323
      ]
    ],
    [
      [
        11276,
        11276
      ],
      "mapped",
      [
        11324
      ]
    ],
    [
      [
        11277,
        11277
      ],
      "mapped",
      [
        11325
      ]
    ],
    [
      [
        11278,
        11278
      ],
      "mapped",
      [
        11326
      ]
    ],
    [
      [
        11279,
        11279
      ],
      "mapped",
      [
        11327
      ]
    ],
    [
      [
        11280,
        11280
      ],
      "mapped",
      [
        11328
      ]
    ],
    [
      [
        11281,
        11281
      ],
      "mapped",
      [
        11329
      ]
    ],
    [
      [
        11282,
        11282
      ],
      "mapped",
      [
        11330
      ]
    ],
    [
      [
        11283,
        11283
      ],
      "mapped",
      [
        11331
      ]
    ],
    [
      [
        11284,
        11284
      ],
      "mapped",
      [
        11332
      ]
    ],
    [
      [
        11285,
        11285
      ],
      "mapped",
      [
        11333
      ]
    ],
    [
      [
        11286,
        11286
      ],
      "mapped",
      [
        11334
      ]
    ],
    [
      [
        11287,
        11287
      ],
      "mapped",
      [
        11335
      ]
    ],
    [
      [
        11288,
        11288
      ],
      "mapped",
      [
        11336
      ]
    ],
    [
      [
        11289,
        11289
      ],
      "mapped",
      [
        11337
      ]
    ],
    [
      [
        11290,
        11290
      ],
      "mapped",
      [
        11338
      ]
    ],
    [
      [
        11291,
        11291
      ],
      "mapped",
      [
        11339
      ]
    ],
    [
      [
        11292,
        11292
      ],
      "mapped",
      [
        11340
      ]
    ],
    [
      [
        11293,
        11293
      ],
      "mapped",
      [
        11341
      ]
    ],
    [
      [
        11294,
        11294
      ],
      "mapped",
      [
        11342
      ]
    ],
    [
      [
        11295,
        11295
      ],
      "mapped",
      [
        11343
      ]
    ],
    [
      [
        11296,
        11296
      ],
      "mapped",
      [
        11344
      ]
    ],
    [
      [
        11297,
        11297
      ],
      "mapped",
      [
        11345
      ]
    ],
    [
      [
        11298,
        11298
      ],
      "mapped",
      [
        11346
      ]
    ],
    [
      [
        11299,
        11299
      ],
      "mapped",
      [
        11347
      ]
    ],
    [
      [
        11300,
        11300
      ],
      "mapped",
      [
        11348
      ]
    ],
    [
      [
        11301,
        11301
      ],
      "mapped",
      [
        11349
      ]
    ],
    [
      [
        11302,
        11302
      ],
      "mapped",
      [
        11350
      ]
    ],
    [
      [
        11303,
        11303
      ],
      "mapped",
      [
        11351
      ]
    ],
    [
      [
        11304,
        11304
      ],
      "mapped",
      [
        11352
      ]
    ],
    [
      [
        11305,
        11305
      ],
      "mapped",
      [
        11353
      ]
    ],
    [
      [
        11306,
        11306
      ],
      "mapped",
      [
        11354
      ]
    ],
    [
      [
        11307,
        11307
      ],
      "mapped",
      [
        11355
      ]
    ],
    [
      [
        11308,
        11308
      ],
      "mapped",
      [
        11356
      ]
    ],
    [
      [
        11309,
        11309
      ],
      "mapped",
      [
        11357
      ]
    ],
    [
      [
        11310,
        11310
      ],
      "mapped",
      [
        11358
      ]
    ],
    [
      [
        11311,
        11311
      ],
      "disallowed"
    ],
    [
      [
        11312,
        11358
      ],
      "valid"
    ],
    [
      [
        11359,
        11359
      ],
      "disallowed"
    ],
    [
      [
        11360,
        11360
      ],
      "mapped",
      [
        11361
      ]
    ],
    [
      [
        11361,
        11361
      ],
      "valid"
    ],
    [
      [
        11362,
        11362
      ],
      "mapped",
      [
        619
      ]
    ],
    [
      [
        11363,
        11363
      ],
      "mapped",
      [
        7549
      ]
    ],
    [
      [
        11364,
        11364
      ],
      "mapped",
      [
        637
      ]
    ],
    [
      [
        11365,
        11366
      ],
      "valid"
    ],
    [
      [
        11367,
        11367
      ],
      "mapped",
      [
        11368
      ]
    ],
    [
      [
        11368,
        11368
      ],
      "valid"
    ],
    [
      [
        11369,
        11369
      ],
      "mapped",
      [
        11370
      ]
    ],
    [
      [
        11370,
        11370
      ],
      "valid"
    ],
    [
      [
        11371,
        11371
      ],
      "mapped",
      [
        11372
      ]
    ],
    [
      [
        11372,
        11372
      ],
      "valid"
    ],
    [
      [
        11373,
        11373
      ],
      "mapped",
      [
        593
      ]
    ],
    [
      [
        11374,
        11374
      ],
      "mapped",
      [
        625
      ]
    ],
    [
      [
        11375,
        11375
      ],
      "mapped",
      [
        592
      ]
    ],
    [
      [
        11376,
        11376
      ],
      "mapped",
      [
        594
      ]
    ],
    [
      [
        11377,
        11377
      ],
      "valid"
    ],
    [
      [
        11378,
        11378
      ],
      "mapped",
      [
        11379
      ]
    ],
    [
      [
        11379,
        11379
      ],
      "valid"
    ],
    [
      [
        11380,
        11380
      ],
      "valid"
    ],
    [
      [
        11381,
        11381
      ],
      "mapped",
      [
        11382
      ]
    ],
    [
      [
        11382,
        11383
      ],
      "valid"
    ],
    [
      [
        11384,
        11387
      ],
      "valid"
    ],
    [
      [
        11388,
        11388
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        11389,
        11389
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        11390,
        11390
      ],
      "mapped",
      [
        575
      ]
    ],
    [
      [
        11391,
        11391
      ],
      "mapped",
      [
        576
      ]
    ],
    [
      [
        11392,
        11392
      ],
      "mapped",
      [
        11393
      ]
    ],
    [
      [
        11393,
        11393
      ],
      "valid"
    ],
    [
      [
        11394,
        11394
      ],
      "mapped",
      [
        11395
      ]
    ],
    [
      [
        11395,
        11395
      ],
      "valid"
    ],
    [
      [
        11396,
        11396
      ],
      "mapped",
      [
        11397
      ]
    ],
    [
      [
        11397,
        11397
      ],
      "valid"
    ],
    [
      [
        11398,
        11398
      ],
      "mapped",
      [
        11399
      ]
    ],
    [
      [
        11399,
        11399
      ],
      "valid"
    ],
    [
      [
        11400,
        11400
      ],
      "mapped",
      [
        11401
      ]
    ],
    [
      [
        11401,
        11401
      ],
      "valid"
    ],
    [
      [
        11402,
        11402
      ],
      "mapped",
      [
        11403
      ]
    ],
    [
      [
        11403,
        11403
      ],
      "valid"
    ],
    [
      [
        11404,
        11404
      ],
      "mapped",
      [
        11405
      ]
    ],
    [
      [
        11405,
        11405
      ],
      "valid"
    ],
    [
      [
        11406,
        11406
      ],
      "mapped",
      [
        11407
      ]
    ],
    [
      [
        11407,
        11407
      ],
      "valid"
    ],
    [
      [
        11408,
        11408
      ],
      "mapped",
      [
        11409
      ]
    ],
    [
      [
        11409,
        11409
      ],
      "valid"
    ],
    [
      [
        11410,
        11410
      ],
      "mapped",
      [
        11411
      ]
    ],
    [
      [
        11411,
        11411
      ],
      "valid"
    ],
    [
      [
        11412,
        11412
      ],
      "mapped",
      [
        11413
      ]
    ],
    [
      [
        11413,
        11413
      ],
      "valid"
    ],
    [
      [
        11414,
        11414
      ],
      "mapped",
      [
        11415
      ]
    ],
    [
      [
        11415,
        11415
      ],
      "valid"
    ],
    [
      [
        11416,
        11416
      ],
      "mapped",
      [
        11417
      ]
    ],
    [
      [
        11417,
        11417
      ],
      "valid"
    ],
    [
      [
        11418,
        11418
      ],
      "mapped",
      [
        11419
      ]
    ],
    [
      [
        11419,
        11419
      ],
      "valid"
    ],
    [
      [
        11420,
        11420
      ],
      "mapped",
      [
        11421
      ]
    ],
    [
      [
        11421,
        11421
      ],
      "valid"
    ],
    [
      [
        11422,
        11422
      ],
      "mapped",
      [
        11423
      ]
    ],
    [
      [
        11423,
        11423
      ],
      "valid"
    ],
    [
      [
        11424,
        11424
      ],
      "mapped",
      [
        11425
      ]
    ],
    [
      [
        11425,
        11425
      ],
      "valid"
    ],
    [
      [
        11426,
        11426
      ],
      "mapped",
      [
        11427
      ]
    ],
    [
      [
        11427,
        11427
      ],
      "valid"
    ],
    [
      [
        11428,
        11428
      ],
      "mapped",
      [
        11429
      ]
    ],
    [
      [
        11429,
        11429
      ],
      "valid"
    ],
    [
      [
        11430,
        11430
      ],
      "mapped",
      [
        11431
      ]
    ],
    [
      [
        11431,
        11431
      ],
      "valid"
    ],
    [
      [
        11432,
        11432
      ],
      "mapped",
      [
        11433
      ]
    ],
    [
      [
        11433,
        11433
      ],
      "valid"
    ],
    [
      [
        11434,
        11434
      ],
      "mapped",
      [
        11435
      ]
    ],
    [
      [
        11435,
        11435
      ],
      "valid"
    ],
    [
      [
        11436,
        11436
      ],
      "mapped",
      [
        11437
      ]
    ],
    [
      [
        11437,
        11437
      ],
      "valid"
    ],
    [
      [
        11438,
        11438
      ],
      "mapped",
      [
        11439
      ]
    ],
    [
      [
        11439,
        11439
      ],
      "valid"
    ],
    [
      [
        11440,
        11440
      ],
      "mapped",
      [
        11441
      ]
    ],
    [
      [
        11441,
        11441
      ],
      "valid"
    ],
    [
      [
        11442,
        11442
      ],
      "mapped",
      [
        11443
      ]
    ],
    [
      [
        11443,
        11443
      ],
      "valid"
    ],
    [
      [
        11444,
        11444
      ],
      "mapped",
      [
        11445
      ]
    ],
    [
      [
        11445,
        11445
      ],
      "valid"
    ],
    [
      [
        11446,
        11446
      ],
      "mapped",
      [
        11447
      ]
    ],
    [
      [
        11447,
        11447
      ],
      "valid"
    ],
    [
      [
        11448,
        11448
      ],
      "mapped",
      [
        11449
      ]
    ],
    [
      [
        11449,
        11449
      ],
      "valid"
    ],
    [
      [
        11450,
        11450
      ],
      "mapped",
      [
        11451
      ]
    ],
    [
      [
        11451,
        11451
      ],
      "valid"
    ],
    [
      [
        11452,
        11452
      ],
      "mapped",
      [
        11453
      ]
    ],
    [
      [
        11453,
        11453
      ],
      "valid"
    ],
    [
      [
        11454,
        11454
      ],
      "mapped",
      [
        11455
      ]
    ],
    [
      [
        11455,
        11455
      ],
      "valid"
    ],
    [
      [
        11456,
        11456
      ],
      "mapped",
      [
        11457
      ]
    ],
    [
      [
        11457,
        11457
      ],
      "valid"
    ],
    [
      [
        11458,
        11458
      ],
      "mapped",
      [
        11459
      ]
    ],
    [
      [
        11459,
        11459
      ],
      "valid"
    ],
    [
      [
        11460,
        11460
      ],
      "mapped",
      [
        11461
      ]
    ],
    [
      [
        11461,
        11461
      ],
      "valid"
    ],
    [
      [
        11462,
        11462
      ],
      "mapped",
      [
        11463
      ]
    ],
    [
      [
        11463,
        11463
      ],
      "valid"
    ],
    [
      [
        11464,
        11464
      ],
      "mapped",
      [
        11465
      ]
    ],
    [
      [
        11465,
        11465
      ],
      "valid"
    ],
    [
      [
        11466,
        11466
      ],
      "mapped",
      [
        11467
      ]
    ],
    [
      [
        11467,
        11467
      ],
      "valid"
    ],
    [
      [
        11468,
        11468
      ],
      "mapped",
      [
        11469
      ]
    ],
    [
      [
        11469,
        11469
      ],
      "valid"
    ],
    [
      [
        11470,
        11470
      ],
      "mapped",
      [
        11471
      ]
    ],
    [
      [
        11471,
        11471
      ],
      "valid"
    ],
    [
      [
        11472,
        11472
      ],
      "mapped",
      [
        11473
      ]
    ],
    [
      [
        11473,
        11473
      ],
      "valid"
    ],
    [
      [
        11474,
        11474
      ],
      "mapped",
      [
        11475
      ]
    ],
    [
      [
        11475,
        11475
      ],
      "valid"
    ],
    [
      [
        11476,
        11476
      ],
      "mapped",
      [
        11477
      ]
    ],
    [
      [
        11477,
        11477
      ],
      "valid"
    ],
    [
      [
        11478,
        11478
      ],
      "mapped",
      [
        11479
      ]
    ],
    [
      [
        11479,
        11479
      ],
      "valid"
    ],
    [
      [
        11480,
        11480
      ],
      "mapped",
      [
        11481
      ]
    ],
    [
      [
        11481,
        11481
      ],
      "valid"
    ],
    [
      [
        11482,
        11482
      ],
      "mapped",
      [
        11483
      ]
    ],
    [
      [
        11483,
        11483
      ],
      "valid"
    ],
    [
      [
        11484,
        11484
      ],
      "mapped",
      [
        11485
      ]
    ],
    [
      [
        11485,
        11485
      ],
      "valid"
    ],
    [
      [
        11486,
        11486
      ],
      "mapped",
      [
        11487
      ]
    ],
    [
      [
        11487,
        11487
      ],
      "valid"
    ],
    [
      [
        11488,
        11488
      ],
      "mapped",
      [
        11489
      ]
    ],
    [
      [
        11489,
        11489
      ],
      "valid"
    ],
    [
      [
        11490,
        11490
      ],
      "mapped",
      [
        11491
      ]
    ],
    [
      [
        11491,
        11492
      ],
      "valid"
    ],
    [
      [
        11493,
        11498
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11499,
        11499
      ],
      "mapped",
      [
        11500
      ]
    ],
    [
      [
        11500,
        11500
      ],
      "valid"
    ],
    [
      [
        11501,
        11501
      ],
      "mapped",
      [
        11502
      ]
    ],
    [
      [
        11502,
        11505
      ],
      "valid"
    ],
    [
      [
        11506,
        11506
      ],
      "mapped",
      [
        11507
      ]
    ],
    [
      [
        11507,
        11507
      ],
      "valid"
    ],
    [
      [
        11508,
        11512
      ],
      "disallowed"
    ],
    [
      [
        11513,
        11519
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11520,
        11557
      ],
      "valid"
    ],
    [
      [
        11558,
        11558
      ],
      "disallowed"
    ],
    [
      [
        11559,
        11559
      ],
      "valid"
    ],
    [
      [
        11560,
        11564
      ],
      "disallowed"
    ],
    [
      [
        11565,
        11565
      ],
      "valid"
    ],
    [
      [
        11566,
        11567
      ],
      "disallowed"
    ],
    [
      [
        11568,
        11621
      ],
      "valid"
    ],
    [
      [
        11622,
        11623
      ],
      "valid"
    ],
    [
      [
        11624,
        11630
      ],
      "disallowed"
    ],
    [
      [
        11631,
        11631
      ],
      "mapped",
      [
        11617
      ]
    ],
    [
      [
        11632,
        11632
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11633,
        11646
      ],
      "disallowed"
    ],
    [
      [
        11647,
        11647
      ],
      "valid"
    ],
    [
      [
        11648,
        11670
      ],
      "valid"
    ],
    [
      [
        11671,
        11679
      ],
      "disallowed"
    ],
    [
      [
        11680,
        11686
      ],
      "valid"
    ],
    [
      [
        11687,
        11687
      ],
      "disallowed"
    ],
    [
      [
        11688,
        11694
      ],
      "valid"
    ],
    [
      [
        11695,
        11695
      ],
      "disallowed"
    ],
    [
      [
        11696,
        11702
      ],
      "valid"
    ],
    [
      [
        11703,
        11703
      ],
      "disallowed"
    ],
    [
      [
        11704,
        11710
      ],
      "valid"
    ],
    [
      [
        11711,
        11711
      ],
      "disallowed"
    ],
    [
      [
        11712,
        11718
      ],
      "valid"
    ],
    [
      [
        11719,
        11719
      ],
      "disallowed"
    ],
    [
      [
        11720,
        11726
      ],
      "valid"
    ],
    [
      [
        11727,
        11727
      ],
      "disallowed"
    ],
    [
      [
        11728,
        11734
      ],
      "valid"
    ],
    [
      [
        11735,
        11735
      ],
      "disallowed"
    ],
    [
      [
        11736,
        11742
      ],
      "valid"
    ],
    [
      [
        11743,
        11743
      ],
      "disallowed"
    ],
    [
      [
        11744,
        11775
      ],
      "valid"
    ],
    [
      [
        11776,
        11799
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11800,
        11803
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11804,
        11805
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11806,
        11822
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11823,
        11823
      ],
      "valid"
    ],
    [
      [
        11824,
        11824
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11825,
        11825
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11826,
        11835
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11836,
        11842
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11843,
        11903
      ],
      "disallowed"
    ],
    [
      [
        11904,
        11929
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11930,
        11930
      ],
      "disallowed"
    ],
    [
      [
        11931,
        11934
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        11935,
        11935
      ],
      "mapped",
      [
        27597
      ]
    ],
    [
      [
        11936,
        12018
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12019,
        12019
      ],
      "mapped",
      [
        40863
      ]
    ],
    [
      [
        12020,
        12031
      ],
      "disallowed"
    ],
    [
      [
        12032,
        12032
      ],
      "mapped",
      [
        19968
      ]
    ],
    [
      [
        12033,
        12033
      ],
      "mapped",
      [
        20008
      ]
    ],
    [
      [
        12034,
        12034
      ],
      "mapped",
      [
        20022
      ]
    ],
    [
      [
        12035,
        12035
      ],
      "mapped",
      [
        20031
      ]
    ],
    [
      [
        12036,
        12036
      ],
      "mapped",
      [
        20057
      ]
    ],
    [
      [
        12037,
        12037
      ],
      "mapped",
      [
        20101
      ]
    ],
    [
      [
        12038,
        12038
      ],
      "mapped",
      [
        20108
      ]
    ],
    [
      [
        12039,
        12039
      ],
      "mapped",
      [
        20128
      ]
    ],
    [
      [
        12040,
        12040
      ],
      "mapped",
      [
        20154
      ]
    ],
    [
      [
        12041,
        12041
      ],
      "mapped",
      [
        20799
      ]
    ],
    [
      [
        12042,
        12042
      ],
      "mapped",
      [
        20837
      ]
    ],
    [
      [
        12043,
        12043
      ],
      "mapped",
      [
        20843
      ]
    ],
    [
      [
        12044,
        12044
      ],
      "mapped",
      [
        20866
      ]
    ],
    [
      [
        12045,
        12045
      ],
      "mapped",
      [
        20886
      ]
    ],
    [
      [
        12046,
        12046
      ],
      "mapped",
      [
        20907
      ]
    ],
    [
      [
        12047,
        12047
      ],
      "mapped",
      [
        20960
      ]
    ],
    [
      [
        12048,
        12048
      ],
      "mapped",
      [
        20981
      ]
    ],
    [
      [
        12049,
        12049
      ],
      "mapped",
      [
        20992
      ]
    ],
    [
      [
        12050,
        12050
      ],
      "mapped",
      [
        21147
      ]
    ],
    [
      [
        12051,
        12051
      ],
      "mapped",
      [
        21241
      ]
    ],
    [
      [
        12052,
        12052
      ],
      "mapped",
      [
        21269
      ]
    ],
    [
      [
        12053,
        12053
      ],
      "mapped",
      [
        21274
      ]
    ],
    [
      [
        12054,
        12054
      ],
      "mapped",
      [
        21304
      ]
    ],
    [
      [
        12055,
        12055
      ],
      "mapped",
      [
        21313
      ]
    ],
    [
      [
        12056,
        12056
      ],
      "mapped",
      [
        21340
      ]
    ],
    [
      [
        12057,
        12057
      ],
      "mapped",
      [
        21353
      ]
    ],
    [
      [
        12058,
        12058
      ],
      "mapped",
      [
        21378
      ]
    ],
    [
      [
        12059,
        12059
      ],
      "mapped",
      [
        21430
      ]
    ],
    [
      [
        12060,
        12060
      ],
      "mapped",
      [
        21448
      ]
    ],
    [
      [
        12061,
        12061
      ],
      "mapped",
      [
        21475
      ]
    ],
    [
      [
        12062,
        12062
      ],
      "mapped",
      [
        22231
      ]
    ],
    [
      [
        12063,
        12063
      ],
      "mapped",
      [
        22303
      ]
    ],
    [
      [
        12064,
        12064
      ],
      "mapped",
      [
        22763
      ]
    ],
    [
      [
        12065,
        12065
      ],
      "mapped",
      [
        22786
      ]
    ],
    [
      [
        12066,
        12066
      ],
      "mapped",
      [
        22794
      ]
    ],
    [
      [
        12067,
        12067
      ],
      "mapped",
      [
        22805
      ]
    ],
    [
      [
        12068,
        12068
      ],
      "mapped",
      [
        22823
      ]
    ],
    [
      [
        12069,
        12069
      ],
      "mapped",
      [
        22899
      ]
    ],
    [
      [
        12070,
        12070
      ],
      "mapped",
      [
        23376
      ]
    ],
    [
      [
        12071,
        12071
      ],
      "mapped",
      [
        23424
      ]
    ],
    [
      [
        12072,
        12072
      ],
      "mapped",
      [
        23544
      ]
    ],
    [
      [
        12073,
        12073
      ],
      "mapped",
      [
        23567
      ]
    ],
    [
      [
        12074,
        12074
      ],
      "mapped",
      [
        23586
      ]
    ],
    [
      [
        12075,
        12075
      ],
      "mapped",
      [
        23608
      ]
    ],
    [
      [
        12076,
        12076
      ],
      "mapped",
      [
        23662
      ]
    ],
    [
      [
        12077,
        12077
      ],
      "mapped",
      [
        23665
      ]
    ],
    [
      [
        12078,
        12078
      ],
      "mapped",
      [
        24027
      ]
    ],
    [
      [
        12079,
        12079
      ],
      "mapped",
      [
        24037
      ]
    ],
    [
      [
        12080,
        12080
      ],
      "mapped",
      [
        24049
      ]
    ],
    [
      [
        12081,
        12081
      ],
      "mapped",
      [
        24062
      ]
    ],
    [
      [
        12082,
        12082
      ],
      "mapped",
      [
        24178
      ]
    ],
    [
      [
        12083,
        12083
      ],
      "mapped",
      [
        24186
      ]
    ],
    [
      [
        12084,
        12084
      ],
      "mapped",
      [
        24191
      ]
    ],
    [
      [
        12085,
        12085
      ],
      "mapped",
      [
        24308
      ]
    ],
    [
      [
        12086,
        12086
      ],
      "mapped",
      [
        24318
      ]
    ],
    [
      [
        12087,
        12087
      ],
      "mapped",
      [
        24331
      ]
    ],
    [
      [
        12088,
        12088
      ],
      "mapped",
      [
        24339
      ]
    ],
    [
      [
        12089,
        12089
      ],
      "mapped",
      [
        24400
      ]
    ],
    [
      [
        12090,
        12090
      ],
      "mapped",
      [
        24417
      ]
    ],
    [
      [
        12091,
        12091
      ],
      "mapped",
      [
        24435
      ]
    ],
    [
      [
        12092,
        12092
      ],
      "mapped",
      [
        24515
      ]
    ],
    [
      [
        12093,
        12093
      ],
      "mapped",
      [
        25096
      ]
    ],
    [
      [
        12094,
        12094
      ],
      "mapped",
      [
        25142
      ]
    ],
    [
      [
        12095,
        12095
      ],
      "mapped",
      [
        25163
      ]
    ],
    [
      [
        12096,
        12096
      ],
      "mapped",
      [
        25903
      ]
    ],
    [
      [
        12097,
        12097
      ],
      "mapped",
      [
        25908
      ]
    ],
    [
      [
        12098,
        12098
      ],
      "mapped",
      [
        25991
      ]
    ],
    [
      [
        12099,
        12099
      ],
      "mapped",
      [
        26007
      ]
    ],
    [
      [
        12100,
        12100
      ],
      "mapped",
      [
        26020
      ]
    ],
    [
      [
        12101,
        12101
      ],
      "mapped",
      [
        26041
      ]
    ],
    [
      [
        12102,
        12102
      ],
      "mapped",
      [
        26080
      ]
    ],
    [
      [
        12103,
        12103
      ],
      "mapped",
      [
        26085
      ]
    ],
    [
      [
        12104,
        12104
      ],
      "mapped",
      [
        26352
      ]
    ],
    [
      [
        12105,
        12105
      ],
      "mapped",
      [
        26376
      ]
    ],
    [
      [
        12106,
        12106
      ],
      "mapped",
      [
        26408
      ]
    ],
    [
      [
        12107,
        12107
      ],
      "mapped",
      [
        27424
      ]
    ],
    [
      [
        12108,
        12108
      ],
      "mapped",
      [
        27490
      ]
    ],
    [
      [
        12109,
        12109
      ],
      "mapped",
      [
        27513
      ]
    ],
    [
      [
        12110,
        12110
      ],
      "mapped",
      [
        27571
      ]
    ],
    [
      [
        12111,
        12111
      ],
      "mapped",
      [
        27595
      ]
    ],
    [
      [
        12112,
        12112
      ],
      "mapped",
      [
        27604
      ]
    ],
    [
      [
        12113,
        12113
      ],
      "mapped",
      [
        27611
      ]
    ],
    [
      [
        12114,
        12114
      ],
      "mapped",
      [
        27663
      ]
    ],
    [
      [
        12115,
        12115
      ],
      "mapped",
      [
        27668
      ]
    ],
    [
      [
        12116,
        12116
      ],
      "mapped",
      [
        27700
      ]
    ],
    [
      [
        12117,
        12117
      ],
      "mapped",
      [
        28779
      ]
    ],
    [
      [
        12118,
        12118
      ],
      "mapped",
      [
        29226
      ]
    ],
    [
      [
        12119,
        12119
      ],
      "mapped",
      [
        29238
      ]
    ],
    [
      [
        12120,
        12120
      ],
      "mapped",
      [
        29243
      ]
    ],
    [
      [
        12121,
        12121
      ],
      "mapped",
      [
        29247
      ]
    ],
    [
      [
        12122,
        12122
      ],
      "mapped",
      [
        29255
      ]
    ],
    [
      [
        12123,
        12123
      ],
      "mapped",
      [
        29273
      ]
    ],
    [
      [
        12124,
        12124
      ],
      "mapped",
      [
        29275
      ]
    ],
    [
      [
        12125,
        12125
      ],
      "mapped",
      [
        29356
      ]
    ],
    [
      [
        12126,
        12126
      ],
      "mapped",
      [
        29572
      ]
    ],
    [
      [
        12127,
        12127
      ],
      "mapped",
      [
        29577
      ]
    ],
    [
      [
        12128,
        12128
      ],
      "mapped",
      [
        29916
      ]
    ],
    [
      [
        12129,
        12129
      ],
      "mapped",
      [
        29926
      ]
    ],
    [
      [
        12130,
        12130
      ],
      "mapped",
      [
        29976
      ]
    ],
    [
      [
        12131,
        12131
      ],
      "mapped",
      [
        29983
      ]
    ],
    [
      [
        12132,
        12132
      ],
      "mapped",
      [
        29992
      ]
    ],
    [
      [
        12133,
        12133
      ],
      "mapped",
      [
        3e4
      ]
    ],
    [
      [
        12134,
        12134
      ],
      "mapped",
      [
        30091
      ]
    ],
    [
      [
        12135,
        12135
      ],
      "mapped",
      [
        30098
      ]
    ],
    [
      [
        12136,
        12136
      ],
      "mapped",
      [
        30326
      ]
    ],
    [
      [
        12137,
        12137
      ],
      "mapped",
      [
        30333
      ]
    ],
    [
      [
        12138,
        12138
      ],
      "mapped",
      [
        30382
      ]
    ],
    [
      [
        12139,
        12139
      ],
      "mapped",
      [
        30399
      ]
    ],
    [
      [
        12140,
        12140
      ],
      "mapped",
      [
        30446
      ]
    ],
    [
      [
        12141,
        12141
      ],
      "mapped",
      [
        30683
      ]
    ],
    [
      [
        12142,
        12142
      ],
      "mapped",
      [
        30690
      ]
    ],
    [
      [
        12143,
        12143
      ],
      "mapped",
      [
        30707
      ]
    ],
    [
      [
        12144,
        12144
      ],
      "mapped",
      [
        31034
      ]
    ],
    [
      [
        12145,
        12145
      ],
      "mapped",
      [
        31160
      ]
    ],
    [
      [
        12146,
        12146
      ],
      "mapped",
      [
        31166
      ]
    ],
    [
      [
        12147,
        12147
      ],
      "mapped",
      [
        31348
      ]
    ],
    [
      [
        12148,
        12148
      ],
      "mapped",
      [
        31435
      ]
    ],
    [
      [
        12149,
        12149
      ],
      "mapped",
      [
        31481
      ]
    ],
    [
      [
        12150,
        12150
      ],
      "mapped",
      [
        31859
      ]
    ],
    [
      [
        12151,
        12151
      ],
      "mapped",
      [
        31992
      ]
    ],
    [
      [
        12152,
        12152
      ],
      "mapped",
      [
        32566
      ]
    ],
    [
      [
        12153,
        12153
      ],
      "mapped",
      [
        32593
      ]
    ],
    [
      [
        12154,
        12154
      ],
      "mapped",
      [
        32650
      ]
    ],
    [
      [
        12155,
        12155
      ],
      "mapped",
      [
        32701
      ]
    ],
    [
      [
        12156,
        12156
      ],
      "mapped",
      [
        32769
      ]
    ],
    [
      [
        12157,
        12157
      ],
      "mapped",
      [
        32780
      ]
    ],
    [
      [
        12158,
        12158
      ],
      "mapped",
      [
        32786
      ]
    ],
    [
      [
        12159,
        12159
      ],
      "mapped",
      [
        32819
      ]
    ],
    [
      [
        12160,
        12160
      ],
      "mapped",
      [
        32895
      ]
    ],
    [
      [
        12161,
        12161
      ],
      "mapped",
      [
        32905
      ]
    ],
    [
      [
        12162,
        12162
      ],
      "mapped",
      [
        33251
      ]
    ],
    [
      [
        12163,
        12163
      ],
      "mapped",
      [
        33258
      ]
    ],
    [
      [
        12164,
        12164
      ],
      "mapped",
      [
        33267
      ]
    ],
    [
      [
        12165,
        12165
      ],
      "mapped",
      [
        33276
      ]
    ],
    [
      [
        12166,
        12166
      ],
      "mapped",
      [
        33292
      ]
    ],
    [
      [
        12167,
        12167
      ],
      "mapped",
      [
        33307
      ]
    ],
    [
      [
        12168,
        12168
      ],
      "mapped",
      [
        33311
      ]
    ],
    [
      [
        12169,
        12169
      ],
      "mapped",
      [
        33390
      ]
    ],
    [
      [
        12170,
        12170
      ],
      "mapped",
      [
        33394
      ]
    ],
    [
      [
        12171,
        12171
      ],
      "mapped",
      [
        33400
      ]
    ],
    [
      [
        12172,
        12172
      ],
      "mapped",
      [
        34381
      ]
    ],
    [
      [
        12173,
        12173
      ],
      "mapped",
      [
        34411
      ]
    ],
    [
      [
        12174,
        12174
      ],
      "mapped",
      [
        34880
      ]
    ],
    [
      [
        12175,
        12175
      ],
      "mapped",
      [
        34892
      ]
    ],
    [
      [
        12176,
        12176
      ],
      "mapped",
      [
        34915
      ]
    ],
    [
      [
        12177,
        12177
      ],
      "mapped",
      [
        35198
      ]
    ],
    [
      [
        12178,
        12178
      ],
      "mapped",
      [
        35211
      ]
    ],
    [
      [
        12179,
        12179
      ],
      "mapped",
      [
        35282
      ]
    ],
    [
      [
        12180,
        12180
      ],
      "mapped",
      [
        35328
      ]
    ],
    [
      [
        12181,
        12181
      ],
      "mapped",
      [
        35895
      ]
    ],
    [
      [
        12182,
        12182
      ],
      "mapped",
      [
        35910
      ]
    ],
    [
      [
        12183,
        12183
      ],
      "mapped",
      [
        35925
      ]
    ],
    [
      [
        12184,
        12184
      ],
      "mapped",
      [
        35960
      ]
    ],
    [
      [
        12185,
        12185
      ],
      "mapped",
      [
        35997
      ]
    ],
    [
      [
        12186,
        12186
      ],
      "mapped",
      [
        36196
      ]
    ],
    [
      [
        12187,
        12187
      ],
      "mapped",
      [
        36208
      ]
    ],
    [
      [
        12188,
        12188
      ],
      "mapped",
      [
        36275
      ]
    ],
    [
      [
        12189,
        12189
      ],
      "mapped",
      [
        36523
      ]
    ],
    [
      [
        12190,
        12190
      ],
      "mapped",
      [
        36554
      ]
    ],
    [
      [
        12191,
        12191
      ],
      "mapped",
      [
        36763
      ]
    ],
    [
      [
        12192,
        12192
      ],
      "mapped",
      [
        36784
      ]
    ],
    [
      [
        12193,
        12193
      ],
      "mapped",
      [
        36789
      ]
    ],
    [
      [
        12194,
        12194
      ],
      "mapped",
      [
        37009
      ]
    ],
    [
      [
        12195,
        12195
      ],
      "mapped",
      [
        37193
      ]
    ],
    [
      [
        12196,
        12196
      ],
      "mapped",
      [
        37318
      ]
    ],
    [
      [
        12197,
        12197
      ],
      "mapped",
      [
        37324
      ]
    ],
    [
      [
        12198,
        12198
      ],
      "mapped",
      [
        37329
      ]
    ],
    [
      [
        12199,
        12199
      ],
      "mapped",
      [
        38263
      ]
    ],
    [
      [
        12200,
        12200
      ],
      "mapped",
      [
        38272
      ]
    ],
    [
      [
        12201,
        12201
      ],
      "mapped",
      [
        38428
      ]
    ],
    [
      [
        12202,
        12202
      ],
      "mapped",
      [
        38582
      ]
    ],
    [
      [
        12203,
        12203
      ],
      "mapped",
      [
        38585
      ]
    ],
    [
      [
        12204,
        12204
      ],
      "mapped",
      [
        38632
      ]
    ],
    [
      [
        12205,
        12205
      ],
      "mapped",
      [
        38737
      ]
    ],
    [
      [
        12206,
        12206
      ],
      "mapped",
      [
        38750
      ]
    ],
    [
      [
        12207,
        12207
      ],
      "mapped",
      [
        38754
      ]
    ],
    [
      [
        12208,
        12208
      ],
      "mapped",
      [
        38761
      ]
    ],
    [
      [
        12209,
        12209
      ],
      "mapped",
      [
        38859
      ]
    ],
    [
      [
        12210,
        12210
      ],
      "mapped",
      [
        38893
      ]
    ],
    [
      [
        12211,
        12211
      ],
      "mapped",
      [
        38899
      ]
    ],
    [
      [
        12212,
        12212
      ],
      "mapped",
      [
        38913
      ]
    ],
    [
      [
        12213,
        12213
      ],
      "mapped",
      [
        39080
      ]
    ],
    [
      [
        12214,
        12214
      ],
      "mapped",
      [
        39131
      ]
    ],
    [
      [
        12215,
        12215
      ],
      "mapped",
      [
        39135
      ]
    ],
    [
      [
        12216,
        12216
      ],
      "mapped",
      [
        39318
      ]
    ],
    [
      [
        12217,
        12217
      ],
      "mapped",
      [
        39321
      ]
    ],
    [
      [
        12218,
        12218
      ],
      "mapped",
      [
        39340
      ]
    ],
    [
      [
        12219,
        12219
      ],
      "mapped",
      [
        39592
      ]
    ],
    [
      [
        12220,
        12220
      ],
      "mapped",
      [
        39640
      ]
    ],
    [
      [
        12221,
        12221
      ],
      "mapped",
      [
        39647
      ]
    ],
    [
      [
        12222,
        12222
      ],
      "mapped",
      [
        39717
      ]
    ],
    [
      [
        12223,
        12223
      ],
      "mapped",
      [
        39727
      ]
    ],
    [
      [
        12224,
        12224
      ],
      "mapped",
      [
        39730
      ]
    ],
    [
      [
        12225,
        12225
      ],
      "mapped",
      [
        39740
      ]
    ],
    [
      [
        12226,
        12226
      ],
      "mapped",
      [
        39770
      ]
    ],
    [
      [
        12227,
        12227
      ],
      "mapped",
      [
        40165
      ]
    ],
    [
      [
        12228,
        12228
      ],
      "mapped",
      [
        40565
      ]
    ],
    [
      [
        12229,
        12229
      ],
      "mapped",
      [
        40575
      ]
    ],
    [
      [
        12230,
        12230
      ],
      "mapped",
      [
        40613
      ]
    ],
    [
      [
        12231,
        12231
      ],
      "mapped",
      [
        40635
      ]
    ],
    [
      [
        12232,
        12232
      ],
      "mapped",
      [
        40643
      ]
    ],
    [
      [
        12233,
        12233
      ],
      "mapped",
      [
        40653
      ]
    ],
    [
      [
        12234,
        12234
      ],
      "mapped",
      [
        40657
      ]
    ],
    [
      [
        12235,
        12235
      ],
      "mapped",
      [
        40697
      ]
    ],
    [
      [
        12236,
        12236
      ],
      "mapped",
      [
        40701
      ]
    ],
    [
      [
        12237,
        12237
      ],
      "mapped",
      [
        40718
      ]
    ],
    [
      [
        12238,
        12238
      ],
      "mapped",
      [
        40723
      ]
    ],
    [
      [
        12239,
        12239
      ],
      "mapped",
      [
        40736
      ]
    ],
    [
      [
        12240,
        12240
      ],
      "mapped",
      [
        40763
      ]
    ],
    [
      [
        12241,
        12241
      ],
      "mapped",
      [
        40778
      ]
    ],
    [
      [
        12242,
        12242
      ],
      "mapped",
      [
        40786
      ]
    ],
    [
      [
        12243,
        12243
      ],
      "mapped",
      [
        40845
      ]
    ],
    [
      [
        12244,
        12244
      ],
      "mapped",
      [
        40860
      ]
    ],
    [
      [
        12245,
        12245
      ],
      "mapped",
      [
        40864
      ]
    ],
    [
      [
        12246,
        12271
      ],
      "disallowed"
    ],
    [
      [
        12272,
        12283
      ],
      "disallowed"
    ],
    [
      [
        12284,
        12287
      ],
      "disallowed"
    ],
    [
      [
        12288,
        12288
      ],
      "disallowed_STD3_mapped",
      [
        32
      ]
    ],
    [
      [
        12289,
        12289
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12290,
        12290
      ],
      "mapped",
      [
        46
      ]
    ],
    [
      [
        12291,
        12292
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12293,
        12295
      ],
      "valid"
    ],
    [
      [
        12296,
        12329
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12330,
        12333
      ],
      "valid"
    ],
    [
      [
        12334,
        12341
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12342,
        12342
      ],
      "mapped",
      [
        12306
      ]
    ],
    [
      [
        12343,
        12343
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12344,
        12344
      ],
      "mapped",
      [
        21313
      ]
    ],
    [
      [
        12345,
        12345
      ],
      "mapped",
      [
        21316
      ]
    ],
    [
      [
        12346,
        12346
      ],
      "mapped",
      [
        21317
      ]
    ],
    [
      [
        12347,
        12347
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12348,
        12348
      ],
      "valid"
    ],
    [
      [
        12349,
        12349
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12350,
        12350
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12351,
        12351
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12352,
        12352
      ],
      "disallowed"
    ],
    [
      [
        12353,
        12436
      ],
      "valid"
    ],
    [
      [
        12437,
        12438
      ],
      "valid"
    ],
    [
      [
        12439,
        12440
      ],
      "disallowed"
    ],
    [
      [
        12441,
        12442
      ],
      "valid"
    ],
    [
      [
        12443,
        12443
      ],
      "disallowed_STD3_mapped",
      [
        32,
        12441
      ]
    ],
    [
      [
        12444,
        12444
      ],
      "disallowed_STD3_mapped",
      [
        32,
        12442
      ]
    ],
    [
      [
        12445,
        12446
      ],
      "valid"
    ],
    [
      [
        12447,
        12447
      ],
      "mapped",
      [
        12424,
        12426
      ]
    ],
    [
      [
        12448,
        12448
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12449,
        12542
      ],
      "valid"
    ],
    [
      [
        12543,
        12543
      ],
      "mapped",
      [
        12467,
        12488
      ]
    ],
    [
      [
        12544,
        12548
      ],
      "disallowed"
    ],
    [
      [
        12549,
        12588
      ],
      "valid"
    ],
    [
      [
        12589,
        12589
      ],
      "valid"
    ],
    [
      [
        12590,
        12592
      ],
      "disallowed"
    ],
    [
      [
        12593,
        12593
      ],
      "mapped",
      [
        4352
      ]
    ],
    [
      [
        12594,
        12594
      ],
      "mapped",
      [
        4353
      ]
    ],
    [
      [
        12595,
        12595
      ],
      "mapped",
      [
        4522
      ]
    ],
    [
      [
        12596,
        12596
      ],
      "mapped",
      [
        4354
      ]
    ],
    [
      [
        12597,
        12597
      ],
      "mapped",
      [
        4524
      ]
    ],
    [
      [
        12598,
        12598
      ],
      "mapped",
      [
        4525
      ]
    ],
    [
      [
        12599,
        12599
      ],
      "mapped",
      [
        4355
      ]
    ],
    [
      [
        12600,
        12600
      ],
      "mapped",
      [
        4356
      ]
    ],
    [
      [
        12601,
        12601
      ],
      "mapped",
      [
        4357
      ]
    ],
    [
      [
        12602,
        12602
      ],
      "mapped",
      [
        4528
      ]
    ],
    [
      [
        12603,
        12603
      ],
      "mapped",
      [
        4529
      ]
    ],
    [
      [
        12604,
        12604
      ],
      "mapped",
      [
        4530
      ]
    ],
    [
      [
        12605,
        12605
      ],
      "mapped",
      [
        4531
      ]
    ],
    [
      [
        12606,
        12606
      ],
      "mapped",
      [
        4532
      ]
    ],
    [
      [
        12607,
        12607
      ],
      "mapped",
      [
        4533
      ]
    ],
    [
      [
        12608,
        12608
      ],
      "mapped",
      [
        4378
      ]
    ],
    [
      [
        12609,
        12609
      ],
      "mapped",
      [
        4358
      ]
    ],
    [
      [
        12610,
        12610
      ],
      "mapped",
      [
        4359
      ]
    ],
    [
      [
        12611,
        12611
      ],
      "mapped",
      [
        4360
      ]
    ],
    [
      [
        12612,
        12612
      ],
      "mapped",
      [
        4385
      ]
    ],
    [
      [
        12613,
        12613
      ],
      "mapped",
      [
        4361
      ]
    ],
    [
      [
        12614,
        12614
      ],
      "mapped",
      [
        4362
      ]
    ],
    [
      [
        12615,
        12615
      ],
      "mapped",
      [
        4363
      ]
    ],
    [
      [
        12616,
        12616
      ],
      "mapped",
      [
        4364
      ]
    ],
    [
      [
        12617,
        12617
      ],
      "mapped",
      [
        4365
      ]
    ],
    [
      [
        12618,
        12618
      ],
      "mapped",
      [
        4366
      ]
    ],
    [
      [
        12619,
        12619
      ],
      "mapped",
      [
        4367
      ]
    ],
    [
      [
        12620,
        12620
      ],
      "mapped",
      [
        4368
      ]
    ],
    [
      [
        12621,
        12621
      ],
      "mapped",
      [
        4369
      ]
    ],
    [
      [
        12622,
        12622
      ],
      "mapped",
      [
        4370
      ]
    ],
    [
      [
        12623,
        12623
      ],
      "mapped",
      [
        4449
      ]
    ],
    [
      [
        12624,
        12624
      ],
      "mapped",
      [
        4450
      ]
    ],
    [
      [
        12625,
        12625
      ],
      "mapped",
      [
        4451
      ]
    ],
    [
      [
        12626,
        12626
      ],
      "mapped",
      [
        4452
      ]
    ],
    [
      [
        12627,
        12627
      ],
      "mapped",
      [
        4453
      ]
    ],
    [
      [
        12628,
        12628
      ],
      "mapped",
      [
        4454
      ]
    ],
    [
      [
        12629,
        12629
      ],
      "mapped",
      [
        4455
      ]
    ],
    [
      [
        12630,
        12630
      ],
      "mapped",
      [
        4456
      ]
    ],
    [
      [
        12631,
        12631
      ],
      "mapped",
      [
        4457
      ]
    ],
    [
      [
        12632,
        12632
      ],
      "mapped",
      [
        4458
      ]
    ],
    [
      [
        12633,
        12633
      ],
      "mapped",
      [
        4459
      ]
    ],
    [
      [
        12634,
        12634
      ],
      "mapped",
      [
        4460
      ]
    ],
    [
      [
        12635,
        12635
      ],
      "mapped",
      [
        4461
      ]
    ],
    [
      [
        12636,
        12636
      ],
      "mapped",
      [
        4462
      ]
    ],
    [
      [
        12637,
        12637
      ],
      "mapped",
      [
        4463
      ]
    ],
    [
      [
        12638,
        12638
      ],
      "mapped",
      [
        4464
      ]
    ],
    [
      [
        12639,
        12639
      ],
      "mapped",
      [
        4465
      ]
    ],
    [
      [
        12640,
        12640
      ],
      "mapped",
      [
        4466
      ]
    ],
    [
      [
        12641,
        12641
      ],
      "mapped",
      [
        4467
      ]
    ],
    [
      [
        12642,
        12642
      ],
      "mapped",
      [
        4468
      ]
    ],
    [
      [
        12643,
        12643
      ],
      "mapped",
      [
        4469
      ]
    ],
    [
      [
        12644,
        12644
      ],
      "disallowed"
    ],
    [
      [
        12645,
        12645
      ],
      "mapped",
      [
        4372
      ]
    ],
    [
      [
        12646,
        12646
      ],
      "mapped",
      [
        4373
      ]
    ],
    [
      [
        12647,
        12647
      ],
      "mapped",
      [
        4551
      ]
    ],
    [
      [
        12648,
        12648
      ],
      "mapped",
      [
        4552
      ]
    ],
    [
      [
        12649,
        12649
      ],
      "mapped",
      [
        4556
      ]
    ],
    [
      [
        12650,
        12650
      ],
      "mapped",
      [
        4558
      ]
    ],
    [
      [
        12651,
        12651
      ],
      "mapped",
      [
        4563
      ]
    ],
    [
      [
        12652,
        12652
      ],
      "mapped",
      [
        4567
      ]
    ],
    [
      [
        12653,
        12653
      ],
      "mapped",
      [
        4569
      ]
    ],
    [
      [
        12654,
        12654
      ],
      "mapped",
      [
        4380
      ]
    ],
    [
      [
        12655,
        12655
      ],
      "mapped",
      [
        4573
      ]
    ],
    [
      [
        12656,
        12656
      ],
      "mapped",
      [
        4575
      ]
    ],
    [
      [
        12657,
        12657
      ],
      "mapped",
      [
        4381
      ]
    ],
    [
      [
        12658,
        12658
      ],
      "mapped",
      [
        4382
      ]
    ],
    [
      [
        12659,
        12659
      ],
      "mapped",
      [
        4384
      ]
    ],
    [
      [
        12660,
        12660
      ],
      "mapped",
      [
        4386
      ]
    ],
    [
      [
        12661,
        12661
      ],
      "mapped",
      [
        4387
      ]
    ],
    [
      [
        12662,
        12662
      ],
      "mapped",
      [
        4391
      ]
    ],
    [
      [
        12663,
        12663
      ],
      "mapped",
      [
        4393
      ]
    ],
    [
      [
        12664,
        12664
      ],
      "mapped",
      [
        4395
      ]
    ],
    [
      [
        12665,
        12665
      ],
      "mapped",
      [
        4396
      ]
    ],
    [
      [
        12666,
        12666
      ],
      "mapped",
      [
        4397
      ]
    ],
    [
      [
        12667,
        12667
      ],
      "mapped",
      [
        4398
      ]
    ],
    [
      [
        12668,
        12668
      ],
      "mapped",
      [
        4399
      ]
    ],
    [
      [
        12669,
        12669
      ],
      "mapped",
      [
        4402
      ]
    ],
    [
      [
        12670,
        12670
      ],
      "mapped",
      [
        4406
      ]
    ],
    [
      [
        12671,
        12671
      ],
      "mapped",
      [
        4416
      ]
    ],
    [
      [
        12672,
        12672
      ],
      "mapped",
      [
        4423
      ]
    ],
    [
      [
        12673,
        12673
      ],
      "mapped",
      [
        4428
      ]
    ],
    [
      [
        12674,
        12674
      ],
      "mapped",
      [
        4593
      ]
    ],
    [
      [
        12675,
        12675
      ],
      "mapped",
      [
        4594
      ]
    ],
    [
      [
        12676,
        12676
      ],
      "mapped",
      [
        4439
      ]
    ],
    [
      [
        12677,
        12677
      ],
      "mapped",
      [
        4440
      ]
    ],
    [
      [
        12678,
        12678
      ],
      "mapped",
      [
        4441
      ]
    ],
    [
      [
        12679,
        12679
      ],
      "mapped",
      [
        4484
      ]
    ],
    [
      [
        12680,
        12680
      ],
      "mapped",
      [
        4485
      ]
    ],
    [
      [
        12681,
        12681
      ],
      "mapped",
      [
        4488
      ]
    ],
    [
      [
        12682,
        12682
      ],
      "mapped",
      [
        4497
      ]
    ],
    [
      [
        12683,
        12683
      ],
      "mapped",
      [
        4498
      ]
    ],
    [
      [
        12684,
        12684
      ],
      "mapped",
      [
        4500
      ]
    ],
    [
      [
        12685,
        12685
      ],
      "mapped",
      [
        4510
      ]
    ],
    [
      [
        12686,
        12686
      ],
      "mapped",
      [
        4513
      ]
    ],
    [
      [
        12687,
        12687
      ],
      "disallowed"
    ],
    [
      [
        12688,
        12689
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12690,
        12690
      ],
      "mapped",
      [
        19968
      ]
    ],
    [
      [
        12691,
        12691
      ],
      "mapped",
      [
        20108
      ]
    ],
    [
      [
        12692,
        12692
      ],
      "mapped",
      [
        19977
      ]
    ],
    [
      [
        12693,
        12693
      ],
      "mapped",
      [
        22235
      ]
    ],
    [
      [
        12694,
        12694
      ],
      "mapped",
      [
        19978
      ]
    ],
    [
      [
        12695,
        12695
      ],
      "mapped",
      [
        20013
      ]
    ],
    [
      [
        12696,
        12696
      ],
      "mapped",
      [
        19979
      ]
    ],
    [
      [
        12697,
        12697
      ],
      "mapped",
      [
        30002
      ]
    ],
    [
      [
        12698,
        12698
      ],
      "mapped",
      [
        20057
      ]
    ],
    [
      [
        12699,
        12699
      ],
      "mapped",
      [
        19993
      ]
    ],
    [
      [
        12700,
        12700
      ],
      "mapped",
      [
        19969
      ]
    ],
    [
      [
        12701,
        12701
      ],
      "mapped",
      [
        22825
      ]
    ],
    [
      [
        12702,
        12702
      ],
      "mapped",
      [
        22320
      ]
    ],
    [
      [
        12703,
        12703
      ],
      "mapped",
      [
        20154
      ]
    ],
    [
      [
        12704,
        12727
      ],
      "valid"
    ],
    [
      [
        12728,
        12730
      ],
      "valid"
    ],
    [
      [
        12731,
        12735
      ],
      "disallowed"
    ],
    [
      [
        12736,
        12751
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12752,
        12771
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12772,
        12783
      ],
      "disallowed"
    ],
    [
      [
        12784,
        12799
      ],
      "valid"
    ],
    [
      [
        12800,
        12800
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4352,
        41
      ]
    ],
    [
      [
        12801,
        12801
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4354,
        41
      ]
    ],
    [
      [
        12802,
        12802
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4355,
        41
      ]
    ],
    [
      [
        12803,
        12803
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4357,
        41
      ]
    ],
    [
      [
        12804,
        12804
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4358,
        41
      ]
    ],
    [
      [
        12805,
        12805
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4359,
        41
      ]
    ],
    [
      [
        12806,
        12806
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4361,
        41
      ]
    ],
    [
      [
        12807,
        12807
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4363,
        41
      ]
    ],
    [
      [
        12808,
        12808
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4364,
        41
      ]
    ],
    [
      [
        12809,
        12809
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4366,
        41
      ]
    ],
    [
      [
        12810,
        12810
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4367,
        41
      ]
    ],
    [
      [
        12811,
        12811
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4368,
        41
      ]
    ],
    [
      [
        12812,
        12812
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4369,
        41
      ]
    ],
    [
      [
        12813,
        12813
      ],
      "disallowed_STD3_mapped",
      [
        40,
        4370,
        41
      ]
    ],
    [
      [
        12814,
        12814
      ],
      "disallowed_STD3_mapped",
      [
        40,
        44032,
        41
      ]
    ],
    [
      [
        12815,
        12815
      ],
      "disallowed_STD3_mapped",
      [
        40,
        45208,
        41
      ]
    ],
    [
      [
        12816,
        12816
      ],
      "disallowed_STD3_mapped",
      [
        40,
        45796,
        41
      ]
    ],
    [
      [
        12817,
        12817
      ],
      "disallowed_STD3_mapped",
      [
        40,
        46972,
        41
      ]
    ],
    [
      [
        12818,
        12818
      ],
      "disallowed_STD3_mapped",
      [
        40,
        47560,
        41
      ]
    ],
    [
      [
        12819,
        12819
      ],
      "disallowed_STD3_mapped",
      [
        40,
        48148,
        41
      ]
    ],
    [
      [
        12820,
        12820
      ],
      "disallowed_STD3_mapped",
      [
        40,
        49324,
        41
      ]
    ],
    [
      [
        12821,
        12821
      ],
      "disallowed_STD3_mapped",
      [
        40,
        50500,
        41
      ]
    ],
    [
      [
        12822,
        12822
      ],
      "disallowed_STD3_mapped",
      [
        40,
        51088,
        41
      ]
    ],
    [
      [
        12823,
        12823
      ],
      "disallowed_STD3_mapped",
      [
        40,
        52264,
        41
      ]
    ],
    [
      [
        12824,
        12824
      ],
      "disallowed_STD3_mapped",
      [
        40,
        52852,
        41
      ]
    ],
    [
      [
        12825,
        12825
      ],
      "disallowed_STD3_mapped",
      [
        40,
        53440,
        41
      ]
    ],
    [
      [
        12826,
        12826
      ],
      "disallowed_STD3_mapped",
      [
        40,
        54028,
        41
      ]
    ],
    [
      [
        12827,
        12827
      ],
      "disallowed_STD3_mapped",
      [
        40,
        54616,
        41
      ]
    ],
    [
      [
        12828,
        12828
      ],
      "disallowed_STD3_mapped",
      [
        40,
        51452,
        41
      ]
    ],
    [
      [
        12829,
        12829
      ],
      "disallowed_STD3_mapped",
      [
        40,
        50724,
        51204,
        41
      ]
    ],
    [
      [
        12830,
        12830
      ],
      "disallowed_STD3_mapped",
      [
        40,
        50724,
        54980,
        41
      ]
    ],
    [
      [
        12831,
        12831
      ],
      "disallowed"
    ],
    [
      [
        12832,
        12832
      ],
      "disallowed_STD3_mapped",
      [
        40,
        19968,
        41
      ]
    ],
    [
      [
        12833,
        12833
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20108,
        41
      ]
    ],
    [
      [
        12834,
        12834
      ],
      "disallowed_STD3_mapped",
      [
        40,
        19977,
        41
      ]
    ],
    [
      [
        12835,
        12835
      ],
      "disallowed_STD3_mapped",
      [
        40,
        22235,
        41
      ]
    ],
    [
      [
        12836,
        12836
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20116,
        41
      ]
    ],
    [
      [
        12837,
        12837
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20845,
        41
      ]
    ],
    [
      [
        12838,
        12838
      ],
      "disallowed_STD3_mapped",
      [
        40,
        19971,
        41
      ]
    ],
    [
      [
        12839,
        12839
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20843,
        41
      ]
    ],
    [
      [
        12840,
        12840
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20061,
        41
      ]
    ],
    [
      [
        12841,
        12841
      ],
      "disallowed_STD3_mapped",
      [
        40,
        21313,
        41
      ]
    ],
    [
      [
        12842,
        12842
      ],
      "disallowed_STD3_mapped",
      [
        40,
        26376,
        41
      ]
    ],
    [
      [
        12843,
        12843
      ],
      "disallowed_STD3_mapped",
      [
        40,
        28779,
        41
      ]
    ],
    [
      [
        12844,
        12844
      ],
      "disallowed_STD3_mapped",
      [
        40,
        27700,
        41
      ]
    ],
    [
      [
        12845,
        12845
      ],
      "disallowed_STD3_mapped",
      [
        40,
        26408,
        41
      ]
    ],
    [
      [
        12846,
        12846
      ],
      "disallowed_STD3_mapped",
      [
        40,
        37329,
        41
      ]
    ],
    [
      [
        12847,
        12847
      ],
      "disallowed_STD3_mapped",
      [
        40,
        22303,
        41
      ]
    ],
    [
      [
        12848,
        12848
      ],
      "disallowed_STD3_mapped",
      [
        40,
        26085,
        41
      ]
    ],
    [
      [
        12849,
        12849
      ],
      "disallowed_STD3_mapped",
      [
        40,
        26666,
        41
      ]
    ],
    [
      [
        12850,
        12850
      ],
      "disallowed_STD3_mapped",
      [
        40,
        26377,
        41
      ]
    ],
    [
      [
        12851,
        12851
      ],
      "disallowed_STD3_mapped",
      [
        40,
        31038,
        41
      ]
    ],
    [
      [
        12852,
        12852
      ],
      "disallowed_STD3_mapped",
      [
        40,
        21517,
        41
      ]
    ],
    [
      [
        12853,
        12853
      ],
      "disallowed_STD3_mapped",
      [
        40,
        29305,
        41
      ]
    ],
    [
      [
        12854,
        12854
      ],
      "disallowed_STD3_mapped",
      [
        40,
        36001,
        41
      ]
    ],
    [
      [
        12855,
        12855
      ],
      "disallowed_STD3_mapped",
      [
        40,
        31069,
        41
      ]
    ],
    [
      [
        12856,
        12856
      ],
      "disallowed_STD3_mapped",
      [
        40,
        21172,
        41
      ]
    ],
    [
      [
        12857,
        12857
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20195,
        41
      ]
    ],
    [
      [
        12858,
        12858
      ],
      "disallowed_STD3_mapped",
      [
        40,
        21628,
        41
      ]
    ],
    [
      [
        12859,
        12859
      ],
      "disallowed_STD3_mapped",
      [
        40,
        23398,
        41
      ]
    ],
    [
      [
        12860,
        12860
      ],
      "disallowed_STD3_mapped",
      [
        40,
        30435,
        41
      ]
    ],
    [
      [
        12861,
        12861
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20225,
        41
      ]
    ],
    [
      [
        12862,
        12862
      ],
      "disallowed_STD3_mapped",
      [
        40,
        36039,
        41
      ]
    ],
    [
      [
        12863,
        12863
      ],
      "disallowed_STD3_mapped",
      [
        40,
        21332,
        41
      ]
    ],
    [
      [
        12864,
        12864
      ],
      "disallowed_STD3_mapped",
      [
        40,
        31085,
        41
      ]
    ],
    [
      [
        12865,
        12865
      ],
      "disallowed_STD3_mapped",
      [
        40,
        20241,
        41
      ]
    ],
    [
      [
        12866,
        12866
      ],
      "disallowed_STD3_mapped",
      [
        40,
        33258,
        41
      ]
    ],
    [
      [
        12867,
        12867
      ],
      "disallowed_STD3_mapped",
      [
        40,
        33267,
        41
      ]
    ],
    [
      [
        12868,
        12868
      ],
      "mapped",
      [
        21839
      ]
    ],
    [
      [
        12869,
        12869
      ],
      "mapped",
      [
        24188
      ]
    ],
    [
      [
        12870,
        12870
      ],
      "mapped",
      [
        25991
      ]
    ],
    [
      [
        12871,
        12871
      ],
      "mapped",
      [
        31631
      ]
    ],
    [
      [
        12872,
        12879
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12880,
        12880
      ],
      "mapped",
      [
        112,
        116,
        101
      ]
    ],
    [
      [
        12881,
        12881
      ],
      "mapped",
      [
        50,
        49
      ]
    ],
    [
      [
        12882,
        12882
      ],
      "mapped",
      [
        50,
        50
      ]
    ],
    [
      [
        12883,
        12883
      ],
      "mapped",
      [
        50,
        51
      ]
    ],
    [
      [
        12884,
        12884
      ],
      "mapped",
      [
        50,
        52
      ]
    ],
    [
      [
        12885,
        12885
      ],
      "mapped",
      [
        50,
        53
      ]
    ],
    [
      [
        12886,
        12886
      ],
      "mapped",
      [
        50,
        54
      ]
    ],
    [
      [
        12887,
        12887
      ],
      "mapped",
      [
        50,
        55
      ]
    ],
    [
      [
        12888,
        12888
      ],
      "mapped",
      [
        50,
        56
      ]
    ],
    [
      [
        12889,
        12889
      ],
      "mapped",
      [
        50,
        57
      ]
    ],
    [
      [
        12890,
        12890
      ],
      "mapped",
      [
        51,
        48
      ]
    ],
    [
      [
        12891,
        12891
      ],
      "mapped",
      [
        51,
        49
      ]
    ],
    [
      [
        12892,
        12892
      ],
      "mapped",
      [
        51,
        50
      ]
    ],
    [
      [
        12893,
        12893
      ],
      "mapped",
      [
        51,
        51
      ]
    ],
    [
      [
        12894,
        12894
      ],
      "mapped",
      [
        51,
        52
      ]
    ],
    [
      [
        12895,
        12895
      ],
      "mapped",
      [
        51,
        53
      ]
    ],
    [
      [
        12896,
        12896
      ],
      "mapped",
      [
        4352
      ]
    ],
    [
      [
        12897,
        12897
      ],
      "mapped",
      [
        4354
      ]
    ],
    [
      [
        12898,
        12898
      ],
      "mapped",
      [
        4355
      ]
    ],
    [
      [
        12899,
        12899
      ],
      "mapped",
      [
        4357
      ]
    ],
    [
      [
        12900,
        12900
      ],
      "mapped",
      [
        4358
      ]
    ],
    [
      [
        12901,
        12901
      ],
      "mapped",
      [
        4359
      ]
    ],
    [
      [
        12902,
        12902
      ],
      "mapped",
      [
        4361
      ]
    ],
    [
      [
        12903,
        12903
      ],
      "mapped",
      [
        4363
      ]
    ],
    [
      [
        12904,
        12904
      ],
      "mapped",
      [
        4364
      ]
    ],
    [
      [
        12905,
        12905
      ],
      "mapped",
      [
        4366
      ]
    ],
    [
      [
        12906,
        12906
      ],
      "mapped",
      [
        4367
      ]
    ],
    [
      [
        12907,
        12907
      ],
      "mapped",
      [
        4368
      ]
    ],
    [
      [
        12908,
        12908
      ],
      "mapped",
      [
        4369
      ]
    ],
    [
      [
        12909,
        12909
      ],
      "mapped",
      [
        4370
      ]
    ],
    [
      [
        12910,
        12910
      ],
      "mapped",
      [
        44032
      ]
    ],
    [
      [
        12911,
        12911
      ],
      "mapped",
      [
        45208
      ]
    ],
    [
      [
        12912,
        12912
      ],
      "mapped",
      [
        45796
      ]
    ],
    [
      [
        12913,
        12913
      ],
      "mapped",
      [
        46972
      ]
    ],
    [
      [
        12914,
        12914
      ],
      "mapped",
      [
        47560
      ]
    ],
    [
      [
        12915,
        12915
      ],
      "mapped",
      [
        48148
      ]
    ],
    [
      [
        12916,
        12916
      ],
      "mapped",
      [
        49324
      ]
    ],
    [
      [
        12917,
        12917
      ],
      "mapped",
      [
        50500
      ]
    ],
    [
      [
        12918,
        12918
      ],
      "mapped",
      [
        51088
      ]
    ],
    [
      [
        12919,
        12919
      ],
      "mapped",
      [
        52264
      ]
    ],
    [
      [
        12920,
        12920
      ],
      "mapped",
      [
        52852
      ]
    ],
    [
      [
        12921,
        12921
      ],
      "mapped",
      [
        53440
      ]
    ],
    [
      [
        12922,
        12922
      ],
      "mapped",
      [
        54028
      ]
    ],
    [
      [
        12923,
        12923
      ],
      "mapped",
      [
        54616
      ]
    ],
    [
      [
        12924,
        12924
      ],
      "mapped",
      [
        52280,
        44256
      ]
    ],
    [
      [
        12925,
        12925
      ],
      "mapped",
      [
        51452,
        51032
      ]
    ],
    [
      [
        12926,
        12926
      ],
      "mapped",
      [
        50864
      ]
    ],
    [
      [
        12927,
        12927
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        12928,
        12928
      ],
      "mapped",
      [
        19968
      ]
    ],
    [
      [
        12929,
        12929
      ],
      "mapped",
      [
        20108
      ]
    ],
    [
      [
        12930,
        12930
      ],
      "mapped",
      [
        19977
      ]
    ],
    [
      [
        12931,
        12931
      ],
      "mapped",
      [
        22235
      ]
    ],
    [
      [
        12932,
        12932
      ],
      "mapped",
      [
        20116
      ]
    ],
    [
      [
        12933,
        12933
      ],
      "mapped",
      [
        20845
      ]
    ],
    [
      [
        12934,
        12934
      ],
      "mapped",
      [
        19971
      ]
    ],
    [
      [
        12935,
        12935
      ],
      "mapped",
      [
        20843
      ]
    ],
    [
      [
        12936,
        12936
      ],
      "mapped",
      [
        20061
      ]
    ],
    [
      [
        12937,
        12937
      ],
      "mapped",
      [
        21313
      ]
    ],
    [
      [
        12938,
        12938
      ],
      "mapped",
      [
        26376
      ]
    ],
    [
      [
        12939,
        12939
      ],
      "mapped",
      [
        28779
      ]
    ],
    [
      [
        12940,
        12940
      ],
      "mapped",
      [
        27700
      ]
    ],
    [
      [
        12941,
        12941
      ],
      "mapped",
      [
        26408
      ]
    ],
    [
      [
        12942,
        12942
      ],
      "mapped",
      [
        37329
      ]
    ],
    [
      [
        12943,
        12943
      ],
      "mapped",
      [
        22303
      ]
    ],
    [
      [
        12944,
        12944
      ],
      "mapped",
      [
        26085
      ]
    ],
    [
      [
        12945,
        12945
      ],
      "mapped",
      [
        26666
      ]
    ],
    [
      [
        12946,
        12946
      ],
      "mapped",
      [
        26377
      ]
    ],
    [
      [
        12947,
        12947
      ],
      "mapped",
      [
        31038
      ]
    ],
    [
      [
        12948,
        12948
      ],
      "mapped",
      [
        21517
      ]
    ],
    [
      [
        12949,
        12949
      ],
      "mapped",
      [
        29305
      ]
    ],
    [
      [
        12950,
        12950
      ],
      "mapped",
      [
        36001
      ]
    ],
    [
      [
        12951,
        12951
      ],
      "mapped",
      [
        31069
      ]
    ],
    [
      [
        12952,
        12952
      ],
      "mapped",
      [
        21172
      ]
    ],
    [
      [
        12953,
        12953
      ],
      "mapped",
      [
        31192
      ]
    ],
    [
      [
        12954,
        12954
      ],
      "mapped",
      [
        30007
      ]
    ],
    [
      [
        12955,
        12955
      ],
      "mapped",
      [
        22899
      ]
    ],
    [
      [
        12956,
        12956
      ],
      "mapped",
      [
        36969
      ]
    ],
    [
      [
        12957,
        12957
      ],
      "mapped",
      [
        20778
      ]
    ],
    [
      [
        12958,
        12958
      ],
      "mapped",
      [
        21360
      ]
    ],
    [
      [
        12959,
        12959
      ],
      "mapped",
      [
        27880
      ]
    ],
    [
      [
        12960,
        12960
      ],
      "mapped",
      [
        38917
      ]
    ],
    [
      [
        12961,
        12961
      ],
      "mapped",
      [
        20241
      ]
    ],
    [
      [
        12962,
        12962
      ],
      "mapped",
      [
        20889
      ]
    ],
    [
      [
        12963,
        12963
      ],
      "mapped",
      [
        27491
      ]
    ],
    [
      [
        12964,
        12964
      ],
      "mapped",
      [
        19978
      ]
    ],
    [
      [
        12965,
        12965
      ],
      "mapped",
      [
        20013
      ]
    ],
    [
      [
        12966,
        12966
      ],
      "mapped",
      [
        19979
      ]
    ],
    [
      [
        12967,
        12967
      ],
      "mapped",
      [
        24038
      ]
    ],
    [
      [
        12968,
        12968
      ],
      "mapped",
      [
        21491
      ]
    ],
    [
      [
        12969,
        12969
      ],
      "mapped",
      [
        21307
      ]
    ],
    [
      [
        12970,
        12970
      ],
      "mapped",
      [
        23447
      ]
    ],
    [
      [
        12971,
        12971
      ],
      "mapped",
      [
        23398
      ]
    ],
    [
      [
        12972,
        12972
      ],
      "mapped",
      [
        30435
      ]
    ],
    [
      [
        12973,
        12973
      ],
      "mapped",
      [
        20225
      ]
    ],
    [
      [
        12974,
        12974
      ],
      "mapped",
      [
        36039
      ]
    ],
    [
      [
        12975,
        12975
      ],
      "mapped",
      [
        21332
      ]
    ],
    [
      [
        12976,
        12976
      ],
      "mapped",
      [
        22812
      ]
    ],
    [
      [
        12977,
        12977
      ],
      "mapped",
      [
        51,
        54
      ]
    ],
    [
      [
        12978,
        12978
      ],
      "mapped",
      [
        51,
        55
      ]
    ],
    [
      [
        12979,
        12979
      ],
      "mapped",
      [
        51,
        56
      ]
    ],
    [
      [
        12980,
        12980
      ],
      "mapped",
      [
        51,
        57
      ]
    ],
    [
      [
        12981,
        12981
      ],
      "mapped",
      [
        52,
        48
      ]
    ],
    [
      [
        12982,
        12982
      ],
      "mapped",
      [
        52,
        49
      ]
    ],
    [
      [
        12983,
        12983
      ],
      "mapped",
      [
        52,
        50
      ]
    ],
    [
      [
        12984,
        12984
      ],
      "mapped",
      [
        52,
        51
      ]
    ],
    [
      [
        12985,
        12985
      ],
      "mapped",
      [
        52,
        52
      ]
    ],
    [
      [
        12986,
        12986
      ],
      "mapped",
      [
        52,
        53
      ]
    ],
    [
      [
        12987,
        12987
      ],
      "mapped",
      [
        52,
        54
      ]
    ],
    [
      [
        12988,
        12988
      ],
      "mapped",
      [
        52,
        55
      ]
    ],
    [
      [
        12989,
        12989
      ],
      "mapped",
      [
        52,
        56
      ]
    ],
    [
      [
        12990,
        12990
      ],
      "mapped",
      [
        52,
        57
      ]
    ],
    [
      [
        12991,
        12991
      ],
      "mapped",
      [
        53,
        48
      ]
    ],
    [
      [
        12992,
        12992
      ],
      "mapped",
      [
        49,
        26376
      ]
    ],
    [
      [
        12993,
        12993
      ],
      "mapped",
      [
        50,
        26376
      ]
    ],
    [
      [
        12994,
        12994
      ],
      "mapped",
      [
        51,
        26376
      ]
    ],
    [
      [
        12995,
        12995
      ],
      "mapped",
      [
        52,
        26376
      ]
    ],
    [
      [
        12996,
        12996
      ],
      "mapped",
      [
        53,
        26376
      ]
    ],
    [
      [
        12997,
        12997
      ],
      "mapped",
      [
        54,
        26376
      ]
    ],
    [
      [
        12998,
        12998
      ],
      "mapped",
      [
        55,
        26376
      ]
    ],
    [
      [
        12999,
        12999
      ],
      "mapped",
      [
        56,
        26376
      ]
    ],
    [
      [
        13e3,
        13e3
      ],
      "mapped",
      [
        57,
        26376
      ]
    ],
    [
      [
        13001,
        13001
      ],
      "mapped",
      [
        49,
        48,
        26376
      ]
    ],
    [
      [
        13002,
        13002
      ],
      "mapped",
      [
        49,
        49,
        26376
      ]
    ],
    [
      [
        13003,
        13003
      ],
      "mapped",
      [
        49,
        50,
        26376
      ]
    ],
    [
      [
        13004,
        13004
      ],
      "mapped",
      [
        104,
        103
      ]
    ],
    [
      [
        13005,
        13005
      ],
      "mapped",
      [
        101,
        114,
        103
      ]
    ],
    [
      [
        13006,
        13006
      ],
      "mapped",
      [
        101,
        118
      ]
    ],
    [
      [
        13007,
        13007
      ],
      "mapped",
      [
        108,
        116,
        100
      ]
    ],
    [
      [
        13008,
        13008
      ],
      "mapped",
      [
        12450
      ]
    ],
    [
      [
        13009,
        13009
      ],
      "mapped",
      [
        12452
      ]
    ],
    [
      [
        13010,
        13010
      ],
      "mapped",
      [
        12454
      ]
    ],
    [
      [
        13011,
        13011
      ],
      "mapped",
      [
        12456
      ]
    ],
    [
      [
        13012,
        13012
      ],
      "mapped",
      [
        12458
      ]
    ],
    [
      [
        13013,
        13013
      ],
      "mapped",
      [
        12459
      ]
    ],
    [
      [
        13014,
        13014
      ],
      "mapped",
      [
        12461
      ]
    ],
    [
      [
        13015,
        13015
      ],
      "mapped",
      [
        12463
      ]
    ],
    [
      [
        13016,
        13016
      ],
      "mapped",
      [
        12465
      ]
    ],
    [
      [
        13017,
        13017
      ],
      "mapped",
      [
        12467
      ]
    ],
    [
      [
        13018,
        13018
      ],
      "mapped",
      [
        12469
      ]
    ],
    [
      [
        13019,
        13019
      ],
      "mapped",
      [
        12471
      ]
    ],
    [
      [
        13020,
        13020
      ],
      "mapped",
      [
        12473
      ]
    ],
    [
      [
        13021,
        13021
      ],
      "mapped",
      [
        12475
      ]
    ],
    [
      [
        13022,
        13022
      ],
      "mapped",
      [
        12477
      ]
    ],
    [
      [
        13023,
        13023
      ],
      "mapped",
      [
        12479
      ]
    ],
    [
      [
        13024,
        13024
      ],
      "mapped",
      [
        12481
      ]
    ],
    [
      [
        13025,
        13025
      ],
      "mapped",
      [
        12484
      ]
    ],
    [
      [
        13026,
        13026
      ],
      "mapped",
      [
        12486
      ]
    ],
    [
      [
        13027,
        13027
      ],
      "mapped",
      [
        12488
      ]
    ],
    [
      [
        13028,
        13028
      ],
      "mapped",
      [
        12490
      ]
    ],
    [
      [
        13029,
        13029
      ],
      "mapped",
      [
        12491
      ]
    ],
    [
      [
        13030,
        13030
      ],
      "mapped",
      [
        12492
      ]
    ],
    [
      [
        13031,
        13031
      ],
      "mapped",
      [
        12493
      ]
    ],
    [
      [
        13032,
        13032
      ],
      "mapped",
      [
        12494
      ]
    ],
    [
      [
        13033,
        13033
      ],
      "mapped",
      [
        12495
      ]
    ],
    [
      [
        13034,
        13034
      ],
      "mapped",
      [
        12498
      ]
    ],
    [
      [
        13035,
        13035
      ],
      "mapped",
      [
        12501
      ]
    ],
    [
      [
        13036,
        13036
      ],
      "mapped",
      [
        12504
      ]
    ],
    [
      [
        13037,
        13037
      ],
      "mapped",
      [
        12507
      ]
    ],
    [
      [
        13038,
        13038
      ],
      "mapped",
      [
        12510
      ]
    ],
    [
      [
        13039,
        13039
      ],
      "mapped",
      [
        12511
      ]
    ],
    [
      [
        13040,
        13040
      ],
      "mapped",
      [
        12512
      ]
    ],
    [
      [
        13041,
        13041
      ],
      "mapped",
      [
        12513
      ]
    ],
    [
      [
        13042,
        13042
      ],
      "mapped",
      [
        12514
      ]
    ],
    [
      [
        13043,
        13043
      ],
      "mapped",
      [
        12516
      ]
    ],
    [
      [
        13044,
        13044
      ],
      "mapped",
      [
        12518
      ]
    ],
    [
      [
        13045,
        13045
      ],
      "mapped",
      [
        12520
      ]
    ],
    [
      [
        13046,
        13046
      ],
      "mapped",
      [
        12521
      ]
    ],
    [
      [
        13047,
        13047
      ],
      "mapped",
      [
        12522
      ]
    ],
    [
      [
        13048,
        13048
      ],
      "mapped",
      [
        12523
      ]
    ],
    [
      [
        13049,
        13049
      ],
      "mapped",
      [
        12524
      ]
    ],
    [
      [
        13050,
        13050
      ],
      "mapped",
      [
        12525
      ]
    ],
    [
      [
        13051,
        13051
      ],
      "mapped",
      [
        12527
      ]
    ],
    [
      [
        13052,
        13052
      ],
      "mapped",
      [
        12528
      ]
    ],
    [
      [
        13053,
        13053
      ],
      "mapped",
      [
        12529
      ]
    ],
    [
      [
        13054,
        13054
      ],
      "mapped",
      [
        12530
      ]
    ],
    [
      [
        13055,
        13055
      ],
      "disallowed"
    ],
    [
      [
        13056,
        13056
      ],
      "mapped",
      [
        12450,
        12497,
        12540,
        12488
      ]
    ],
    [
      [
        13057,
        13057
      ],
      "mapped",
      [
        12450,
        12523,
        12501,
        12449
      ]
    ],
    [
      [
        13058,
        13058
      ],
      "mapped",
      [
        12450,
        12531,
        12506,
        12450
      ]
    ],
    [
      [
        13059,
        13059
      ],
      "mapped",
      [
        12450,
        12540,
        12523
      ]
    ],
    [
      [
        13060,
        13060
      ],
      "mapped",
      [
        12452,
        12491,
        12531,
        12464
      ]
    ],
    [
      [
        13061,
        13061
      ],
      "mapped",
      [
        12452,
        12531,
        12481
      ]
    ],
    [
      [
        13062,
        13062
      ],
      "mapped",
      [
        12454,
        12457,
        12531
      ]
    ],
    [
      [
        13063,
        13063
      ],
      "mapped",
      [
        12456,
        12473,
        12463,
        12540,
        12489
      ]
    ],
    [
      [
        13064,
        13064
      ],
      "mapped",
      [
        12456,
        12540,
        12459,
        12540
      ]
    ],
    [
      [
        13065,
        13065
      ],
      "mapped",
      [
        12458,
        12531,
        12473
      ]
    ],
    [
      [
        13066,
        13066
      ],
      "mapped",
      [
        12458,
        12540,
        12512
      ]
    ],
    [
      [
        13067,
        13067
      ],
      "mapped",
      [
        12459,
        12452,
        12522
      ]
    ],
    [
      [
        13068,
        13068
      ],
      "mapped",
      [
        12459,
        12521,
        12483,
        12488
      ]
    ],
    [
      [
        13069,
        13069
      ],
      "mapped",
      [
        12459,
        12525,
        12522,
        12540
      ]
    ],
    [
      [
        13070,
        13070
      ],
      "mapped",
      [
        12460,
        12525,
        12531
      ]
    ],
    [
      [
        13071,
        13071
      ],
      "mapped",
      [
        12460,
        12531,
        12510
      ]
    ],
    [
      [
        13072,
        13072
      ],
      "mapped",
      [
        12462,
        12460
      ]
    ],
    [
      [
        13073,
        13073
      ],
      "mapped",
      [
        12462,
        12491,
        12540
      ]
    ],
    [
      [
        13074,
        13074
      ],
      "mapped",
      [
        12461,
        12517,
        12522,
        12540
      ]
    ],
    [
      [
        13075,
        13075
      ],
      "mapped",
      [
        12462,
        12523,
        12480,
        12540
      ]
    ],
    [
      [
        13076,
        13076
      ],
      "mapped",
      [
        12461,
        12525
      ]
    ],
    [
      [
        13077,
        13077
      ],
      "mapped",
      [
        12461,
        12525,
        12464,
        12521,
        12512
      ]
    ],
    [
      [
        13078,
        13078
      ],
      "mapped",
      [
        12461,
        12525,
        12513,
        12540,
        12488,
        12523
      ]
    ],
    [
      [
        13079,
        13079
      ],
      "mapped",
      [
        12461,
        12525,
        12527,
        12483,
        12488
      ]
    ],
    [
      [
        13080,
        13080
      ],
      "mapped",
      [
        12464,
        12521,
        12512
      ]
    ],
    [
      [
        13081,
        13081
      ],
      "mapped",
      [
        12464,
        12521,
        12512,
        12488,
        12531
      ]
    ],
    [
      [
        13082,
        13082
      ],
      "mapped",
      [
        12463,
        12523,
        12476,
        12452,
        12525
      ]
    ],
    [
      [
        13083,
        13083
      ],
      "mapped",
      [
        12463,
        12525,
        12540,
        12493
      ]
    ],
    [
      [
        13084,
        13084
      ],
      "mapped",
      [
        12465,
        12540,
        12473
      ]
    ],
    [
      [
        13085,
        13085
      ],
      "mapped",
      [
        12467,
        12523,
        12490
      ]
    ],
    [
      [
        13086,
        13086
      ],
      "mapped",
      [
        12467,
        12540,
        12509
      ]
    ],
    [
      [
        13087,
        13087
      ],
      "mapped",
      [
        12469,
        12452,
        12463,
        12523
      ]
    ],
    [
      [
        13088,
        13088
      ],
      "mapped",
      [
        12469,
        12531,
        12481,
        12540,
        12512
      ]
    ],
    [
      [
        13089,
        13089
      ],
      "mapped",
      [
        12471,
        12522,
        12531,
        12464
      ]
    ],
    [
      [
        13090,
        13090
      ],
      "mapped",
      [
        12475,
        12531,
        12481
      ]
    ],
    [
      [
        13091,
        13091
      ],
      "mapped",
      [
        12475,
        12531,
        12488
      ]
    ],
    [
      [
        13092,
        13092
      ],
      "mapped",
      [
        12480,
        12540,
        12473
      ]
    ],
    [
      [
        13093,
        13093
      ],
      "mapped",
      [
        12487,
        12471
      ]
    ],
    [
      [
        13094,
        13094
      ],
      "mapped",
      [
        12489,
        12523
      ]
    ],
    [
      [
        13095,
        13095
      ],
      "mapped",
      [
        12488,
        12531
      ]
    ],
    [
      [
        13096,
        13096
      ],
      "mapped",
      [
        12490,
        12494
      ]
    ],
    [
      [
        13097,
        13097
      ],
      "mapped",
      [
        12494,
        12483,
        12488
      ]
    ],
    [
      [
        13098,
        13098
      ],
      "mapped",
      [
        12495,
        12452,
        12484
      ]
    ],
    [
      [
        13099,
        13099
      ],
      "mapped",
      [
        12497,
        12540,
        12475,
        12531,
        12488
      ]
    ],
    [
      [
        13100,
        13100
      ],
      "mapped",
      [
        12497,
        12540,
        12484
      ]
    ],
    [
      [
        13101,
        13101
      ],
      "mapped",
      [
        12496,
        12540,
        12524,
        12523
      ]
    ],
    [
      [
        13102,
        13102
      ],
      "mapped",
      [
        12500,
        12450,
        12473,
        12488,
        12523
      ]
    ],
    [
      [
        13103,
        13103
      ],
      "mapped",
      [
        12500,
        12463,
        12523
      ]
    ],
    [
      [
        13104,
        13104
      ],
      "mapped",
      [
        12500,
        12467
      ]
    ],
    [
      [
        13105,
        13105
      ],
      "mapped",
      [
        12499,
        12523
      ]
    ],
    [
      [
        13106,
        13106
      ],
      "mapped",
      [
        12501,
        12449,
        12521,
        12483,
        12489
      ]
    ],
    [
      [
        13107,
        13107
      ],
      "mapped",
      [
        12501,
        12451,
        12540,
        12488
      ]
    ],
    [
      [
        13108,
        13108
      ],
      "mapped",
      [
        12502,
        12483,
        12471,
        12455,
        12523
      ]
    ],
    [
      [
        13109,
        13109
      ],
      "mapped",
      [
        12501,
        12521,
        12531
      ]
    ],
    [
      [
        13110,
        13110
      ],
      "mapped",
      [
        12504,
        12463,
        12479,
        12540,
        12523
      ]
    ],
    [
      [
        13111,
        13111
      ],
      "mapped",
      [
        12506,
        12477
      ]
    ],
    [
      [
        13112,
        13112
      ],
      "mapped",
      [
        12506,
        12491,
        12498
      ]
    ],
    [
      [
        13113,
        13113
      ],
      "mapped",
      [
        12504,
        12523,
        12484
      ]
    ],
    [
      [
        13114,
        13114
      ],
      "mapped",
      [
        12506,
        12531,
        12473
      ]
    ],
    [
      [
        13115,
        13115
      ],
      "mapped",
      [
        12506,
        12540,
        12472
      ]
    ],
    [
      [
        13116,
        13116
      ],
      "mapped",
      [
        12505,
        12540,
        12479
      ]
    ],
    [
      [
        13117,
        13117
      ],
      "mapped",
      [
        12509,
        12452,
        12531,
        12488
      ]
    ],
    [
      [
        13118,
        13118
      ],
      "mapped",
      [
        12508,
        12523,
        12488
      ]
    ],
    [
      [
        13119,
        13119
      ],
      "mapped",
      [
        12507,
        12531
      ]
    ],
    [
      [
        13120,
        13120
      ],
      "mapped",
      [
        12509,
        12531,
        12489
      ]
    ],
    [
      [
        13121,
        13121
      ],
      "mapped",
      [
        12507,
        12540,
        12523
      ]
    ],
    [
      [
        13122,
        13122
      ],
      "mapped",
      [
        12507,
        12540,
        12531
      ]
    ],
    [
      [
        13123,
        13123
      ],
      "mapped",
      [
        12510,
        12452,
        12463,
        12525
      ]
    ],
    [
      [
        13124,
        13124
      ],
      "mapped",
      [
        12510,
        12452,
        12523
      ]
    ],
    [
      [
        13125,
        13125
      ],
      "mapped",
      [
        12510,
        12483,
        12495
      ]
    ],
    [
      [
        13126,
        13126
      ],
      "mapped",
      [
        12510,
        12523,
        12463
      ]
    ],
    [
      [
        13127,
        13127
      ],
      "mapped",
      [
        12510,
        12531,
        12471,
        12519,
        12531
      ]
    ],
    [
      [
        13128,
        13128
      ],
      "mapped",
      [
        12511,
        12463,
        12525,
        12531
      ]
    ],
    [
      [
        13129,
        13129
      ],
      "mapped",
      [
        12511,
        12522
      ]
    ],
    [
      [
        13130,
        13130
      ],
      "mapped",
      [
        12511,
        12522,
        12496,
        12540,
        12523
      ]
    ],
    [
      [
        13131,
        13131
      ],
      "mapped",
      [
        12513,
        12460
      ]
    ],
    [
      [
        13132,
        13132
      ],
      "mapped",
      [
        12513,
        12460,
        12488,
        12531
      ]
    ],
    [
      [
        13133,
        13133
      ],
      "mapped",
      [
        12513,
        12540,
        12488,
        12523
      ]
    ],
    [
      [
        13134,
        13134
      ],
      "mapped",
      [
        12516,
        12540,
        12489
      ]
    ],
    [
      [
        13135,
        13135
      ],
      "mapped",
      [
        12516,
        12540,
        12523
      ]
    ],
    [
      [
        13136,
        13136
      ],
      "mapped",
      [
        12518,
        12450,
        12531
      ]
    ],
    [
      [
        13137,
        13137
      ],
      "mapped",
      [
        12522,
        12483,
        12488,
        12523
      ]
    ],
    [
      [
        13138,
        13138
      ],
      "mapped",
      [
        12522,
        12521
      ]
    ],
    [
      [
        13139,
        13139
      ],
      "mapped",
      [
        12523,
        12500,
        12540
      ]
    ],
    [
      [
        13140,
        13140
      ],
      "mapped",
      [
        12523,
        12540,
        12502,
        12523
      ]
    ],
    [
      [
        13141,
        13141
      ],
      "mapped",
      [
        12524,
        12512
      ]
    ],
    [
      [
        13142,
        13142
      ],
      "mapped",
      [
        12524,
        12531,
        12488,
        12466,
        12531
      ]
    ],
    [
      [
        13143,
        13143
      ],
      "mapped",
      [
        12527,
        12483,
        12488
      ]
    ],
    [
      [
        13144,
        13144
      ],
      "mapped",
      [
        48,
        28857
      ]
    ],
    [
      [
        13145,
        13145
      ],
      "mapped",
      [
        49,
        28857
      ]
    ],
    [
      [
        13146,
        13146
      ],
      "mapped",
      [
        50,
        28857
      ]
    ],
    [
      [
        13147,
        13147
      ],
      "mapped",
      [
        51,
        28857
      ]
    ],
    [
      [
        13148,
        13148
      ],
      "mapped",
      [
        52,
        28857
      ]
    ],
    [
      [
        13149,
        13149
      ],
      "mapped",
      [
        53,
        28857
      ]
    ],
    [
      [
        13150,
        13150
      ],
      "mapped",
      [
        54,
        28857
      ]
    ],
    [
      [
        13151,
        13151
      ],
      "mapped",
      [
        55,
        28857
      ]
    ],
    [
      [
        13152,
        13152
      ],
      "mapped",
      [
        56,
        28857
      ]
    ],
    [
      [
        13153,
        13153
      ],
      "mapped",
      [
        57,
        28857
      ]
    ],
    [
      [
        13154,
        13154
      ],
      "mapped",
      [
        49,
        48,
        28857
      ]
    ],
    [
      [
        13155,
        13155
      ],
      "mapped",
      [
        49,
        49,
        28857
      ]
    ],
    [
      [
        13156,
        13156
      ],
      "mapped",
      [
        49,
        50,
        28857
      ]
    ],
    [
      [
        13157,
        13157
      ],
      "mapped",
      [
        49,
        51,
        28857
      ]
    ],
    [
      [
        13158,
        13158
      ],
      "mapped",
      [
        49,
        52,
        28857
      ]
    ],
    [
      [
        13159,
        13159
      ],
      "mapped",
      [
        49,
        53,
        28857
      ]
    ],
    [
      [
        13160,
        13160
      ],
      "mapped",
      [
        49,
        54,
        28857
      ]
    ],
    [
      [
        13161,
        13161
      ],
      "mapped",
      [
        49,
        55,
        28857
      ]
    ],
    [
      [
        13162,
        13162
      ],
      "mapped",
      [
        49,
        56,
        28857
      ]
    ],
    [
      [
        13163,
        13163
      ],
      "mapped",
      [
        49,
        57,
        28857
      ]
    ],
    [
      [
        13164,
        13164
      ],
      "mapped",
      [
        50,
        48,
        28857
      ]
    ],
    [
      [
        13165,
        13165
      ],
      "mapped",
      [
        50,
        49,
        28857
      ]
    ],
    [
      [
        13166,
        13166
      ],
      "mapped",
      [
        50,
        50,
        28857
      ]
    ],
    [
      [
        13167,
        13167
      ],
      "mapped",
      [
        50,
        51,
        28857
      ]
    ],
    [
      [
        13168,
        13168
      ],
      "mapped",
      [
        50,
        52,
        28857
      ]
    ],
    [
      [
        13169,
        13169
      ],
      "mapped",
      [
        104,
        112,
        97
      ]
    ],
    [
      [
        13170,
        13170
      ],
      "mapped",
      [
        100,
        97
      ]
    ],
    [
      [
        13171,
        13171
      ],
      "mapped",
      [
        97,
        117
      ]
    ],
    [
      [
        13172,
        13172
      ],
      "mapped",
      [
        98,
        97,
        114
      ]
    ],
    [
      [
        13173,
        13173
      ],
      "mapped",
      [
        111,
        118
      ]
    ],
    [
      [
        13174,
        13174
      ],
      "mapped",
      [
        112,
        99
      ]
    ],
    [
      [
        13175,
        13175
      ],
      "mapped",
      [
        100,
        109
      ]
    ],
    [
      [
        13176,
        13176
      ],
      "mapped",
      [
        100,
        109,
        50
      ]
    ],
    [
      [
        13177,
        13177
      ],
      "mapped",
      [
        100,
        109,
        51
      ]
    ],
    [
      [
        13178,
        13178
      ],
      "mapped",
      [
        105,
        117
      ]
    ],
    [
      [
        13179,
        13179
      ],
      "mapped",
      [
        24179,
        25104
      ]
    ],
    [
      [
        13180,
        13180
      ],
      "mapped",
      [
        26157,
        21644
      ]
    ],
    [
      [
        13181,
        13181
      ],
      "mapped",
      [
        22823,
        27491
      ]
    ],
    [
      [
        13182,
        13182
      ],
      "mapped",
      [
        26126,
        27835
      ]
    ],
    [
      [
        13183,
        13183
      ],
      "mapped",
      [
        26666,
        24335,
        20250,
        31038
      ]
    ],
    [
      [
        13184,
        13184
      ],
      "mapped",
      [
        112,
        97
      ]
    ],
    [
      [
        13185,
        13185
      ],
      "mapped",
      [
        110,
        97
      ]
    ],
    [
      [
        13186,
        13186
      ],
      "mapped",
      [
        956,
        97
      ]
    ],
    [
      [
        13187,
        13187
      ],
      "mapped",
      [
        109,
        97
      ]
    ],
    [
      [
        13188,
        13188
      ],
      "mapped",
      [
        107,
        97
      ]
    ],
    [
      [
        13189,
        13189
      ],
      "mapped",
      [
        107,
        98
      ]
    ],
    [
      [
        13190,
        13190
      ],
      "mapped",
      [
        109,
        98
      ]
    ],
    [
      [
        13191,
        13191
      ],
      "mapped",
      [
        103,
        98
      ]
    ],
    [
      [
        13192,
        13192
      ],
      "mapped",
      [
        99,
        97,
        108
      ]
    ],
    [
      [
        13193,
        13193
      ],
      "mapped",
      [
        107,
        99,
        97,
        108
      ]
    ],
    [
      [
        13194,
        13194
      ],
      "mapped",
      [
        112,
        102
      ]
    ],
    [
      [
        13195,
        13195
      ],
      "mapped",
      [
        110,
        102
      ]
    ],
    [
      [
        13196,
        13196
      ],
      "mapped",
      [
        956,
        102
      ]
    ],
    [
      [
        13197,
        13197
      ],
      "mapped",
      [
        956,
        103
      ]
    ],
    [
      [
        13198,
        13198
      ],
      "mapped",
      [
        109,
        103
      ]
    ],
    [
      [
        13199,
        13199
      ],
      "mapped",
      [
        107,
        103
      ]
    ],
    [
      [
        13200,
        13200
      ],
      "mapped",
      [
        104,
        122
      ]
    ],
    [
      [
        13201,
        13201
      ],
      "mapped",
      [
        107,
        104,
        122
      ]
    ],
    [
      [
        13202,
        13202
      ],
      "mapped",
      [
        109,
        104,
        122
      ]
    ],
    [
      [
        13203,
        13203
      ],
      "mapped",
      [
        103,
        104,
        122
      ]
    ],
    [
      [
        13204,
        13204
      ],
      "mapped",
      [
        116,
        104,
        122
      ]
    ],
    [
      [
        13205,
        13205
      ],
      "mapped",
      [
        956,
        108
      ]
    ],
    [
      [
        13206,
        13206
      ],
      "mapped",
      [
        109,
        108
      ]
    ],
    [
      [
        13207,
        13207
      ],
      "mapped",
      [
        100,
        108
      ]
    ],
    [
      [
        13208,
        13208
      ],
      "mapped",
      [
        107,
        108
      ]
    ],
    [
      [
        13209,
        13209
      ],
      "mapped",
      [
        102,
        109
      ]
    ],
    [
      [
        13210,
        13210
      ],
      "mapped",
      [
        110,
        109
      ]
    ],
    [
      [
        13211,
        13211
      ],
      "mapped",
      [
        956,
        109
      ]
    ],
    [
      [
        13212,
        13212
      ],
      "mapped",
      [
        109,
        109
      ]
    ],
    [
      [
        13213,
        13213
      ],
      "mapped",
      [
        99,
        109
      ]
    ],
    [
      [
        13214,
        13214
      ],
      "mapped",
      [
        107,
        109
      ]
    ],
    [
      [
        13215,
        13215
      ],
      "mapped",
      [
        109,
        109,
        50
      ]
    ],
    [
      [
        13216,
        13216
      ],
      "mapped",
      [
        99,
        109,
        50
      ]
    ],
    [
      [
        13217,
        13217
      ],
      "mapped",
      [
        109,
        50
      ]
    ],
    [
      [
        13218,
        13218
      ],
      "mapped",
      [
        107,
        109,
        50
      ]
    ],
    [
      [
        13219,
        13219
      ],
      "mapped",
      [
        109,
        109,
        51
      ]
    ],
    [
      [
        13220,
        13220
      ],
      "mapped",
      [
        99,
        109,
        51
      ]
    ],
    [
      [
        13221,
        13221
      ],
      "mapped",
      [
        109,
        51
      ]
    ],
    [
      [
        13222,
        13222
      ],
      "mapped",
      [
        107,
        109,
        51
      ]
    ],
    [
      [
        13223,
        13223
      ],
      "mapped",
      [
        109,
        8725,
        115
      ]
    ],
    [
      [
        13224,
        13224
      ],
      "mapped",
      [
        109,
        8725,
        115,
        50
      ]
    ],
    [
      [
        13225,
        13225
      ],
      "mapped",
      [
        112,
        97
      ]
    ],
    [
      [
        13226,
        13226
      ],
      "mapped",
      [
        107,
        112,
        97
      ]
    ],
    [
      [
        13227,
        13227
      ],
      "mapped",
      [
        109,
        112,
        97
      ]
    ],
    [
      [
        13228,
        13228
      ],
      "mapped",
      [
        103,
        112,
        97
      ]
    ],
    [
      [
        13229,
        13229
      ],
      "mapped",
      [
        114,
        97,
        100
      ]
    ],
    [
      [
        13230,
        13230
      ],
      "mapped",
      [
        114,
        97,
        100,
        8725,
        115
      ]
    ],
    [
      [
        13231,
        13231
      ],
      "mapped",
      [
        114,
        97,
        100,
        8725,
        115,
        50
      ]
    ],
    [
      [
        13232,
        13232
      ],
      "mapped",
      [
        112,
        115
      ]
    ],
    [
      [
        13233,
        13233
      ],
      "mapped",
      [
        110,
        115
      ]
    ],
    [
      [
        13234,
        13234
      ],
      "mapped",
      [
        956,
        115
      ]
    ],
    [
      [
        13235,
        13235
      ],
      "mapped",
      [
        109,
        115
      ]
    ],
    [
      [
        13236,
        13236
      ],
      "mapped",
      [
        112,
        118
      ]
    ],
    [
      [
        13237,
        13237
      ],
      "mapped",
      [
        110,
        118
      ]
    ],
    [
      [
        13238,
        13238
      ],
      "mapped",
      [
        956,
        118
      ]
    ],
    [
      [
        13239,
        13239
      ],
      "mapped",
      [
        109,
        118
      ]
    ],
    [
      [
        13240,
        13240
      ],
      "mapped",
      [
        107,
        118
      ]
    ],
    [
      [
        13241,
        13241
      ],
      "mapped",
      [
        109,
        118
      ]
    ],
    [
      [
        13242,
        13242
      ],
      "mapped",
      [
        112,
        119
      ]
    ],
    [
      [
        13243,
        13243
      ],
      "mapped",
      [
        110,
        119
      ]
    ],
    [
      [
        13244,
        13244
      ],
      "mapped",
      [
        956,
        119
      ]
    ],
    [
      [
        13245,
        13245
      ],
      "mapped",
      [
        109,
        119
      ]
    ],
    [
      [
        13246,
        13246
      ],
      "mapped",
      [
        107,
        119
      ]
    ],
    [
      [
        13247,
        13247
      ],
      "mapped",
      [
        109,
        119
      ]
    ],
    [
      [
        13248,
        13248
      ],
      "mapped",
      [
        107,
        969
      ]
    ],
    [
      [
        13249,
        13249
      ],
      "mapped",
      [
        109,
        969
      ]
    ],
    [
      [
        13250,
        13250
      ],
      "disallowed"
    ],
    [
      [
        13251,
        13251
      ],
      "mapped",
      [
        98,
        113
      ]
    ],
    [
      [
        13252,
        13252
      ],
      "mapped",
      [
        99,
        99
      ]
    ],
    [
      [
        13253,
        13253
      ],
      "mapped",
      [
        99,
        100
      ]
    ],
    [
      [
        13254,
        13254
      ],
      "mapped",
      [
        99,
        8725,
        107,
        103
      ]
    ],
    [
      [
        13255,
        13255
      ],
      "disallowed"
    ],
    [
      [
        13256,
        13256
      ],
      "mapped",
      [
        100,
        98
      ]
    ],
    [
      [
        13257,
        13257
      ],
      "mapped",
      [
        103,
        121
      ]
    ],
    [
      [
        13258,
        13258
      ],
      "mapped",
      [
        104,
        97
      ]
    ],
    [
      [
        13259,
        13259
      ],
      "mapped",
      [
        104,
        112
      ]
    ],
    [
      [
        13260,
        13260
      ],
      "mapped",
      [
        105,
        110
      ]
    ],
    [
      [
        13261,
        13261
      ],
      "mapped",
      [
        107,
        107
      ]
    ],
    [
      [
        13262,
        13262
      ],
      "mapped",
      [
        107,
        109
      ]
    ],
    [
      [
        13263,
        13263
      ],
      "mapped",
      [
        107,
        116
      ]
    ],
    [
      [
        13264,
        13264
      ],
      "mapped",
      [
        108,
        109
      ]
    ],
    [
      [
        13265,
        13265
      ],
      "mapped",
      [
        108,
        110
      ]
    ],
    [
      [
        13266,
        13266
      ],
      "mapped",
      [
        108,
        111,
        103
      ]
    ],
    [
      [
        13267,
        13267
      ],
      "mapped",
      [
        108,
        120
      ]
    ],
    [
      [
        13268,
        13268
      ],
      "mapped",
      [
        109,
        98
      ]
    ],
    [
      [
        13269,
        13269
      ],
      "mapped",
      [
        109,
        105,
        108
      ]
    ],
    [
      [
        13270,
        13270
      ],
      "mapped",
      [
        109,
        111,
        108
      ]
    ],
    [
      [
        13271,
        13271
      ],
      "mapped",
      [
        112,
        104
      ]
    ],
    [
      [
        13272,
        13272
      ],
      "disallowed"
    ],
    [
      [
        13273,
        13273
      ],
      "mapped",
      [
        112,
        112,
        109
      ]
    ],
    [
      [
        13274,
        13274
      ],
      "mapped",
      [
        112,
        114
      ]
    ],
    [
      [
        13275,
        13275
      ],
      "mapped",
      [
        115,
        114
      ]
    ],
    [
      [
        13276,
        13276
      ],
      "mapped",
      [
        115,
        118
      ]
    ],
    [
      [
        13277,
        13277
      ],
      "mapped",
      [
        119,
        98
      ]
    ],
    [
      [
        13278,
        13278
      ],
      "mapped",
      [
        118,
        8725,
        109
      ]
    ],
    [
      [
        13279,
        13279
      ],
      "mapped",
      [
        97,
        8725,
        109
      ]
    ],
    [
      [
        13280,
        13280
      ],
      "mapped",
      [
        49,
        26085
      ]
    ],
    [
      [
        13281,
        13281
      ],
      "mapped",
      [
        50,
        26085
      ]
    ],
    [
      [
        13282,
        13282
      ],
      "mapped",
      [
        51,
        26085
      ]
    ],
    [
      [
        13283,
        13283
      ],
      "mapped",
      [
        52,
        26085
      ]
    ],
    [
      [
        13284,
        13284
      ],
      "mapped",
      [
        53,
        26085
      ]
    ],
    [
      [
        13285,
        13285
      ],
      "mapped",
      [
        54,
        26085
      ]
    ],
    [
      [
        13286,
        13286
      ],
      "mapped",
      [
        55,
        26085
      ]
    ],
    [
      [
        13287,
        13287
      ],
      "mapped",
      [
        56,
        26085
      ]
    ],
    [
      [
        13288,
        13288
      ],
      "mapped",
      [
        57,
        26085
      ]
    ],
    [
      [
        13289,
        13289
      ],
      "mapped",
      [
        49,
        48,
        26085
      ]
    ],
    [
      [
        13290,
        13290
      ],
      "mapped",
      [
        49,
        49,
        26085
      ]
    ],
    [
      [
        13291,
        13291
      ],
      "mapped",
      [
        49,
        50,
        26085
      ]
    ],
    [
      [
        13292,
        13292
      ],
      "mapped",
      [
        49,
        51,
        26085
      ]
    ],
    [
      [
        13293,
        13293
      ],
      "mapped",
      [
        49,
        52,
        26085
      ]
    ],
    [
      [
        13294,
        13294
      ],
      "mapped",
      [
        49,
        53,
        26085
      ]
    ],
    [
      [
        13295,
        13295
      ],
      "mapped",
      [
        49,
        54,
        26085
      ]
    ],
    [
      [
        13296,
        13296
      ],
      "mapped",
      [
        49,
        55,
        26085
      ]
    ],
    [
      [
        13297,
        13297
      ],
      "mapped",
      [
        49,
        56,
        26085
      ]
    ],
    [
      [
        13298,
        13298
      ],
      "mapped",
      [
        49,
        57,
        26085
      ]
    ],
    [
      [
        13299,
        13299
      ],
      "mapped",
      [
        50,
        48,
        26085
      ]
    ],
    [
      [
        13300,
        13300
      ],
      "mapped",
      [
        50,
        49,
        26085
      ]
    ],
    [
      [
        13301,
        13301
      ],
      "mapped",
      [
        50,
        50,
        26085
      ]
    ],
    [
      [
        13302,
        13302
      ],
      "mapped",
      [
        50,
        51,
        26085
      ]
    ],
    [
      [
        13303,
        13303
      ],
      "mapped",
      [
        50,
        52,
        26085
      ]
    ],
    [
      [
        13304,
        13304
      ],
      "mapped",
      [
        50,
        53,
        26085
      ]
    ],
    [
      [
        13305,
        13305
      ],
      "mapped",
      [
        50,
        54,
        26085
      ]
    ],
    [
      [
        13306,
        13306
      ],
      "mapped",
      [
        50,
        55,
        26085
      ]
    ],
    [
      [
        13307,
        13307
      ],
      "mapped",
      [
        50,
        56,
        26085
      ]
    ],
    [
      [
        13308,
        13308
      ],
      "mapped",
      [
        50,
        57,
        26085
      ]
    ],
    [
      [
        13309,
        13309
      ],
      "mapped",
      [
        51,
        48,
        26085
      ]
    ],
    [
      [
        13310,
        13310
      ],
      "mapped",
      [
        51,
        49,
        26085
      ]
    ],
    [
      [
        13311,
        13311
      ],
      "mapped",
      [
        103,
        97,
        108
      ]
    ],
    [
      [
        13312,
        19893
      ],
      "valid"
    ],
    [
      [
        19894,
        19903
      ],
      "disallowed"
    ],
    [
      [
        19904,
        19967
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        19968,
        40869
      ],
      "valid"
    ],
    [
      [
        40870,
        40891
      ],
      "valid"
    ],
    [
      [
        40892,
        40899
      ],
      "valid"
    ],
    [
      [
        40900,
        40907
      ],
      "valid"
    ],
    [
      [
        40908,
        40908
      ],
      "valid"
    ],
    [
      [
        40909,
        40917
      ],
      "valid"
    ],
    [
      [
        40918,
        40959
      ],
      "disallowed"
    ],
    [
      [
        40960,
        42124
      ],
      "valid"
    ],
    [
      [
        42125,
        42127
      ],
      "disallowed"
    ],
    [
      [
        42128,
        42145
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42146,
        42147
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42148,
        42163
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42164,
        42164
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42165,
        42176
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42177,
        42177
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42178,
        42180
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42181,
        42181
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42182,
        42182
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42183,
        42191
      ],
      "disallowed"
    ],
    [
      [
        42192,
        42237
      ],
      "valid"
    ],
    [
      [
        42238,
        42239
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42240,
        42508
      ],
      "valid"
    ],
    [
      [
        42509,
        42511
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42512,
        42539
      ],
      "valid"
    ],
    [
      [
        42540,
        42559
      ],
      "disallowed"
    ],
    [
      [
        42560,
        42560
      ],
      "mapped",
      [
        42561
      ]
    ],
    [
      [
        42561,
        42561
      ],
      "valid"
    ],
    [
      [
        42562,
        42562
      ],
      "mapped",
      [
        42563
      ]
    ],
    [
      [
        42563,
        42563
      ],
      "valid"
    ],
    [
      [
        42564,
        42564
      ],
      "mapped",
      [
        42565
      ]
    ],
    [
      [
        42565,
        42565
      ],
      "valid"
    ],
    [
      [
        42566,
        42566
      ],
      "mapped",
      [
        42567
      ]
    ],
    [
      [
        42567,
        42567
      ],
      "valid"
    ],
    [
      [
        42568,
        42568
      ],
      "mapped",
      [
        42569
      ]
    ],
    [
      [
        42569,
        42569
      ],
      "valid"
    ],
    [
      [
        42570,
        42570
      ],
      "mapped",
      [
        42571
      ]
    ],
    [
      [
        42571,
        42571
      ],
      "valid"
    ],
    [
      [
        42572,
        42572
      ],
      "mapped",
      [
        42573
      ]
    ],
    [
      [
        42573,
        42573
      ],
      "valid"
    ],
    [
      [
        42574,
        42574
      ],
      "mapped",
      [
        42575
      ]
    ],
    [
      [
        42575,
        42575
      ],
      "valid"
    ],
    [
      [
        42576,
        42576
      ],
      "mapped",
      [
        42577
      ]
    ],
    [
      [
        42577,
        42577
      ],
      "valid"
    ],
    [
      [
        42578,
        42578
      ],
      "mapped",
      [
        42579
      ]
    ],
    [
      [
        42579,
        42579
      ],
      "valid"
    ],
    [
      [
        42580,
        42580
      ],
      "mapped",
      [
        42581
      ]
    ],
    [
      [
        42581,
        42581
      ],
      "valid"
    ],
    [
      [
        42582,
        42582
      ],
      "mapped",
      [
        42583
      ]
    ],
    [
      [
        42583,
        42583
      ],
      "valid"
    ],
    [
      [
        42584,
        42584
      ],
      "mapped",
      [
        42585
      ]
    ],
    [
      [
        42585,
        42585
      ],
      "valid"
    ],
    [
      [
        42586,
        42586
      ],
      "mapped",
      [
        42587
      ]
    ],
    [
      [
        42587,
        42587
      ],
      "valid"
    ],
    [
      [
        42588,
        42588
      ],
      "mapped",
      [
        42589
      ]
    ],
    [
      [
        42589,
        42589
      ],
      "valid"
    ],
    [
      [
        42590,
        42590
      ],
      "mapped",
      [
        42591
      ]
    ],
    [
      [
        42591,
        42591
      ],
      "valid"
    ],
    [
      [
        42592,
        42592
      ],
      "mapped",
      [
        42593
      ]
    ],
    [
      [
        42593,
        42593
      ],
      "valid"
    ],
    [
      [
        42594,
        42594
      ],
      "mapped",
      [
        42595
      ]
    ],
    [
      [
        42595,
        42595
      ],
      "valid"
    ],
    [
      [
        42596,
        42596
      ],
      "mapped",
      [
        42597
      ]
    ],
    [
      [
        42597,
        42597
      ],
      "valid"
    ],
    [
      [
        42598,
        42598
      ],
      "mapped",
      [
        42599
      ]
    ],
    [
      [
        42599,
        42599
      ],
      "valid"
    ],
    [
      [
        42600,
        42600
      ],
      "mapped",
      [
        42601
      ]
    ],
    [
      [
        42601,
        42601
      ],
      "valid"
    ],
    [
      [
        42602,
        42602
      ],
      "mapped",
      [
        42603
      ]
    ],
    [
      [
        42603,
        42603
      ],
      "valid"
    ],
    [
      [
        42604,
        42604
      ],
      "mapped",
      [
        42605
      ]
    ],
    [
      [
        42605,
        42607
      ],
      "valid"
    ],
    [
      [
        42608,
        42611
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42612,
        42619
      ],
      "valid"
    ],
    [
      [
        42620,
        42621
      ],
      "valid"
    ],
    [
      [
        42622,
        42622
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42623,
        42623
      ],
      "valid"
    ],
    [
      [
        42624,
        42624
      ],
      "mapped",
      [
        42625
      ]
    ],
    [
      [
        42625,
        42625
      ],
      "valid"
    ],
    [
      [
        42626,
        42626
      ],
      "mapped",
      [
        42627
      ]
    ],
    [
      [
        42627,
        42627
      ],
      "valid"
    ],
    [
      [
        42628,
        42628
      ],
      "mapped",
      [
        42629
      ]
    ],
    [
      [
        42629,
        42629
      ],
      "valid"
    ],
    [
      [
        42630,
        42630
      ],
      "mapped",
      [
        42631
      ]
    ],
    [
      [
        42631,
        42631
      ],
      "valid"
    ],
    [
      [
        42632,
        42632
      ],
      "mapped",
      [
        42633
      ]
    ],
    [
      [
        42633,
        42633
      ],
      "valid"
    ],
    [
      [
        42634,
        42634
      ],
      "mapped",
      [
        42635
      ]
    ],
    [
      [
        42635,
        42635
      ],
      "valid"
    ],
    [
      [
        42636,
        42636
      ],
      "mapped",
      [
        42637
      ]
    ],
    [
      [
        42637,
        42637
      ],
      "valid"
    ],
    [
      [
        42638,
        42638
      ],
      "mapped",
      [
        42639
      ]
    ],
    [
      [
        42639,
        42639
      ],
      "valid"
    ],
    [
      [
        42640,
        42640
      ],
      "mapped",
      [
        42641
      ]
    ],
    [
      [
        42641,
        42641
      ],
      "valid"
    ],
    [
      [
        42642,
        42642
      ],
      "mapped",
      [
        42643
      ]
    ],
    [
      [
        42643,
        42643
      ],
      "valid"
    ],
    [
      [
        42644,
        42644
      ],
      "mapped",
      [
        42645
      ]
    ],
    [
      [
        42645,
        42645
      ],
      "valid"
    ],
    [
      [
        42646,
        42646
      ],
      "mapped",
      [
        42647
      ]
    ],
    [
      [
        42647,
        42647
      ],
      "valid"
    ],
    [
      [
        42648,
        42648
      ],
      "mapped",
      [
        42649
      ]
    ],
    [
      [
        42649,
        42649
      ],
      "valid"
    ],
    [
      [
        42650,
        42650
      ],
      "mapped",
      [
        42651
      ]
    ],
    [
      [
        42651,
        42651
      ],
      "valid"
    ],
    [
      [
        42652,
        42652
      ],
      "mapped",
      [
        1098
      ]
    ],
    [
      [
        42653,
        42653
      ],
      "mapped",
      [
        1100
      ]
    ],
    [
      [
        42654,
        42654
      ],
      "valid"
    ],
    [
      [
        42655,
        42655
      ],
      "valid"
    ],
    [
      [
        42656,
        42725
      ],
      "valid"
    ],
    [
      [
        42726,
        42735
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42736,
        42737
      ],
      "valid"
    ],
    [
      [
        42738,
        42743
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42744,
        42751
      ],
      "disallowed"
    ],
    [
      [
        42752,
        42774
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42775,
        42778
      ],
      "valid"
    ],
    [
      [
        42779,
        42783
      ],
      "valid"
    ],
    [
      [
        42784,
        42785
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42786,
        42786
      ],
      "mapped",
      [
        42787
      ]
    ],
    [
      [
        42787,
        42787
      ],
      "valid"
    ],
    [
      [
        42788,
        42788
      ],
      "mapped",
      [
        42789
      ]
    ],
    [
      [
        42789,
        42789
      ],
      "valid"
    ],
    [
      [
        42790,
        42790
      ],
      "mapped",
      [
        42791
      ]
    ],
    [
      [
        42791,
        42791
      ],
      "valid"
    ],
    [
      [
        42792,
        42792
      ],
      "mapped",
      [
        42793
      ]
    ],
    [
      [
        42793,
        42793
      ],
      "valid"
    ],
    [
      [
        42794,
        42794
      ],
      "mapped",
      [
        42795
      ]
    ],
    [
      [
        42795,
        42795
      ],
      "valid"
    ],
    [
      [
        42796,
        42796
      ],
      "mapped",
      [
        42797
      ]
    ],
    [
      [
        42797,
        42797
      ],
      "valid"
    ],
    [
      [
        42798,
        42798
      ],
      "mapped",
      [
        42799
      ]
    ],
    [
      [
        42799,
        42801
      ],
      "valid"
    ],
    [
      [
        42802,
        42802
      ],
      "mapped",
      [
        42803
      ]
    ],
    [
      [
        42803,
        42803
      ],
      "valid"
    ],
    [
      [
        42804,
        42804
      ],
      "mapped",
      [
        42805
      ]
    ],
    [
      [
        42805,
        42805
      ],
      "valid"
    ],
    [
      [
        42806,
        42806
      ],
      "mapped",
      [
        42807
      ]
    ],
    [
      [
        42807,
        42807
      ],
      "valid"
    ],
    [
      [
        42808,
        42808
      ],
      "mapped",
      [
        42809
      ]
    ],
    [
      [
        42809,
        42809
      ],
      "valid"
    ],
    [
      [
        42810,
        42810
      ],
      "mapped",
      [
        42811
      ]
    ],
    [
      [
        42811,
        42811
      ],
      "valid"
    ],
    [
      [
        42812,
        42812
      ],
      "mapped",
      [
        42813
      ]
    ],
    [
      [
        42813,
        42813
      ],
      "valid"
    ],
    [
      [
        42814,
        42814
      ],
      "mapped",
      [
        42815
      ]
    ],
    [
      [
        42815,
        42815
      ],
      "valid"
    ],
    [
      [
        42816,
        42816
      ],
      "mapped",
      [
        42817
      ]
    ],
    [
      [
        42817,
        42817
      ],
      "valid"
    ],
    [
      [
        42818,
        42818
      ],
      "mapped",
      [
        42819
      ]
    ],
    [
      [
        42819,
        42819
      ],
      "valid"
    ],
    [
      [
        42820,
        42820
      ],
      "mapped",
      [
        42821
      ]
    ],
    [
      [
        42821,
        42821
      ],
      "valid"
    ],
    [
      [
        42822,
        42822
      ],
      "mapped",
      [
        42823
      ]
    ],
    [
      [
        42823,
        42823
      ],
      "valid"
    ],
    [
      [
        42824,
        42824
      ],
      "mapped",
      [
        42825
      ]
    ],
    [
      [
        42825,
        42825
      ],
      "valid"
    ],
    [
      [
        42826,
        42826
      ],
      "mapped",
      [
        42827
      ]
    ],
    [
      [
        42827,
        42827
      ],
      "valid"
    ],
    [
      [
        42828,
        42828
      ],
      "mapped",
      [
        42829
      ]
    ],
    [
      [
        42829,
        42829
      ],
      "valid"
    ],
    [
      [
        42830,
        42830
      ],
      "mapped",
      [
        42831
      ]
    ],
    [
      [
        42831,
        42831
      ],
      "valid"
    ],
    [
      [
        42832,
        42832
      ],
      "mapped",
      [
        42833
      ]
    ],
    [
      [
        42833,
        42833
      ],
      "valid"
    ],
    [
      [
        42834,
        42834
      ],
      "mapped",
      [
        42835
      ]
    ],
    [
      [
        42835,
        42835
      ],
      "valid"
    ],
    [
      [
        42836,
        42836
      ],
      "mapped",
      [
        42837
      ]
    ],
    [
      [
        42837,
        42837
      ],
      "valid"
    ],
    [
      [
        42838,
        42838
      ],
      "mapped",
      [
        42839
      ]
    ],
    [
      [
        42839,
        42839
      ],
      "valid"
    ],
    [
      [
        42840,
        42840
      ],
      "mapped",
      [
        42841
      ]
    ],
    [
      [
        42841,
        42841
      ],
      "valid"
    ],
    [
      [
        42842,
        42842
      ],
      "mapped",
      [
        42843
      ]
    ],
    [
      [
        42843,
        42843
      ],
      "valid"
    ],
    [
      [
        42844,
        42844
      ],
      "mapped",
      [
        42845
      ]
    ],
    [
      [
        42845,
        42845
      ],
      "valid"
    ],
    [
      [
        42846,
        42846
      ],
      "mapped",
      [
        42847
      ]
    ],
    [
      [
        42847,
        42847
      ],
      "valid"
    ],
    [
      [
        42848,
        42848
      ],
      "mapped",
      [
        42849
      ]
    ],
    [
      [
        42849,
        42849
      ],
      "valid"
    ],
    [
      [
        42850,
        42850
      ],
      "mapped",
      [
        42851
      ]
    ],
    [
      [
        42851,
        42851
      ],
      "valid"
    ],
    [
      [
        42852,
        42852
      ],
      "mapped",
      [
        42853
      ]
    ],
    [
      [
        42853,
        42853
      ],
      "valid"
    ],
    [
      [
        42854,
        42854
      ],
      "mapped",
      [
        42855
      ]
    ],
    [
      [
        42855,
        42855
      ],
      "valid"
    ],
    [
      [
        42856,
        42856
      ],
      "mapped",
      [
        42857
      ]
    ],
    [
      [
        42857,
        42857
      ],
      "valid"
    ],
    [
      [
        42858,
        42858
      ],
      "mapped",
      [
        42859
      ]
    ],
    [
      [
        42859,
        42859
      ],
      "valid"
    ],
    [
      [
        42860,
        42860
      ],
      "mapped",
      [
        42861
      ]
    ],
    [
      [
        42861,
        42861
      ],
      "valid"
    ],
    [
      [
        42862,
        42862
      ],
      "mapped",
      [
        42863
      ]
    ],
    [
      [
        42863,
        42863
      ],
      "valid"
    ],
    [
      [
        42864,
        42864
      ],
      "mapped",
      [
        42863
      ]
    ],
    [
      [
        42865,
        42872
      ],
      "valid"
    ],
    [
      [
        42873,
        42873
      ],
      "mapped",
      [
        42874
      ]
    ],
    [
      [
        42874,
        42874
      ],
      "valid"
    ],
    [
      [
        42875,
        42875
      ],
      "mapped",
      [
        42876
      ]
    ],
    [
      [
        42876,
        42876
      ],
      "valid"
    ],
    [
      [
        42877,
        42877
      ],
      "mapped",
      [
        7545
      ]
    ],
    [
      [
        42878,
        42878
      ],
      "mapped",
      [
        42879
      ]
    ],
    [
      [
        42879,
        42879
      ],
      "valid"
    ],
    [
      [
        42880,
        42880
      ],
      "mapped",
      [
        42881
      ]
    ],
    [
      [
        42881,
        42881
      ],
      "valid"
    ],
    [
      [
        42882,
        42882
      ],
      "mapped",
      [
        42883
      ]
    ],
    [
      [
        42883,
        42883
      ],
      "valid"
    ],
    [
      [
        42884,
        42884
      ],
      "mapped",
      [
        42885
      ]
    ],
    [
      [
        42885,
        42885
      ],
      "valid"
    ],
    [
      [
        42886,
        42886
      ],
      "mapped",
      [
        42887
      ]
    ],
    [
      [
        42887,
        42888
      ],
      "valid"
    ],
    [
      [
        42889,
        42890
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        42891,
        42891
      ],
      "mapped",
      [
        42892
      ]
    ],
    [
      [
        42892,
        42892
      ],
      "valid"
    ],
    [
      [
        42893,
        42893
      ],
      "mapped",
      [
        613
      ]
    ],
    [
      [
        42894,
        42894
      ],
      "valid"
    ],
    [
      [
        42895,
        42895
      ],
      "valid"
    ],
    [
      [
        42896,
        42896
      ],
      "mapped",
      [
        42897
      ]
    ],
    [
      [
        42897,
        42897
      ],
      "valid"
    ],
    [
      [
        42898,
        42898
      ],
      "mapped",
      [
        42899
      ]
    ],
    [
      [
        42899,
        42899
      ],
      "valid"
    ],
    [
      [
        42900,
        42901
      ],
      "valid"
    ],
    [
      [
        42902,
        42902
      ],
      "mapped",
      [
        42903
      ]
    ],
    [
      [
        42903,
        42903
      ],
      "valid"
    ],
    [
      [
        42904,
        42904
      ],
      "mapped",
      [
        42905
      ]
    ],
    [
      [
        42905,
        42905
      ],
      "valid"
    ],
    [
      [
        42906,
        42906
      ],
      "mapped",
      [
        42907
      ]
    ],
    [
      [
        42907,
        42907
      ],
      "valid"
    ],
    [
      [
        42908,
        42908
      ],
      "mapped",
      [
        42909
      ]
    ],
    [
      [
        42909,
        42909
      ],
      "valid"
    ],
    [
      [
        42910,
        42910
      ],
      "mapped",
      [
        42911
      ]
    ],
    [
      [
        42911,
        42911
      ],
      "valid"
    ],
    [
      [
        42912,
        42912
      ],
      "mapped",
      [
        42913
      ]
    ],
    [
      [
        42913,
        42913
      ],
      "valid"
    ],
    [
      [
        42914,
        42914
      ],
      "mapped",
      [
        42915
      ]
    ],
    [
      [
        42915,
        42915
      ],
      "valid"
    ],
    [
      [
        42916,
        42916
      ],
      "mapped",
      [
        42917
      ]
    ],
    [
      [
        42917,
        42917
      ],
      "valid"
    ],
    [
      [
        42918,
        42918
      ],
      "mapped",
      [
        42919
      ]
    ],
    [
      [
        42919,
        42919
      ],
      "valid"
    ],
    [
      [
        42920,
        42920
      ],
      "mapped",
      [
        42921
      ]
    ],
    [
      [
        42921,
        42921
      ],
      "valid"
    ],
    [
      [
        42922,
        42922
      ],
      "mapped",
      [
        614
      ]
    ],
    [
      [
        42923,
        42923
      ],
      "mapped",
      [
        604
      ]
    ],
    [
      [
        42924,
        42924
      ],
      "mapped",
      [
        609
      ]
    ],
    [
      [
        42925,
        42925
      ],
      "mapped",
      [
        620
      ]
    ],
    [
      [
        42926,
        42927
      ],
      "disallowed"
    ],
    [
      [
        42928,
        42928
      ],
      "mapped",
      [
        670
      ]
    ],
    [
      [
        42929,
        42929
      ],
      "mapped",
      [
        647
      ]
    ],
    [
      [
        42930,
        42930
      ],
      "mapped",
      [
        669
      ]
    ],
    [
      [
        42931,
        42931
      ],
      "mapped",
      [
        43859
      ]
    ],
    [
      [
        42932,
        42932
      ],
      "mapped",
      [
        42933
      ]
    ],
    [
      [
        42933,
        42933
      ],
      "valid"
    ],
    [
      [
        42934,
        42934
      ],
      "mapped",
      [
        42935
      ]
    ],
    [
      [
        42935,
        42935
      ],
      "valid"
    ],
    [
      [
        42936,
        42998
      ],
      "disallowed"
    ],
    [
      [
        42999,
        42999
      ],
      "valid"
    ],
    [
      [
        43e3,
        43e3
      ],
      "mapped",
      [
        295
      ]
    ],
    [
      [
        43001,
        43001
      ],
      "mapped",
      [
        339
      ]
    ],
    [
      [
        43002,
        43002
      ],
      "valid"
    ],
    [
      [
        43003,
        43007
      ],
      "valid"
    ],
    [
      [
        43008,
        43047
      ],
      "valid"
    ],
    [
      [
        43048,
        43051
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43052,
        43055
      ],
      "disallowed"
    ],
    [
      [
        43056,
        43065
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43066,
        43071
      ],
      "disallowed"
    ],
    [
      [
        43072,
        43123
      ],
      "valid"
    ],
    [
      [
        43124,
        43127
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43128,
        43135
      ],
      "disallowed"
    ],
    [
      [
        43136,
        43204
      ],
      "valid"
    ],
    [
      [
        43205,
        43213
      ],
      "disallowed"
    ],
    [
      [
        43214,
        43215
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43216,
        43225
      ],
      "valid"
    ],
    [
      [
        43226,
        43231
      ],
      "disallowed"
    ],
    [
      [
        43232,
        43255
      ],
      "valid"
    ],
    [
      [
        43256,
        43258
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43259,
        43259
      ],
      "valid"
    ],
    [
      [
        43260,
        43260
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43261,
        43261
      ],
      "valid"
    ],
    [
      [
        43262,
        43263
      ],
      "disallowed"
    ],
    [
      [
        43264,
        43309
      ],
      "valid"
    ],
    [
      [
        43310,
        43311
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43312,
        43347
      ],
      "valid"
    ],
    [
      [
        43348,
        43358
      ],
      "disallowed"
    ],
    [
      [
        43359,
        43359
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43360,
        43388
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43389,
        43391
      ],
      "disallowed"
    ],
    [
      [
        43392,
        43456
      ],
      "valid"
    ],
    [
      [
        43457,
        43469
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43470,
        43470
      ],
      "disallowed"
    ],
    [
      [
        43471,
        43481
      ],
      "valid"
    ],
    [
      [
        43482,
        43485
      ],
      "disallowed"
    ],
    [
      [
        43486,
        43487
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43488,
        43518
      ],
      "valid"
    ],
    [
      [
        43519,
        43519
      ],
      "disallowed"
    ],
    [
      [
        43520,
        43574
      ],
      "valid"
    ],
    [
      [
        43575,
        43583
      ],
      "disallowed"
    ],
    [
      [
        43584,
        43597
      ],
      "valid"
    ],
    [
      [
        43598,
        43599
      ],
      "disallowed"
    ],
    [
      [
        43600,
        43609
      ],
      "valid"
    ],
    [
      [
        43610,
        43611
      ],
      "disallowed"
    ],
    [
      [
        43612,
        43615
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43616,
        43638
      ],
      "valid"
    ],
    [
      [
        43639,
        43641
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43642,
        43643
      ],
      "valid"
    ],
    [
      [
        43644,
        43647
      ],
      "valid"
    ],
    [
      [
        43648,
        43714
      ],
      "valid"
    ],
    [
      [
        43715,
        43738
      ],
      "disallowed"
    ],
    [
      [
        43739,
        43741
      ],
      "valid"
    ],
    [
      [
        43742,
        43743
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43744,
        43759
      ],
      "valid"
    ],
    [
      [
        43760,
        43761
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43762,
        43766
      ],
      "valid"
    ],
    [
      [
        43767,
        43776
      ],
      "disallowed"
    ],
    [
      [
        43777,
        43782
      ],
      "valid"
    ],
    [
      [
        43783,
        43784
      ],
      "disallowed"
    ],
    [
      [
        43785,
        43790
      ],
      "valid"
    ],
    [
      [
        43791,
        43792
      ],
      "disallowed"
    ],
    [
      [
        43793,
        43798
      ],
      "valid"
    ],
    [
      [
        43799,
        43807
      ],
      "disallowed"
    ],
    [
      [
        43808,
        43814
      ],
      "valid"
    ],
    [
      [
        43815,
        43815
      ],
      "disallowed"
    ],
    [
      [
        43816,
        43822
      ],
      "valid"
    ],
    [
      [
        43823,
        43823
      ],
      "disallowed"
    ],
    [
      [
        43824,
        43866
      ],
      "valid"
    ],
    [
      [
        43867,
        43867
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        43868,
        43868
      ],
      "mapped",
      [
        42791
      ]
    ],
    [
      [
        43869,
        43869
      ],
      "mapped",
      [
        43831
      ]
    ],
    [
      [
        43870,
        43870
      ],
      "mapped",
      [
        619
      ]
    ],
    [
      [
        43871,
        43871
      ],
      "mapped",
      [
        43858
      ]
    ],
    [
      [
        43872,
        43875
      ],
      "valid"
    ],
    [
      [
        43876,
        43877
      ],
      "valid"
    ],
    [
      [
        43878,
        43887
      ],
      "disallowed"
    ],
    [
      [
        43888,
        43888
      ],
      "mapped",
      [
        5024
      ]
    ],
    [
      [
        43889,
        43889
      ],
      "mapped",
      [
        5025
      ]
    ],
    [
      [
        43890,
        43890
      ],
      "mapped",
      [
        5026
      ]
    ],
    [
      [
        43891,
        43891
      ],
      "mapped",
      [
        5027
      ]
    ],
    [
      [
        43892,
        43892
      ],
      "mapped",
      [
        5028
      ]
    ],
    [
      [
        43893,
        43893
      ],
      "mapped",
      [
        5029
      ]
    ],
    [
      [
        43894,
        43894
      ],
      "mapped",
      [
        5030
      ]
    ],
    [
      [
        43895,
        43895
      ],
      "mapped",
      [
        5031
      ]
    ],
    [
      [
        43896,
        43896
      ],
      "mapped",
      [
        5032
      ]
    ],
    [
      [
        43897,
        43897
      ],
      "mapped",
      [
        5033
      ]
    ],
    [
      [
        43898,
        43898
      ],
      "mapped",
      [
        5034
      ]
    ],
    [
      [
        43899,
        43899
      ],
      "mapped",
      [
        5035
      ]
    ],
    [
      [
        43900,
        43900
      ],
      "mapped",
      [
        5036
      ]
    ],
    [
      [
        43901,
        43901
      ],
      "mapped",
      [
        5037
      ]
    ],
    [
      [
        43902,
        43902
      ],
      "mapped",
      [
        5038
      ]
    ],
    [
      [
        43903,
        43903
      ],
      "mapped",
      [
        5039
      ]
    ],
    [
      [
        43904,
        43904
      ],
      "mapped",
      [
        5040
      ]
    ],
    [
      [
        43905,
        43905
      ],
      "mapped",
      [
        5041
      ]
    ],
    [
      [
        43906,
        43906
      ],
      "mapped",
      [
        5042
      ]
    ],
    [
      [
        43907,
        43907
      ],
      "mapped",
      [
        5043
      ]
    ],
    [
      [
        43908,
        43908
      ],
      "mapped",
      [
        5044
      ]
    ],
    [
      [
        43909,
        43909
      ],
      "mapped",
      [
        5045
      ]
    ],
    [
      [
        43910,
        43910
      ],
      "mapped",
      [
        5046
      ]
    ],
    [
      [
        43911,
        43911
      ],
      "mapped",
      [
        5047
      ]
    ],
    [
      [
        43912,
        43912
      ],
      "mapped",
      [
        5048
      ]
    ],
    [
      [
        43913,
        43913
      ],
      "mapped",
      [
        5049
      ]
    ],
    [
      [
        43914,
        43914
      ],
      "mapped",
      [
        5050
      ]
    ],
    [
      [
        43915,
        43915
      ],
      "mapped",
      [
        5051
      ]
    ],
    [
      [
        43916,
        43916
      ],
      "mapped",
      [
        5052
      ]
    ],
    [
      [
        43917,
        43917
      ],
      "mapped",
      [
        5053
      ]
    ],
    [
      [
        43918,
        43918
      ],
      "mapped",
      [
        5054
      ]
    ],
    [
      [
        43919,
        43919
      ],
      "mapped",
      [
        5055
      ]
    ],
    [
      [
        43920,
        43920
      ],
      "mapped",
      [
        5056
      ]
    ],
    [
      [
        43921,
        43921
      ],
      "mapped",
      [
        5057
      ]
    ],
    [
      [
        43922,
        43922
      ],
      "mapped",
      [
        5058
      ]
    ],
    [
      [
        43923,
        43923
      ],
      "mapped",
      [
        5059
      ]
    ],
    [
      [
        43924,
        43924
      ],
      "mapped",
      [
        5060
      ]
    ],
    [
      [
        43925,
        43925
      ],
      "mapped",
      [
        5061
      ]
    ],
    [
      [
        43926,
        43926
      ],
      "mapped",
      [
        5062
      ]
    ],
    [
      [
        43927,
        43927
      ],
      "mapped",
      [
        5063
      ]
    ],
    [
      [
        43928,
        43928
      ],
      "mapped",
      [
        5064
      ]
    ],
    [
      [
        43929,
        43929
      ],
      "mapped",
      [
        5065
      ]
    ],
    [
      [
        43930,
        43930
      ],
      "mapped",
      [
        5066
      ]
    ],
    [
      [
        43931,
        43931
      ],
      "mapped",
      [
        5067
      ]
    ],
    [
      [
        43932,
        43932
      ],
      "mapped",
      [
        5068
      ]
    ],
    [
      [
        43933,
        43933
      ],
      "mapped",
      [
        5069
      ]
    ],
    [
      [
        43934,
        43934
      ],
      "mapped",
      [
        5070
      ]
    ],
    [
      [
        43935,
        43935
      ],
      "mapped",
      [
        5071
      ]
    ],
    [
      [
        43936,
        43936
      ],
      "mapped",
      [
        5072
      ]
    ],
    [
      [
        43937,
        43937
      ],
      "mapped",
      [
        5073
      ]
    ],
    [
      [
        43938,
        43938
      ],
      "mapped",
      [
        5074
      ]
    ],
    [
      [
        43939,
        43939
      ],
      "mapped",
      [
        5075
      ]
    ],
    [
      [
        43940,
        43940
      ],
      "mapped",
      [
        5076
      ]
    ],
    [
      [
        43941,
        43941
      ],
      "mapped",
      [
        5077
      ]
    ],
    [
      [
        43942,
        43942
      ],
      "mapped",
      [
        5078
      ]
    ],
    [
      [
        43943,
        43943
      ],
      "mapped",
      [
        5079
      ]
    ],
    [
      [
        43944,
        43944
      ],
      "mapped",
      [
        5080
      ]
    ],
    [
      [
        43945,
        43945
      ],
      "mapped",
      [
        5081
      ]
    ],
    [
      [
        43946,
        43946
      ],
      "mapped",
      [
        5082
      ]
    ],
    [
      [
        43947,
        43947
      ],
      "mapped",
      [
        5083
      ]
    ],
    [
      [
        43948,
        43948
      ],
      "mapped",
      [
        5084
      ]
    ],
    [
      [
        43949,
        43949
      ],
      "mapped",
      [
        5085
      ]
    ],
    [
      [
        43950,
        43950
      ],
      "mapped",
      [
        5086
      ]
    ],
    [
      [
        43951,
        43951
      ],
      "mapped",
      [
        5087
      ]
    ],
    [
      [
        43952,
        43952
      ],
      "mapped",
      [
        5088
      ]
    ],
    [
      [
        43953,
        43953
      ],
      "mapped",
      [
        5089
      ]
    ],
    [
      [
        43954,
        43954
      ],
      "mapped",
      [
        5090
      ]
    ],
    [
      [
        43955,
        43955
      ],
      "mapped",
      [
        5091
      ]
    ],
    [
      [
        43956,
        43956
      ],
      "mapped",
      [
        5092
      ]
    ],
    [
      [
        43957,
        43957
      ],
      "mapped",
      [
        5093
      ]
    ],
    [
      [
        43958,
        43958
      ],
      "mapped",
      [
        5094
      ]
    ],
    [
      [
        43959,
        43959
      ],
      "mapped",
      [
        5095
      ]
    ],
    [
      [
        43960,
        43960
      ],
      "mapped",
      [
        5096
      ]
    ],
    [
      [
        43961,
        43961
      ],
      "mapped",
      [
        5097
      ]
    ],
    [
      [
        43962,
        43962
      ],
      "mapped",
      [
        5098
      ]
    ],
    [
      [
        43963,
        43963
      ],
      "mapped",
      [
        5099
      ]
    ],
    [
      [
        43964,
        43964
      ],
      "mapped",
      [
        5100
      ]
    ],
    [
      [
        43965,
        43965
      ],
      "mapped",
      [
        5101
      ]
    ],
    [
      [
        43966,
        43966
      ],
      "mapped",
      [
        5102
      ]
    ],
    [
      [
        43967,
        43967
      ],
      "mapped",
      [
        5103
      ]
    ],
    [
      [
        43968,
        44010
      ],
      "valid"
    ],
    [
      [
        44011,
        44011
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        44012,
        44013
      ],
      "valid"
    ],
    [
      [
        44014,
        44015
      ],
      "disallowed"
    ],
    [
      [
        44016,
        44025
      ],
      "valid"
    ],
    [
      [
        44026,
        44031
      ],
      "disallowed"
    ],
    [
      [
        44032,
        55203
      ],
      "valid"
    ],
    [
      [
        55204,
        55215
      ],
      "disallowed"
    ],
    [
      [
        55216,
        55238
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        55239,
        55242
      ],
      "disallowed"
    ],
    [
      [
        55243,
        55291
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        55292,
        55295
      ],
      "disallowed"
    ],
    [
      [
        55296,
        57343
      ],
      "disallowed"
    ],
    [
      [
        57344,
        63743
      ],
      "disallowed"
    ],
    [
      [
        63744,
        63744
      ],
      "mapped",
      [
        35912
      ]
    ],
    [
      [
        63745,
        63745
      ],
      "mapped",
      [
        26356
      ]
    ],
    [
      [
        63746,
        63746
      ],
      "mapped",
      [
        36554
      ]
    ],
    [
      [
        63747,
        63747
      ],
      "mapped",
      [
        36040
      ]
    ],
    [
      [
        63748,
        63748
      ],
      "mapped",
      [
        28369
      ]
    ],
    [
      [
        63749,
        63749
      ],
      "mapped",
      [
        20018
      ]
    ],
    [
      [
        63750,
        63750
      ],
      "mapped",
      [
        21477
      ]
    ],
    [
      [
        63751,
        63752
      ],
      "mapped",
      [
        40860
      ]
    ],
    [
      [
        63753,
        63753
      ],
      "mapped",
      [
        22865
      ]
    ],
    [
      [
        63754,
        63754
      ],
      "mapped",
      [
        37329
      ]
    ],
    [
      [
        63755,
        63755
      ],
      "mapped",
      [
        21895
      ]
    ],
    [
      [
        63756,
        63756
      ],
      "mapped",
      [
        22856
      ]
    ],
    [
      [
        63757,
        63757
      ],
      "mapped",
      [
        25078
      ]
    ],
    [
      [
        63758,
        63758
      ],
      "mapped",
      [
        30313
      ]
    ],
    [
      [
        63759,
        63759
      ],
      "mapped",
      [
        32645
      ]
    ],
    [
      [
        63760,
        63760
      ],
      "mapped",
      [
        34367
      ]
    ],
    [
      [
        63761,
        63761
      ],
      "mapped",
      [
        34746
      ]
    ],
    [
      [
        63762,
        63762
      ],
      "mapped",
      [
        35064
      ]
    ],
    [
      [
        63763,
        63763
      ],
      "mapped",
      [
        37007
      ]
    ],
    [
      [
        63764,
        63764
      ],
      "mapped",
      [
        27138
      ]
    ],
    [
      [
        63765,
        63765
      ],
      "mapped",
      [
        27931
      ]
    ],
    [
      [
        63766,
        63766
      ],
      "mapped",
      [
        28889
      ]
    ],
    [
      [
        63767,
        63767
      ],
      "mapped",
      [
        29662
      ]
    ],
    [
      [
        63768,
        63768
      ],
      "mapped",
      [
        33853
      ]
    ],
    [
      [
        63769,
        63769
      ],
      "mapped",
      [
        37226
      ]
    ],
    [
      [
        63770,
        63770
      ],
      "mapped",
      [
        39409
      ]
    ],
    [
      [
        63771,
        63771
      ],
      "mapped",
      [
        20098
      ]
    ],
    [
      [
        63772,
        63772
      ],
      "mapped",
      [
        21365
      ]
    ],
    [
      [
        63773,
        63773
      ],
      "mapped",
      [
        27396
      ]
    ],
    [
      [
        63774,
        63774
      ],
      "mapped",
      [
        29211
      ]
    ],
    [
      [
        63775,
        63775
      ],
      "mapped",
      [
        34349
      ]
    ],
    [
      [
        63776,
        63776
      ],
      "mapped",
      [
        40478
      ]
    ],
    [
      [
        63777,
        63777
      ],
      "mapped",
      [
        23888
      ]
    ],
    [
      [
        63778,
        63778
      ],
      "mapped",
      [
        28651
      ]
    ],
    [
      [
        63779,
        63779
      ],
      "mapped",
      [
        34253
      ]
    ],
    [
      [
        63780,
        63780
      ],
      "mapped",
      [
        35172
      ]
    ],
    [
      [
        63781,
        63781
      ],
      "mapped",
      [
        25289
      ]
    ],
    [
      [
        63782,
        63782
      ],
      "mapped",
      [
        33240
      ]
    ],
    [
      [
        63783,
        63783
      ],
      "mapped",
      [
        34847
      ]
    ],
    [
      [
        63784,
        63784
      ],
      "mapped",
      [
        24266
      ]
    ],
    [
      [
        63785,
        63785
      ],
      "mapped",
      [
        26391
      ]
    ],
    [
      [
        63786,
        63786
      ],
      "mapped",
      [
        28010
      ]
    ],
    [
      [
        63787,
        63787
      ],
      "mapped",
      [
        29436
      ]
    ],
    [
      [
        63788,
        63788
      ],
      "mapped",
      [
        37070
      ]
    ],
    [
      [
        63789,
        63789
      ],
      "mapped",
      [
        20358
      ]
    ],
    [
      [
        63790,
        63790
      ],
      "mapped",
      [
        20919
      ]
    ],
    [
      [
        63791,
        63791
      ],
      "mapped",
      [
        21214
      ]
    ],
    [
      [
        63792,
        63792
      ],
      "mapped",
      [
        25796
      ]
    ],
    [
      [
        63793,
        63793
      ],
      "mapped",
      [
        27347
      ]
    ],
    [
      [
        63794,
        63794
      ],
      "mapped",
      [
        29200
      ]
    ],
    [
      [
        63795,
        63795
      ],
      "mapped",
      [
        30439
      ]
    ],
    [
      [
        63796,
        63796
      ],
      "mapped",
      [
        32769
      ]
    ],
    [
      [
        63797,
        63797
      ],
      "mapped",
      [
        34310
      ]
    ],
    [
      [
        63798,
        63798
      ],
      "mapped",
      [
        34396
      ]
    ],
    [
      [
        63799,
        63799
      ],
      "mapped",
      [
        36335
      ]
    ],
    [
      [
        63800,
        63800
      ],
      "mapped",
      [
        38706
      ]
    ],
    [
      [
        63801,
        63801
      ],
      "mapped",
      [
        39791
      ]
    ],
    [
      [
        63802,
        63802
      ],
      "mapped",
      [
        40442
      ]
    ],
    [
      [
        63803,
        63803
      ],
      "mapped",
      [
        30860
      ]
    ],
    [
      [
        63804,
        63804
      ],
      "mapped",
      [
        31103
      ]
    ],
    [
      [
        63805,
        63805
      ],
      "mapped",
      [
        32160
      ]
    ],
    [
      [
        63806,
        63806
      ],
      "mapped",
      [
        33737
      ]
    ],
    [
      [
        63807,
        63807
      ],
      "mapped",
      [
        37636
      ]
    ],
    [
      [
        63808,
        63808
      ],
      "mapped",
      [
        40575
      ]
    ],
    [
      [
        63809,
        63809
      ],
      "mapped",
      [
        35542
      ]
    ],
    [
      [
        63810,
        63810
      ],
      "mapped",
      [
        22751
      ]
    ],
    [
      [
        63811,
        63811
      ],
      "mapped",
      [
        24324
      ]
    ],
    [
      [
        63812,
        63812
      ],
      "mapped",
      [
        31840
      ]
    ],
    [
      [
        63813,
        63813
      ],
      "mapped",
      [
        32894
      ]
    ],
    [
      [
        63814,
        63814
      ],
      "mapped",
      [
        29282
      ]
    ],
    [
      [
        63815,
        63815
      ],
      "mapped",
      [
        30922
      ]
    ],
    [
      [
        63816,
        63816
      ],
      "mapped",
      [
        36034
      ]
    ],
    [
      [
        63817,
        63817
      ],
      "mapped",
      [
        38647
      ]
    ],
    [
      [
        63818,
        63818
      ],
      "mapped",
      [
        22744
      ]
    ],
    [
      [
        63819,
        63819
      ],
      "mapped",
      [
        23650
      ]
    ],
    [
      [
        63820,
        63820
      ],
      "mapped",
      [
        27155
      ]
    ],
    [
      [
        63821,
        63821
      ],
      "mapped",
      [
        28122
      ]
    ],
    [
      [
        63822,
        63822
      ],
      "mapped",
      [
        28431
      ]
    ],
    [
      [
        63823,
        63823
      ],
      "mapped",
      [
        32047
      ]
    ],
    [
      [
        63824,
        63824
      ],
      "mapped",
      [
        32311
      ]
    ],
    [
      [
        63825,
        63825
      ],
      "mapped",
      [
        38475
      ]
    ],
    [
      [
        63826,
        63826
      ],
      "mapped",
      [
        21202
      ]
    ],
    [
      [
        63827,
        63827
      ],
      "mapped",
      [
        32907
      ]
    ],
    [
      [
        63828,
        63828
      ],
      "mapped",
      [
        20956
      ]
    ],
    [
      [
        63829,
        63829
      ],
      "mapped",
      [
        20940
      ]
    ],
    [
      [
        63830,
        63830
      ],
      "mapped",
      [
        31260
      ]
    ],
    [
      [
        63831,
        63831
      ],
      "mapped",
      [
        32190
      ]
    ],
    [
      [
        63832,
        63832
      ],
      "mapped",
      [
        33777
      ]
    ],
    [
      [
        63833,
        63833
      ],
      "mapped",
      [
        38517
      ]
    ],
    [
      [
        63834,
        63834
      ],
      "mapped",
      [
        35712
      ]
    ],
    [
      [
        63835,
        63835
      ],
      "mapped",
      [
        25295
      ]
    ],
    [
      [
        63836,
        63836
      ],
      "mapped",
      [
        27138
      ]
    ],
    [
      [
        63837,
        63837
      ],
      "mapped",
      [
        35582
      ]
    ],
    [
      [
        63838,
        63838
      ],
      "mapped",
      [
        20025
      ]
    ],
    [
      [
        63839,
        63839
      ],
      "mapped",
      [
        23527
      ]
    ],
    [
      [
        63840,
        63840
      ],
      "mapped",
      [
        24594
      ]
    ],
    [
      [
        63841,
        63841
      ],
      "mapped",
      [
        29575
      ]
    ],
    [
      [
        63842,
        63842
      ],
      "mapped",
      [
        30064
      ]
    ],
    [
      [
        63843,
        63843
      ],
      "mapped",
      [
        21271
      ]
    ],
    [
      [
        63844,
        63844
      ],
      "mapped",
      [
        30971
      ]
    ],
    [
      [
        63845,
        63845
      ],
      "mapped",
      [
        20415
      ]
    ],
    [
      [
        63846,
        63846
      ],
      "mapped",
      [
        24489
      ]
    ],
    [
      [
        63847,
        63847
      ],
      "mapped",
      [
        19981
      ]
    ],
    [
      [
        63848,
        63848
      ],
      "mapped",
      [
        27852
      ]
    ],
    [
      [
        63849,
        63849
      ],
      "mapped",
      [
        25976
      ]
    ],
    [
      [
        63850,
        63850
      ],
      "mapped",
      [
        32034
      ]
    ],
    [
      [
        63851,
        63851
      ],
      "mapped",
      [
        21443
      ]
    ],
    [
      [
        63852,
        63852
      ],
      "mapped",
      [
        22622
      ]
    ],
    [
      [
        63853,
        63853
      ],
      "mapped",
      [
        30465
      ]
    ],
    [
      [
        63854,
        63854
      ],
      "mapped",
      [
        33865
      ]
    ],
    [
      [
        63855,
        63855
      ],
      "mapped",
      [
        35498
      ]
    ],
    [
      [
        63856,
        63856
      ],
      "mapped",
      [
        27578
      ]
    ],
    [
      [
        63857,
        63857
      ],
      "mapped",
      [
        36784
      ]
    ],
    [
      [
        63858,
        63858
      ],
      "mapped",
      [
        27784
      ]
    ],
    [
      [
        63859,
        63859
      ],
      "mapped",
      [
        25342
      ]
    ],
    [
      [
        63860,
        63860
      ],
      "mapped",
      [
        33509
      ]
    ],
    [
      [
        63861,
        63861
      ],
      "mapped",
      [
        25504
      ]
    ],
    [
      [
        63862,
        63862
      ],
      "mapped",
      [
        30053
      ]
    ],
    [
      [
        63863,
        63863
      ],
      "mapped",
      [
        20142
      ]
    ],
    [
      [
        63864,
        63864
      ],
      "mapped",
      [
        20841
      ]
    ],
    [
      [
        63865,
        63865
      ],
      "mapped",
      [
        20937
      ]
    ],
    [
      [
        63866,
        63866
      ],
      "mapped",
      [
        26753
      ]
    ],
    [
      [
        63867,
        63867
      ],
      "mapped",
      [
        31975
      ]
    ],
    [
      [
        63868,
        63868
      ],
      "mapped",
      [
        33391
      ]
    ],
    [
      [
        63869,
        63869
      ],
      "mapped",
      [
        35538
      ]
    ],
    [
      [
        63870,
        63870
      ],
      "mapped",
      [
        37327
      ]
    ],
    [
      [
        63871,
        63871
      ],
      "mapped",
      [
        21237
      ]
    ],
    [
      [
        63872,
        63872
      ],
      "mapped",
      [
        21570
      ]
    ],
    [
      [
        63873,
        63873
      ],
      "mapped",
      [
        22899
      ]
    ],
    [
      [
        63874,
        63874
      ],
      "mapped",
      [
        24300
      ]
    ],
    [
      [
        63875,
        63875
      ],
      "mapped",
      [
        26053
      ]
    ],
    [
      [
        63876,
        63876
      ],
      "mapped",
      [
        28670
      ]
    ],
    [
      [
        63877,
        63877
      ],
      "mapped",
      [
        31018
      ]
    ],
    [
      [
        63878,
        63878
      ],
      "mapped",
      [
        38317
      ]
    ],
    [
      [
        63879,
        63879
      ],
      "mapped",
      [
        39530
      ]
    ],
    [
      [
        63880,
        63880
      ],
      "mapped",
      [
        40599
      ]
    ],
    [
      [
        63881,
        63881
      ],
      "mapped",
      [
        40654
      ]
    ],
    [
      [
        63882,
        63882
      ],
      "mapped",
      [
        21147
      ]
    ],
    [
      [
        63883,
        63883
      ],
      "mapped",
      [
        26310
      ]
    ],
    [
      [
        63884,
        63884
      ],
      "mapped",
      [
        27511
      ]
    ],
    [
      [
        63885,
        63885
      ],
      "mapped",
      [
        36706
      ]
    ],
    [
      [
        63886,
        63886
      ],
      "mapped",
      [
        24180
      ]
    ],
    [
      [
        63887,
        63887
      ],
      "mapped",
      [
        24976
      ]
    ],
    [
      [
        63888,
        63888
      ],
      "mapped",
      [
        25088
      ]
    ],
    [
      [
        63889,
        63889
      ],
      "mapped",
      [
        25754
      ]
    ],
    [
      [
        63890,
        63890
      ],
      "mapped",
      [
        28451
      ]
    ],
    [
      [
        63891,
        63891
      ],
      "mapped",
      [
        29001
      ]
    ],
    [
      [
        63892,
        63892
      ],
      "mapped",
      [
        29833
      ]
    ],
    [
      [
        63893,
        63893
      ],
      "mapped",
      [
        31178
      ]
    ],
    [
      [
        63894,
        63894
      ],
      "mapped",
      [
        32244
      ]
    ],
    [
      [
        63895,
        63895
      ],
      "mapped",
      [
        32879
      ]
    ],
    [
      [
        63896,
        63896
      ],
      "mapped",
      [
        36646
      ]
    ],
    [
      [
        63897,
        63897
      ],
      "mapped",
      [
        34030
      ]
    ],
    [
      [
        63898,
        63898
      ],
      "mapped",
      [
        36899
      ]
    ],
    [
      [
        63899,
        63899
      ],
      "mapped",
      [
        37706
      ]
    ],
    [
      [
        63900,
        63900
      ],
      "mapped",
      [
        21015
      ]
    ],
    [
      [
        63901,
        63901
      ],
      "mapped",
      [
        21155
      ]
    ],
    [
      [
        63902,
        63902
      ],
      "mapped",
      [
        21693
      ]
    ],
    [
      [
        63903,
        63903
      ],
      "mapped",
      [
        28872
      ]
    ],
    [
      [
        63904,
        63904
      ],
      "mapped",
      [
        35010
      ]
    ],
    [
      [
        63905,
        63905
      ],
      "mapped",
      [
        35498
      ]
    ],
    [
      [
        63906,
        63906
      ],
      "mapped",
      [
        24265
      ]
    ],
    [
      [
        63907,
        63907
      ],
      "mapped",
      [
        24565
      ]
    ],
    [
      [
        63908,
        63908
      ],
      "mapped",
      [
        25467
      ]
    ],
    [
      [
        63909,
        63909
      ],
      "mapped",
      [
        27566
      ]
    ],
    [
      [
        63910,
        63910
      ],
      "mapped",
      [
        31806
      ]
    ],
    [
      [
        63911,
        63911
      ],
      "mapped",
      [
        29557
      ]
    ],
    [
      [
        63912,
        63912
      ],
      "mapped",
      [
        20196
      ]
    ],
    [
      [
        63913,
        63913
      ],
      "mapped",
      [
        22265
      ]
    ],
    [
      [
        63914,
        63914
      ],
      "mapped",
      [
        23527
      ]
    ],
    [
      [
        63915,
        63915
      ],
      "mapped",
      [
        23994
      ]
    ],
    [
      [
        63916,
        63916
      ],
      "mapped",
      [
        24604
      ]
    ],
    [
      [
        63917,
        63917
      ],
      "mapped",
      [
        29618
      ]
    ],
    [
      [
        63918,
        63918
      ],
      "mapped",
      [
        29801
      ]
    ],
    [
      [
        63919,
        63919
      ],
      "mapped",
      [
        32666
      ]
    ],
    [
      [
        63920,
        63920
      ],
      "mapped",
      [
        32838
      ]
    ],
    [
      [
        63921,
        63921
      ],
      "mapped",
      [
        37428
      ]
    ],
    [
      [
        63922,
        63922
      ],
      "mapped",
      [
        38646
      ]
    ],
    [
      [
        63923,
        63923
      ],
      "mapped",
      [
        38728
      ]
    ],
    [
      [
        63924,
        63924
      ],
      "mapped",
      [
        38936
      ]
    ],
    [
      [
        63925,
        63925
      ],
      "mapped",
      [
        20363
      ]
    ],
    [
      [
        63926,
        63926
      ],
      "mapped",
      [
        31150
      ]
    ],
    [
      [
        63927,
        63927
      ],
      "mapped",
      [
        37300
      ]
    ],
    [
      [
        63928,
        63928
      ],
      "mapped",
      [
        38584
      ]
    ],
    [
      [
        63929,
        63929
      ],
      "mapped",
      [
        24801
      ]
    ],
    [
      [
        63930,
        63930
      ],
      "mapped",
      [
        20102
      ]
    ],
    [
      [
        63931,
        63931
      ],
      "mapped",
      [
        20698
      ]
    ],
    [
      [
        63932,
        63932
      ],
      "mapped",
      [
        23534
      ]
    ],
    [
      [
        63933,
        63933
      ],
      "mapped",
      [
        23615
      ]
    ],
    [
      [
        63934,
        63934
      ],
      "mapped",
      [
        26009
      ]
    ],
    [
      [
        63935,
        63935
      ],
      "mapped",
      [
        27138
      ]
    ],
    [
      [
        63936,
        63936
      ],
      "mapped",
      [
        29134
      ]
    ],
    [
      [
        63937,
        63937
      ],
      "mapped",
      [
        30274
      ]
    ],
    [
      [
        63938,
        63938
      ],
      "mapped",
      [
        34044
      ]
    ],
    [
      [
        63939,
        63939
      ],
      "mapped",
      [
        36988
      ]
    ],
    [
      [
        63940,
        63940
      ],
      "mapped",
      [
        40845
      ]
    ],
    [
      [
        63941,
        63941
      ],
      "mapped",
      [
        26248
      ]
    ],
    [
      [
        63942,
        63942
      ],
      "mapped",
      [
        38446
      ]
    ],
    [
      [
        63943,
        63943
      ],
      "mapped",
      [
        21129
      ]
    ],
    [
      [
        63944,
        63944
      ],
      "mapped",
      [
        26491
      ]
    ],
    [
      [
        63945,
        63945
      ],
      "mapped",
      [
        26611
      ]
    ],
    [
      [
        63946,
        63946
      ],
      "mapped",
      [
        27969
      ]
    ],
    [
      [
        63947,
        63947
      ],
      "mapped",
      [
        28316
      ]
    ],
    [
      [
        63948,
        63948
      ],
      "mapped",
      [
        29705
      ]
    ],
    [
      [
        63949,
        63949
      ],
      "mapped",
      [
        30041
      ]
    ],
    [
      [
        63950,
        63950
      ],
      "mapped",
      [
        30827
      ]
    ],
    [
      [
        63951,
        63951
      ],
      "mapped",
      [
        32016
      ]
    ],
    [
      [
        63952,
        63952
      ],
      "mapped",
      [
        39006
      ]
    ],
    [
      [
        63953,
        63953
      ],
      "mapped",
      [
        20845
      ]
    ],
    [
      [
        63954,
        63954
      ],
      "mapped",
      [
        25134
      ]
    ],
    [
      [
        63955,
        63955
      ],
      "mapped",
      [
        38520
      ]
    ],
    [
      [
        63956,
        63956
      ],
      "mapped",
      [
        20523
      ]
    ],
    [
      [
        63957,
        63957
      ],
      "mapped",
      [
        23833
      ]
    ],
    [
      [
        63958,
        63958
      ],
      "mapped",
      [
        28138
      ]
    ],
    [
      [
        63959,
        63959
      ],
      "mapped",
      [
        36650
      ]
    ],
    [
      [
        63960,
        63960
      ],
      "mapped",
      [
        24459
      ]
    ],
    [
      [
        63961,
        63961
      ],
      "mapped",
      [
        24900
      ]
    ],
    [
      [
        63962,
        63962
      ],
      "mapped",
      [
        26647
      ]
    ],
    [
      [
        63963,
        63963
      ],
      "mapped",
      [
        29575
      ]
    ],
    [
      [
        63964,
        63964
      ],
      "mapped",
      [
        38534
      ]
    ],
    [
      [
        63965,
        63965
      ],
      "mapped",
      [
        21033
      ]
    ],
    [
      [
        63966,
        63966
      ],
      "mapped",
      [
        21519
      ]
    ],
    [
      [
        63967,
        63967
      ],
      "mapped",
      [
        23653
      ]
    ],
    [
      [
        63968,
        63968
      ],
      "mapped",
      [
        26131
      ]
    ],
    [
      [
        63969,
        63969
      ],
      "mapped",
      [
        26446
      ]
    ],
    [
      [
        63970,
        63970
      ],
      "mapped",
      [
        26792
      ]
    ],
    [
      [
        63971,
        63971
      ],
      "mapped",
      [
        27877
      ]
    ],
    [
      [
        63972,
        63972
      ],
      "mapped",
      [
        29702
      ]
    ],
    [
      [
        63973,
        63973
      ],
      "mapped",
      [
        30178
      ]
    ],
    [
      [
        63974,
        63974
      ],
      "mapped",
      [
        32633
      ]
    ],
    [
      [
        63975,
        63975
      ],
      "mapped",
      [
        35023
      ]
    ],
    [
      [
        63976,
        63976
      ],
      "mapped",
      [
        35041
      ]
    ],
    [
      [
        63977,
        63977
      ],
      "mapped",
      [
        37324
      ]
    ],
    [
      [
        63978,
        63978
      ],
      "mapped",
      [
        38626
      ]
    ],
    [
      [
        63979,
        63979
      ],
      "mapped",
      [
        21311
      ]
    ],
    [
      [
        63980,
        63980
      ],
      "mapped",
      [
        28346
      ]
    ],
    [
      [
        63981,
        63981
      ],
      "mapped",
      [
        21533
      ]
    ],
    [
      [
        63982,
        63982
      ],
      "mapped",
      [
        29136
      ]
    ],
    [
      [
        63983,
        63983
      ],
      "mapped",
      [
        29848
      ]
    ],
    [
      [
        63984,
        63984
      ],
      "mapped",
      [
        34298
      ]
    ],
    [
      [
        63985,
        63985
      ],
      "mapped",
      [
        38563
      ]
    ],
    [
      [
        63986,
        63986
      ],
      "mapped",
      [
        40023
      ]
    ],
    [
      [
        63987,
        63987
      ],
      "mapped",
      [
        40607
      ]
    ],
    [
      [
        63988,
        63988
      ],
      "mapped",
      [
        26519
      ]
    ],
    [
      [
        63989,
        63989
      ],
      "mapped",
      [
        28107
      ]
    ],
    [
      [
        63990,
        63990
      ],
      "mapped",
      [
        33256
      ]
    ],
    [
      [
        63991,
        63991
      ],
      "mapped",
      [
        31435
      ]
    ],
    [
      [
        63992,
        63992
      ],
      "mapped",
      [
        31520
      ]
    ],
    [
      [
        63993,
        63993
      ],
      "mapped",
      [
        31890
      ]
    ],
    [
      [
        63994,
        63994
      ],
      "mapped",
      [
        29376
      ]
    ],
    [
      [
        63995,
        63995
      ],
      "mapped",
      [
        28825
      ]
    ],
    [
      [
        63996,
        63996
      ],
      "mapped",
      [
        35672
      ]
    ],
    [
      [
        63997,
        63997
      ],
      "mapped",
      [
        20160
      ]
    ],
    [
      [
        63998,
        63998
      ],
      "mapped",
      [
        33590
      ]
    ],
    [
      [
        63999,
        63999
      ],
      "mapped",
      [
        21050
      ]
    ],
    [
      [
        64e3,
        64e3
      ],
      "mapped",
      [
        20999
      ]
    ],
    [
      [
        64001,
        64001
      ],
      "mapped",
      [
        24230
      ]
    ],
    [
      [
        64002,
        64002
      ],
      "mapped",
      [
        25299
      ]
    ],
    [
      [
        64003,
        64003
      ],
      "mapped",
      [
        31958
      ]
    ],
    [
      [
        64004,
        64004
      ],
      "mapped",
      [
        23429
      ]
    ],
    [
      [
        64005,
        64005
      ],
      "mapped",
      [
        27934
      ]
    ],
    [
      [
        64006,
        64006
      ],
      "mapped",
      [
        26292
      ]
    ],
    [
      [
        64007,
        64007
      ],
      "mapped",
      [
        36667
      ]
    ],
    [
      [
        64008,
        64008
      ],
      "mapped",
      [
        34892
      ]
    ],
    [
      [
        64009,
        64009
      ],
      "mapped",
      [
        38477
      ]
    ],
    [
      [
        64010,
        64010
      ],
      "mapped",
      [
        35211
      ]
    ],
    [
      [
        64011,
        64011
      ],
      "mapped",
      [
        24275
      ]
    ],
    [
      [
        64012,
        64012
      ],
      "mapped",
      [
        20800
      ]
    ],
    [
      [
        64013,
        64013
      ],
      "mapped",
      [
        21952
      ]
    ],
    [
      [
        64014,
        64015
      ],
      "valid"
    ],
    [
      [
        64016,
        64016
      ],
      "mapped",
      [
        22618
      ]
    ],
    [
      [
        64017,
        64017
      ],
      "valid"
    ],
    [
      [
        64018,
        64018
      ],
      "mapped",
      [
        26228
      ]
    ],
    [
      [
        64019,
        64020
      ],
      "valid"
    ],
    [
      [
        64021,
        64021
      ],
      "mapped",
      [
        20958
      ]
    ],
    [
      [
        64022,
        64022
      ],
      "mapped",
      [
        29482
      ]
    ],
    [
      [
        64023,
        64023
      ],
      "mapped",
      [
        30410
      ]
    ],
    [
      [
        64024,
        64024
      ],
      "mapped",
      [
        31036
      ]
    ],
    [
      [
        64025,
        64025
      ],
      "mapped",
      [
        31070
      ]
    ],
    [
      [
        64026,
        64026
      ],
      "mapped",
      [
        31077
      ]
    ],
    [
      [
        64027,
        64027
      ],
      "mapped",
      [
        31119
      ]
    ],
    [
      [
        64028,
        64028
      ],
      "mapped",
      [
        38742
      ]
    ],
    [
      [
        64029,
        64029
      ],
      "mapped",
      [
        31934
      ]
    ],
    [
      [
        64030,
        64030
      ],
      "mapped",
      [
        32701
      ]
    ],
    [
      [
        64031,
        64031
      ],
      "valid"
    ],
    [
      [
        64032,
        64032
      ],
      "mapped",
      [
        34322
      ]
    ],
    [
      [
        64033,
        64033
      ],
      "valid"
    ],
    [
      [
        64034,
        64034
      ],
      "mapped",
      [
        35576
      ]
    ],
    [
      [
        64035,
        64036
      ],
      "valid"
    ],
    [
      [
        64037,
        64037
      ],
      "mapped",
      [
        36920
      ]
    ],
    [
      [
        64038,
        64038
      ],
      "mapped",
      [
        37117
      ]
    ],
    [
      [
        64039,
        64041
      ],
      "valid"
    ],
    [
      [
        64042,
        64042
      ],
      "mapped",
      [
        39151
      ]
    ],
    [
      [
        64043,
        64043
      ],
      "mapped",
      [
        39164
      ]
    ],
    [
      [
        64044,
        64044
      ],
      "mapped",
      [
        39208
      ]
    ],
    [
      [
        64045,
        64045
      ],
      "mapped",
      [
        40372
      ]
    ],
    [
      [
        64046,
        64046
      ],
      "mapped",
      [
        37086
      ]
    ],
    [
      [
        64047,
        64047
      ],
      "mapped",
      [
        38583
      ]
    ],
    [
      [
        64048,
        64048
      ],
      "mapped",
      [
        20398
      ]
    ],
    [
      [
        64049,
        64049
      ],
      "mapped",
      [
        20711
      ]
    ],
    [
      [
        64050,
        64050
      ],
      "mapped",
      [
        20813
      ]
    ],
    [
      [
        64051,
        64051
      ],
      "mapped",
      [
        21193
      ]
    ],
    [
      [
        64052,
        64052
      ],
      "mapped",
      [
        21220
      ]
    ],
    [
      [
        64053,
        64053
      ],
      "mapped",
      [
        21329
      ]
    ],
    [
      [
        64054,
        64054
      ],
      "mapped",
      [
        21917
      ]
    ],
    [
      [
        64055,
        64055
      ],
      "mapped",
      [
        22022
      ]
    ],
    [
      [
        64056,
        64056
      ],
      "mapped",
      [
        22120
      ]
    ],
    [
      [
        64057,
        64057
      ],
      "mapped",
      [
        22592
      ]
    ],
    [
      [
        64058,
        64058
      ],
      "mapped",
      [
        22696
      ]
    ],
    [
      [
        64059,
        64059
      ],
      "mapped",
      [
        23652
      ]
    ],
    [
      [
        64060,
        64060
      ],
      "mapped",
      [
        23662
      ]
    ],
    [
      [
        64061,
        64061
      ],
      "mapped",
      [
        24724
      ]
    ],
    [
      [
        64062,
        64062
      ],
      "mapped",
      [
        24936
      ]
    ],
    [
      [
        64063,
        64063
      ],
      "mapped",
      [
        24974
      ]
    ],
    [
      [
        64064,
        64064
      ],
      "mapped",
      [
        25074
      ]
    ],
    [
      [
        64065,
        64065
      ],
      "mapped",
      [
        25935
      ]
    ],
    [
      [
        64066,
        64066
      ],
      "mapped",
      [
        26082
      ]
    ],
    [
      [
        64067,
        64067
      ],
      "mapped",
      [
        26257
      ]
    ],
    [
      [
        64068,
        64068
      ],
      "mapped",
      [
        26757
      ]
    ],
    [
      [
        64069,
        64069
      ],
      "mapped",
      [
        28023
      ]
    ],
    [
      [
        64070,
        64070
      ],
      "mapped",
      [
        28186
      ]
    ],
    [
      [
        64071,
        64071
      ],
      "mapped",
      [
        28450
      ]
    ],
    [
      [
        64072,
        64072
      ],
      "mapped",
      [
        29038
      ]
    ],
    [
      [
        64073,
        64073
      ],
      "mapped",
      [
        29227
      ]
    ],
    [
      [
        64074,
        64074
      ],
      "mapped",
      [
        29730
      ]
    ],
    [
      [
        64075,
        64075
      ],
      "mapped",
      [
        30865
      ]
    ],
    [
      [
        64076,
        64076
      ],
      "mapped",
      [
        31038
      ]
    ],
    [
      [
        64077,
        64077
      ],
      "mapped",
      [
        31049
      ]
    ],
    [
      [
        64078,
        64078
      ],
      "mapped",
      [
        31048
      ]
    ],
    [
      [
        64079,
        64079
      ],
      "mapped",
      [
        31056
      ]
    ],
    [
      [
        64080,
        64080
      ],
      "mapped",
      [
        31062
      ]
    ],
    [
      [
        64081,
        64081
      ],
      "mapped",
      [
        31069
      ]
    ],
    [
      [
        64082,
        64082
      ],
      "mapped",
      [
        31117
      ]
    ],
    [
      [
        64083,
        64083
      ],
      "mapped",
      [
        31118
      ]
    ],
    [
      [
        64084,
        64084
      ],
      "mapped",
      [
        31296
      ]
    ],
    [
      [
        64085,
        64085
      ],
      "mapped",
      [
        31361
      ]
    ],
    [
      [
        64086,
        64086
      ],
      "mapped",
      [
        31680
      ]
    ],
    [
      [
        64087,
        64087
      ],
      "mapped",
      [
        32244
      ]
    ],
    [
      [
        64088,
        64088
      ],
      "mapped",
      [
        32265
      ]
    ],
    [
      [
        64089,
        64089
      ],
      "mapped",
      [
        32321
      ]
    ],
    [
      [
        64090,
        64090
      ],
      "mapped",
      [
        32626
      ]
    ],
    [
      [
        64091,
        64091
      ],
      "mapped",
      [
        32773
      ]
    ],
    [
      [
        64092,
        64092
      ],
      "mapped",
      [
        33261
      ]
    ],
    [
      [
        64093,
        64094
      ],
      "mapped",
      [
        33401
      ]
    ],
    [
      [
        64095,
        64095
      ],
      "mapped",
      [
        33879
      ]
    ],
    [
      [
        64096,
        64096
      ],
      "mapped",
      [
        35088
      ]
    ],
    [
      [
        64097,
        64097
      ],
      "mapped",
      [
        35222
      ]
    ],
    [
      [
        64098,
        64098
      ],
      "mapped",
      [
        35585
      ]
    ],
    [
      [
        64099,
        64099
      ],
      "mapped",
      [
        35641
      ]
    ],
    [
      [
        64100,
        64100
      ],
      "mapped",
      [
        36051
      ]
    ],
    [
      [
        64101,
        64101
      ],
      "mapped",
      [
        36104
      ]
    ],
    [
      [
        64102,
        64102
      ],
      "mapped",
      [
        36790
      ]
    ],
    [
      [
        64103,
        64103
      ],
      "mapped",
      [
        36920
      ]
    ],
    [
      [
        64104,
        64104
      ],
      "mapped",
      [
        38627
      ]
    ],
    [
      [
        64105,
        64105
      ],
      "mapped",
      [
        38911
      ]
    ],
    [
      [
        64106,
        64106
      ],
      "mapped",
      [
        38971
      ]
    ],
    [
      [
        64107,
        64107
      ],
      "mapped",
      [
        24693
      ]
    ],
    [
      [
        64108,
        64108
      ],
      "mapped",
      [
        148206
      ]
    ],
    [
      [
        64109,
        64109
      ],
      "mapped",
      [
        33304
      ]
    ],
    [
      [
        64110,
        64111
      ],
      "disallowed"
    ],
    [
      [
        64112,
        64112
      ],
      "mapped",
      [
        20006
      ]
    ],
    [
      [
        64113,
        64113
      ],
      "mapped",
      [
        20917
      ]
    ],
    [
      [
        64114,
        64114
      ],
      "mapped",
      [
        20840
      ]
    ],
    [
      [
        64115,
        64115
      ],
      "mapped",
      [
        20352
      ]
    ],
    [
      [
        64116,
        64116
      ],
      "mapped",
      [
        20805
      ]
    ],
    [
      [
        64117,
        64117
      ],
      "mapped",
      [
        20864
      ]
    ],
    [
      [
        64118,
        64118
      ],
      "mapped",
      [
        21191
      ]
    ],
    [
      [
        64119,
        64119
      ],
      "mapped",
      [
        21242
      ]
    ],
    [
      [
        64120,
        64120
      ],
      "mapped",
      [
        21917
      ]
    ],
    [
      [
        64121,
        64121
      ],
      "mapped",
      [
        21845
      ]
    ],
    [
      [
        64122,
        64122
      ],
      "mapped",
      [
        21913
      ]
    ],
    [
      [
        64123,
        64123
      ],
      "mapped",
      [
        21986
      ]
    ],
    [
      [
        64124,
        64124
      ],
      "mapped",
      [
        22618
      ]
    ],
    [
      [
        64125,
        64125
      ],
      "mapped",
      [
        22707
      ]
    ],
    [
      [
        64126,
        64126
      ],
      "mapped",
      [
        22852
      ]
    ],
    [
      [
        64127,
        64127
      ],
      "mapped",
      [
        22868
      ]
    ],
    [
      [
        64128,
        64128
      ],
      "mapped",
      [
        23138
      ]
    ],
    [
      [
        64129,
        64129
      ],
      "mapped",
      [
        23336
      ]
    ],
    [
      [
        64130,
        64130
      ],
      "mapped",
      [
        24274
      ]
    ],
    [
      [
        64131,
        64131
      ],
      "mapped",
      [
        24281
      ]
    ],
    [
      [
        64132,
        64132
      ],
      "mapped",
      [
        24425
      ]
    ],
    [
      [
        64133,
        64133
      ],
      "mapped",
      [
        24493
      ]
    ],
    [
      [
        64134,
        64134
      ],
      "mapped",
      [
        24792
      ]
    ],
    [
      [
        64135,
        64135
      ],
      "mapped",
      [
        24910
      ]
    ],
    [
      [
        64136,
        64136
      ],
      "mapped",
      [
        24840
      ]
    ],
    [
      [
        64137,
        64137
      ],
      "mapped",
      [
        24974
      ]
    ],
    [
      [
        64138,
        64138
      ],
      "mapped",
      [
        24928
      ]
    ],
    [
      [
        64139,
        64139
      ],
      "mapped",
      [
        25074
      ]
    ],
    [
      [
        64140,
        64140
      ],
      "mapped",
      [
        25140
      ]
    ],
    [
      [
        64141,
        64141
      ],
      "mapped",
      [
        25540
      ]
    ],
    [
      [
        64142,
        64142
      ],
      "mapped",
      [
        25628
      ]
    ],
    [
      [
        64143,
        64143
      ],
      "mapped",
      [
        25682
      ]
    ],
    [
      [
        64144,
        64144
      ],
      "mapped",
      [
        25942
      ]
    ],
    [
      [
        64145,
        64145
      ],
      "mapped",
      [
        26228
      ]
    ],
    [
      [
        64146,
        64146
      ],
      "mapped",
      [
        26391
      ]
    ],
    [
      [
        64147,
        64147
      ],
      "mapped",
      [
        26395
      ]
    ],
    [
      [
        64148,
        64148
      ],
      "mapped",
      [
        26454
      ]
    ],
    [
      [
        64149,
        64149
      ],
      "mapped",
      [
        27513
      ]
    ],
    [
      [
        64150,
        64150
      ],
      "mapped",
      [
        27578
      ]
    ],
    [
      [
        64151,
        64151
      ],
      "mapped",
      [
        27969
      ]
    ],
    [
      [
        64152,
        64152
      ],
      "mapped",
      [
        28379
      ]
    ],
    [
      [
        64153,
        64153
      ],
      "mapped",
      [
        28363
      ]
    ],
    [
      [
        64154,
        64154
      ],
      "mapped",
      [
        28450
      ]
    ],
    [
      [
        64155,
        64155
      ],
      "mapped",
      [
        28702
      ]
    ],
    [
      [
        64156,
        64156
      ],
      "mapped",
      [
        29038
      ]
    ],
    [
      [
        64157,
        64157
      ],
      "mapped",
      [
        30631
      ]
    ],
    [
      [
        64158,
        64158
      ],
      "mapped",
      [
        29237
      ]
    ],
    [
      [
        64159,
        64159
      ],
      "mapped",
      [
        29359
      ]
    ],
    [
      [
        64160,
        64160
      ],
      "mapped",
      [
        29482
      ]
    ],
    [
      [
        64161,
        64161
      ],
      "mapped",
      [
        29809
      ]
    ],
    [
      [
        64162,
        64162
      ],
      "mapped",
      [
        29958
      ]
    ],
    [
      [
        64163,
        64163
      ],
      "mapped",
      [
        30011
      ]
    ],
    [
      [
        64164,
        64164
      ],
      "mapped",
      [
        30237
      ]
    ],
    [
      [
        64165,
        64165
      ],
      "mapped",
      [
        30239
      ]
    ],
    [
      [
        64166,
        64166
      ],
      "mapped",
      [
        30410
      ]
    ],
    [
      [
        64167,
        64167
      ],
      "mapped",
      [
        30427
      ]
    ],
    [
      [
        64168,
        64168
      ],
      "mapped",
      [
        30452
      ]
    ],
    [
      [
        64169,
        64169
      ],
      "mapped",
      [
        30538
      ]
    ],
    [
      [
        64170,
        64170
      ],
      "mapped",
      [
        30528
      ]
    ],
    [
      [
        64171,
        64171
      ],
      "mapped",
      [
        30924
      ]
    ],
    [
      [
        64172,
        64172
      ],
      "mapped",
      [
        31409
      ]
    ],
    [
      [
        64173,
        64173
      ],
      "mapped",
      [
        31680
      ]
    ],
    [
      [
        64174,
        64174
      ],
      "mapped",
      [
        31867
      ]
    ],
    [
      [
        64175,
        64175
      ],
      "mapped",
      [
        32091
      ]
    ],
    [
      [
        64176,
        64176
      ],
      "mapped",
      [
        32244
      ]
    ],
    [
      [
        64177,
        64177
      ],
      "mapped",
      [
        32574
      ]
    ],
    [
      [
        64178,
        64178
      ],
      "mapped",
      [
        32773
      ]
    ],
    [
      [
        64179,
        64179
      ],
      "mapped",
      [
        33618
      ]
    ],
    [
      [
        64180,
        64180
      ],
      "mapped",
      [
        33775
      ]
    ],
    [
      [
        64181,
        64181
      ],
      "mapped",
      [
        34681
      ]
    ],
    [
      [
        64182,
        64182
      ],
      "mapped",
      [
        35137
      ]
    ],
    [
      [
        64183,
        64183
      ],
      "mapped",
      [
        35206
      ]
    ],
    [
      [
        64184,
        64184
      ],
      "mapped",
      [
        35222
      ]
    ],
    [
      [
        64185,
        64185
      ],
      "mapped",
      [
        35519
      ]
    ],
    [
      [
        64186,
        64186
      ],
      "mapped",
      [
        35576
      ]
    ],
    [
      [
        64187,
        64187
      ],
      "mapped",
      [
        35531
      ]
    ],
    [
      [
        64188,
        64188
      ],
      "mapped",
      [
        35585
      ]
    ],
    [
      [
        64189,
        64189
      ],
      "mapped",
      [
        35582
      ]
    ],
    [
      [
        64190,
        64190
      ],
      "mapped",
      [
        35565
      ]
    ],
    [
      [
        64191,
        64191
      ],
      "mapped",
      [
        35641
      ]
    ],
    [
      [
        64192,
        64192
      ],
      "mapped",
      [
        35722
      ]
    ],
    [
      [
        64193,
        64193
      ],
      "mapped",
      [
        36104
      ]
    ],
    [
      [
        64194,
        64194
      ],
      "mapped",
      [
        36664
      ]
    ],
    [
      [
        64195,
        64195
      ],
      "mapped",
      [
        36978
      ]
    ],
    [
      [
        64196,
        64196
      ],
      "mapped",
      [
        37273
      ]
    ],
    [
      [
        64197,
        64197
      ],
      "mapped",
      [
        37494
      ]
    ],
    [
      [
        64198,
        64198
      ],
      "mapped",
      [
        38524
      ]
    ],
    [
      [
        64199,
        64199
      ],
      "mapped",
      [
        38627
      ]
    ],
    [
      [
        64200,
        64200
      ],
      "mapped",
      [
        38742
      ]
    ],
    [
      [
        64201,
        64201
      ],
      "mapped",
      [
        38875
      ]
    ],
    [
      [
        64202,
        64202
      ],
      "mapped",
      [
        38911
      ]
    ],
    [
      [
        64203,
        64203
      ],
      "mapped",
      [
        38923
      ]
    ],
    [
      [
        64204,
        64204
      ],
      "mapped",
      [
        38971
      ]
    ],
    [
      [
        64205,
        64205
      ],
      "mapped",
      [
        39698
      ]
    ],
    [
      [
        64206,
        64206
      ],
      "mapped",
      [
        40860
      ]
    ],
    [
      [
        64207,
        64207
      ],
      "mapped",
      [
        141386
      ]
    ],
    [
      [
        64208,
        64208
      ],
      "mapped",
      [
        141380
      ]
    ],
    [
      [
        64209,
        64209
      ],
      "mapped",
      [
        144341
      ]
    ],
    [
      [
        64210,
        64210
      ],
      "mapped",
      [
        15261
      ]
    ],
    [
      [
        64211,
        64211
      ],
      "mapped",
      [
        16408
      ]
    ],
    [
      [
        64212,
        64212
      ],
      "mapped",
      [
        16441
      ]
    ],
    [
      [
        64213,
        64213
      ],
      "mapped",
      [
        152137
      ]
    ],
    [
      [
        64214,
        64214
      ],
      "mapped",
      [
        154832
      ]
    ],
    [
      [
        64215,
        64215
      ],
      "mapped",
      [
        163539
      ]
    ],
    [
      [
        64216,
        64216
      ],
      "mapped",
      [
        40771
      ]
    ],
    [
      [
        64217,
        64217
      ],
      "mapped",
      [
        40846
      ]
    ],
    [
      [
        64218,
        64255
      ],
      "disallowed"
    ],
    [
      [
        64256,
        64256
      ],
      "mapped",
      [
        102,
        102
      ]
    ],
    [
      [
        64257,
        64257
      ],
      "mapped",
      [
        102,
        105
      ]
    ],
    [
      [
        64258,
        64258
      ],
      "mapped",
      [
        102,
        108
      ]
    ],
    [
      [
        64259,
        64259
      ],
      "mapped",
      [
        102,
        102,
        105
      ]
    ],
    [
      [
        64260,
        64260
      ],
      "mapped",
      [
        102,
        102,
        108
      ]
    ],
    [
      [
        64261,
        64262
      ],
      "mapped",
      [
        115,
        116
      ]
    ],
    [
      [
        64263,
        64274
      ],
      "disallowed"
    ],
    [
      [
        64275,
        64275
      ],
      "mapped",
      [
        1396,
        1398
      ]
    ],
    [
      [
        64276,
        64276
      ],
      "mapped",
      [
        1396,
        1381
      ]
    ],
    [
      [
        64277,
        64277
      ],
      "mapped",
      [
        1396,
        1387
      ]
    ],
    [
      [
        64278,
        64278
      ],
      "mapped",
      [
        1406,
        1398
      ]
    ],
    [
      [
        64279,
        64279
      ],
      "mapped",
      [
        1396,
        1389
      ]
    ],
    [
      [
        64280,
        64284
      ],
      "disallowed"
    ],
    [
      [
        64285,
        64285
      ],
      "mapped",
      [
        1497,
        1460
      ]
    ],
    [
      [
        64286,
        64286
      ],
      "valid"
    ],
    [
      [
        64287,
        64287
      ],
      "mapped",
      [
        1522,
        1463
      ]
    ],
    [
      [
        64288,
        64288
      ],
      "mapped",
      [
        1506
      ]
    ],
    [
      [
        64289,
        64289
      ],
      "mapped",
      [
        1488
      ]
    ],
    [
      [
        64290,
        64290
      ],
      "mapped",
      [
        1491
      ]
    ],
    [
      [
        64291,
        64291
      ],
      "mapped",
      [
        1492
      ]
    ],
    [
      [
        64292,
        64292
      ],
      "mapped",
      [
        1499
      ]
    ],
    [
      [
        64293,
        64293
      ],
      "mapped",
      [
        1500
      ]
    ],
    [
      [
        64294,
        64294
      ],
      "mapped",
      [
        1501
      ]
    ],
    [
      [
        64295,
        64295
      ],
      "mapped",
      [
        1512
      ]
    ],
    [
      [
        64296,
        64296
      ],
      "mapped",
      [
        1514
      ]
    ],
    [
      [
        64297,
        64297
      ],
      "disallowed_STD3_mapped",
      [
        43
      ]
    ],
    [
      [
        64298,
        64298
      ],
      "mapped",
      [
        1513,
        1473
      ]
    ],
    [
      [
        64299,
        64299
      ],
      "mapped",
      [
        1513,
        1474
      ]
    ],
    [
      [
        64300,
        64300
      ],
      "mapped",
      [
        1513,
        1468,
        1473
      ]
    ],
    [
      [
        64301,
        64301
      ],
      "mapped",
      [
        1513,
        1468,
        1474
      ]
    ],
    [
      [
        64302,
        64302
      ],
      "mapped",
      [
        1488,
        1463
      ]
    ],
    [
      [
        64303,
        64303
      ],
      "mapped",
      [
        1488,
        1464
      ]
    ],
    [
      [
        64304,
        64304
      ],
      "mapped",
      [
        1488,
        1468
      ]
    ],
    [
      [
        64305,
        64305
      ],
      "mapped",
      [
        1489,
        1468
      ]
    ],
    [
      [
        64306,
        64306
      ],
      "mapped",
      [
        1490,
        1468
      ]
    ],
    [
      [
        64307,
        64307
      ],
      "mapped",
      [
        1491,
        1468
      ]
    ],
    [
      [
        64308,
        64308
      ],
      "mapped",
      [
        1492,
        1468
      ]
    ],
    [
      [
        64309,
        64309
      ],
      "mapped",
      [
        1493,
        1468
      ]
    ],
    [
      [
        64310,
        64310
      ],
      "mapped",
      [
        1494,
        1468
      ]
    ],
    [
      [
        64311,
        64311
      ],
      "disallowed"
    ],
    [
      [
        64312,
        64312
      ],
      "mapped",
      [
        1496,
        1468
      ]
    ],
    [
      [
        64313,
        64313
      ],
      "mapped",
      [
        1497,
        1468
      ]
    ],
    [
      [
        64314,
        64314
      ],
      "mapped",
      [
        1498,
        1468
      ]
    ],
    [
      [
        64315,
        64315
      ],
      "mapped",
      [
        1499,
        1468
      ]
    ],
    [
      [
        64316,
        64316
      ],
      "mapped",
      [
        1500,
        1468
      ]
    ],
    [
      [
        64317,
        64317
      ],
      "disallowed"
    ],
    [
      [
        64318,
        64318
      ],
      "mapped",
      [
        1502,
        1468
      ]
    ],
    [
      [
        64319,
        64319
      ],
      "disallowed"
    ],
    [
      [
        64320,
        64320
      ],
      "mapped",
      [
        1504,
        1468
      ]
    ],
    [
      [
        64321,
        64321
      ],
      "mapped",
      [
        1505,
        1468
      ]
    ],
    [
      [
        64322,
        64322
      ],
      "disallowed"
    ],
    [
      [
        64323,
        64323
      ],
      "mapped",
      [
        1507,
        1468
      ]
    ],
    [
      [
        64324,
        64324
      ],
      "mapped",
      [
        1508,
        1468
      ]
    ],
    [
      [
        64325,
        64325
      ],
      "disallowed"
    ],
    [
      [
        64326,
        64326
      ],
      "mapped",
      [
        1510,
        1468
      ]
    ],
    [
      [
        64327,
        64327
      ],
      "mapped",
      [
        1511,
        1468
      ]
    ],
    [
      [
        64328,
        64328
      ],
      "mapped",
      [
        1512,
        1468
      ]
    ],
    [
      [
        64329,
        64329
      ],
      "mapped",
      [
        1513,
        1468
      ]
    ],
    [
      [
        64330,
        64330
      ],
      "mapped",
      [
        1514,
        1468
      ]
    ],
    [
      [
        64331,
        64331
      ],
      "mapped",
      [
        1493,
        1465
      ]
    ],
    [
      [
        64332,
        64332
      ],
      "mapped",
      [
        1489,
        1471
      ]
    ],
    [
      [
        64333,
        64333
      ],
      "mapped",
      [
        1499,
        1471
      ]
    ],
    [
      [
        64334,
        64334
      ],
      "mapped",
      [
        1508,
        1471
      ]
    ],
    [
      [
        64335,
        64335
      ],
      "mapped",
      [
        1488,
        1500
      ]
    ],
    [
      [
        64336,
        64337
      ],
      "mapped",
      [
        1649
      ]
    ],
    [
      [
        64338,
        64341
      ],
      "mapped",
      [
        1659
      ]
    ],
    [
      [
        64342,
        64345
      ],
      "mapped",
      [
        1662
      ]
    ],
    [
      [
        64346,
        64349
      ],
      "mapped",
      [
        1664
      ]
    ],
    [
      [
        64350,
        64353
      ],
      "mapped",
      [
        1658
      ]
    ],
    [
      [
        64354,
        64357
      ],
      "mapped",
      [
        1663
      ]
    ],
    [
      [
        64358,
        64361
      ],
      "mapped",
      [
        1657
      ]
    ],
    [
      [
        64362,
        64365
      ],
      "mapped",
      [
        1700
      ]
    ],
    [
      [
        64366,
        64369
      ],
      "mapped",
      [
        1702
      ]
    ],
    [
      [
        64370,
        64373
      ],
      "mapped",
      [
        1668
      ]
    ],
    [
      [
        64374,
        64377
      ],
      "mapped",
      [
        1667
      ]
    ],
    [
      [
        64378,
        64381
      ],
      "mapped",
      [
        1670
      ]
    ],
    [
      [
        64382,
        64385
      ],
      "mapped",
      [
        1671
      ]
    ],
    [
      [
        64386,
        64387
      ],
      "mapped",
      [
        1677
      ]
    ],
    [
      [
        64388,
        64389
      ],
      "mapped",
      [
        1676
      ]
    ],
    [
      [
        64390,
        64391
      ],
      "mapped",
      [
        1678
      ]
    ],
    [
      [
        64392,
        64393
      ],
      "mapped",
      [
        1672
      ]
    ],
    [
      [
        64394,
        64395
      ],
      "mapped",
      [
        1688
      ]
    ],
    [
      [
        64396,
        64397
      ],
      "mapped",
      [
        1681
      ]
    ],
    [
      [
        64398,
        64401
      ],
      "mapped",
      [
        1705
      ]
    ],
    [
      [
        64402,
        64405
      ],
      "mapped",
      [
        1711
      ]
    ],
    [
      [
        64406,
        64409
      ],
      "mapped",
      [
        1715
      ]
    ],
    [
      [
        64410,
        64413
      ],
      "mapped",
      [
        1713
      ]
    ],
    [
      [
        64414,
        64415
      ],
      "mapped",
      [
        1722
      ]
    ],
    [
      [
        64416,
        64419
      ],
      "mapped",
      [
        1723
      ]
    ],
    [
      [
        64420,
        64421
      ],
      "mapped",
      [
        1728
      ]
    ],
    [
      [
        64422,
        64425
      ],
      "mapped",
      [
        1729
      ]
    ],
    [
      [
        64426,
        64429
      ],
      "mapped",
      [
        1726
      ]
    ],
    [
      [
        64430,
        64431
      ],
      "mapped",
      [
        1746
      ]
    ],
    [
      [
        64432,
        64433
      ],
      "mapped",
      [
        1747
      ]
    ],
    [
      [
        64434,
        64449
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        64450,
        64466
      ],
      "disallowed"
    ],
    [
      [
        64467,
        64470
      ],
      "mapped",
      [
        1709
      ]
    ],
    [
      [
        64471,
        64472
      ],
      "mapped",
      [
        1735
      ]
    ],
    [
      [
        64473,
        64474
      ],
      "mapped",
      [
        1734
      ]
    ],
    [
      [
        64475,
        64476
      ],
      "mapped",
      [
        1736
      ]
    ],
    [
      [
        64477,
        64477
      ],
      "mapped",
      [
        1735,
        1652
      ]
    ],
    [
      [
        64478,
        64479
      ],
      "mapped",
      [
        1739
      ]
    ],
    [
      [
        64480,
        64481
      ],
      "mapped",
      [
        1733
      ]
    ],
    [
      [
        64482,
        64483
      ],
      "mapped",
      [
        1737
      ]
    ],
    [
      [
        64484,
        64487
      ],
      "mapped",
      [
        1744
      ]
    ],
    [
      [
        64488,
        64489
      ],
      "mapped",
      [
        1609
      ]
    ],
    [
      [
        64490,
        64491
      ],
      "mapped",
      [
        1574,
        1575
      ]
    ],
    [
      [
        64492,
        64493
      ],
      "mapped",
      [
        1574,
        1749
      ]
    ],
    [
      [
        64494,
        64495
      ],
      "mapped",
      [
        1574,
        1608
      ]
    ],
    [
      [
        64496,
        64497
      ],
      "mapped",
      [
        1574,
        1735
      ]
    ],
    [
      [
        64498,
        64499
      ],
      "mapped",
      [
        1574,
        1734
      ]
    ],
    [
      [
        64500,
        64501
      ],
      "mapped",
      [
        1574,
        1736
      ]
    ],
    [
      [
        64502,
        64504
      ],
      "mapped",
      [
        1574,
        1744
      ]
    ],
    [
      [
        64505,
        64507
      ],
      "mapped",
      [
        1574,
        1609
      ]
    ],
    [
      [
        64508,
        64511
      ],
      "mapped",
      [
        1740
      ]
    ],
    [
      [
        64512,
        64512
      ],
      "mapped",
      [
        1574,
        1580
      ]
    ],
    [
      [
        64513,
        64513
      ],
      "mapped",
      [
        1574,
        1581
      ]
    ],
    [
      [
        64514,
        64514
      ],
      "mapped",
      [
        1574,
        1605
      ]
    ],
    [
      [
        64515,
        64515
      ],
      "mapped",
      [
        1574,
        1609
      ]
    ],
    [
      [
        64516,
        64516
      ],
      "mapped",
      [
        1574,
        1610
      ]
    ],
    [
      [
        64517,
        64517
      ],
      "mapped",
      [
        1576,
        1580
      ]
    ],
    [
      [
        64518,
        64518
      ],
      "mapped",
      [
        1576,
        1581
      ]
    ],
    [
      [
        64519,
        64519
      ],
      "mapped",
      [
        1576,
        1582
      ]
    ],
    [
      [
        64520,
        64520
      ],
      "mapped",
      [
        1576,
        1605
      ]
    ],
    [
      [
        64521,
        64521
      ],
      "mapped",
      [
        1576,
        1609
      ]
    ],
    [
      [
        64522,
        64522
      ],
      "mapped",
      [
        1576,
        1610
      ]
    ],
    [
      [
        64523,
        64523
      ],
      "mapped",
      [
        1578,
        1580
      ]
    ],
    [
      [
        64524,
        64524
      ],
      "mapped",
      [
        1578,
        1581
      ]
    ],
    [
      [
        64525,
        64525
      ],
      "mapped",
      [
        1578,
        1582
      ]
    ],
    [
      [
        64526,
        64526
      ],
      "mapped",
      [
        1578,
        1605
      ]
    ],
    [
      [
        64527,
        64527
      ],
      "mapped",
      [
        1578,
        1609
      ]
    ],
    [
      [
        64528,
        64528
      ],
      "mapped",
      [
        1578,
        1610
      ]
    ],
    [
      [
        64529,
        64529
      ],
      "mapped",
      [
        1579,
        1580
      ]
    ],
    [
      [
        64530,
        64530
      ],
      "mapped",
      [
        1579,
        1605
      ]
    ],
    [
      [
        64531,
        64531
      ],
      "mapped",
      [
        1579,
        1609
      ]
    ],
    [
      [
        64532,
        64532
      ],
      "mapped",
      [
        1579,
        1610
      ]
    ],
    [
      [
        64533,
        64533
      ],
      "mapped",
      [
        1580,
        1581
      ]
    ],
    [
      [
        64534,
        64534
      ],
      "mapped",
      [
        1580,
        1605
      ]
    ],
    [
      [
        64535,
        64535
      ],
      "mapped",
      [
        1581,
        1580
      ]
    ],
    [
      [
        64536,
        64536
      ],
      "mapped",
      [
        1581,
        1605
      ]
    ],
    [
      [
        64537,
        64537
      ],
      "mapped",
      [
        1582,
        1580
      ]
    ],
    [
      [
        64538,
        64538
      ],
      "mapped",
      [
        1582,
        1581
      ]
    ],
    [
      [
        64539,
        64539
      ],
      "mapped",
      [
        1582,
        1605
      ]
    ],
    [
      [
        64540,
        64540
      ],
      "mapped",
      [
        1587,
        1580
      ]
    ],
    [
      [
        64541,
        64541
      ],
      "mapped",
      [
        1587,
        1581
      ]
    ],
    [
      [
        64542,
        64542
      ],
      "mapped",
      [
        1587,
        1582
      ]
    ],
    [
      [
        64543,
        64543
      ],
      "mapped",
      [
        1587,
        1605
      ]
    ],
    [
      [
        64544,
        64544
      ],
      "mapped",
      [
        1589,
        1581
      ]
    ],
    [
      [
        64545,
        64545
      ],
      "mapped",
      [
        1589,
        1605
      ]
    ],
    [
      [
        64546,
        64546
      ],
      "mapped",
      [
        1590,
        1580
      ]
    ],
    [
      [
        64547,
        64547
      ],
      "mapped",
      [
        1590,
        1581
      ]
    ],
    [
      [
        64548,
        64548
      ],
      "mapped",
      [
        1590,
        1582
      ]
    ],
    [
      [
        64549,
        64549
      ],
      "mapped",
      [
        1590,
        1605
      ]
    ],
    [
      [
        64550,
        64550
      ],
      "mapped",
      [
        1591,
        1581
      ]
    ],
    [
      [
        64551,
        64551
      ],
      "mapped",
      [
        1591,
        1605
      ]
    ],
    [
      [
        64552,
        64552
      ],
      "mapped",
      [
        1592,
        1605
      ]
    ],
    [
      [
        64553,
        64553
      ],
      "mapped",
      [
        1593,
        1580
      ]
    ],
    [
      [
        64554,
        64554
      ],
      "mapped",
      [
        1593,
        1605
      ]
    ],
    [
      [
        64555,
        64555
      ],
      "mapped",
      [
        1594,
        1580
      ]
    ],
    [
      [
        64556,
        64556
      ],
      "mapped",
      [
        1594,
        1605
      ]
    ],
    [
      [
        64557,
        64557
      ],
      "mapped",
      [
        1601,
        1580
      ]
    ],
    [
      [
        64558,
        64558
      ],
      "mapped",
      [
        1601,
        1581
      ]
    ],
    [
      [
        64559,
        64559
      ],
      "mapped",
      [
        1601,
        1582
      ]
    ],
    [
      [
        64560,
        64560
      ],
      "mapped",
      [
        1601,
        1605
      ]
    ],
    [
      [
        64561,
        64561
      ],
      "mapped",
      [
        1601,
        1609
      ]
    ],
    [
      [
        64562,
        64562
      ],
      "mapped",
      [
        1601,
        1610
      ]
    ],
    [
      [
        64563,
        64563
      ],
      "mapped",
      [
        1602,
        1581
      ]
    ],
    [
      [
        64564,
        64564
      ],
      "mapped",
      [
        1602,
        1605
      ]
    ],
    [
      [
        64565,
        64565
      ],
      "mapped",
      [
        1602,
        1609
      ]
    ],
    [
      [
        64566,
        64566
      ],
      "mapped",
      [
        1602,
        1610
      ]
    ],
    [
      [
        64567,
        64567
      ],
      "mapped",
      [
        1603,
        1575
      ]
    ],
    [
      [
        64568,
        64568
      ],
      "mapped",
      [
        1603,
        1580
      ]
    ],
    [
      [
        64569,
        64569
      ],
      "mapped",
      [
        1603,
        1581
      ]
    ],
    [
      [
        64570,
        64570
      ],
      "mapped",
      [
        1603,
        1582
      ]
    ],
    [
      [
        64571,
        64571
      ],
      "mapped",
      [
        1603,
        1604
      ]
    ],
    [
      [
        64572,
        64572
      ],
      "mapped",
      [
        1603,
        1605
      ]
    ],
    [
      [
        64573,
        64573
      ],
      "mapped",
      [
        1603,
        1609
      ]
    ],
    [
      [
        64574,
        64574
      ],
      "mapped",
      [
        1603,
        1610
      ]
    ],
    [
      [
        64575,
        64575
      ],
      "mapped",
      [
        1604,
        1580
      ]
    ],
    [
      [
        64576,
        64576
      ],
      "mapped",
      [
        1604,
        1581
      ]
    ],
    [
      [
        64577,
        64577
      ],
      "mapped",
      [
        1604,
        1582
      ]
    ],
    [
      [
        64578,
        64578
      ],
      "mapped",
      [
        1604,
        1605
      ]
    ],
    [
      [
        64579,
        64579
      ],
      "mapped",
      [
        1604,
        1609
      ]
    ],
    [
      [
        64580,
        64580
      ],
      "mapped",
      [
        1604,
        1610
      ]
    ],
    [
      [
        64581,
        64581
      ],
      "mapped",
      [
        1605,
        1580
      ]
    ],
    [
      [
        64582,
        64582
      ],
      "mapped",
      [
        1605,
        1581
      ]
    ],
    [
      [
        64583,
        64583
      ],
      "mapped",
      [
        1605,
        1582
      ]
    ],
    [
      [
        64584,
        64584
      ],
      "mapped",
      [
        1605,
        1605
      ]
    ],
    [
      [
        64585,
        64585
      ],
      "mapped",
      [
        1605,
        1609
      ]
    ],
    [
      [
        64586,
        64586
      ],
      "mapped",
      [
        1605,
        1610
      ]
    ],
    [
      [
        64587,
        64587
      ],
      "mapped",
      [
        1606,
        1580
      ]
    ],
    [
      [
        64588,
        64588
      ],
      "mapped",
      [
        1606,
        1581
      ]
    ],
    [
      [
        64589,
        64589
      ],
      "mapped",
      [
        1606,
        1582
      ]
    ],
    [
      [
        64590,
        64590
      ],
      "mapped",
      [
        1606,
        1605
      ]
    ],
    [
      [
        64591,
        64591
      ],
      "mapped",
      [
        1606,
        1609
      ]
    ],
    [
      [
        64592,
        64592
      ],
      "mapped",
      [
        1606,
        1610
      ]
    ],
    [
      [
        64593,
        64593
      ],
      "mapped",
      [
        1607,
        1580
      ]
    ],
    [
      [
        64594,
        64594
      ],
      "mapped",
      [
        1607,
        1605
      ]
    ],
    [
      [
        64595,
        64595
      ],
      "mapped",
      [
        1607,
        1609
      ]
    ],
    [
      [
        64596,
        64596
      ],
      "mapped",
      [
        1607,
        1610
      ]
    ],
    [
      [
        64597,
        64597
      ],
      "mapped",
      [
        1610,
        1580
      ]
    ],
    [
      [
        64598,
        64598
      ],
      "mapped",
      [
        1610,
        1581
      ]
    ],
    [
      [
        64599,
        64599
      ],
      "mapped",
      [
        1610,
        1582
      ]
    ],
    [
      [
        64600,
        64600
      ],
      "mapped",
      [
        1610,
        1605
      ]
    ],
    [
      [
        64601,
        64601
      ],
      "mapped",
      [
        1610,
        1609
      ]
    ],
    [
      [
        64602,
        64602
      ],
      "mapped",
      [
        1610,
        1610
      ]
    ],
    [
      [
        64603,
        64603
      ],
      "mapped",
      [
        1584,
        1648
      ]
    ],
    [
      [
        64604,
        64604
      ],
      "mapped",
      [
        1585,
        1648
      ]
    ],
    [
      [
        64605,
        64605
      ],
      "mapped",
      [
        1609,
        1648
      ]
    ],
    [
      [
        64606,
        64606
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1612,
        1617
      ]
    ],
    [
      [
        64607,
        64607
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1613,
        1617
      ]
    ],
    [
      [
        64608,
        64608
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1614,
        1617
      ]
    ],
    [
      [
        64609,
        64609
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1615,
        1617
      ]
    ],
    [
      [
        64610,
        64610
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1616,
        1617
      ]
    ],
    [
      [
        64611,
        64611
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1617,
        1648
      ]
    ],
    [
      [
        64612,
        64612
      ],
      "mapped",
      [
        1574,
        1585
      ]
    ],
    [
      [
        64613,
        64613
      ],
      "mapped",
      [
        1574,
        1586
      ]
    ],
    [
      [
        64614,
        64614
      ],
      "mapped",
      [
        1574,
        1605
      ]
    ],
    [
      [
        64615,
        64615
      ],
      "mapped",
      [
        1574,
        1606
      ]
    ],
    [
      [
        64616,
        64616
      ],
      "mapped",
      [
        1574,
        1609
      ]
    ],
    [
      [
        64617,
        64617
      ],
      "mapped",
      [
        1574,
        1610
      ]
    ],
    [
      [
        64618,
        64618
      ],
      "mapped",
      [
        1576,
        1585
      ]
    ],
    [
      [
        64619,
        64619
      ],
      "mapped",
      [
        1576,
        1586
      ]
    ],
    [
      [
        64620,
        64620
      ],
      "mapped",
      [
        1576,
        1605
      ]
    ],
    [
      [
        64621,
        64621
      ],
      "mapped",
      [
        1576,
        1606
      ]
    ],
    [
      [
        64622,
        64622
      ],
      "mapped",
      [
        1576,
        1609
      ]
    ],
    [
      [
        64623,
        64623
      ],
      "mapped",
      [
        1576,
        1610
      ]
    ],
    [
      [
        64624,
        64624
      ],
      "mapped",
      [
        1578,
        1585
      ]
    ],
    [
      [
        64625,
        64625
      ],
      "mapped",
      [
        1578,
        1586
      ]
    ],
    [
      [
        64626,
        64626
      ],
      "mapped",
      [
        1578,
        1605
      ]
    ],
    [
      [
        64627,
        64627
      ],
      "mapped",
      [
        1578,
        1606
      ]
    ],
    [
      [
        64628,
        64628
      ],
      "mapped",
      [
        1578,
        1609
      ]
    ],
    [
      [
        64629,
        64629
      ],
      "mapped",
      [
        1578,
        1610
      ]
    ],
    [
      [
        64630,
        64630
      ],
      "mapped",
      [
        1579,
        1585
      ]
    ],
    [
      [
        64631,
        64631
      ],
      "mapped",
      [
        1579,
        1586
      ]
    ],
    [
      [
        64632,
        64632
      ],
      "mapped",
      [
        1579,
        1605
      ]
    ],
    [
      [
        64633,
        64633
      ],
      "mapped",
      [
        1579,
        1606
      ]
    ],
    [
      [
        64634,
        64634
      ],
      "mapped",
      [
        1579,
        1609
      ]
    ],
    [
      [
        64635,
        64635
      ],
      "mapped",
      [
        1579,
        1610
      ]
    ],
    [
      [
        64636,
        64636
      ],
      "mapped",
      [
        1601,
        1609
      ]
    ],
    [
      [
        64637,
        64637
      ],
      "mapped",
      [
        1601,
        1610
      ]
    ],
    [
      [
        64638,
        64638
      ],
      "mapped",
      [
        1602,
        1609
      ]
    ],
    [
      [
        64639,
        64639
      ],
      "mapped",
      [
        1602,
        1610
      ]
    ],
    [
      [
        64640,
        64640
      ],
      "mapped",
      [
        1603,
        1575
      ]
    ],
    [
      [
        64641,
        64641
      ],
      "mapped",
      [
        1603,
        1604
      ]
    ],
    [
      [
        64642,
        64642
      ],
      "mapped",
      [
        1603,
        1605
      ]
    ],
    [
      [
        64643,
        64643
      ],
      "mapped",
      [
        1603,
        1609
      ]
    ],
    [
      [
        64644,
        64644
      ],
      "mapped",
      [
        1603,
        1610
      ]
    ],
    [
      [
        64645,
        64645
      ],
      "mapped",
      [
        1604,
        1605
      ]
    ],
    [
      [
        64646,
        64646
      ],
      "mapped",
      [
        1604,
        1609
      ]
    ],
    [
      [
        64647,
        64647
      ],
      "mapped",
      [
        1604,
        1610
      ]
    ],
    [
      [
        64648,
        64648
      ],
      "mapped",
      [
        1605,
        1575
      ]
    ],
    [
      [
        64649,
        64649
      ],
      "mapped",
      [
        1605,
        1605
      ]
    ],
    [
      [
        64650,
        64650
      ],
      "mapped",
      [
        1606,
        1585
      ]
    ],
    [
      [
        64651,
        64651
      ],
      "mapped",
      [
        1606,
        1586
      ]
    ],
    [
      [
        64652,
        64652
      ],
      "mapped",
      [
        1606,
        1605
      ]
    ],
    [
      [
        64653,
        64653
      ],
      "mapped",
      [
        1606,
        1606
      ]
    ],
    [
      [
        64654,
        64654
      ],
      "mapped",
      [
        1606,
        1609
      ]
    ],
    [
      [
        64655,
        64655
      ],
      "mapped",
      [
        1606,
        1610
      ]
    ],
    [
      [
        64656,
        64656
      ],
      "mapped",
      [
        1609,
        1648
      ]
    ],
    [
      [
        64657,
        64657
      ],
      "mapped",
      [
        1610,
        1585
      ]
    ],
    [
      [
        64658,
        64658
      ],
      "mapped",
      [
        1610,
        1586
      ]
    ],
    [
      [
        64659,
        64659
      ],
      "mapped",
      [
        1610,
        1605
      ]
    ],
    [
      [
        64660,
        64660
      ],
      "mapped",
      [
        1610,
        1606
      ]
    ],
    [
      [
        64661,
        64661
      ],
      "mapped",
      [
        1610,
        1609
      ]
    ],
    [
      [
        64662,
        64662
      ],
      "mapped",
      [
        1610,
        1610
      ]
    ],
    [
      [
        64663,
        64663
      ],
      "mapped",
      [
        1574,
        1580
      ]
    ],
    [
      [
        64664,
        64664
      ],
      "mapped",
      [
        1574,
        1581
      ]
    ],
    [
      [
        64665,
        64665
      ],
      "mapped",
      [
        1574,
        1582
      ]
    ],
    [
      [
        64666,
        64666
      ],
      "mapped",
      [
        1574,
        1605
      ]
    ],
    [
      [
        64667,
        64667
      ],
      "mapped",
      [
        1574,
        1607
      ]
    ],
    [
      [
        64668,
        64668
      ],
      "mapped",
      [
        1576,
        1580
      ]
    ],
    [
      [
        64669,
        64669
      ],
      "mapped",
      [
        1576,
        1581
      ]
    ],
    [
      [
        64670,
        64670
      ],
      "mapped",
      [
        1576,
        1582
      ]
    ],
    [
      [
        64671,
        64671
      ],
      "mapped",
      [
        1576,
        1605
      ]
    ],
    [
      [
        64672,
        64672
      ],
      "mapped",
      [
        1576,
        1607
      ]
    ],
    [
      [
        64673,
        64673
      ],
      "mapped",
      [
        1578,
        1580
      ]
    ],
    [
      [
        64674,
        64674
      ],
      "mapped",
      [
        1578,
        1581
      ]
    ],
    [
      [
        64675,
        64675
      ],
      "mapped",
      [
        1578,
        1582
      ]
    ],
    [
      [
        64676,
        64676
      ],
      "mapped",
      [
        1578,
        1605
      ]
    ],
    [
      [
        64677,
        64677
      ],
      "mapped",
      [
        1578,
        1607
      ]
    ],
    [
      [
        64678,
        64678
      ],
      "mapped",
      [
        1579,
        1605
      ]
    ],
    [
      [
        64679,
        64679
      ],
      "mapped",
      [
        1580,
        1581
      ]
    ],
    [
      [
        64680,
        64680
      ],
      "mapped",
      [
        1580,
        1605
      ]
    ],
    [
      [
        64681,
        64681
      ],
      "mapped",
      [
        1581,
        1580
      ]
    ],
    [
      [
        64682,
        64682
      ],
      "mapped",
      [
        1581,
        1605
      ]
    ],
    [
      [
        64683,
        64683
      ],
      "mapped",
      [
        1582,
        1580
      ]
    ],
    [
      [
        64684,
        64684
      ],
      "mapped",
      [
        1582,
        1605
      ]
    ],
    [
      [
        64685,
        64685
      ],
      "mapped",
      [
        1587,
        1580
      ]
    ],
    [
      [
        64686,
        64686
      ],
      "mapped",
      [
        1587,
        1581
      ]
    ],
    [
      [
        64687,
        64687
      ],
      "mapped",
      [
        1587,
        1582
      ]
    ],
    [
      [
        64688,
        64688
      ],
      "mapped",
      [
        1587,
        1605
      ]
    ],
    [
      [
        64689,
        64689
      ],
      "mapped",
      [
        1589,
        1581
      ]
    ],
    [
      [
        64690,
        64690
      ],
      "mapped",
      [
        1589,
        1582
      ]
    ],
    [
      [
        64691,
        64691
      ],
      "mapped",
      [
        1589,
        1605
      ]
    ],
    [
      [
        64692,
        64692
      ],
      "mapped",
      [
        1590,
        1580
      ]
    ],
    [
      [
        64693,
        64693
      ],
      "mapped",
      [
        1590,
        1581
      ]
    ],
    [
      [
        64694,
        64694
      ],
      "mapped",
      [
        1590,
        1582
      ]
    ],
    [
      [
        64695,
        64695
      ],
      "mapped",
      [
        1590,
        1605
      ]
    ],
    [
      [
        64696,
        64696
      ],
      "mapped",
      [
        1591,
        1581
      ]
    ],
    [
      [
        64697,
        64697
      ],
      "mapped",
      [
        1592,
        1605
      ]
    ],
    [
      [
        64698,
        64698
      ],
      "mapped",
      [
        1593,
        1580
      ]
    ],
    [
      [
        64699,
        64699
      ],
      "mapped",
      [
        1593,
        1605
      ]
    ],
    [
      [
        64700,
        64700
      ],
      "mapped",
      [
        1594,
        1580
      ]
    ],
    [
      [
        64701,
        64701
      ],
      "mapped",
      [
        1594,
        1605
      ]
    ],
    [
      [
        64702,
        64702
      ],
      "mapped",
      [
        1601,
        1580
      ]
    ],
    [
      [
        64703,
        64703
      ],
      "mapped",
      [
        1601,
        1581
      ]
    ],
    [
      [
        64704,
        64704
      ],
      "mapped",
      [
        1601,
        1582
      ]
    ],
    [
      [
        64705,
        64705
      ],
      "mapped",
      [
        1601,
        1605
      ]
    ],
    [
      [
        64706,
        64706
      ],
      "mapped",
      [
        1602,
        1581
      ]
    ],
    [
      [
        64707,
        64707
      ],
      "mapped",
      [
        1602,
        1605
      ]
    ],
    [
      [
        64708,
        64708
      ],
      "mapped",
      [
        1603,
        1580
      ]
    ],
    [
      [
        64709,
        64709
      ],
      "mapped",
      [
        1603,
        1581
      ]
    ],
    [
      [
        64710,
        64710
      ],
      "mapped",
      [
        1603,
        1582
      ]
    ],
    [
      [
        64711,
        64711
      ],
      "mapped",
      [
        1603,
        1604
      ]
    ],
    [
      [
        64712,
        64712
      ],
      "mapped",
      [
        1603,
        1605
      ]
    ],
    [
      [
        64713,
        64713
      ],
      "mapped",
      [
        1604,
        1580
      ]
    ],
    [
      [
        64714,
        64714
      ],
      "mapped",
      [
        1604,
        1581
      ]
    ],
    [
      [
        64715,
        64715
      ],
      "mapped",
      [
        1604,
        1582
      ]
    ],
    [
      [
        64716,
        64716
      ],
      "mapped",
      [
        1604,
        1605
      ]
    ],
    [
      [
        64717,
        64717
      ],
      "mapped",
      [
        1604,
        1607
      ]
    ],
    [
      [
        64718,
        64718
      ],
      "mapped",
      [
        1605,
        1580
      ]
    ],
    [
      [
        64719,
        64719
      ],
      "mapped",
      [
        1605,
        1581
      ]
    ],
    [
      [
        64720,
        64720
      ],
      "mapped",
      [
        1605,
        1582
      ]
    ],
    [
      [
        64721,
        64721
      ],
      "mapped",
      [
        1605,
        1605
      ]
    ],
    [
      [
        64722,
        64722
      ],
      "mapped",
      [
        1606,
        1580
      ]
    ],
    [
      [
        64723,
        64723
      ],
      "mapped",
      [
        1606,
        1581
      ]
    ],
    [
      [
        64724,
        64724
      ],
      "mapped",
      [
        1606,
        1582
      ]
    ],
    [
      [
        64725,
        64725
      ],
      "mapped",
      [
        1606,
        1605
      ]
    ],
    [
      [
        64726,
        64726
      ],
      "mapped",
      [
        1606,
        1607
      ]
    ],
    [
      [
        64727,
        64727
      ],
      "mapped",
      [
        1607,
        1580
      ]
    ],
    [
      [
        64728,
        64728
      ],
      "mapped",
      [
        1607,
        1605
      ]
    ],
    [
      [
        64729,
        64729
      ],
      "mapped",
      [
        1607,
        1648
      ]
    ],
    [
      [
        64730,
        64730
      ],
      "mapped",
      [
        1610,
        1580
      ]
    ],
    [
      [
        64731,
        64731
      ],
      "mapped",
      [
        1610,
        1581
      ]
    ],
    [
      [
        64732,
        64732
      ],
      "mapped",
      [
        1610,
        1582
      ]
    ],
    [
      [
        64733,
        64733
      ],
      "mapped",
      [
        1610,
        1605
      ]
    ],
    [
      [
        64734,
        64734
      ],
      "mapped",
      [
        1610,
        1607
      ]
    ],
    [
      [
        64735,
        64735
      ],
      "mapped",
      [
        1574,
        1605
      ]
    ],
    [
      [
        64736,
        64736
      ],
      "mapped",
      [
        1574,
        1607
      ]
    ],
    [
      [
        64737,
        64737
      ],
      "mapped",
      [
        1576,
        1605
      ]
    ],
    [
      [
        64738,
        64738
      ],
      "mapped",
      [
        1576,
        1607
      ]
    ],
    [
      [
        64739,
        64739
      ],
      "mapped",
      [
        1578,
        1605
      ]
    ],
    [
      [
        64740,
        64740
      ],
      "mapped",
      [
        1578,
        1607
      ]
    ],
    [
      [
        64741,
        64741
      ],
      "mapped",
      [
        1579,
        1605
      ]
    ],
    [
      [
        64742,
        64742
      ],
      "mapped",
      [
        1579,
        1607
      ]
    ],
    [
      [
        64743,
        64743
      ],
      "mapped",
      [
        1587,
        1605
      ]
    ],
    [
      [
        64744,
        64744
      ],
      "mapped",
      [
        1587,
        1607
      ]
    ],
    [
      [
        64745,
        64745
      ],
      "mapped",
      [
        1588,
        1605
      ]
    ],
    [
      [
        64746,
        64746
      ],
      "mapped",
      [
        1588,
        1607
      ]
    ],
    [
      [
        64747,
        64747
      ],
      "mapped",
      [
        1603,
        1604
      ]
    ],
    [
      [
        64748,
        64748
      ],
      "mapped",
      [
        1603,
        1605
      ]
    ],
    [
      [
        64749,
        64749
      ],
      "mapped",
      [
        1604,
        1605
      ]
    ],
    [
      [
        64750,
        64750
      ],
      "mapped",
      [
        1606,
        1605
      ]
    ],
    [
      [
        64751,
        64751
      ],
      "mapped",
      [
        1606,
        1607
      ]
    ],
    [
      [
        64752,
        64752
      ],
      "mapped",
      [
        1610,
        1605
      ]
    ],
    [
      [
        64753,
        64753
      ],
      "mapped",
      [
        1610,
        1607
      ]
    ],
    [
      [
        64754,
        64754
      ],
      "mapped",
      [
        1600,
        1614,
        1617
      ]
    ],
    [
      [
        64755,
        64755
      ],
      "mapped",
      [
        1600,
        1615,
        1617
      ]
    ],
    [
      [
        64756,
        64756
      ],
      "mapped",
      [
        1600,
        1616,
        1617
      ]
    ],
    [
      [
        64757,
        64757
      ],
      "mapped",
      [
        1591,
        1609
      ]
    ],
    [
      [
        64758,
        64758
      ],
      "mapped",
      [
        1591,
        1610
      ]
    ],
    [
      [
        64759,
        64759
      ],
      "mapped",
      [
        1593,
        1609
      ]
    ],
    [
      [
        64760,
        64760
      ],
      "mapped",
      [
        1593,
        1610
      ]
    ],
    [
      [
        64761,
        64761
      ],
      "mapped",
      [
        1594,
        1609
      ]
    ],
    [
      [
        64762,
        64762
      ],
      "mapped",
      [
        1594,
        1610
      ]
    ],
    [
      [
        64763,
        64763
      ],
      "mapped",
      [
        1587,
        1609
      ]
    ],
    [
      [
        64764,
        64764
      ],
      "mapped",
      [
        1587,
        1610
      ]
    ],
    [
      [
        64765,
        64765
      ],
      "mapped",
      [
        1588,
        1609
      ]
    ],
    [
      [
        64766,
        64766
      ],
      "mapped",
      [
        1588,
        1610
      ]
    ],
    [
      [
        64767,
        64767
      ],
      "mapped",
      [
        1581,
        1609
      ]
    ],
    [
      [
        64768,
        64768
      ],
      "mapped",
      [
        1581,
        1610
      ]
    ],
    [
      [
        64769,
        64769
      ],
      "mapped",
      [
        1580,
        1609
      ]
    ],
    [
      [
        64770,
        64770
      ],
      "mapped",
      [
        1580,
        1610
      ]
    ],
    [
      [
        64771,
        64771
      ],
      "mapped",
      [
        1582,
        1609
      ]
    ],
    [
      [
        64772,
        64772
      ],
      "mapped",
      [
        1582,
        1610
      ]
    ],
    [
      [
        64773,
        64773
      ],
      "mapped",
      [
        1589,
        1609
      ]
    ],
    [
      [
        64774,
        64774
      ],
      "mapped",
      [
        1589,
        1610
      ]
    ],
    [
      [
        64775,
        64775
      ],
      "mapped",
      [
        1590,
        1609
      ]
    ],
    [
      [
        64776,
        64776
      ],
      "mapped",
      [
        1590,
        1610
      ]
    ],
    [
      [
        64777,
        64777
      ],
      "mapped",
      [
        1588,
        1580
      ]
    ],
    [
      [
        64778,
        64778
      ],
      "mapped",
      [
        1588,
        1581
      ]
    ],
    [
      [
        64779,
        64779
      ],
      "mapped",
      [
        1588,
        1582
      ]
    ],
    [
      [
        64780,
        64780
      ],
      "mapped",
      [
        1588,
        1605
      ]
    ],
    [
      [
        64781,
        64781
      ],
      "mapped",
      [
        1588,
        1585
      ]
    ],
    [
      [
        64782,
        64782
      ],
      "mapped",
      [
        1587,
        1585
      ]
    ],
    [
      [
        64783,
        64783
      ],
      "mapped",
      [
        1589,
        1585
      ]
    ],
    [
      [
        64784,
        64784
      ],
      "mapped",
      [
        1590,
        1585
      ]
    ],
    [
      [
        64785,
        64785
      ],
      "mapped",
      [
        1591,
        1609
      ]
    ],
    [
      [
        64786,
        64786
      ],
      "mapped",
      [
        1591,
        1610
      ]
    ],
    [
      [
        64787,
        64787
      ],
      "mapped",
      [
        1593,
        1609
      ]
    ],
    [
      [
        64788,
        64788
      ],
      "mapped",
      [
        1593,
        1610
      ]
    ],
    [
      [
        64789,
        64789
      ],
      "mapped",
      [
        1594,
        1609
      ]
    ],
    [
      [
        64790,
        64790
      ],
      "mapped",
      [
        1594,
        1610
      ]
    ],
    [
      [
        64791,
        64791
      ],
      "mapped",
      [
        1587,
        1609
      ]
    ],
    [
      [
        64792,
        64792
      ],
      "mapped",
      [
        1587,
        1610
      ]
    ],
    [
      [
        64793,
        64793
      ],
      "mapped",
      [
        1588,
        1609
      ]
    ],
    [
      [
        64794,
        64794
      ],
      "mapped",
      [
        1588,
        1610
      ]
    ],
    [
      [
        64795,
        64795
      ],
      "mapped",
      [
        1581,
        1609
      ]
    ],
    [
      [
        64796,
        64796
      ],
      "mapped",
      [
        1581,
        1610
      ]
    ],
    [
      [
        64797,
        64797
      ],
      "mapped",
      [
        1580,
        1609
      ]
    ],
    [
      [
        64798,
        64798
      ],
      "mapped",
      [
        1580,
        1610
      ]
    ],
    [
      [
        64799,
        64799
      ],
      "mapped",
      [
        1582,
        1609
      ]
    ],
    [
      [
        64800,
        64800
      ],
      "mapped",
      [
        1582,
        1610
      ]
    ],
    [
      [
        64801,
        64801
      ],
      "mapped",
      [
        1589,
        1609
      ]
    ],
    [
      [
        64802,
        64802
      ],
      "mapped",
      [
        1589,
        1610
      ]
    ],
    [
      [
        64803,
        64803
      ],
      "mapped",
      [
        1590,
        1609
      ]
    ],
    [
      [
        64804,
        64804
      ],
      "mapped",
      [
        1590,
        1610
      ]
    ],
    [
      [
        64805,
        64805
      ],
      "mapped",
      [
        1588,
        1580
      ]
    ],
    [
      [
        64806,
        64806
      ],
      "mapped",
      [
        1588,
        1581
      ]
    ],
    [
      [
        64807,
        64807
      ],
      "mapped",
      [
        1588,
        1582
      ]
    ],
    [
      [
        64808,
        64808
      ],
      "mapped",
      [
        1588,
        1605
      ]
    ],
    [
      [
        64809,
        64809
      ],
      "mapped",
      [
        1588,
        1585
      ]
    ],
    [
      [
        64810,
        64810
      ],
      "mapped",
      [
        1587,
        1585
      ]
    ],
    [
      [
        64811,
        64811
      ],
      "mapped",
      [
        1589,
        1585
      ]
    ],
    [
      [
        64812,
        64812
      ],
      "mapped",
      [
        1590,
        1585
      ]
    ],
    [
      [
        64813,
        64813
      ],
      "mapped",
      [
        1588,
        1580
      ]
    ],
    [
      [
        64814,
        64814
      ],
      "mapped",
      [
        1588,
        1581
      ]
    ],
    [
      [
        64815,
        64815
      ],
      "mapped",
      [
        1588,
        1582
      ]
    ],
    [
      [
        64816,
        64816
      ],
      "mapped",
      [
        1588,
        1605
      ]
    ],
    [
      [
        64817,
        64817
      ],
      "mapped",
      [
        1587,
        1607
      ]
    ],
    [
      [
        64818,
        64818
      ],
      "mapped",
      [
        1588,
        1607
      ]
    ],
    [
      [
        64819,
        64819
      ],
      "mapped",
      [
        1591,
        1605
      ]
    ],
    [
      [
        64820,
        64820
      ],
      "mapped",
      [
        1587,
        1580
      ]
    ],
    [
      [
        64821,
        64821
      ],
      "mapped",
      [
        1587,
        1581
      ]
    ],
    [
      [
        64822,
        64822
      ],
      "mapped",
      [
        1587,
        1582
      ]
    ],
    [
      [
        64823,
        64823
      ],
      "mapped",
      [
        1588,
        1580
      ]
    ],
    [
      [
        64824,
        64824
      ],
      "mapped",
      [
        1588,
        1581
      ]
    ],
    [
      [
        64825,
        64825
      ],
      "mapped",
      [
        1588,
        1582
      ]
    ],
    [
      [
        64826,
        64826
      ],
      "mapped",
      [
        1591,
        1605
      ]
    ],
    [
      [
        64827,
        64827
      ],
      "mapped",
      [
        1592,
        1605
      ]
    ],
    [
      [
        64828,
        64829
      ],
      "mapped",
      [
        1575,
        1611
      ]
    ],
    [
      [
        64830,
        64831
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        64832,
        64847
      ],
      "disallowed"
    ],
    [
      [
        64848,
        64848
      ],
      "mapped",
      [
        1578,
        1580,
        1605
      ]
    ],
    [
      [
        64849,
        64850
      ],
      "mapped",
      [
        1578,
        1581,
        1580
      ]
    ],
    [
      [
        64851,
        64851
      ],
      "mapped",
      [
        1578,
        1581,
        1605
      ]
    ],
    [
      [
        64852,
        64852
      ],
      "mapped",
      [
        1578,
        1582,
        1605
      ]
    ],
    [
      [
        64853,
        64853
      ],
      "mapped",
      [
        1578,
        1605,
        1580
      ]
    ],
    [
      [
        64854,
        64854
      ],
      "mapped",
      [
        1578,
        1605,
        1581
      ]
    ],
    [
      [
        64855,
        64855
      ],
      "mapped",
      [
        1578,
        1605,
        1582
      ]
    ],
    [
      [
        64856,
        64857
      ],
      "mapped",
      [
        1580,
        1605,
        1581
      ]
    ],
    [
      [
        64858,
        64858
      ],
      "mapped",
      [
        1581,
        1605,
        1610
      ]
    ],
    [
      [
        64859,
        64859
      ],
      "mapped",
      [
        1581,
        1605,
        1609
      ]
    ],
    [
      [
        64860,
        64860
      ],
      "mapped",
      [
        1587,
        1581,
        1580
      ]
    ],
    [
      [
        64861,
        64861
      ],
      "mapped",
      [
        1587,
        1580,
        1581
      ]
    ],
    [
      [
        64862,
        64862
      ],
      "mapped",
      [
        1587,
        1580,
        1609
      ]
    ],
    [
      [
        64863,
        64864
      ],
      "mapped",
      [
        1587,
        1605,
        1581
      ]
    ],
    [
      [
        64865,
        64865
      ],
      "mapped",
      [
        1587,
        1605,
        1580
      ]
    ],
    [
      [
        64866,
        64867
      ],
      "mapped",
      [
        1587,
        1605,
        1605
      ]
    ],
    [
      [
        64868,
        64869
      ],
      "mapped",
      [
        1589,
        1581,
        1581
      ]
    ],
    [
      [
        64870,
        64870
      ],
      "mapped",
      [
        1589,
        1605,
        1605
      ]
    ],
    [
      [
        64871,
        64872
      ],
      "mapped",
      [
        1588,
        1581,
        1605
      ]
    ],
    [
      [
        64873,
        64873
      ],
      "mapped",
      [
        1588,
        1580,
        1610
      ]
    ],
    [
      [
        64874,
        64875
      ],
      "mapped",
      [
        1588,
        1605,
        1582
      ]
    ],
    [
      [
        64876,
        64877
      ],
      "mapped",
      [
        1588,
        1605,
        1605
      ]
    ],
    [
      [
        64878,
        64878
      ],
      "mapped",
      [
        1590,
        1581,
        1609
      ]
    ],
    [
      [
        64879,
        64880
      ],
      "mapped",
      [
        1590,
        1582,
        1605
      ]
    ],
    [
      [
        64881,
        64882
      ],
      "mapped",
      [
        1591,
        1605,
        1581
      ]
    ],
    [
      [
        64883,
        64883
      ],
      "mapped",
      [
        1591,
        1605,
        1605
      ]
    ],
    [
      [
        64884,
        64884
      ],
      "mapped",
      [
        1591,
        1605,
        1610
      ]
    ],
    [
      [
        64885,
        64885
      ],
      "mapped",
      [
        1593,
        1580,
        1605
      ]
    ],
    [
      [
        64886,
        64887
      ],
      "mapped",
      [
        1593,
        1605,
        1605
      ]
    ],
    [
      [
        64888,
        64888
      ],
      "mapped",
      [
        1593,
        1605,
        1609
      ]
    ],
    [
      [
        64889,
        64889
      ],
      "mapped",
      [
        1594,
        1605,
        1605
      ]
    ],
    [
      [
        64890,
        64890
      ],
      "mapped",
      [
        1594,
        1605,
        1610
      ]
    ],
    [
      [
        64891,
        64891
      ],
      "mapped",
      [
        1594,
        1605,
        1609
      ]
    ],
    [
      [
        64892,
        64893
      ],
      "mapped",
      [
        1601,
        1582,
        1605
      ]
    ],
    [
      [
        64894,
        64894
      ],
      "mapped",
      [
        1602,
        1605,
        1581
      ]
    ],
    [
      [
        64895,
        64895
      ],
      "mapped",
      [
        1602,
        1605,
        1605
      ]
    ],
    [
      [
        64896,
        64896
      ],
      "mapped",
      [
        1604,
        1581,
        1605
      ]
    ],
    [
      [
        64897,
        64897
      ],
      "mapped",
      [
        1604,
        1581,
        1610
      ]
    ],
    [
      [
        64898,
        64898
      ],
      "mapped",
      [
        1604,
        1581,
        1609
      ]
    ],
    [
      [
        64899,
        64900
      ],
      "mapped",
      [
        1604,
        1580,
        1580
      ]
    ],
    [
      [
        64901,
        64902
      ],
      "mapped",
      [
        1604,
        1582,
        1605
      ]
    ],
    [
      [
        64903,
        64904
      ],
      "mapped",
      [
        1604,
        1605,
        1581
      ]
    ],
    [
      [
        64905,
        64905
      ],
      "mapped",
      [
        1605,
        1581,
        1580
      ]
    ],
    [
      [
        64906,
        64906
      ],
      "mapped",
      [
        1605,
        1581,
        1605
      ]
    ],
    [
      [
        64907,
        64907
      ],
      "mapped",
      [
        1605,
        1581,
        1610
      ]
    ],
    [
      [
        64908,
        64908
      ],
      "mapped",
      [
        1605,
        1580,
        1581
      ]
    ],
    [
      [
        64909,
        64909
      ],
      "mapped",
      [
        1605,
        1580,
        1605
      ]
    ],
    [
      [
        64910,
        64910
      ],
      "mapped",
      [
        1605,
        1582,
        1580
      ]
    ],
    [
      [
        64911,
        64911
      ],
      "mapped",
      [
        1605,
        1582,
        1605
      ]
    ],
    [
      [
        64912,
        64913
      ],
      "disallowed"
    ],
    [
      [
        64914,
        64914
      ],
      "mapped",
      [
        1605,
        1580,
        1582
      ]
    ],
    [
      [
        64915,
        64915
      ],
      "mapped",
      [
        1607,
        1605,
        1580
      ]
    ],
    [
      [
        64916,
        64916
      ],
      "mapped",
      [
        1607,
        1605,
        1605
      ]
    ],
    [
      [
        64917,
        64917
      ],
      "mapped",
      [
        1606,
        1581,
        1605
      ]
    ],
    [
      [
        64918,
        64918
      ],
      "mapped",
      [
        1606,
        1581,
        1609
      ]
    ],
    [
      [
        64919,
        64920
      ],
      "mapped",
      [
        1606,
        1580,
        1605
      ]
    ],
    [
      [
        64921,
        64921
      ],
      "mapped",
      [
        1606,
        1580,
        1609
      ]
    ],
    [
      [
        64922,
        64922
      ],
      "mapped",
      [
        1606,
        1605,
        1610
      ]
    ],
    [
      [
        64923,
        64923
      ],
      "mapped",
      [
        1606,
        1605,
        1609
      ]
    ],
    [
      [
        64924,
        64925
      ],
      "mapped",
      [
        1610,
        1605,
        1605
      ]
    ],
    [
      [
        64926,
        64926
      ],
      "mapped",
      [
        1576,
        1582,
        1610
      ]
    ],
    [
      [
        64927,
        64927
      ],
      "mapped",
      [
        1578,
        1580,
        1610
      ]
    ],
    [
      [
        64928,
        64928
      ],
      "mapped",
      [
        1578,
        1580,
        1609
      ]
    ],
    [
      [
        64929,
        64929
      ],
      "mapped",
      [
        1578,
        1582,
        1610
      ]
    ],
    [
      [
        64930,
        64930
      ],
      "mapped",
      [
        1578,
        1582,
        1609
      ]
    ],
    [
      [
        64931,
        64931
      ],
      "mapped",
      [
        1578,
        1605,
        1610
      ]
    ],
    [
      [
        64932,
        64932
      ],
      "mapped",
      [
        1578,
        1605,
        1609
      ]
    ],
    [
      [
        64933,
        64933
      ],
      "mapped",
      [
        1580,
        1605,
        1610
      ]
    ],
    [
      [
        64934,
        64934
      ],
      "mapped",
      [
        1580,
        1581,
        1609
      ]
    ],
    [
      [
        64935,
        64935
      ],
      "mapped",
      [
        1580,
        1605,
        1609
      ]
    ],
    [
      [
        64936,
        64936
      ],
      "mapped",
      [
        1587,
        1582,
        1609
      ]
    ],
    [
      [
        64937,
        64937
      ],
      "mapped",
      [
        1589,
        1581,
        1610
      ]
    ],
    [
      [
        64938,
        64938
      ],
      "mapped",
      [
        1588,
        1581,
        1610
      ]
    ],
    [
      [
        64939,
        64939
      ],
      "mapped",
      [
        1590,
        1581,
        1610
      ]
    ],
    [
      [
        64940,
        64940
      ],
      "mapped",
      [
        1604,
        1580,
        1610
      ]
    ],
    [
      [
        64941,
        64941
      ],
      "mapped",
      [
        1604,
        1605,
        1610
      ]
    ],
    [
      [
        64942,
        64942
      ],
      "mapped",
      [
        1610,
        1581,
        1610
      ]
    ],
    [
      [
        64943,
        64943
      ],
      "mapped",
      [
        1610,
        1580,
        1610
      ]
    ],
    [
      [
        64944,
        64944
      ],
      "mapped",
      [
        1610,
        1605,
        1610
      ]
    ],
    [
      [
        64945,
        64945
      ],
      "mapped",
      [
        1605,
        1605,
        1610
      ]
    ],
    [
      [
        64946,
        64946
      ],
      "mapped",
      [
        1602,
        1605,
        1610
      ]
    ],
    [
      [
        64947,
        64947
      ],
      "mapped",
      [
        1606,
        1581,
        1610
      ]
    ],
    [
      [
        64948,
        64948
      ],
      "mapped",
      [
        1602,
        1605,
        1581
      ]
    ],
    [
      [
        64949,
        64949
      ],
      "mapped",
      [
        1604,
        1581,
        1605
      ]
    ],
    [
      [
        64950,
        64950
      ],
      "mapped",
      [
        1593,
        1605,
        1610
      ]
    ],
    [
      [
        64951,
        64951
      ],
      "mapped",
      [
        1603,
        1605,
        1610
      ]
    ],
    [
      [
        64952,
        64952
      ],
      "mapped",
      [
        1606,
        1580,
        1581
      ]
    ],
    [
      [
        64953,
        64953
      ],
      "mapped",
      [
        1605,
        1582,
        1610
      ]
    ],
    [
      [
        64954,
        64954
      ],
      "mapped",
      [
        1604,
        1580,
        1605
      ]
    ],
    [
      [
        64955,
        64955
      ],
      "mapped",
      [
        1603,
        1605,
        1605
      ]
    ],
    [
      [
        64956,
        64956
      ],
      "mapped",
      [
        1604,
        1580,
        1605
      ]
    ],
    [
      [
        64957,
        64957
      ],
      "mapped",
      [
        1606,
        1580,
        1581
      ]
    ],
    [
      [
        64958,
        64958
      ],
      "mapped",
      [
        1580,
        1581,
        1610
      ]
    ],
    [
      [
        64959,
        64959
      ],
      "mapped",
      [
        1581,
        1580,
        1610
      ]
    ],
    [
      [
        64960,
        64960
      ],
      "mapped",
      [
        1605,
        1580,
        1610
      ]
    ],
    [
      [
        64961,
        64961
      ],
      "mapped",
      [
        1601,
        1605,
        1610
      ]
    ],
    [
      [
        64962,
        64962
      ],
      "mapped",
      [
        1576,
        1581,
        1610
      ]
    ],
    [
      [
        64963,
        64963
      ],
      "mapped",
      [
        1603,
        1605,
        1605
      ]
    ],
    [
      [
        64964,
        64964
      ],
      "mapped",
      [
        1593,
        1580,
        1605
      ]
    ],
    [
      [
        64965,
        64965
      ],
      "mapped",
      [
        1589,
        1605,
        1605
      ]
    ],
    [
      [
        64966,
        64966
      ],
      "mapped",
      [
        1587,
        1582,
        1610
      ]
    ],
    [
      [
        64967,
        64967
      ],
      "mapped",
      [
        1606,
        1580,
        1610
      ]
    ],
    [
      [
        64968,
        64975
      ],
      "disallowed"
    ],
    [
      [
        64976,
        65007
      ],
      "disallowed"
    ],
    [
      [
        65008,
        65008
      ],
      "mapped",
      [
        1589,
        1604,
        1746
      ]
    ],
    [
      [
        65009,
        65009
      ],
      "mapped",
      [
        1602,
        1604,
        1746
      ]
    ],
    [
      [
        65010,
        65010
      ],
      "mapped",
      [
        1575,
        1604,
        1604,
        1607
      ]
    ],
    [
      [
        65011,
        65011
      ],
      "mapped",
      [
        1575,
        1603,
        1576,
        1585
      ]
    ],
    [
      [
        65012,
        65012
      ],
      "mapped",
      [
        1605,
        1581,
        1605,
        1583
      ]
    ],
    [
      [
        65013,
        65013
      ],
      "mapped",
      [
        1589,
        1604,
        1593,
        1605
      ]
    ],
    [
      [
        65014,
        65014
      ],
      "mapped",
      [
        1585,
        1587,
        1608,
        1604
      ]
    ],
    [
      [
        65015,
        65015
      ],
      "mapped",
      [
        1593,
        1604,
        1610,
        1607
      ]
    ],
    [
      [
        65016,
        65016
      ],
      "mapped",
      [
        1608,
        1587,
        1604,
        1605
      ]
    ],
    [
      [
        65017,
        65017
      ],
      "mapped",
      [
        1589,
        1604,
        1609
      ]
    ],
    [
      [
        65018,
        65018
      ],
      "disallowed_STD3_mapped",
      [
        1589,
        1604,
        1609,
        32,
        1575,
        1604,
        1604,
        1607,
        32,
        1593,
        1604,
        1610,
        1607,
        32,
        1608,
        1587,
        1604,
        1605
      ]
    ],
    [
      [
        65019,
        65019
      ],
      "disallowed_STD3_mapped",
      [
        1580,
        1604,
        32,
        1580,
        1604,
        1575,
        1604,
        1607
      ]
    ],
    [
      [
        65020,
        65020
      ],
      "mapped",
      [
        1585,
        1740,
        1575,
        1604
      ]
    ],
    [
      [
        65021,
        65021
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65022,
        65023
      ],
      "disallowed"
    ],
    [
      [
        65024,
        65039
      ],
      "ignored"
    ],
    [
      [
        65040,
        65040
      ],
      "disallowed_STD3_mapped",
      [
        44
      ]
    ],
    [
      [
        65041,
        65041
      ],
      "mapped",
      [
        12289
      ]
    ],
    [
      [
        65042,
        65042
      ],
      "disallowed"
    ],
    [
      [
        65043,
        65043
      ],
      "disallowed_STD3_mapped",
      [
        58
      ]
    ],
    [
      [
        65044,
        65044
      ],
      "disallowed_STD3_mapped",
      [
        59
      ]
    ],
    [
      [
        65045,
        65045
      ],
      "disallowed_STD3_mapped",
      [
        33
      ]
    ],
    [
      [
        65046,
        65046
      ],
      "disallowed_STD3_mapped",
      [
        63
      ]
    ],
    [
      [
        65047,
        65047
      ],
      "mapped",
      [
        12310
      ]
    ],
    [
      [
        65048,
        65048
      ],
      "mapped",
      [
        12311
      ]
    ],
    [
      [
        65049,
        65049
      ],
      "disallowed"
    ],
    [
      [
        65050,
        65055
      ],
      "disallowed"
    ],
    [
      [
        65056,
        65059
      ],
      "valid"
    ],
    [
      [
        65060,
        65062
      ],
      "valid"
    ],
    [
      [
        65063,
        65069
      ],
      "valid"
    ],
    [
      [
        65070,
        65071
      ],
      "valid"
    ],
    [
      [
        65072,
        65072
      ],
      "disallowed"
    ],
    [
      [
        65073,
        65073
      ],
      "mapped",
      [
        8212
      ]
    ],
    [
      [
        65074,
        65074
      ],
      "mapped",
      [
        8211
      ]
    ],
    [
      [
        65075,
        65076
      ],
      "disallowed_STD3_mapped",
      [
        95
      ]
    ],
    [
      [
        65077,
        65077
      ],
      "disallowed_STD3_mapped",
      [
        40
      ]
    ],
    [
      [
        65078,
        65078
      ],
      "disallowed_STD3_mapped",
      [
        41
      ]
    ],
    [
      [
        65079,
        65079
      ],
      "disallowed_STD3_mapped",
      [
        123
      ]
    ],
    [
      [
        65080,
        65080
      ],
      "disallowed_STD3_mapped",
      [
        125
      ]
    ],
    [
      [
        65081,
        65081
      ],
      "mapped",
      [
        12308
      ]
    ],
    [
      [
        65082,
        65082
      ],
      "mapped",
      [
        12309
      ]
    ],
    [
      [
        65083,
        65083
      ],
      "mapped",
      [
        12304
      ]
    ],
    [
      [
        65084,
        65084
      ],
      "mapped",
      [
        12305
      ]
    ],
    [
      [
        65085,
        65085
      ],
      "mapped",
      [
        12298
      ]
    ],
    [
      [
        65086,
        65086
      ],
      "mapped",
      [
        12299
      ]
    ],
    [
      [
        65087,
        65087
      ],
      "mapped",
      [
        12296
      ]
    ],
    [
      [
        65088,
        65088
      ],
      "mapped",
      [
        12297
      ]
    ],
    [
      [
        65089,
        65089
      ],
      "mapped",
      [
        12300
      ]
    ],
    [
      [
        65090,
        65090
      ],
      "mapped",
      [
        12301
      ]
    ],
    [
      [
        65091,
        65091
      ],
      "mapped",
      [
        12302
      ]
    ],
    [
      [
        65092,
        65092
      ],
      "mapped",
      [
        12303
      ]
    ],
    [
      [
        65093,
        65094
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65095,
        65095
      ],
      "disallowed_STD3_mapped",
      [
        91
      ]
    ],
    [
      [
        65096,
        65096
      ],
      "disallowed_STD3_mapped",
      [
        93
      ]
    ],
    [
      [
        65097,
        65100
      ],
      "disallowed_STD3_mapped",
      [
        32,
        773
      ]
    ],
    [
      [
        65101,
        65103
      ],
      "disallowed_STD3_mapped",
      [
        95
      ]
    ],
    [
      [
        65104,
        65104
      ],
      "disallowed_STD3_mapped",
      [
        44
      ]
    ],
    [
      [
        65105,
        65105
      ],
      "mapped",
      [
        12289
      ]
    ],
    [
      [
        65106,
        65106
      ],
      "disallowed"
    ],
    [
      [
        65107,
        65107
      ],
      "disallowed"
    ],
    [
      [
        65108,
        65108
      ],
      "disallowed_STD3_mapped",
      [
        59
      ]
    ],
    [
      [
        65109,
        65109
      ],
      "disallowed_STD3_mapped",
      [
        58
      ]
    ],
    [
      [
        65110,
        65110
      ],
      "disallowed_STD3_mapped",
      [
        63
      ]
    ],
    [
      [
        65111,
        65111
      ],
      "disallowed_STD3_mapped",
      [
        33
      ]
    ],
    [
      [
        65112,
        65112
      ],
      "mapped",
      [
        8212
      ]
    ],
    [
      [
        65113,
        65113
      ],
      "disallowed_STD3_mapped",
      [
        40
      ]
    ],
    [
      [
        65114,
        65114
      ],
      "disallowed_STD3_mapped",
      [
        41
      ]
    ],
    [
      [
        65115,
        65115
      ],
      "disallowed_STD3_mapped",
      [
        123
      ]
    ],
    [
      [
        65116,
        65116
      ],
      "disallowed_STD3_mapped",
      [
        125
      ]
    ],
    [
      [
        65117,
        65117
      ],
      "mapped",
      [
        12308
      ]
    ],
    [
      [
        65118,
        65118
      ],
      "mapped",
      [
        12309
      ]
    ],
    [
      [
        65119,
        65119
      ],
      "disallowed_STD3_mapped",
      [
        35
      ]
    ],
    [
      [
        65120,
        65120
      ],
      "disallowed_STD3_mapped",
      [
        38
      ]
    ],
    [
      [
        65121,
        65121
      ],
      "disallowed_STD3_mapped",
      [
        42
      ]
    ],
    [
      [
        65122,
        65122
      ],
      "disallowed_STD3_mapped",
      [
        43
      ]
    ],
    [
      [
        65123,
        65123
      ],
      "mapped",
      [
        45
      ]
    ],
    [
      [
        65124,
        65124
      ],
      "disallowed_STD3_mapped",
      [
        60
      ]
    ],
    [
      [
        65125,
        65125
      ],
      "disallowed_STD3_mapped",
      [
        62
      ]
    ],
    [
      [
        65126,
        65126
      ],
      "disallowed_STD3_mapped",
      [
        61
      ]
    ],
    [
      [
        65127,
        65127
      ],
      "disallowed"
    ],
    [
      [
        65128,
        65128
      ],
      "disallowed_STD3_mapped",
      [
        92
      ]
    ],
    [
      [
        65129,
        65129
      ],
      "disallowed_STD3_mapped",
      [
        36
      ]
    ],
    [
      [
        65130,
        65130
      ],
      "disallowed_STD3_mapped",
      [
        37
      ]
    ],
    [
      [
        65131,
        65131
      ],
      "disallowed_STD3_mapped",
      [
        64
      ]
    ],
    [
      [
        65132,
        65135
      ],
      "disallowed"
    ],
    [
      [
        65136,
        65136
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1611
      ]
    ],
    [
      [
        65137,
        65137
      ],
      "mapped",
      [
        1600,
        1611
      ]
    ],
    [
      [
        65138,
        65138
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1612
      ]
    ],
    [
      [
        65139,
        65139
      ],
      "valid"
    ],
    [
      [
        65140,
        65140
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1613
      ]
    ],
    [
      [
        65141,
        65141
      ],
      "disallowed"
    ],
    [
      [
        65142,
        65142
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1614
      ]
    ],
    [
      [
        65143,
        65143
      ],
      "mapped",
      [
        1600,
        1614
      ]
    ],
    [
      [
        65144,
        65144
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1615
      ]
    ],
    [
      [
        65145,
        65145
      ],
      "mapped",
      [
        1600,
        1615
      ]
    ],
    [
      [
        65146,
        65146
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1616
      ]
    ],
    [
      [
        65147,
        65147
      ],
      "mapped",
      [
        1600,
        1616
      ]
    ],
    [
      [
        65148,
        65148
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1617
      ]
    ],
    [
      [
        65149,
        65149
      ],
      "mapped",
      [
        1600,
        1617
      ]
    ],
    [
      [
        65150,
        65150
      ],
      "disallowed_STD3_mapped",
      [
        32,
        1618
      ]
    ],
    [
      [
        65151,
        65151
      ],
      "mapped",
      [
        1600,
        1618
      ]
    ],
    [
      [
        65152,
        65152
      ],
      "mapped",
      [
        1569
      ]
    ],
    [
      [
        65153,
        65154
      ],
      "mapped",
      [
        1570
      ]
    ],
    [
      [
        65155,
        65156
      ],
      "mapped",
      [
        1571
      ]
    ],
    [
      [
        65157,
        65158
      ],
      "mapped",
      [
        1572
      ]
    ],
    [
      [
        65159,
        65160
      ],
      "mapped",
      [
        1573
      ]
    ],
    [
      [
        65161,
        65164
      ],
      "mapped",
      [
        1574
      ]
    ],
    [
      [
        65165,
        65166
      ],
      "mapped",
      [
        1575
      ]
    ],
    [
      [
        65167,
        65170
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        65171,
        65172
      ],
      "mapped",
      [
        1577
      ]
    ],
    [
      [
        65173,
        65176
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        65177,
        65180
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        65181,
        65184
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        65185,
        65188
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        65189,
        65192
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        65193,
        65194
      ],
      "mapped",
      [
        1583
      ]
    ],
    [
      [
        65195,
        65196
      ],
      "mapped",
      [
        1584
      ]
    ],
    [
      [
        65197,
        65198
      ],
      "mapped",
      [
        1585
      ]
    ],
    [
      [
        65199,
        65200
      ],
      "mapped",
      [
        1586
      ]
    ],
    [
      [
        65201,
        65204
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        65205,
        65208
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        65209,
        65212
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        65213,
        65216
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        65217,
        65220
      ],
      "mapped",
      [
        1591
      ]
    ],
    [
      [
        65221,
        65224
      ],
      "mapped",
      [
        1592
      ]
    ],
    [
      [
        65225,
        65228
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        65229,
        65232
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        65233,
        65236
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        65237,
        65240
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        65241,
        65244
      ],
      "mapped",
      [
        1603
      ]
    ],
    [
      [
        65245,
        65248
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        65249,
        65252
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        65253,
        65256
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        65257,
        65260
      ],
      "mapped",
      [
        1607
      ]
    ],
    [
      [
        65261,
        65262
      ],
      "mapped",
      [
        1608
      ]
    ],
    [
      [
        65263,
        65264
      ],
      "mapped",
      [
        1609
      ]
    ],
    [
      [
        65265,
        65268
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        65269,
        65270
      ],
      "mapped",
      [
        1604,
        1570
      ]
    ],
    [
      [
        65271,
        65272
      ],
      "mapped",
      [
        1604,
        1571
      ]
    ],
    [
      [
        65273,
        65274
      ],
      "mapped",
      [
        1604,
        1573
      ]
    ],
    [
      [
        65275,
        65276
      ],
      "mapped",
      [
        1604,
        1575
      ]
    ],
    [
      [
        65277,
        65278
      ],
      "disallowed"
    ],
    [
      [
        65279,
        65279
      ],
      "ignored"
    ],
    [
      [
        65280,
        65280
      ],
      "disallowed"
    ],
    [
      [
        65281,
        65281
      ],
      "disallowed_STD3_mapped",
      [
        33
      ]
    ],
    [
      [
        65282,
        65282
      ],
      "disallowed_STD3_mapped",
      [
        34
      ]
    ],
    [
      [
        65283,
        65283
      ],
      "disallowed_STD3_mapped",
      [
        35
      ]
    ],
    [
      [
        65284,
        65284
      ],
      "disallowed_STD3_mapped",
      [
        36
      ]
    ],
    [
      [
        65285,
        65285
      ],
      "disallowed_STD3_mapped",
      [
        37
      ]
    ],
    [
      [
        65286,
        65286
      ],
      "disallowed_STD3_mapped",
      [
        38
      ]
    ],
    [
      [
        65287,
        65287
      ],
      "disallowed_STD3_mapped",
      [
        39
      ]
    ],
    [
      [
        65288,
        65288
      ],
      "disallowed_STD3_mapped",
      [
        40
      ]
    ],
    [
      [
        65289,
        65289
      ],
      "disallowed_STD3_mapped",
      [
        41
      ]
    ],
    [
      [
        65290,
        65290
      ],
      "disallowed_STD3_mapped",
      [
        42
      ]
    ],
    [
      [
        65291,
        65291
      ],
      "disallowed_STD3_mapped",
      [
        43
      ]
    ],
    [
      [
        65292,
        65292
      ],
      "disallowed_STD3_mapped",
      [
        44
      ]
    ],
    [
      [
        65293,
        65293
      ],
      "mapped",
      [
        45
      ]
    ],
    [
      [
        65294,
        65294
      ],
      "mapped",
      [
        46
      ]
    ],
    [
      [
        65295,
        65295
      ],
      "disallowed_STD3_mapped",
      [
        47
      ]
    ],
    [
      [
        65296,
        65296
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        65297,
        65297
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        65298,
        65298
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        65299,
        65299
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        65300,
        65300
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        65301,
        65301
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        65302,
        65302
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        65303,
        65303
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        65304,
        65304
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        65305,
        65305
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        65306,
        65306
      ],
      "disallowed_STD3_mapped",
      [
        58
      ]
    ],
    [
      [
        65307,
        65307
      ],
      "disallowed_STD3_mapped",
      [
        59
      ]
    ],
    [
      [
        65308,
        65308
      ],
      "disallowed_STD3_mapped",
      [
        60
      ]
    ],
    [
      [
        65309,
        65309
      ],
      "disallowed_STD3_mapped",
      [
        61
      ]
    ],
    [
      [
        65310,
        65310
      ],
      "disallowed_STD3_mapped",
      [
        62
      ]
    ],
    [
      [
        65311,
        65311
      ],
      "disallowed_STD3_mapped",
      [
        63
      ]
    ],
    [
      [
        65312,
        65312
      ],
      "disallowed_STD3_mapped",
      [
        64
      ]
    ],
    [
      [
        65313,
        65313
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        65314,
        65314
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        65315,
        65315
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        65316,
        65316
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        65317,
        65317
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        65318,
        65318
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        65319,
        65319
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        65320,
        65320
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        65321,
        65321
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        65322,
        65322
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        65323,
        65323
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        65324,
        65324
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        65325,
        65325
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        65326,
        65326
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        65327,
        65327
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        65328,
        65328
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        65329,
        65329
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        65330,
        65330
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        65331,
        65331
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        65332,
        65332
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        65333,
        65333
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        65334,
        65334
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        65335,
        65335
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        65336,
        65336
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        65337,
        65337
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        65338,
        65338
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        65339,
        65339
      ],
      "disallowed_STD3_mapped",
      [
        91
      ]
    ],
    [
      [
        65340,
        65340
      ],
      "disallowed_STD3_mapped",
      [
        92
      ]
    ],
    [
      [
        65341,
        65341
      ],
      "disallowed_STD3_mapped",
      [
        93
      ]
    ],
    [
      [
        65342,
        65342
      ],
      "disallowed_STD3_mapped",
      [
        94
      ]
    ],
    [
      [
        65343,
        65343
      ],
      "disallowed_STD3_mapped",
      [
        95
      ]
    ],
    [
      [
        65344,
        65344
      ],
      "disallowed_STD3_mapped",
      [
        96
      ]
    ],
    [
      [
        65345,
        65345
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        65346,
        65346
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        65347,
        65347
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        65348,
        65348
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        65349,
        65349
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        65350,
        65350
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        65351,
        65351
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        65352,
        65352
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        65353,
        65353
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        65354,
        65354
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        65355,
        65355
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        65356,
        65356
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        65357,
        65357
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        65358,
        65358
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        65359,
        65359
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        65360,
        65360
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        65361,
        65361
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        65362,
        65362
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        65363,
        65363
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        65364,
        65364
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        65365,
        65365
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        65366,
        65366
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        65367,
        65367
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        65368,
        65368
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        65369,
        65369
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        65370,
        65370
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        65371,
        65371
      ],
      "disallowed_STD3_mapped",
      [
        123
      ]
    ],
    [
      [
        65372,
        65372
      ],
      "disallowed_STD3_mapped",
      [
        124
      ]
    ],
    [
      [
        65373,
        65373
      ],
      "disallowed_STD3_mapped",
      [
        125
      ]
    ],
    [
      [
        65374,
        65374
      ],
      "disallowed_STD3_mapped",
      [
        126
      ]
    ],
    [
      [
        65375,
        65375
      ],
      "mapped",
      [
        10629
      ]
    ],
    [
      [
        65376,
        65376
      ],
      "mapped",
      [
        10630
      ]
    ],
    [
      [
        65377,
        65377
      ],
      "mapped",
      [
        46
      ]
    ],
    [
      [
        65378,
        65378
      ],
      "mapped",
      [
        12300
      ]
    ],
    [
      [
        65379,
        65379
      ],
      "mapped",
      [
        12301
      ]
    ],
    [
      [
        65380,
        65380
      ],
      "mapped",
      [
        12289
      ]
    ],
    [
      [
        65381,
        65381
      ],
      "mapped",
      [
        12539
      ]
    ],
    [
      [
        65382,
        65382
      ],
      "mapped",
      [
        12530
      ]
    ],
    [
      [
        65383,
        65383
      ],
      "mapped",
      [
        12449
      ]
    ],
    [
      [
        65384,
        65384
      ],
      "mapped",
      [
        12451
      ]
    ],
    [
      [
        65385,
        65385
      ],
      "mapped",
      [
        12453
      ]
    ],
    [
      [
        65386,
        65386
      ],
      "mapped",
      [
        12455
      ]
    ],
    [
      [
        65387,
        65387
      ],
      "mapped",
      [
        12457
      ]
    ],
    [
      [
        65388,
        65388
      ],
      "mapped",
      [
        12515
      ]
    ],
    [
      [
        65389,
        65389
      ],
      "mapped",
      [
        12517
      ]
    ],
    [
      [
        65390,
        65390
      ],
      "mapped",
      [
        12519
      ]
    ],
    [
      [
        65391,
        65391
      ],
      "mapped",
      [
        12483
      ]
    ],
    [
      [
        65392,
        65392
      ],
      "mapped",
      [
        12540
      ]
    ],
    [
      [
        65393,
        65393
      ],
      "mapped",
      [
        12450
      ]
    ],
    [
      [
        65394,
        65394
      ],
      "mapped",
      [
        12452
      ]
    ],
    [
      [
        65395,
        65395
      ],
      "mapped",
      [
        12454
      ]
    ],
    [
      [
        65396,
        65396
      ],
      "mapped",
      [
        12456
      ]
    ],
    [
      [
        65397,
        65397
      ],
      "mapped",
      [
        12458
      ]
    ],
    [
      [
        65398,
        65398
      ],
      "mapped",
      [
        12459
      ]
    ],
    [
      [
        65399,
        65399
      ],
      "mapped",
      [
        12461
      ]
    ],
    [
      [
        65400,
        65400
      ],
      "mapped",
      [
        12463
      ]
    ],
    [
      [
        65401,
        65401
      ],
      "mapped",
      [
        12465
      ]
    ],
    [
      [
        65402,
        65402
      ],
      "mapped",
      [
        12467
      ]
    ],
    [
      [
        65403,
        65403
      ],
      "mapped",
      [
        12469
      ]
    ],
    [
      [
        65404,
        65404
      ],
      "mapped",
      [
        12471
      ]
    ],
    [
      [
        65405,
        65405
      ],
      "mapped",
      [
        12473
      ]
    ],
    [
      [
        65406,
        65406
      ],
      "mapped",
      [
        12475
      ]
    ],
    [
      [
        65407,
        65407
      ],
      "mapped",
      [
        12477
      ]
    ],
    [
      [
        65408,
        65408
      ],
      "mapped",
      [
        12479
      ]
    ],
    [
      [
        65409,
        65409
      ],
      "mapped",
      [
        12481
      ]
    ],
    [
      [
        65410,
        65410
      ],
      "mapped",
      [
        12484
      ]
    ],
    [
      [
        65411,
        65411
      ],
      "mapped",
      [
        12486
      ]
    ],
    [
      [
        65412,
        65412
      ],
      "mapped",
      [
        12488
      ]
    ],
    [
      [
        65413,
        65413
      ],
      "mapped",
      [
        12490
      ]
    ],
    [
      [
        65414,
        65414
      ],
      "mapped",
      [
        12491
      ]
    ],
    [
      [
        65415,
        65415
      ],
      "mapped",
      [
        12492
      ]
    ],
    [
      [
        65416,
        65416
      ],
      "mapped",
      [
        12493
      ]
    ],
    [
      [
        65417,
        65417
      ],
      "mapped",
      [
        12494
      ]
    ],
    [
      [
        65418,
        65418
      ],
      "mapped",
      [
        12495
      ]
    ],
    [
      [
        65419,
        65419
      ],
      "mapped",
      [
        12498
      ]
    ],
    [
      [
        65420,
        65420
      ],
      "mapped",
      [
        12501
      ]
    ],
    [
      [
        65421,
        65421
      ],
      "mapped",
      [
        12504
      ]
    ],
    [
      [
        65422,
        65422
      ],
      "mapped",
      [
        12507
      ]
    ],
    [
      [
        65423,
        65423
      ],
      "mapped",
      [
        12510
      ]
    ],
    [
      [
        65424,
        65424
      ],
      "mapped",
      [
        12511
      ]
    ],
    [
      [
        65425,
        65425
      ],
      "mapped",
      [
        12512
      ]
    ],
    [
      [
        65426,
        65426
      ],
      "mapped",
      [
        12513
      ]
    ],
    [
      [
        65427,
        65427
      ],
      "mapped",
      [
        12514
      ]
    ],
    [
      [
        65428,
        65428
      ],
      "mapped",
      [
        12516
      ]
    ],
    [
      [
        65429,
        65429
      ],
      "mapped",
      [
        12518
      ]
    ],
    [
      [
        65430,
        65430
      ],
      "mapped",
      [
        12520
      ]
    ],
    [
      [
        65431,
        65431
      ],
      "mapped",
      [
        12521
      ]
    ],
    [
      [
        65432,
        65432
      ],
      "mapped",
      [
        12522
      ]
    ],
    [
      [
        65433,
        65433
      ],
      "mapped",
      [
        12523
      ]
    ],
    [
      [
        65434,
        65434
      ],
      "mapped",
      [
        12524
      ]
    ],
    [
      [
        65435,
        65435
      ],
      "mapped",
      [
        12525
      ]
    ],
    [
      [
        65436,
        65436
      ],
      "mapped",
      [
        12527
      ]
    ],
    [
      [
        65437,
        65437
      ],
      "mapped",
      [
        12531
      ]
    ],
    [
      [
        65438,
        65438
      ],
      "mapped",
      [
        12441
      ]
    ],
    [
      [
        65439,
        65439
      ],
      "mapped",
      [
        12442
      ]
    ],
    [
      [
        65440,
        65440
      ],
      "disallowed"
    ],
    [
      [
        65441,
        65441
      ],
      "mapped",
      [
        4352
      ]
    ],
    [
      [
        65442,
        65442
      ],
      "mapped",
      [
        4353
      ]
    ],
    [
      [
        65443,
        65443
      ],
      "mapped",
      [
        4522
      ]
    ],
    [
      [
        65444,
        65444
      ],
      "mapped",
      [
        4354
      ]
    ],
    [
      [
        65445,
        65445
      ],
      "mapped",
      [
        4524
      ]
    ],
    [
      [
        65446,
        65446
      ],
      "mapped",
      [
        4525
      ]
    ],
    [
      [
        65447,
        65447
      ],
      "mapped",
      [
        4355
      ]
    ],
    [
      [
        65448,
        65448
      ],
      "mapped",
      [
        4356
      ]
    ],
    [
      [
        65449,
        65449
      ],
      "mapped",
      [
        4357
      ]
    ],
    [
      [
        65450,
        65450
      ],
      "mapped",
      [
        4528
      ]
    ],
    [
      [
        65451,
        65451
      ],
      "mapped",
      [
        4529
      ]
    ],
    [
      [
        65452,
        65452
      ],
      "mapped",
      [
        4530
      ]
    ],
    [
      [
        65453,
        65453
      ],
      "mapped",
      [
        4531
      ]
    ],
    [
      [
        65454,
        65454
      ],
      "mapped",
      [
        4532
      ]
    ],
    [
      [
        65455,
        65455
      ],
      "mapped",
      [
        4533
      ]
    ],
    [
      [
        65456,
        65456
      ],
      "mapped",
      [
        4378
      ]
    ],
    [
      [
        65457,
        65457
      ],
      "mapped",
      [
        4358
      ]
    ],
    [
      [
        65458,
        65458
      ],
      "mapped",
      [
        4359
      ]
    ],
    [
      [
        65459,
        65459
      ],
      "mapped",
      [
        4360
      ]
    ],
    [
      [
        65460,
        65460
      ],
      "mapped",
      [
        4385
      ]
    ],
    [
      [
        65461,
        65461
      ],
      "mapped",
      [
        4361
      ]
    ],
    [
      [
        65462,
        65462
      ],
      "mapped",
      [
        4362
      ]
    ],
    [
      [
        65463,
        65463
      ],
      "mapped",
      [
        4363
      ]
    ],
    [
      [
        65464,
        65464
      ],
      "mapped",
      [
        4364
      ]
    ],
    [
      [
        65465,
        65465
      ],
      "mapped",
      [
        4365
      ]
    ],
    [
      [
        65466,
        65466
      ],
      "mapped",
      [
        4366
      ]
    ],
    [
      [
        65467,
        65467
      ],
      "mapped",
      [
        4367
      ]
    ],
    [
      [
        65468,
        65468
      ],
      "mapped",
      [
        4368
      ]
    ],
    [
      [
        65469,
        65469
      ],
      "mapped",
      [
        4369
      ]
    ],
    [
      [
        65470,
        65470
      ],
      "mapped",
      [
        4370
      ]
    ],
    [
      [
        65471,
        65473
      ],
      "disallowed"
    ],
    [
      [
        65474,
        65474
      ],
      "mapped",
      [
        4449
      ]
    ],
    [
      [
        65475,
        65475
      ],
      "mapped",
      [
        4450
      ]
    ],
    [
      [
        65476,
        65476
      ],
      "mapped",
      [
        4451
      ]
    ],
    [
      [
        65477,
        65477
      ],
      "mapped",
      [
        4452
      ]
    ],
    [
      [
        65478,
        65478
      ],
      "mapped",
      [
        4453
      ]
    ],
    [
      [
        65479,
        65479
      ],
      "mapped",
      [
        4454
      ]
    ],
    [
      [
        65480,
        65481
      ],
      "disallowed"
    ],
    [
      [
        65482,
        65482
      ],
      "mapped",
      [
        4455
      ]
    ],
    [
      [
        65483,
        65483
      ],
      "mapped",
      [
        4456
      ]
    ],
    [
      [
        65484,
        65484
      ],
      "mapped",
      [
        4457
      ]
    ],
    [
      [
        65485,
        65485
      ],
      "mapped",
      [
        4458
      ]
    ],
    [
      [
        65486,
        65486
      ],
      "mapped",
      [
        4459
      ]
    ],
    [
      [
        65487,
        65487
      ],
      "mapped",
      [
        4460
      ]
    ],
    [
      [
        65488,
        65489
      ],
      "disallowed"
    ],
    [
      [
        65490,
        65490
      ],
      "mapped",
      [
        4461
      ]
    ],
    [
      [
        65491,
        65491
      ],
      "mapped",
      [
        4462
      ]
    ],
    [
      [
        65492,
        65492
      ],
      "mapped",
      [
        4463
      ]
    ],
    [
      [
        65493,
        65493
      ],
      "mapped",
      [
        4464
      ]
    ],
    [
      [
        65494,
        65494
      ],
      "mapped",
      [
        4465
      ]
    ],
    [
      [
        65495,
        65495
      ],
      "mapped",
      [
        4466
      ]
    ],
    [
      [
        65496,
        65497
      ],
      "disallowed"
    ],
    [
      [
        65498,
        65498
      ],
      "mapped",
      [
        4467
      ]
    ],
    [
      [
        65499,
        65499
      ],
      "mapped",
      [
        4468
      ]
    ],
    [
      [
        65500,
        65500
      ],
      "mapped",
      [
        4469
      ]
    ],
    [
      [
        65501,
        65503
      ],
      "disallowed"
    ],
    [
      [
        65504,
        65504
      ],
      "mapped",
      [
        162
      ]
    ],
    [
      [
        65505,
        65505
      ],
      "mapped",
      [
        163
      ]
    ],
    [
      [
        65506,
        65506
      ],
      "mapped",
      [
        172
      ]
    ],
    [
      [
        65507,
        65507
      ],
      "disallowed_STD3_mapped",
      [
        32,
        772
      ]
    ],
    [
      [
        65508,
        65508
      ],
      "mapped",
      [
        166
      ]
    ],
    [
      [
        65509,
        65509
      ],
      "mapped",
      [
        165
      ]
    ],
    [
      [
        65510,
        65510
      ],
      "mapped",
      [
        8361
      ]
    ],
    [
      [
        65511,
        65511
      ],
      "disallowed"
    ],
    [
      [
        65512,
        65512
      ],
      "mapped",
      [
        9474
      ]
    ],
    [
      [
        65513,
        65513
      ],
      "mapped",
      [
        8592
      ]
    ],
    [
      [
        65514,
        65514
      ],
      "mapped",
      [
        8593
      ]
    ],
    [
      [
        65515,
        65515
      ],
      "mapped",
      [
        8594
      ]
    ],
    [
      [
        65516,
        65516
      ],
      "mapped",
      [
        8595
      ]
    ],
    [
      [
        65517,
        65517
      ],
      "mapped",
      [
        9632
      ]
    ],
    [
      [
        65518,
        65518
      ],
      "mapped",
      [
        9675
      ]
    ],
    [
      [
        65519,
        65528
      ],
      "disallowed"
    ],
    [
      [
        65529,
        65531
      ],
      "disallowed"
    ],
    [
      [
        65532,
        65532
      ],
      "disallowed"
    ],
    [
      [
        65533,
        65533
      ],
      "disallowed"
    ],
    [
      [
        65534,
        65535
      ],
      "disallowed"
    ],
    [
      [
        65536,
        65547
      ],
      "valid"
    ],
    [
      [
        65548,
        65548
      ],
      "disallowed"
    ],
    [
      [
        65549,
        65574
      ],
      "valid"
    ],
    [
      [
        65575,
        65575
      ],
      "disallowed"
    ],
    [
      [
        65576,
        65594
      ],
      "valid"
    ],
    [
      [
        65595,
        65595
      ],
      "disallowed"
    ],
    [
      [
        65596,
        65597
      ],
      "valid"
    ],
    [
      [
        65598,
        65598
      ],
      "disallowed"
    ],
    [
      [
        65599,
        65613
      ],
      "valid"
    ],
    [
      [
        65614,
        65615
      ],
      "disallowed"
    ],
    [
      [
        65616,
        65629
      ],
      "valid"
    ],
    [
      [
        65630,
        65663
      ],
      "disallowed"
    ],
    [
      [
        65664,
        65786
      ],
      "valid"
    ],
    [
      [
        65787,
        65791
      ],
      "disallowed"
    ],
    [
      [
        65792,
        65794
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65795,
        65798
      ],
      "disallowed"
    ],
    [
      [
        65799,
        65843
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65844,
        65846
      ],
      "disallowed"
    ],
    [
      [
        65847,
        65855
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65856,
        65930
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65931,
        65932
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65933,
        65935
      ],
      "disallowed"
    ],
    [
      [
        65936,
        65947
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65948,
        65951
      ],
      "disallowed"
    ],
    [
      [
        65952,
        65952
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        65953,
        65999
      ],
      "disallowed"
    ],
    [
      [
        66e3,
        66044
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66045,
        66045
      ],
      "valid"
    ],
    [
      [
        66046,
        66175
      ],
      "disallowed"
    ],
    [
      [
        66176,
        66204
      ],
      "valid"
    ],
    [
      [
        66205,
        66207
      ],
      "disallowed"
    ],
    [
      [
        66208,
        66256
      ],
      "valid"
    ],
    [
      [
        66257,
        66271
      ],
      "disallowed"
    ],
    [
      [
        66272,
        66272
      ],
      "valid"
    ],
    [
      [
        66273,
        66299
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66300,
        66303
      ],
      "disallowed"
    ],
    [
      [
        66304,
        66334
      ],
      "valid"
    ],
    [
      [
        66335,
        66335
      ],
      "valid"
    ],
    [
      [
        66336,
        66339
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66340,
        66351
      ],
      "disallowed"
    ],
    [
      [
        66352,
        66368
      ],
      "valid"
    ],
    [
      [
        66369,
        66369
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66370,
        66377
      ],
      "valid"
    ],
    [
      [
        66378,
        66378
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66379,
        66383
      ],
      "disallowed"
    ],
    [
      [
        66384,
        66426
      ],
      "valid"
    ],
    [
      [
        66427,
        66431
      ],
      "disallowed"
    ],
    [
      [
        66432,
        66461
      ],
      "valid"
    ],
    [
      [
        66462,
        66462
      ],
      "disallowed"
    ],
    [
      [
        66463,
        66463
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66464,
        66499
      ],
      "valid"
    ],
    [
      [
        66500,
        66503
      ],
      "disallowed"
    ],
    [
      [
        66504,
        66511
      ],
      "valid"
    ],
    [
      [
        66512,
        66517
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66518,
        66559
      ],
      "disallowed"
    ],
    [
      [
        66560,
        66560
      ],
      "mapped",
      [
        66600
      ]
    ],
    [
      [
        66561,
        66561
      ],
      "mapped",
      [
        66601
      ]
    ],
    [
      [
        66562,
        66562
      ],
      "mapped",
      [
        66602
      ]
    ],
    [
      [
        66563,
        66563
      ],
      "mapped",
      [
        66603
      ]
    ],
    [
      [
        66564,
        66564
      ],
      "mapped",
      [
        66604
      ]
    ],
    [
      [
        66565,
        66565
      ],
      "mapped",
      [
        66605
      ]
    ],
    [
      [
        66566,
        66566
      ],
      "mapped",
      [
        66606
      ]
    ],
    [
      [
        66567,
        66567
      ],
      "mapped",
      [
        66607
      ]
    ],
    [
      [
        66568,
        66568
      ],
      "mapped",
      [
        66608
      ]
    ],
    [
      [
        66569,
        66569
      ],
      "mapped",
      [
        66609
      ]
    ],
    [
      [
        66570,
        66570
      ],
      "mapped",
      [
        66610
      ]
    ],
    [
      [
        66571,
        66571
      ],
      "mapped",
      [
        66611
      ]
    ],
    [
      [
        66572,
        66572
      ],
      "mapped",
      [
        66612
      ]
    ],
    [
      [
        66573,
        66573
      ],
      "mapped",
      [
        66613
      ]
    ],
    [
      [
        66574,
        66574
      ],
      "mapped",
      [
        66614
      ]
    ],
    [
      [
        66575,
        66575
      ],
      "mapped",
      [
        66615
      ]
    ],
    [
      [
        66576,
        66576
      ],
      "mapped",
      [
        66616
      ]
    ],
    [
      [
        66577,
        66577
      ],
      "mapped",
      [
        66617
      ]
    ],
    [
      [
        66578,
        66578
      ],
      "mapped",
      [
        66618
      ]
    ],
    [
      [
        66579,
        66579
      ],
      "mapped",
      [
        66619
      ]
    ],
    [
      [
        66580,
        66580
      ],
      "mapped",
      [
        66620
      ]
    ],
    [
      [
        66581,
        66581
      ],
      "mapped",
      [
        66621
      ]
    ],
    [
      [
        66582,
        66582
      ],
      "mapped",
      [
        66622
      ]
    ],
    [
      [
        66583,
        66583
      ],
      "mapped",
      [
        66623
      ]
    ],
    [
      [
        66584,
        66584
      ],
      "mapped",
      [
        66624
      ]
    ],
    [
      [
        66585,
        66585
      ],
      "mapped",
      [
        66625
      ]
    ],
    [
      [
        66586,
        66586
      ],
      "mapped",
      [
        66626
      ]
    ],
    [
      [
        66587,
        66587
      ],
      "mapped",
      [
        66627
      ]
    ],
    [
      [
        66588,
        66588
      ],
      "mapped",
      [
        66628
      ]
    ],
    [
      [
        66589,
        66589
      ],
      "mapped",
      [
        66629
      ]
    ],
    [
      [
        66590,
        66590
      ],
      "mapped",
      [
        66630
      ]
    ],
    [
      [
        66591,
        66591
      ],
      "mapped",
      [
        66631
      ]
    ],
    [
      [
        66592,
        66592
      ],
      "mapped",
      [
        66632
      ]
    ],
    [
      [
        66593,
        66593
      ],
      "mapped",
      [
        66633
      ]
    ],
    [
      [
        66594,
        66594
      ],
      "mapped",
      [
        66634
      ]
    ],
    [
      [
        66595,
        66595
      ],
      "mapped",
      [
        66635
      ]
    ],
    [
      [
        66596,
        66596
      ],
      "mapped",
      [
        66636
      ]
    ],
    [
      [
        66597,
        66597
      ],
      "mapped",
      [
        66637
      ]
    ],
    [
      [
        66598,
        66598
      ],
      "mapped",
      [
        66638
      ]
    ],
    [
      [
        66599,
        66599
      ],
      "mapped",
      [
        66639
      ]
    ],
    [
      [
        66600,
        66637
      ],
      "valid"
    ],
    [
      [
        66638,
        66717
      ],
      "valid"
    ],
    [
      [
        66718,
        66719
      ],
      "disallowed"
    ],
    [
      [
        66720,
        66729
      ],
      "valid"
    ],
    [
      [
        66730,
        66815
      ],
      "disallowed"
    ],
    [
      [
        66816,
        66855
      ],
      "valid"
    ],
    [
      [
        66856,
        66863
      ],
      "disallowed"
    ],
    [
      [
        66864,
        66915
      ],
      "valid"
    ],
    [
      [
        66916,
        66926
      ],
      "disallowed"
    ],
    [
      [
        66927,
        66927
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        66928,
        67071
      ],
      "disallowed"
    ],
    [
      [
        67072,
        67382
      ],
      "valid"
    ],
    [
      [
        67383,
        67391
      ],
      "disallowed"
    ],
    [
      [
        67392,
        67413
      ],
      "valid"
    ],
    [
      [
        67414,
        67423
      ],
      "disallowed"
    ],
    [
      [
        67424,
        67431
      ],
      "valid"
    ],
    [
      [
        67432,
        67583
      ],
      "disallowed"
    ],
    [
      [
        67584,
        67589
      ],
      "valid"
    ],
    [
      [
        67590,
        67591
      ],
      "disallowed"
    ],
    [
      [
        67592,
        67592
      ],
      "valid"
    ],
    [
      [
        67593,
        67593
      ],
      "disallowed"
    ],
    [
      [
        67594,
        67637
      ],
      "valid"
    ],
    [
      [
        67638,
        67638
      ],
      "disallowed"
    ],
    [
      [
        67639,
        67640
      ],
      "valid"
    ],
    [
      [
        67641,
        67643
      ],
      "disallowed"
    ],
    [
      [
        67644,
        67644
      ],
      "valid"
    ],
    [
      [
        67645,
        67646
      ],
      "disallowed"
    ],
    [
      [
        67647,
        67647
      ],
      "valid"
    ],
    [
      [
        67648,
        67669
      ],
      "valid"
    ],
    [
      [
        67670,
        67670
      ],
      "disallowed"
    ],
    [
      [
        67671,
        67679
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67680,
        67702
      ],
      "valid"
    ],
    [
      [
        67703,
        67711
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67712,
        67742
      ],
      "valid"
    ],
    [
      [
        67743,
        67750
      ],
      "disallowed"
    ],
    [
      [
        67751,
        67759
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67760,
        67807
      ],
      "disallowed"
    ],
    [
      [
        67808,
        67826
      ],
      "valid"
    ],
    [
      [
        67827,
        67827
      ],
      "disallowed"
    ],
    [
      [
        67828,
        67829
      ],
      "valid"
    ],
    [
      [
        67830,
        67834
      ],
      "disallowed"
    ],
    [
      [
        67835,
        67839
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67840,
        67861
      ],
      "valid"
    ],
    [
      [
        67862,
        67865
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67866,
        67867
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67868,
        67870
      ],
      "disallowed"
    ],
    [
      [
        67871,
        67871
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67872,
        67897
      ],
      "valid"
    ],
    [
      [
        67898,
        67902
      ],
      "disallowed"
    ],
    [
      [
        67903,
        67903
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        67904,
        67967
      ],
      "disallowed"
    ],
    [
      [
        67968,
        68023
      ],
      "valid"
    ],
    [
      [
        68024,
        68027
      ],
      "disallowed"
    ],
    [
      [
        68028,
        68029
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68030,
        68031
      ],
      "valid"
    ],
    [
      [
        68032,
        68047
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68048,
        68049
      ],
      "disallowed"
    ],
    [
      [
        68050,
        68095
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68096,
        68099
      ],
      "valid"
    ],
    [
      [
        68100,
        68100
      ],
      "disallowed"
    ],
    [
      [
        68101,
        68102
      ],
      "valid"
    ],
    [
      [
        68103,
        68107
      ],
      "disallowed"
    ],
    [
      [
        68108,
        68115
      ],
      "valid"
    ],
    [
      [
        68116,
        68116
      ],
      "disallowed"
    ],
    [
      [
        68117,
        68119
      ],
      "valid"
    ],
    [
      [
        68120,
        68120
      ],
      "disallowed"
    ],
    [
      [
        68121,
        68147
      ],
      "valid"
    ],
    [
      [
        68148,
        68151
      ],
      "disallowed"
    ],
    [
      [
        68152,
        68154
      ],
      "valid"
    ],
    [
      [
        68155,
        68158
      ],
      "disallowed"
    ],
    [
      [
        68159,
        68159
      ],
      "valid"
    ],
    [
      [
        68160,
        68167
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68168,
        68175
      ],
      "disallowed"
    ],
    [
      [
        68176,
        68184
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68185,
        68191
      ],
      "disallowed"
    ],
    [
      [
        68192,
        68220
      ],
      "valid"
    ],
    [
      [
        68221,
        68223
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68224,
        68252
      ],
      "valid"
    ],
    [
      [
        68253,
        68255
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68256,
        68287
      ],
      "disallowed"
    ],
    [
      [
        68288,
        68295
      ],
      "valid"
    ],
    [
      [
        68296,
        68296
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68297,
        68326
      ],
      "valid"
    ],
    [
      [
        68327,
        68330
      ],
      "disallowed"
    ],
    [
      [
        68331,
        68342
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68343,
        68351
      ],
      "disallowed"
    ],
    [
      [
        68352,
        68405
      ],
      "valid"
    ],
    [
      [
        68406,
        68408
      ],
      "disallowed"
    ],
    [
      [
        68409,
        68415
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68416,
        68437
      ],
      "valid"
    ],
    [
      [
        68438,
        68439
      ],
      "disallowed"
    ],
    [
      [
        68440,
        68447
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68448,
        68466
      ],
      "valid"
    ],
    [
      [
        68467,
        68471
      ],
      "disallowed"
    ],
    [
      [
        68472,
        68479
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68480,
        68497
      ],
      "valid"
    ],
    [
      [
        68498,
        68504
      ],
      "disallowed"
    ],
    [
      [
        68505,
        68508
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68509,
        68520
      ],
      "disallowed"
    ],
    [
      [
        68521,
        68527
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68528,
        68607
      ],
      "disallowed"
    ],
    [
      [
        68608,
        68680
      ],
      "valid"
    ],
    [
      [
        68681,
        68735
      ],
      "disallowed"
    ],
    [
      [
        68736,
        68736
      ],
      "mapped",
      [
        68800
      ]
    ],
    [
      [
        68737,
        68737
      ],
      "mapped",
      [
        68801
      ]
    ],
    [
      [
        68738,
        68738
      ],
      "mapped",
      [
        68802
      ]
    ],
    [
      [
        68739,
        68739
      ],
      "mapped",
      [
        68803
      ]
    ],
    [
      [
        68740,
        68740
      ],
      "mapped",
      [
        68804
      ]
    ],
    [
      [
        68741,
        68741
      ],
      "mapped",
      [
        68805
      ]
    ],
    [
      [
        68742,
        68742
      ],
      "mapped",
      [
        68806
      ]
    ],
    [
      [
        68743,
        68743
      ],
      "mapped",
      [
        68807
      ]
    ],
    [
      [
        68744,
        68744
      ],
      "mapped",
      [
        68808
      ]
    ],
    [
      [
        68745,
        68745
      ],
      "mapped",
      [
        68809
      ]
    ],
    [
      [
        68746,
        68746
      ],
      "mapped",
      [
        68810
      ]
    ],
    [
      [
        68747,
        68747
      ],
      "mapped",
      [
        68811
      ]
    ],
    [
      [
        68748,
        68748
      ],
      "mapped",
      [
        68812
      ]
    ],
    [
      [
        68749,
        68749
      ],
      "mapped",
      [
        68813
      ]
    ],
    [
      [
        68750,
        68750
      ],
      "mapped",
      [
        68814
      ]
    ],
    [
      [
        68751,
        68751
      ],
      "mapped",
      [
        68815
      ]
    ],
    [
      [
        68752,
        68752
      ],
      "mapped",
      [
        68816
      ]
    ],
    [
      [
        68753,
        68753
      ],
      "mapped",
      [
        68817
      ]
    ],
    [
      [
        68754,
        68754
      ],
      "mapped",
      [
        68818
      ]
    ],
    [
      [
        68755,
        68755
      ],
      "mapped",
      [
        68819
      ]
    ],
    [
      [
        68756,
        68756
      ],
      "mapped",
      [
        68820
      ]
    ],
    [
      [
        68757,
        68757
      ],
      "mapped",
      [
        68821
      ]
    ],
    [
      [
        68758,
        68758
      ],
      "mapped",
      [
        68822
      ]
    ],
    [
      [
        68759,
        68759
      ],
      "mapped",
      [
        68823
      ]
    ],
    [
      [
        68760,
        68760
      ],
      "mapped",
      [
        68824
      ]
    ],
    [
      [
        68761,
        68761
      ],
      "mapped",
      [
        68825
      ]
    ],
    [
      [
        68762,
        68762
      ],
      "mapped",
      [
        68826
      ]
    ],
    [
      [
        68763,
        68763
      ],
      "mapped",
      [
        68827
      ]
    ],
    [
      [
        68764,
        68764
      ],
      "mapped",
      [
        68828
      ]
    ],
    [
      [
        68765,
        68765
      ],
      "mapped",
      [
        68829
      ]
    ],
    [
      [
        68766,
        68766
      ],
      "mapped",
      [
        68830
      ]
    ],
    [
      [
        68767,
        68767
      ],
      "mapped",
      [
        68831
      ]
    ],
    [
      [
        68768,
        68768
      ],
      "mapped",
      [
        68832
      ]
    ],
    [
      [
        68769,
        68769
      ],
      "mapped",
      [
        68833
      ]
    ],
    [
      [
        68770,
        68770
      ],
      "mapped",
      [
        68834
      ]
    ],
    [
      [
        68771,
        68771
      ],
      "mapped",
      [
        68835
      ]
    ],
    [
      [
        68772,
        68772
      ],
      "mapped",
      [
        68836
      ]
    ],
    [
      [
        68773,
        68773
      ],
      "mapped",
      [
        68837
      ]
    ],
    [
      [
        68774,
        68774
      ],
      "mapped",
      [
        68838
      ]
    ],
    [
      [
        68775,
        68775
      ],
      "mapped",
      [
        68839
      ]
    ],
    [
      [
        68776,
        68776
      ],
      "mapped",
      [
        68840
      ]
    ],
    [
      [
        68777,
        68777
      ],
      "mapped",
      [
        68841
      ]
    ],
    [
      [
        68778,
        68778
      ],
      "mapped",
      [
        68842
      ]
    ],
    [
      [
        68779,
        68779
      ],
      "mapped",
      [
        68843
      ]
    ],
    [
      [
        68780,
        68780
      ],
      "mapped",
      [
        68844
      ]
    ],
    [
      [
        68781,
        68781
      ],
      "mapped",
      [
        68845
      ]
    ],
    [
      [
        68782,
        68782
      ],
      "mapped",
      [
        68846
      ]
    ],
    [
      [
        68783,
        68783
      ],
      "mapped",
      [
        68847
      ]
    ],
    [
      [
        68784,
        68784
      ],
      "mapped",
      [
        68848
      ]
    ],
    [
      [
        68785,
        68785
      ],
      "mapped",
      [
        68849
      ]
    ],
    [
      [
        68786,
        68786
      ],
      "mapped",
      [
        68850
      ]
    ],
    [
      [
        68787,
        68799
      ],
      "disallowed"
    ],
    [
      [
        68800,
        68850
      ],
      "valid"
    ],
    [
      [
        68851,
        68857
      ],
      "disallowed"
    ],
    [
      [
        68858,
        68863
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        68864,
        69215
      ],
      "disallowed"
    ],
    [
      [
        69216,
        69246
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69247,
        69631
      ],
      "disallowed"
    ],
    [
      [
        69632,
        69702
      ],
      "valid"
    ],
    [
      [
        69703,
        69709
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69710,
        69713
      ],
      "disallowed"
    ],
    [
      [
        69714,
        69733
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69734,
        69743
      ],
      "valid"
    ],
    [
      [
        69744,
        69758
      ],
      "disallowed"
    ],
    [
      [
        69759,
        69759
      ],
      "valid"
    ],
    [
      [
        69760,
        69818
      ],
      "valid"
    ],
    [
      [
        69819,
        69820
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69821,
        69821
      ],
      "disallowed"
    ],
    [
      [
        69822,
        69825
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69826,
        69839
      ],
      "disallowed"
    ],
    [
      [
        69840,
        69864
      ],
      "valid"
    ],
    [
      [
        69865,
        69871
      ],
      "disallowed"
    ],
    [
      [
        69872,
        69881
      ],
      "valid"
    ],
    [
      [
        69882,
        69887
      ],
      "disallowed"
    ],
    [
      [
        69888,
        69940
      ],
      "valid"
    ],
    [
      [
        69941,
        69941
      ],
      "disallowed"
    ],
    [
      [
        69942,
        69951
      ],
      "valid"
    ],
    [
      [
        69952,
        69955
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        69956,
        69967
      ],
      "disallowed"
    ],
    [
      [
        69968,
        70003
      ],
      "valid"
    ],
    [
      [
        70004,
        70005
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70006,
        70006
      ],
      "valid"
    ],
    [
      [
        70007,
        70015
      ],
      "disallowed"
    ],
    [
      [
        70016,
        70084
      ],
      "valid"
    ],
    [
      [
        70085,
        70088
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70089,
        70089
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70090,
        70092
      ],
      "valid"
    ],
    [
      [
        70093,
        70093
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70094,
        70095
      ],
      "disallowed"
    ],
    [
      [
        70096,
        70105
      ],
      "valid"
    ],
    [
      [
        70106,
        70106
      ],
      "valid"
    ],
    [
      [
        70107,
        70107
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70108,
        70108
      ],
      "valid"
    ],
    [
      [
        70109,
        70111
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70112,
        70112
      ],
      "disallowed"
    ],
    [
      [
        70113,
        70132
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70133,
        70143
      ],
      "disallowed"
    ],
    [
      [
        70144,
        70161
      ],
      "valid"
    ],
    [
      [
        70162,
        70162
      ],
      "disallowed"
    ],
    [
      [
        70163,
        70199
      ],
      "valid"
    ],
    [
      [
        70200,
        70205
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70206,
        70271
      ],
      "disallowed"
    ],
    [
      [
        70272,
        70278
      ],
      "valid"
    ],
    [
      [
        70279,
        70279
      ],
      "disallowed"
    ],
    [
      [
        70280,
        70280
      ],
      "valid"
    ],
    [
      [
        70281,
        70281
      ],
      "disallowed"
    ],
    [
      [
        70282,
        70285
      ],
      "valid"
    ],
    [
      [
        70286,
        70286
      ],
      "disallowed"
    ],
    [
      [
        70287,
        70301
      ],
      "valid"
    ],
    [
      [
        70302,
        70302
      ],
      "disallowed"
    ],
    [
      [
        70303,
        70312
      ],
      "valid"
    ],
    [
      [
        70313,
        70313
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70314,
        70319
      ],
      "disallowed"
    ],
    [
      [
        70320,
        70378
      ],
      "valid"
    ],
    [
      [
        70379,
        70383
      ],
      "disallowed"
    ],
    [
      [
        70384,
        70393
      ],
      "valid"
    ],
    [
      [
        70394,
        70399
      ],
      "disallowed"
    ],
    [
      [
        70400,
        70400
      ],
      "valid"
    ],
    [
      [
        70401,
        70403
      ],
      "valid"
    ],
    [
      [
        70404,
        70404
      ],
      "disallowed"
    ],
    [
      [
        70405,
        70412
      ],
      "valid"
    ],
    [
      [
        70413,
        70414
      ],
      "disallowed"
    ],
    [
      [
        70415,
        70416
      ],
      "valid"
    ],
    [
      [
        70417,
        70418
      ],
      "disallowed"
    ],
    [
      [
        70419,
        70440
      ],
      "valid"
    ],
    [
      [
        70441,
        70441
      ],
      "disallowed"
    ],
    [
      [
        70442,
        70448
      ],
      "valid"
    ],
    [
      [
        70449,
        70449
      ],
      "disallowed"
    ],
    [
      [
        70450,
        70451
      ],
      "valid"
    ],
    [
      [
        70452,
        70452
      ],
      "disallowed"
    ],
    [
      [
        70453,
        70457
      ],
      "valid"
    ],
    [
      [
        70458,
        70459
      ],
      "disallowed"
    ],
    [
      [
        70460,
        70468
      ],
      "valid"
    ],
    [
      [
        70469,
        70470
      ],
      "disallowed"
    ],
    [
      [
        70471,
        70472
      ],
      "valid"
    ],
    [
      [
        70473,
        70474
      ],
      "disallowed"
    ],
    [
      [
        70475,
        70477
      ],
      "valid"
    ],
    [
      [
        70478,
        70479
      ],
      "disallowed"
    ],
    [
      [
        70480,
        70480
      ],
      "valid"
    ],
    [
      [
        70481,
        70486
      ],
      "disallowed"
    ],
    [
      [
        70487,
        70487
      ],
      "valid"
    ],
    [
      [
        70488,
        70492
      ],
      "disallowed"
    ],
    [
      [
        70493,
        70499
      ],
      "valid"
    ],
    [
      [
        70500,
        70501
      ],
      "disallowed"
    ],
    [
      [
        70502,
        70508
      ],
      "valid"
    ],
    [
      [
        70509,
        70511
      ],
      "disallowed"
    ],
    [
      [
        70512,
        70516
      ],
      "valid"
    ],
    [
      [
        70517,
        70783
      ],
      "disallowed"
    ],
    [
      [
        70784,
        70853
      ],
      "valid"
    ],
    [
      [
        70854,
        70854
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        70855,
        70855
      ],
      "valid"
    ],
    [
      [
        70856,
        70863
      ],
      "disallowed"
    ],
    [
      [
        70864,
        70873
      ],
      "valid"
    ],
    [
      [
        70874,
        71039
      ],
      "disallowed"
    ],
    [
      [
        71040,
        71093
      ],
      "valid"
    ],
    [
      [
        71094,
        71095
      ],
      "disallowed"
    ],
    [
      [
        71096,
        71104
      ],
      "valid"
    ],
    [
      [
        71105,
        71113
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        71114,
        71127
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        71128,
        71133
      ],
      "valid"
    ],
    [
      [
        71134,
        71167
      ],
      "disallowed"
    ],
    [
      [
        71168,
        71232
      ],
      "valid"
    ],
    [
      [
        71233,
        71235
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        71236,
        71236
      ],
      "valid"
    ],
    [
      [
        71237,
        71247
      ],
      "disallowed"
    ],
    [
      [
        71248,
        71257
      ],
      "valid"
    ],
    [
      [
        71258,
        71295
      ],
      "disallowed"
    ],
    [
      [
        71296,
        71351
      ],
      "valid"
    ],
    [
      [
        71352,
        71359
      ],
      "disallowed"
    ],
    [
      [
        71360,
        71369
      ],
      "valid"
    ],
    [
      [
        71370,
        71423
      ],
      "disallowed"
    ],
    [
      [
        71424,
        71449
      ],
      "valid"
    ],
    [
      [
        71450,
        71452
      ],
      "disallowed"
    ],
    [
      [
        71453,
        71467
      ],
      "valid"
    ],
    [
      [
        71468,
        71471
      ],
      "disallowed"
    ],
    [
      [
        71472,
        71481
      ],
      "valid"
    ],
    [
      [
        71482,
        71487
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        71488,
        71839
      ],
      "disallowed"
    ],
    [
      [
        71840,
        71840
      ],
      "mapped",
      [
        71872
      ]
    ],
    [
      [
        71841,
        71841
      ],
      "mapped",
      [
        71873
      ]
    ],
    [
      [
        71842,
        71842
      ],
      "mapped",
      [
        71874
      ]
    ],
    [
      [
        71843,
        71843
      ],
      "mapped",
      [
        71875
      ]
    ],
    [
      [
        71844,
        71844
      ],
      "mapped",
      [
        71876
      ]
    ],
    [
      [
        71845,
        71845
      ],
      "mapped",
      [
        71877
      ]
    ],
    [
      [
        71846,
        71846
      ],
      "mapped",
      [
        71878
      ]
    ],
    [
      [
        71847,
        71847
      ],
      "mapped",
      [
        71879
      ]
    ],
    [
      [
        71848,
        71848
      ],
      "mapped",
      [
        71880
      ]
    ],
    [
      [
        71849,
        71849
      ],
      "mapped",
      [
        71881
      ]
    ],
    [
      [
        71850,
        71850
      ],
      "mapped",
      [
        71882
      ]
    ],
    [
      [
        71851,
        71851
      ],
      "mapped",
      [
        71883
      ]
    ],
    [
      [
        71852,
        71852
      ],
      "mapped",
      [
        71884
      ]
    ],
    [
      [
        71853,
        71853
      ],
      "mapped",
      [
        71885
      ]
    ],
    [
      [
        71854,
        71854
      ],
      "mapped",
      [
        71886
      ]
    ],
    [
      [
        71855,
        71855
      ],
      "mapped",
      [
        71887
      ]
    ],
    [
      [
        71856,
        71856
      ],
      "mapped",
      [
        71888
      ]
    ],
    [
      [
        71857,
        71857
      ],
      "mapped",
      [
        71889
      ]
    ],
    [
      [
        71858,
        71858
      ],
      "mapped",
      [
        71890
      ]
    ],
    [
      [
        71859,
        71859
      ],
      "mapped",
      [
        71891
      ]
    ],
    [
      [
        71860,
        71860
      ],
      "mapped",
      [
        71892
      ]
    ],
    [
      [
        71861,
        71861
      ],
      "mapped",
      [
        71893
      ]
    ],
    [
      [
        71862,
        71862
      ],
      "mapped",
      [
        71894
      ]
    ],
    [
      [
        71863,
        71863
      ],
      "mapped",
      [
        71895
      ]
    ],
    [
      [
        71864,
        71864
      ],
      "mapped",
      [
        71896
      ]
    ],
    [
      [
        71865,
        71865
      ],
      "mapped",
      [
        71897
      ]
    ],
    [
      [
        71866,
        71866
      ],
      "mapped",
      [
        71898
      ]
    ],
    [
      [
        71867,
        71867
      ],
      "mapped",
      [
        71899
      ]
    ],
    [
      [
        71868,
        71868
      ],
      "mapped",
      [
        71900
      ]
    ],
    [
      [
        71869,
        71869
      ],
      "mapped",
      [
        71901
      ]
    ],
    [
      [
        71870,
        71870
      ],
      "mapped",
      [
        71902
      ]
    ],
    [
      [
        71871,
        71871
      ],
      "mapped",
      [
        71903
      ]
    ],
    [
      [
        71872,
        71913
      ],
      "valid"
    ],
    [
      [
        71914,
        71922
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        71923,
        71934
      ],
      "disallowed"
    ],
    [
      [
        71935,
        71935
      ],
      "valid"
    ],
    [
      [
        71936,
        72383
      ],
      "disallowed"
    ],
    [
      [
        72384,
        72440
      ],
      "valid"
    ],
    [
      [
        72441,
        73727
      ],
      "disallowed"
    ],
    [
      [
        73728,
        74606
      ],
      "valid"
    ],
    [
      [
        74607,
        74648
      ],
      "valid"
    ],
    [
      [
        74649,
        74649
      ],
      "valid"
    ],
    [
      [
        74650,
        74751
      ],
      "disallowed"
    ],
    [
      [
        74752,
        74850
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        74851,
        74862
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        74863,
        74863
      ],
      "disallowed"
    ],
    [
      [
        74864,
        74867
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        74868,
        74868
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        74869,
        74879
      ],
      "disallowed"
    ],
    [
      [
        74880,
        75075
      ],
      "valid"
    ],
    [
      [
        75076,
        77823
      ],
      "disallowed"
    ],
    [
      [
        77824,
        78894
      ],
      "valid"
    ],
    [
      [
        78895,
        82943
      ],
      "disallowed"
    ],
    [
      [
        82944,
        83526
      ],
      "valid"
    ],
    [
      [
        83527,
        92159
      ],
      "disallowed"
    ],
    [
      [
        92160,
        92728
      ],
      "valid"
    ],
    [
      [
        92729,
        92735
      ],
      "disallowed"
    ],
    [
      [
        92736,
        92766
      ],
      "valid"
    ],
    [
      [
        92767,
        92767
      ],
      "disallowed"
    ],
    [
      [
        92768,
        92777
      ],
      "valid"
    ],
    [
      [
        92778,
        92781
      ],
      "disallowed"
    ],
    [
      [
        92782,
        92783
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        92784,
        92879
      ],
      "disallowed"
    ],
    [
      [
        92880,
        92909
      ],
      "valid"
    ],
    [
      [
        92910,
        92911
      ],
      "disallowed"
    ],
    [
      [
        92912,
        92916
      ],
      "valid"
    ],
    [
      [
        92917,
        92917
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        92918,
        92927
      ],
      "disallowed"
    ],
    [
      [
        92928,
        92982
      ],
      "valid"
    ],
    [
      [
        92983,
        92991
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        92992,
        92995
      ],
      "valid"
    ],
    [
      [
        92996,
        92997
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        92998,
        93007
      ],
      "disallowed"
    ],
    [
      [
        93008,
        93017
      ],
      "valid"
    ],
    [
      [
        93018,
        93018
      ],
      "disallowed"
    ],
    [
      [
        93019,
        93025
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        93026,
        93026
      ],
      "disallowed"
    ],
    [
      [
        93027,
        93047
      ],
      "valid"
    ],
    [
      [
        93048,
        93052
      ],
      "disallowed"
    ],
    [
      [
        93053,
        93071
      ],
      "valid"
    ],
    [
      [
        93072,
        93951
      ],
      "disallowed"
    ],
    [
      [
        93952,
        94020
      ],
      "valid"
    ],
    [
      [
        94021,
        94031
      ],
      "disallowed"
    ],
    [
      [
        94032,
        94078
      ],
      "valid"
    ],
    [
      [
        94079,
        94094
      ],
      "disallowed"
    ],
    [
      [
        94095,
        94111
      ],
      "valid"
    ],
    [
      [
        94112,
        110591
      ],
      "disallowed"
    ],
    [
      [
        110592,
        110593
      ],
      "valid"
    ],
    [
      [
        110594,
        113663
      ],
      "disallowed"
    ],
    [
      [
        113664,
        113770
      ],
      "valid"
    ],
    [
      [
        113771,
        113775
      ],
      "disallowed"
    ],
    [
      [
        113776,
        113788
      ],
      "valid"
    ],
    [
      [
        113789,
        113791
      ],
      "disallowed"
    ],
    [
      [
        113792,
        113800
      ],
      "valid"
    ],
    [
      [
        113801,
        113807
      ],
      "disallowed"
    ],
    [
      [
        113808,
        113817
      ],
      "valid"
    ],
    [
      [
        113818,
        113819
      ],
      "disallowed"
    ],
    [
      [
        113820,
        113820
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        113821,
        113822
      ],
      "valid"
    ],
    [
      [
        113823,
        113823
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        113824,
        113827
      ],
      "ignored"
    ],
    [
      [
        113828,
        118783
      ],
      "disallowed"
    ],
    [
      [
        118784,
        119029
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119030,
        119039
      ],
      "disallowed"
    ],
    [
      [
        119040,
        119078
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119079,
        119080
      ],
      "disallowed"
    ],
    [
      [
        119081,
        119081
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119082,
        119133
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119134,
        119134
      ],
      "mapped",
      [
        119127,
        119141
      ]
    ],
    [
      [
        119135,
        119135
      ],
      "mapped",
      [
        119128,
        119141
      ]
    ],
    [
      [
        119136,
        119136
      ],
      "mapped",
      [
        119128,
        119141,
        119150
      ]
    ],
    [
      [
        119137,
        119137
      ],
      "mapped",
      [
        119128,
        119141,
        119151
      ]
    ],
    [
      [
        119138,
        119138
      ],
      "mapped",
      [
        119128,
        119141,
        119152
      ]
    ],
    [
      [
        119139,
        119139
      ],
      "mapped",
      [
        119128,
        119141,
        119153
      ]
    ],
    [
      [
        119140,
        119140
      ],
      "mapped",
      [
        119128,
        119141,
        119154
      ]
    ],
    [
      [
        119141,
        119154
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119155,
        119162
      ],
      "disallowed"
    ],
    [
      [
        119163,
        119226
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119227,
        119227
      ],
      "mapped",
      [
        119225,
        119141
      ]
    ],
    [
      [
        119228,
        119228
      ],
      "mapped",
      [
        119226,
        119141
      ]
    ],
    [
      [
        119229,
        119229
      ],
      "mapped",
      [
        119225,
        119141,
        119150
      ]
    ],
    [
      [
        119230,
        119230
      ],
      "mapped",
      [
        119226,
        119141,
        119150
      ]
    ],
    [
      [
        119231,
        119231
      ],
      "mapped",
      [
        119225,
        119141,
        119151
      ]
    ],
    [
      [
        119232,
        119232
      ],
      "mapped",
      [
        119226,
        119141,
        119151
      ]
    ],
    [
      [
        119233,
        119261
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119262,
        119272
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119273,
        119295
      ],
      "disallowed"
    ],
    [
      [
        119296,
        119365
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119366,
        119551
      ],
      "disallowed"
    ],
    [
      [
        119552,
        119638
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119639,
        119647
      ],
      "disallowed"
    ],
    [
      [
        119648,
        119665
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        119666,
        119807
      ],
      "disallowed"
    ],
    [
      [
        119808,
        119808
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119809,
        119809
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119810,
        119810
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119811,
        119811
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119812,
        119812
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119813,
        119813
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119814,
        119814
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119815,
        119815
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119816,
        119816
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119817,
        119817
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119818,
        119818
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119819,
        119819
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119820,
        119820
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119821,
        119821
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119822,
        119822
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119823,
        119823
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119824,
        119824
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119825,
        119825
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119826,
        119826
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119827,
        119827
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119828,
        119828
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119829,
        119829
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119830,
        119830
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119831,
        119831
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119832,
        119832
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119833,
        119833
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119834,
        119834
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119835,
        119835
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119836,
        119836
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119837,
        119837
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119838,
        119838
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119839,
        119839
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119840,
        119840
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119841,
        119841
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119842,
        119842
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119843,
        119843
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119844,
        119844
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119845,
        119845
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119846,
        119846
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119847,
        119847
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119848,
        119848
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119849,
        119849
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119850,
        119850
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119851,
        119851
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119852,
        119852
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119853,
        119853
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119854,
        119854
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119855,
        119855
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119856,
        119856
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119857,
        119857
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119858,
        119858
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119859,
        119859
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119860,
        119860
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119861,
        119861
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119862,
        119862
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119863,
        119863
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119864,
        119864
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119865,
        119865
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119866,
        119866
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119867,
        119867
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119868,
        119868
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119869,
        119869
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119870,
        119870
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119871,
        119871
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119872,
        119872
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119873,
        119873
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119874,
        119874
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119875,
        119875
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119876,
        119876
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119877,
        119877
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119878,
        119878
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119879,
        119879
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119880,
        119880
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119881,
        119881
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119882,
        119882
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119883,
        119883
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119884,
        119884
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119885,
        119885
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119886,
        119886
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119887,
        119887
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119888,
        119888
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119889,
        119889
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119890,
        119890
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119891,
        119891
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119892,
        119892
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119893,
        119893
      ],
      "disallowed"
    ],
    [
      [
        119894,
        119894
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119895,
        119895
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119896,
        119896
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119897,
        119897
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119898,
        119898
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119899,
        119899
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119900,
        119900
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119901,
        119901
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119902,
        119902
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119903,
        119903
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119904,
        119904
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119905,
        119905
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119906,
        119906
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119907,
        119907
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119908,
        119908
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119909,
        119909
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119910,
        119910
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119911,
        119911
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119912,
        119912
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119913,
        119913
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119914,
        119914
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119915,
        119915
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119916,
        119916
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119917,
        119917
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119918,
        119918
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119919,
        119919
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119920,
        119920
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119921,
        119921
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119922,
        119922
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119923,
        119923
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119924,
        119924
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119925,
        119925
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119926,
        119926
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119927,
        119927
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119928,
        119928
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119929,
        119929
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119930,
        119930
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119931,
        119931
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119932,
        119932
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119933,
        119933
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119934,
        119934
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119935,
        119935
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119936,
        119936
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119937,
        119937
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119938,
        119938
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119939,
        119939
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119940,
        119940
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119941,
        119941
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119942,
        119942
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        119943,
        119943
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119944,
        119944
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119945,
        119945
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119946,
        119946
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119947,
        119947
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119948,
        119948
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119949,
        119949
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        119950,
        119950
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        119951,
        119951
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119952,
        119952
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119953,
        119953
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119954,
        119954
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119955,
        119955
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        119956,
        119956
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119957,
        119957
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119958,
        119958
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119959,
        119959
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119960,
        119960
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119961,
        119961
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119962,
        119962
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119963,
        119963
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119964,
        119964
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119965,
        119965
      ],
      "disallowed"
    ],
    [
      [
        119966,
        119966
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119967,
        119967
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119968,
        119969
      ],
      "disallowed"
    ],
    [
      [
        119970,
        119970
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        119971,
        119972
      ],
      "disallowed"
    ],
    [
      [
        119973,
        119973
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        119974,
        119974
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        119975,
        119976
      ],
      "disallowed"
    ],
    [
      [
        119977,
        119977
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        119978,
        119978
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        119979,
        119979
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        119980,
        119980
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        119981,
        119981
      ],
      "disallowed"
    ],
    [
      [
        119982,
        119982
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        119983,
        119983
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        119984,
        119984
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        119985,
        119985
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        119986,
        119986
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        119987,
        119987
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        119988,
        119988
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        119989,
        119989
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        119990,
        119990
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        119991,
        119991
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        119992,
        119992
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        119993,
        119993
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        119994,
        119994
      ],
      "disallowed"
    ],
    [
      [
        119995,
        119995
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        119996,
        119996
      ],
      "disallowed"
    ],
    [
      [
        119997,
        119997
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        119998,
        119998
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        119999,
        119999
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        12e4,
        12e4
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120001,
        120001
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120002,
        120002
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120003,
        120003
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120004,
        120004
      ],
      "disallowed"
    ],
    [
      [
        120005,
        120005
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120006,
        120006
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120007,
        120007
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120008,
        120008
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120009,
        120009
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120010,
        120010
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120011,
        120011
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120012,
        120012
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120013,
        120013
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120014,
        120014
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120015,
        120015
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120016,
        120016
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120017,
        120017
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120018,
        120018
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120019,
        120019
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120020,
        120020
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120021,
        120021
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120022,
        120022
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120023,
        120023
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120024,
        120024
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120025,
        120025
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120026,
        120026
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120027,
        120027
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120028,
        120028
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120029,
        120029
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120030,
        120030
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120031,
        120031
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120032,
        120032
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120033,
        120033
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120034,
        120034
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120035,
        120035
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120036,
        120036
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120037,
        120037
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120038,
        120038
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120039,
        120039
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120040,
        120040
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120041,
        120041
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120042,
        120042
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120043,
        120043
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120044,
        120044
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120045,
        120045
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120046,
        120046
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120047,
        120047
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120048,
        120048
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120049,
        120049
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120050,
        120050
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120051,
        120051
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120052,
        120052
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120053,
        120053
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120054,
        120054
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120055,
        120055
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120056,
        120056
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120057,
        120057
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120058,
        120058
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120059,
        120059
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120060,
        120060
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120061,
        120061
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120062,
        120062
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120063,
        120063
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120064,
        120064
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120065,
        120065
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120066,
        120066
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120067,
        120067
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120068,
        120068
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120069,
        120069
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120070,
        120070
      ],
      "disallowed"
    ],
    [
      [
        120071,
        120071
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120072,
        120072
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120073,
        120073
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120074,
        120074
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120075,
        120076
      ],
      "disallowed"
    ],
    [
      [
        120077,
        120077
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120078,
        120078
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120079,
        120079
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120080,
        120080
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120081,
        120081
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120082,
        120082
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120083,
        120083
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120084,
        120084
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120085,
        120085
      ],
      "disallowed"
    ],
    [
      [
        120086,
        120086
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120087,
        120087
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120088,
        120088
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120089,
        120089
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120090,
        120090
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120091,
        120091
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120092,
        120092
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120093,
        120093
      ],
      "disallowed"
    ],
    [
      [
        120094,
        120094
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120095,
        120095
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120096,
        120096
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120097,
        120097
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120098,
        120098
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120099,
        120099
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120100,
        120100
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120101,
        120101
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120102,
        120102
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120103,
        120103
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120104,
        120104
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120105,
        120105
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120106,
        120106
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120107,
        120107
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120108,
        120108
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120109,
        120109
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120110,
        120110
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120111,
        120111
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120112,
        120112
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120113,
        120113
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120114,
        120114
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120115,
        120115
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120116,
        120116
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120117,
        120117
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120118,
        120118
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120119,
        120119
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120120,
        120120
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120121,
        120121
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120122,
        120122
      ],
      "disallowed"
    ],
    [
      [
        120123,
        120123
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120124,
        120124
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120125,
        120125
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120126,
        120126
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120127,
        120127
      ],
      "disallowed"
    ],
    [
      [
        120128,
        120128
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120129,
        120129
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120130,
        120130
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120131,
        120131
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120132,
        120132
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120133,
        120133
      ],
      "disallowed"
    ],
    [
      [
        120134,
        120134
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120135,
        120137
      ],
      "disallowed"
    ],
    [
      [
        120138,
        120138
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120139,
        120139
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120140,
        120140
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120141,
        120141
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120142,
        120142
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120143,
        120143
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120144,
        120144
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120145,
        120145
      ],
      "disallowed"
    ],
    [
      [
        120146,
        120146
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120147,
        120147
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120148,
        120148
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120149,
        120149
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120150,
        120150
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120151,
        120151
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120152,
        120152
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120153,
        120153
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120154,
        120154
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120155,
        120155
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120156,
        120156
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120157,
        120157
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120158,
        120158
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120159,
        120159
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120160,
        120160
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120161,
        120161
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120162,
        120162
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120163,
        120163
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120164,
        120164
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120165,
        120165
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120166,
        120166
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120167,
        120167
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120168,
        120168
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120169,
        120169
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120170,
        120170
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120171,
        120171
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120172,
        120172
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120173,
        120173
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120174,
        120174
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120175,
        120175
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120176,
        120176
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120177,
        120177
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120178,
        120178
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120179,
        120179
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120180,
        120180
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120181,
        120181
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120182,
        120182
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120183,
        120183
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120184,
        120184
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120185,
        120185
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120186,
        120186
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120187,
        120187
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120188,
        120188
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120189,
        120189
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120190,
        120190
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120191,
        120191
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120192,
        120192
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120193,
        120193
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120194,
        120194
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120195,
        120195
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120196,
        120196
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120197,
        120197
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120198,
        120198
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120199,
        120199
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120200,
        120200
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120201,
        120201
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120202,
        120202
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120203,
        120203
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120204,
        120204
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120205,
        120205
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120206,
        120206
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120207,
        120207
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120208,
        120208
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120209,
        120209
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120210,
        120210
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120211,
        120211
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120212,
        120212
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120213,
        120213
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120214,
        120214
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120215,
        120215
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120216,
        120216
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120217,
        120217
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120218,
        120218
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120219,
        120219
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120220,
        120220
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120221,
        120221
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120222,
        120222
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120223,
        120223
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120224,
        120224
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120225,
        120225
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120226,
        120226
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120227,
        120227
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120228,
        120228
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120229,
        120229
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120230,
        120230
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120231,
        120231
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120232,
        120232
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120233,
        120233
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120234,
        120234
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120235,
        120235
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120236,
        120236
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120237,
        120237
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120238,
        120238
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120239,
        120239
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120240,
        120240
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120241,
        120241
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120242,
        120242
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120243,
        120243
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120244,
        120244
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120245,
        120245
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120246,
        120246
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120247,
        120247
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120248,
        120248
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120249,
        120249
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120250,
        120250
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120251,
        120251
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120252,
        120252
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120253,
        120253
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120254,
        120254
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120255,
        120255
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120256,
        120256
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120257,
        120257
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120258,
        120258
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120259,
        120259
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120260,
        120260
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120261,
        120261
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120262,
        120262
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120263,
        120263
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120264,
        120264
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120265,
        120265
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120266,
        120266
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120267,
        120267
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120268,
        120268
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120269,
        120269
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120270,
        120270
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120271,
        120271
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120272,
        120272
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120273,
        120273
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120274,
        120274
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120275,
        120275
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120276,
        120276
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120277,
        120277
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120278,
        120278
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120279,
        120279
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120280,
        120280
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120281,
        120281
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120282,
        120282
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120283,
        120283
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120284,
        120284
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120285,
        120285
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120286,
        120286
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120287,
        120287
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120288,
        120288
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120289,
        120289
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120290,
        120290
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120291,
        120291
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120292,
        120292
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120293,
        120293
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120294,
        120294
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120295,
        120295
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120296,
        120296
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120297,
        120297
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120298,
        120298
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120299,
        120299
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120300,
        120300
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120301,
        120301
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120302,
        120302
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120303,
        120303
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120304,
        120304
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120305,
        120305
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120306,
        120306
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120307,
        120307
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120308,
        120308
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120309,
        120309
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120310,
        120310
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120311,
        120311
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120312,
        120312
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120313,
        120313
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120314,
        120314
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120315,
        120315
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120316,
        120316
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120317,
        120317
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120318,
        120318
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120319,
        120319
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120320,
        120320
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120321,
        120321
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120322,
        120322
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120323,
        120323
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120324,
        120324
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120325,
        120325
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120326,
        120326
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120327,
        120327
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120328,
        120328
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120329,
        120329
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120330,
        120330
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120331,
        120331
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120332,
        120332
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120333,
        120333
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120334,
        120334
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120335,
        120335
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120336,
        120336
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120337,
        120337
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120338,
        120338
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120339,
        120339
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120340,
        120340
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120341,
        120341
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120342,
        120342
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120343,
        120343
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120344,
        120344
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120345,
        120345
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120346,
        120346
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120347,
        120347
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120348,
        120348
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120349,
        120349
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120350,
        120350
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120351,
        120351
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120352,
        120352
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120353,
        120353
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120354,
        120354
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120355,
        120355
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120356,
        120356
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120357,
        120357
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120358,
        120358
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120359,
        120359
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120360,
        120360
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120361,
        120361
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120362,
        120362
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120363,
        120363
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120364,
        120364
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120365,
        120365
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120366,
        120366
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120367,
        120367
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120368,
        120368
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120369,
        120369
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120370,
        120370
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120371,
        120371
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120372,
        120372
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120373,
        120373
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120374,
        120374
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120375,
        120375
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120376,
        120376
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120377,
        120377
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120378,
        120378
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120379,
        120379
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120380,
        120380
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120381,
        120381
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120382,
        120382
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120383,
        120383
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120384,
        120384
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120385,
        120385
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120386,
        120386
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120387,
        120387
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120388,
        120388
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120389,
        120389
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120390,
        120390
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120391,
        120391
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120392,
        120392
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120393,
        120393
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120394,
        120394
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120395,
        120395
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120396,
        120396
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120397,
        120397
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120398,
        120398
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120399,
        120399
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120400,
        120400
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120401,
        120401
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120402,
        120402
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120403,
        120403
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120404,
        120404
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120405,
        120405
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120406,
        120406
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120407,
        120407
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120408,
        120408
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120409,
        120409
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120410,
        120410
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120411,
        120411
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120412,
        120412
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120413,
        120413
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120414,
        120414
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120415,
        120415
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120416,
        120416
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120417,
        120417
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120418,
        120418
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120419,
        120419
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120420,
        120420
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120421,
        120421
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120422,
        120422
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120423,
        120423
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120424,
        120424
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120425,
        120425
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120426,
        120426
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120427,
        120427
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120428,
        120428
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120429,
        120429
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120430,
        120430
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120431,
        120431
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120432,
        120432
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120433,
        120433
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120434,
        120434
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120435,
        120435
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120436,
        120436
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120437,
        120437
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120438,
        120438
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120439,
        120439
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120440,
        120440
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120441,
        120441
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120442,
        120442
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120443,
        120443
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120444,
        120444
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120445,
        120445
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120446,
        120446
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120447,
        120447
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120448,
        120448
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120449,
        120449
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120450,
        120450
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120451,
        120451
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120452,
        120452
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120453,
        120453
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120454,
        120454
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120455,
        120455
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120456,
        120456
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120457,
        120457
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120458,
        120458
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        120459,
        120459
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        120460,
        120460
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        120461,
        120461
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        120462,
        120462
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        120463,
        120463
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        120464,
        120464
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        120465,
        120465
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        120466,
        120466
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        120467,
        120467
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        120468,
        120468
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        120469,
        120469
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        120470,
        120470
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        120471,
        120471
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        120472,
        120472
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        120473,
        120473
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        120474,
        120474
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        120475,
        120475
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        120476,
        120476
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        120477,
        120477
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        120478,
        120478
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        120479,
        120479
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        120480,
        120480
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        120481,
        120481
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        120482,
        120482
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        120483,
        120483
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        120484,
        120484
      ],
      "mapped",
      [
        305
      ]
    ],
    [
      [
        120485,
        120485
      ],
      "mapped",
      [
        567
      ]
    ],
    [
      [
        120486,
        120487
      ],
      "disallowed"
    ],
    [
      [
        120488,
        120488
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120489,
        120489
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120490,
        120490
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120491,
        120491
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120492,
        120492
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120493,
        120493
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120494,
        120494
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120495,
        120495
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120496,
        120496
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120497,
        120497
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120498,
        120498
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120499,
        120499
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120500,
        120500
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120501,
        120501
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120502,
        120502
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120503,
        120503
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120504,
        120504
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120505,
        120505
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120506,
        120506
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120507,
        120507
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120508,
        120508
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120509,
        120509
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120510,
        120510
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120511,
        120511
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120512,
        120512
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120513,
        120513
      ],
      "mapped",
      [
        8711
      ]
    ],
    [
      [
        120514,
        120514
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120515,
        120515
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120516,
        120516
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120517,
        120517
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120518,
        120518
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120519,
        120519
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120520,
        120520
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120521,
        120521
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120522,
        120522
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120523,
        120523
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120524,
        120524
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120525,
        120525
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120526,
        120526
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120527,
        120527
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120528,
        120528
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120529,
        120529
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120530,
        120530
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120531,
        120532
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120533,
        120533
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120534,
        120534
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120535,
        120535
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120536,
        120536
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120537,
        120537
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120538,
        120538
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120539,
        120539
      ],
      "mapped",
      [
        8706
      ]
    ],
    [
      [
        120540,
        120540
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120541,
        120541
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120542,
        120542
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120543,
        120543
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120544,
        120544
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120545,
        120545
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120546,
        120546
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120547,
        120547
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120548,
        120548
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120549,
        120549
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120550,
        120550
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120551,
        120551
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120552,
        120552
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120553,
        120553
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120554,
        120554
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120555,
        120555
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120556,
        120556
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120557,
        120557
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120558,
        120558
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120559,
        120559
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120560,
        120560
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120561,
        120561
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120562,
        120562
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120563,
        120563
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120564,
        120564
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120565,
        120565
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120566,
        120566
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120567,
        120567
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120568,
        120568
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120569,
        120569
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120570,
        120570
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120571,
        120571
      ],
      "mapped",
      [
        8711
      ]
    ],
    [
      [
        120572,
        120572
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120573,
        120573
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120574,
        120574
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120575,
        120575
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120576,
        120576
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120577,
        120577
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120578,
        120578
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120579,
        120579
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120580,
        120580
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120581,
        120581
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120582,
        120582
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120583,
        120583
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120584,
        120584
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120585,
        120585
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120586,
        120586
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120587,
        120587
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120588,
        120588
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120589,
        120590
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120591,
        120591
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120592,
        120592
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120593,
        120593
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120594,
        120594
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120595,
        120595
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120596,
        120596
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120597,
        120597
      ],
      "mapped",
      [
        8706
      ]
    ],
    [
      [
        120598,
        120598
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120599,
        120599
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120600,
        120600
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120601,
        120601
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120602,
        120602
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120603,
        120603
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120604,
        120604
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120605,
        120605
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120606,
        120606
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120607,
        120607
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120608,
        120608
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120609,
        120609
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120610,
        120610
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120611,
        120611
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120612,
        120612
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120613,
        120613
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120614,
        120614
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120615,
        120615
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120616,
        120616
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120617,
        120617
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120618,
        120618
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120619,
        120619
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120620,
        120620
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120621,
        120621
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120622,
        120622
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120623,
        120623
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120624,
        120624
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120625,
        120625
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120626,
        120626
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120627,
        120627
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120628,
        120628
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120629,
        120629
      ],
      "mapped",
      [
        8711
      ]
    ],
    [
      [
        120630,
        120630
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120631,
        120631
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120632,
        120632
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120633,
        120633
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120634,
        120634
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120635,
        120635
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120636,
        120636
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120637,
        120637
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120638,
        120638
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120639,
        120639
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120640,
        120640
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120641,
        120641
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120642,
        120642
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120643,
        120643
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120644,
        120644
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120645,
        120645
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120646,
        120646
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120647,
        120648
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120649,
        120649
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120650,
        120650
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120651,
        120651
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120652,
        120652
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120653,
        120653
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120654,
        120654
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120655,
        120655
      ],
      "mapped",
      [
        8706
      ]
    ],
    [
      [
        120656,
        120656
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120657,
        120657
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120658,
        120658
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120659,
        120659
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120660,
        120660
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120661,
        120661
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120662,
        120662
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120663,
        120663
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120664,
        120664
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120665,
        120665
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120666,
        120666
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120667,
        120667
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120668,
        120668
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120669,
        120669
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120670,
        120670
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120671,
        120671
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120672,
        120672
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120673,
        120673
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120674,
        120674
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120675,
        120675
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120676,
        120676
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120677,
        120677
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120678,
        120678
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120679,
        120679
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120680,
        120680
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120681,
        120681
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120682,
        120682
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120683,
        120683
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120684,
        120684
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120685,
        120685
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120686,
        120686
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120687,
        120687
      ],
      "mapped",
      [
        8711
      ]
    ],
    [
      [
        120688,
        120688
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120689,
        120689
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120690,
        120690
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120691,
        120691
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120692,
        120692
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120693,
        120693
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120694,
        120694
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120695,
        120695
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120696,
        120696
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120697,
        120697
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120698,
        120698
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120699,
        120699
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120700,
        120700
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120701,
        120701
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120702,
        120702
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120703,
        120703
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120704,
        120704
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120705,
        120706
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120707,
        120707
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120708,
        120708
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120709,
        120709
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120710,
        120710
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120711,
        120711
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120712,
        120712
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120713,
        120713
      ],
      "mapped",
      [
        8706
      ]
    ],
    [
      [
        120714,
        120714
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120715,
        120715
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120716,
        120716
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120717,
        120717
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120718,
        120718
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120719,
        120719
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120720,
        120720
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120721,
        120721
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120722,
        120722
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120723,
        120723
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120724,
        120724
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120725,
        120725
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120726,
        120726
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120727,
        120727
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120728,
        120728
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120729,
        120729
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120730,
        120730
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120731,
        120731
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120732,
        120732
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120733,
        120733
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120734,
        120734
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120735,
        120735
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120736,
        120736
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120737,
        120737
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120738,
        120738
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120739,
        120739
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120740,
        120740
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120741,
        120741
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120742,
        120742
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120743,
        120743
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120744,
        120744
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120745,
        120745
      ],
      "mapped",
      [
        8711
      ]
    ],
    [
      [
        120746,
        120746
      ],
      "mapped",
      [
        945
      ]
    ],
    [
      [
        120747,
        120747
      ],
      "mapped",
      [
        946
      ]
    ],
    [
      [
        120748,
        120748
      ],
      "mapped",
      [
        947
      ]
    ],
    [
      [
        120749,
        120749
      ],
      "mapped",
      [
        948
      ]
    ],
    [
      [
        120750,
        120750
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120751,
        120751
      ],
      "mapped",
      [
        950
      ]
    ],
    [
      [
        120752,
        120752
      ],
      "mapped",
      [
        951
      ]
    ],
    [
      [
        120753,
        120753
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120754,
        120754
      ],
      "mapped",
      [
        953
      ]
    ],
    [
      [
        120755,
        120755
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120756,
        120756
      ],
      "mapped",
      [
        955
      ]
    ],
    [
      [
        120757,
        120757
      ],
      "mapped",
      [
        956
      ]
    ],
    [
      [
        120758,
        120758
      ],
      "mapped",
      [
        957
      ]
    ],
    [
      [
        120759,
        120759
      ],
      "mapped",
      [
        958
      ]
    ],
    [
      [
        120760,
        120760
      ],
      "mapped",
      [
        959
      ]
    ],
    [
      [
        120761,
        120761
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120762,
        120762
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120763,
        120764
      ],
      "mapped",
      [
        963
      ]
    ],
    [
      [
        120765,
        120765
      ],
      "mapped",
      [
        964
      ]
    ],
    [
      [
        120766,
        120766
      ],
      "mapped",
      [
        965
      ]
    ],
    [
      [
        120767,
        120767
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120768,
        120768
      ],
      "mapped",
      [
        967
      ]
    ],
    [
      [
        120769,
        120769
      ],
      "mapped",
      [
        968
      ]
    ],
    [
      [
        120770,
        120770
      ],
      "mapped",
      [
        969
      ]
    ],
    [
      [
        120771,
        120771
      ],
      "mapped",
      [
        8706
      ]
    ],
    [
      [
        120772,
        120772
      ],
      "mapped",
      [
        949
      ]
    ],
    [
      [
        120773,
        120773
      ],
      "mapped",
      [
        952
      ]
    ],
    [
      [
        120774,
        120774
      ],
      "mapped",
      [
        954
      ]
    ],
    [
      [
        120775,
        120775
      ],
      "mapped",
      [
        966
      ]
    ],
    [
      [
        120776,
        120776
      ],
      "mapped",
      [
        961
      ]
    ],
    [
      [
        120777,
        120777
      ],
      "mapped",
      [
        960
      ]
    ],
    [
      [
        120778,
        120779
      ],
      "mapped",
      [
        989
      ]
    ],
    [
      [
        120780,
        120781
      ],
      "disallowed"
    ],
    [
      [
        120782,
        120782
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        120783,
        120783
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        120784,
        120784
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        120785,
        120785
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        120786,
        120786
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        120787,
        120787
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        120788,
        120788
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        120789,
        120789
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        120790,
        120790
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        120791,
        120791
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        120792,
        120792
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        120793,
        120793
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        120794,
        120794
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        120795,
        120795
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        120796,
        120796
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        120797,
        120797
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        120798,
        120798
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        120799,
        120799
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        120800,
        120800
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        120801,
        120801
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        120802,
        120802
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        120803,
        120803
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        120804,
        120804
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        120805,
        120805
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        120806,
        120806
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        120807,
        120807
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        120808,
        120808
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        120809,
        120809
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        120810,
        120810
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        120811,
        120811
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        120812,
        120812
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        120813,
        120813
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        120814,
        120814
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        120815,
        120815
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        120816,
        120816
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        120817,
        120817
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        120818,
        120818
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        120819,
        120819
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        120820,
        120820
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        120821,
        120821
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        120822,
        120822
      ],
      "mapped",
      [
        48
      ]
    ],
    [
      [
        120823,
        120823
      ],
      "mapped",
      [
        49
      ]
    ],
    [
      [
        120824,
        120824
      ],
      "mapped",
      [
        50
      ]
    ],
    [
      [
        120825,
        120825
      ],
      "mapped",
      [
        51
      ]
    ],
    [
      [
        120826,
        120826
      ],
      "mapped",
      [
        52
      ]
    ],
    [
      [
        120827,
        120827
      ],
      "mapped",
      [
        53
      ]
    ],
    [
      [
        120828,
        120828
      ],
      "mapped",
      [
        54
      ]
    ],
    [
      [
        120829,
        120829
      ],
      "mapped",
      [
        55
      ]
    ],
    [
      [
        120830,
        120830
      ],
      "mapped",
      [
        56
      ]
    ],
    [
      [
        120831,
        120831
      ],
      "mapped",
      [
        57
      ]
    ],
    [
      [
        120832,
        121343
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        121344,
        121398
      ],
      "valid"
    ],
    [
      [
        121399,
        121402
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        121403,
        121452
      ],
      "valid"
    ],
    [
      [
        121453,
        121460
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        121461,
        121461
      ],
      "valid"
    ],
    [
      [
        121462,
        121475
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        121476,
        121476
      ],
      "valid"
    ],
    [
      [
        121477,
        121483
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        121484,
        121498
      ],
      "disallowed"
    ],
    [
      [
        121499,
        121503
      ],
      "valid"
    ],
    [
      [
        121504,
        121504
      ],
      "disallowed"
    ],
    [
      [
        121505,
        121519
      ],
      "valid"
    ],
    [
      [
        121520,
        124927
      ],
      "disallowed"
    ],
    [
      [
        124928,
        125124
      ],
      "valid"
    ],
    [
      [
        125125,
        125126
      ],
      "disallowed"
    ],
    [
      [
        125127,
        125135
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        125136,
        125142
      ],
      "valid"
    ],
    [
      [
        125143,
        126463
      ],
      "disallowed"
    ],
    [
      [
        126464,
        126464
      ],
      "mapped",
      [
        1575
      ]
    ],
    [
      [
        126465,
        126465
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        126466,
        126466
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126467,
        126467
      ],
      "mapped",
      [
        1583
      ]
    ],
    [
      [
        126468,
        126468
      ],
      "disallowed"
    ],
    [
      [
        126469,
        126469
      ],
      "mapped",
      [
        1608
      ]
    ],
    [
      [
        126470,
        126470
      ],
      "mapped",
      [
        1586
      ]
    ],
    [
      [
        126471,
        126471
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126472,
        126472
      ],
      "mapped",
      [
        1591
      ]
    ],
    [
      [
        126473,
        126473
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126474,
        126474
      ],
      "mapped",
      [
        1603
      ]
    ],
    [
      [
        126475,
        126475
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        126476,
        126476
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        126477,
        126477
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126478,
        126478
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126479,
        126479
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126480,
        126480
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        126481,
        126481
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126482,
        126482
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126483,
        126483
      ],
      "mapped",
      [
        1585
      ]
    ],
    [
      [
        126484,
        126484
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126485,
        126485
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        126486,
        126486
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        126487,
        126487
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126488,
        126488
      ],
      "mapped",
      [
        1584
      ]
    ],
    [
      [
        126489,
        126489
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126490,
        126490
      ],
      "mapped",
      [
        1592
      ]
    ],
    [
      [
        126491,
        126491
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126492,
        126492
      ],
      "mapped",
      [
        1646
      ]
    ],
    [
      [
        126493,
        126493
      ],
      "mapped",
      [
        1722
      ]
    ],
    [
      [
        126494,
        126494
      ],
      "mapped",
      [
        1697
      ]
    ],
    [
      [
        126495,
        126495
      ],
      "mapped",
      [
        1647
      ]
    ],
    [
      [
        126496,
        126496
      ],
      "disallowed"
    ],
    [
      [
        126497,
        126497
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        126498,
        126498
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126499,
        126499
      ],
      "disallowed"
    ],
    [
      [
        126500,
        126500
      ],
      "mapped",
      [
        1607
      ]
    ],
    [
      [
        126501,
        126502
      ],
      "disallowed"
    ],
    [
      [
        126503,
        126503
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126504,
        126504
      ],
      "disallowed"
    ],
    [
      [
        126505,
        126505
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126506,
        126506
      ],
      "mapped",
      [
        1603
      ]
    ],
    [
      [
        126507,
        126507
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        126508,
        126508
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        126509,
        126509
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126510,
        126510
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126511,
        126511
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126512,
        126512
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        126513,
        126513
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126514,
        126514
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126515,
        126515
      ],
      "disallowed"
    ],
    [
      [
        126516,
        126516
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126517,
        126517
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        126518,
        126518
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        126519,
        126519
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126520,
        126520
      ],
      "disallowed"
    ],
    [
      [
        126521,
        126521
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126522,
        126522
      ],
      "disallowed"
    ],
    [
      [
        126523,
        126523
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126524,
        126529
      ],
      "disallowed"
    ],
    [
      [
        126530,
        126530
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126531,
        126534
      ],
      "disallowed"
    ],
    [
      [
        126535,
        126535
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126536,
        126536
      ],
      "disallowed"
    ],
    [
      [
        126537,
        126537
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126538,
        126538
      ],
      "disallowed"
    ],
    [
      [
        126539,
        126539
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        126540,
        126540
      ],
      "disallowed"
    ],
    [
      [
        126541,
        126541
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126542,
        126542
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126543,
        126543
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126544,
        126544
      ],
      "disallowed"
    ],
    [
      [
        126545,
        126545
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126546,
        126546
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126547,
        126547
      ],
      "disallowed"
    ],
    [
      [
        126548,
        126548
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126549,
        126550
      ],
      "disallowed"
    ],
    [
      [
        126551,
        126551
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126552,
        126552
      ],
      "disallowed"
    ],
    [
      [
        126553,
        126553
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126554,
        126554
      ],
      "disallowed"
    ],
    [
      [
        126555,
        126555
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126556,
        126556
      ],
      "disallowed"
    ],
    [
      [
        126557,
        126557
      ],
      "mapped",
      [
        1722
      ]
    ],
    [
      [
        126558,
        126558
      ],
      "disallowed"
    ],
    [
      [
        126559,
        126559
      ],
      "mapped",
      [
        1647
      ]
    ],
    [
      [
        126560,
        126560
      ],
      "disallowed"
    ],
    [
      [
        126561,
        126561
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        126562,
        126562
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126563,
        126563
      ],
      "disallowed"
    ],
    [
      [
        126564,
        126564
      ],
      "mapped",
      [
        1607
      ]
    ],
    [
      [
        126565,
        126566
      ],
      "disallowed"
    ],
    [
      [
        126567,
        126567
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126568,
        126568
      ],
      "mapped",
      [
        1591
      ]
    ],
    [
      [
        126569,
        126569
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126570,
        126570
      ],
      "mapped",
      [
        1603
      ]
    ],
    [
      [
        126571,
        126571
      ],
      "disallowed"
    ],
    [
      [
        126572,
        126572
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        126573,
        126573
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126574,
        126574
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126575,
        126575
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126576,
        126576
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        126577,
        126577
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126578,
        126578
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126579,
        126579
      ],
      "disallowed"
    ],
    [
      [
        126580,
        126580
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126581,
        126581
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        126582,
        126582
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        126583,
        126583
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126584,
        126584
      ],
      "disallowed"
    ],
    [
      [
        126585,
        126585
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126586,
        126586
      ],
      "mapped",
      [
        1592
      ]
    ],
    [
      [
        126587,
        126587
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126588,
        126588
      ],
      "mapped",
      [
        1646
      ]
    ],
    [
      [
        126589,
        126589
      ],
      "disallowed"
    ],
    [
      [
        126590,
        126590
      ],
      "mapped",
      [
        1697
      ]
    ],
    [
      [
        126591,
        126591
      ],
      "disallowed"
    ],
    [
      [
        126592,
        126592
      ],
      "mapped",
      [
        1575
      ]
    ],
    [
      [
        126593,
        126593
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        126594,
        126594
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126595,
        126595
      ],
      "mapped",
      [
        1583
      ]
    ],
    [
      [
        126596,
        126596
      ],
      "mapped",
      [
        1607
      ]
    ],
    [
      [
        126597,
        126597
      ],
      "mapped",
      [
        1608
      ]
    ],
    [
      [
        126598,
        126598
      ],
      "mapped",
      [
        1586
      ]
    ],
    [
      [
        126599,
        126599
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126600,
        126600
      ],
      "mapped",
      [
        1591
      ]
    ],
    [
      [
        126601,
        126601
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126602,
        126602
      ],
      "disallowed"
    ],
    [
      [
        126603,
        126603
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        126604,
        126604
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        126605,
        126605
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126606,
        126606
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126607,
        126607
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126608,
        126608
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        126609,
        126609
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126610,
        126610
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126611,
        126611
      ],
      "mapped",
      [
        1585
      ]
    ],
    [
      [
        126612,
        126612
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126613,
        126613
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        126614,
        126614
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        126615,
        126615
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126616,
        126616
      ],
      "mapped",
      [
        1584
      ]
    ],
    [
      [
        126617,
        126617
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126618,
        126618
      ],
      "mapped",
      [
        1592
      ]
    ],
    [
      [
        126619,
        126619
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126620,
        126624
      ],
      "disallowed"
    ],
    [
      [
        126625,
        126625
      ],
      "mapped",
      [
        1576
      ]
    ],
    [
      [
        126626,
        126626
      ],
      "mapped",
      [
        1580
      ]
    ],
    [
      [
        126627,
        126627
      ],
      "mapped",
      [
        1583
      ]
    ],
    [
      [
        126628,
        126628
      ],
      "disallowed"
    ],
    [
      [
        126629,
        126629
      ],
      "mapped",
      [
        1608
      ]
    ],
    [
      [
        126630,
        126630
      ],
      "mapped",
      [
        1586
      ]
    ],
    [
      [
        126631,
        126631
      ],
      "mapped",
      [
        1581
      ]
    ],
    [
      [
        126632,
        126632
      ],
      "mapped",
      [
        1591
      ]
    ],
    [
      [
        126633,
        126633
      ],
      "mapped",
      [
        1610
      ]
    ],
    [
      [
        126634,
        126634
      ],
      "disallowed"
    ],
    [
      [
        126635,
        126635
      ],
      "mapped",
      [
        1604
      ]
    ],
    [
      [
        126636,
        126636
      ],
      "mapped",
      [
        1605
      ]
    ],
    [
      [
        126637,
        126637
      ],
      "mapped",
      [
        1606
      ]
    ],
    [
      [
        126638,
        126638
      ],
      "mapped",
      [
        1587
      ]
    ],
    [
      [
        126639,
        126639
      ],
      "mapped",
      [
        1593
      ]
    ],
    [
      [
        126640,
        126640
      ],
      "mapped",
      [
        1601
      ]
    ],
    [
      [
        126641,
        126641
      ],
      "mapped",
      [
        1589
      ]
    ],
    [
      [
        126642,
        126642
      ],
      "mapped",
      [
        1602
      ]
    ],
    [
      [
        126643,
        126643
      ],
      "mapped",
      [
        1585
      ]
    ],
    [
      [
        126644,
        126644
      ],
      "mapped",
      [
        1588
      ]
    ],
    [
      [
        126645,
        126645
      ],
      "mapped",
      [
        1578
      ]
    ],
    [
      [
        126646,
        126646
      ],
      "mapped",
      [
        1579
      ]
    ],
    [
      [
        126647,
        126647
      ],
      "mapped",
      [
        1582
      ]
    ],
    [
      [
        126648,
        126648
      ],
      "mapped",
      [
        1584
      ]
    ],
    [
      [
        126649,
        126649
      ],
      "mapped",
      [
        1590
      ]
    ],
    [
      [
        126650,
        126650
      ],
      "mapped",
      [
        1592
      ]
    ],
    [
      [
        126651,
        126651
      ],
      "mapped",
      [
        1594
      ]
    ],
    [
      [
        126652,
        126703
      ],
      "disallowed"
    ],
    [
      [
        126704,
        126705
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        126706,
        126975
      ],
      "disallowed"
    ],
    [
      [
        126976,
        127019
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127020,
        127023
      ],
      "disallowed"
    ],
    [
      [
        127024,
        127123
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127124,
        127135
      ],
      "disallowed"
    ],
    [
      [
        127136,
        127150
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127151,
        127152
      ],
      "disallowed"
    ],
    [
      [
        127153,
        127166
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127167,
        127167
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127168,
        127168
      ],
      "disallowed"
    ],
    [
      [
        127169,
        127183
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127184,
        127184
      ],
      "disallowed"
    ],
    [
      [
        127185,
        127199
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127200,
        127221
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127222,
        127231
      ],
      "disallowed"
    ],
    [
      [
        127232,
        127232
      ],
      "disallowed"
    ],
    [
      [
        127233,
        127233
      ],
      "disallowed_STD3_mapped",
      [
        48,
        44
      ]
    ],
    [
      [
        127234,
        127234
      ],
      "disallowed_STD3_mapped",
      [
        49,
        44
      ]
    ],
    [
      [
        127235,
        127235
      ],
      "disallowed_STD3_mapped",
      [
        50,
        44
      ]
    ],
    [
      [
        127236,
        127236
      ],
      "disallowed_STD3_mapped",
      [
        51,
        44
      ]
    ],
    [
      [
        127237,
        127237
      ],
      "disallowed_STD3_mapped",
      [
        52,
        44
      ]
    ],
    [
      [
        127238,
        127238
      ],
      "disallowed_STD3_mapped",
      [
        53,
        44
      ]
    ],
    [
      [
        127239,
        127239
      ],
      "disallowed_STD3_mapped",
      [
        54,
        44
      ]
    ],
    [
      [
        127240,
        127240
      ],
      "disallowed_STD3_mapped",
      [
        55,
        44
      ]
    ],
    [
      [
        127241,
        127241
      ],
      "disallowed_STD3_mapped",
      [
        56,
        44
      ]
    ],
    [
      [
        127242,
        127242
      ],
      "disallowed_STD3_mapped",
      [
        57,
        44
      ]
    ],
    [
      [
        127243,
        127244
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127245,
        127247
      ],
      "disallowed"
    ],
    [
      [
        127248,
        127248
      ],
      "disallowed_STD3_mapped",
      [
        40,
        97,
        41
      ]
    ],
    [
      [
        127249,
        127249
      ],
      "disallowed_STD3_mapped",
      [
        40,
        98,
        41
      ]
    ],
    [
      [
        127250,
        127250
      ],
      "disallowed_STD3_mapped",
      [
        40,
        99,
        41
      ]
    ],
    [
      [
        127251,
        127251
      ],
      "disallowed_STD3_mapped",
      [
        40,
        100,
        41
      ]
    ],
    [
      [
        127252,
        127252
      ],
      "disallowed_STD3_mapped",
      [
        40,
        101,
        41
      ]
    ],
    [
      [
        127253,
        127253
      ],
      "disallowed_STD3_mapped",
      [
        40,
        102,
        41
      ]
    ],
    [
      [
        127254,
        127254
      ],
      "disallowed_STD3_mapped",
      [
        40,
        103,
        41
      ]
    ],
    [
      [
        127255,
        127255
      ],
      "disallowed_STD3_mapped",
      [
        40,
        104,
        41
      ]
    ],
    [
      [
        127256,
        127256
      ],
      "disallowed_STD3_mapped",
      [
        40,
        105,
        41
      ]
    ],
    [
      [
        127257,
        127257
      ],
      "disallowed_STD3_mapped",
      [
        40,
        106,
        41
      ]
    ],
    [
      [
        127258,
        127258
      ],
      "disallowed_STD3_mapped",
      [
        40,
        107,
        41
      ]
    ],
    [
      [
        127259,
        127259
      ],
      "disallowed_STD3_mapped",
      [
        40,
        108,
        41
      ]
    ],
    [
      [
        127260,
        127260
      ],
      "disallowed_STD3_mapped",
      [
        40,
        109,
        41
      ]
    ],
    [
      [
        127261,
        127261
      ],
      "disallowed_STD3_mapped",
      [
        40,
        110,
        41
      ]
    ],
    [
      [
        127262,
        127262
      ],
      "disallowed_STD3_mapped",
      [
        40,
        111,
        41
      ]
    ],
    [
      [
        127263,
        127263
      ],
      "disallowed_STD3_mapped",
      [
        40,
        112,
        41
      ]
    ],
    [
      [
        127264,
        127264
      ],
      "disallowed_STD3_mapped",
      [
        40,
        113,
        41
      ]
    ],
    [
      [
        127265,
        127265
      ],
      "disallowed_STD3_mapped",
      [
        40,
        114,
        41
      ]
    ],
    [
      [
        127266,
        127266
      ],
      "disallowed_STD3_mapped",
      [
        40,
        115,
        41
      ]
    ],
    [
      [
        127267,
        127267
      ],
      "disallowed_STD3_mapped",
      [
        40,
        116,
        41
      ]
    ],
    [
      [
        127268,
        127268
      ],
      "disallowed_STD3_mapped",
      [
        40,
        117,
        41
      ]
    ],
    [
      [
        127269,
        127269
      ],
      "disallowed_STD3_mapped",
      [
        40,
        118,
        41
      ]
    ],
    [
      [
        127270,
        127270
      ],
      "disallowed_STD3_mapped",
      [
        40,
        119,
        41
      ]
    ],
    [
      [
        127271,
        127271
      ],
      "disallowed_STD3_mapped",
      [
        40,
        120,
        41
      ]
    ],
    [
      [
        127272,
        127272
      ],
      "disallowed_STD3_mapped",
      [
        40,
        121,
        41
      ]
    ],
    [
      [
        127273,
        127273
      ],
      "disallowed_STD3_mapped",
      [
        40,
        122,
        41
      ]
    ],
    [
      [
        127274,
        127274
      ],
      "mapped",
      [
        12308,
        115,
        12309
      ]
    ],
    [
      [
        127275,
        127275
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        127276,
        127276
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        127277,
        127277
      ],
      "mapped",
      [
        99,
        100
      ]
    ],
    [
      [
        127278,
        127278
      ],
      "mapped",
      [
        119,
        122
      ]
    ],
    [
      [
        127279,
        127279
      ],
      "disallowed"
    ],
    [
      [
        127280,
        127280
      ],
      "mapped",
      [
        97
      ]
    ],
    [
      [
        127281,
        127281
      ],
      "mapped",
      [
        98
      ]
    ],
    [
      [
        127282,
        127282
      ],
      "mapped",
      [
        99
      ]
    ],
    [
      [
        127283,
        127283
      ],
      "mapped",
      [
        100
      ]
    ],
    [
      [
        127284,
        127284
      ],
      "mapped",
      [
        101
      ]
    ],
    [
      [
        127285,
        127285
      ],
      "mapped",
      [
        102
      ]
    ],
    [
      [
        127286,
        127286
      ],
      "mapped",
      [
        103
      ]
    ],
    [
      [
        127287,
        127287
      ],
      "mapped",
      [
        104
      ]
    ],
    [
      [
        127288,
        127288
      ],
      "mapped",
      [
        105
      ]
    ],
    [
      [
        127289,
        127289
      ],
      "mapped",
      [
        106
      ]
    ],
    [
      [
        127290,
        127290
      ],
      "mapped",
      [
        107
      ]
    ],
    [
      [
        127291,
        127291
      ],
      "mapped",
      [
        108
      ]
    ],
    [
      [
        127292,
        127292
      ],
      "mapped",
      [
        109
      ]
    ],
    [
      [
        127293,
        127293
      ],
      "mapped",
      [
        110
      ]
    ],
    [
      [
        127294,
        127294
      ],
      "mapped",
      [
        111
      ]
    ],
    [
      [
        127295,
        127295
      ],
      "mapped",
      [
        112
      ]
    ],
    [
      [
        127296,
        127296
      ],
      "mapped",
      [
        113
      ]
    ],
    [
      [
        127297,
        127297
      ],
      "mapped",
      [
        114
      ]
    ],
    [
      [
        127298,
        127298
      ],
      "mapped",
      [
        115
      ]
    ],
    [
      [
        127299,
        127299
      ],
      "mapped",
      [
        116
      ]
    ],
    [
      [
        127300,
        127300
      ],
      "mapped",
      [
        117
      ]
    ],
    [
      [
        127301,
        127301
      ],
      "mapped",
      [
        118
      ]
    ],
    [
      [
        127302,
        127302
      ],
      "mapped",
      [
        119
      ]
    ],
    [
      [
        127303,
        127303
      ],
      "mapped",
      [
        120
      ]
    ],
    [
      [
        127304,
        127304
      ],
      "mapped",
      [
        121
      ]
    ],
    [
      [
        127305,
        127305
      ],
      "mapped",
      [
        122
      ]
    ],
    [
      [
        127306,
        127306
      ],
      "mapped",
      [
        104,
        118
      ]
    ],
    [
      [
        127307,
        127307
      ],
      "mapped",
      [
        109,
        118
      ]
    ],
    [
      [
        127308,
        127308
      ],
      "mapped",
      [
        115,
        100
      ]
    ],
    [
      [
        127309,
        127309
      ],
      "mapped",
      [
        115,
        115
      ]
    ],
    [
      [
        127310,
        127310
      ],
      "mapped",
      [
        112,
        112,
        118
      ]
    ],
    [
      [
        127311,
        127311
      ],
      "mapped",
      [
        119,
        99
      ]
    ],
    [
      [
        127312,
        127318
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127319,
        127319
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127320,
        127326
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127327,
        127327
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127328,
        127337
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127338,
        127338
      ],
      "mapped",
      [
        109,
        99
      ]
    ],
    [
      [
        127339,
        127339
      ],
      "mapped",
      [
        109,
        100
      ]
    ],
    [
      [
        127340,
        127343
      ],
      "disallowed"
    ],
    [
      [
        127344,
        127352
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127353,
        127353
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127354,
        127354
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127355,
        127356
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127357,
        127358
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127359,
        127359
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127360,
        127369
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127370,
        127373
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127374,
        127375
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127376,
        127376
      ],
      "mapped",
      [
        100,
        106
      ]
    ],
    [
      [
        127377,
        127386
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127387,
        127461
      ],
      "disallowed"
    ],
    [
      [
        127462,
        127487
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127488,
        127488
      ],
      "mapped",
      [
        12411,
        12363
      ]
    ],
    [
      [
        127489,
        127489
      ],
      "mapped",
      [
        12467,
        12467
      ]
    ],
    [
      [
        127490,
        127490
      ],
      "mapped",
      [
        12469
      ]
    ],
    [
      [
        127491,
        127503
      ],
      "disallowed"
    ],
    [
      [
        127504,
        127504
      ],
      "mapped",
      [
        25163
      ]
    ],
    [
      [
        127505,
        127505
      ],
      "mapped",
      [
        23383
      ]
    ],
    [
      [
        127506,
        127506
      ],
      "mapped",
      [
        21452
      ]
    ],
    [
      [
        127507,
        127507
      ],
      "mapped",
      [
        12487
      ]
    ],
    [
      [
        127508,
        127508
      ],
      "mapped",
      [
        20108
      ]
    ],
    [
      [
        127509,
        127509
      ],
      "mapped",
      [
        22810
      ]
    ],
    [
      [
        127510,
        127510
      ],
      "mapped",
      [
        35299
      ]
    ],
    [
      [
        127511,
        127511
      ],
      "mapped",
      [
        22825
      ]
    ],
    [
      [
        127512,
        127512
      ],
      "mapped",
      [
        20132
      ]
    ],
    [
      [
        127513,
        127513
      ],
      "mapped",
      [
        26144
      ]
    ],
    [
      [
        127514,
        127514
      ],
      "mapped",
      [
        28961
      ]
    ],
    [
      [
        127515,
        127515
      ],
      "mapped",
      [
        26009
      ]
    ],
    [
      [
        127516,
        127516
      ],
      "mapped",
      [
        21069
      ]
    ],
    [
      [
        127517,
        127517
      ],
      "mapped",
      [
        24460
      ]
    ],
    [
      [
        127518,
        127518
      ],
      "mapped",
      [
        20877
      ]
    ],
    [
      [
        127519,
        127519
      ],
      "mapped",
      [
        26032
      ]
    ],
    [
      [
        127520,
        127520
      ],
      "mapped",
      [
        21021
      ]
    ],
    [
      [
        127521,
        127521
      ],
      "mapped",
      [
        32066
      ]
    ],
    [
      [
        127522,
        127522
      ],
      "mapped",
      [
        29983
      ]
    ],
    [
      [
        127523,
        127523
      ],
      "mapped",
      [
        36009
      ]
    ],
    [
      [
        127524,
        127524
      ],
      "mapped",
      [
        22768
      ]
    ],
    [
      [
        127525,
        127525
      ],
      "mapped",
      [
        21561
      ]
    ],
    [
      [
        127526,
        127526
      ],
      "mapped",
      [
        28436
      ]
    ],
    [
      [
        127527,
        127527
      ],
      "mapped",
      [
        25237
      ]
    ],
    [
      [
        127528,
        127528
      ],
      "mapped",
      [
        25429
      ]
    ],
    [
      [
        127529,
        127529
      ],
      "mapped",
      [
        19968
      ]
    ],
    [
      [
        127530,
        127530
      ],
      "mapped",
      [
        19977
      ]
    ],
    [
      [
        127531,
        127531
      ],
      "mapped",
      [
        36938
      ]
    ],
    [
      [
        127532,
        127532
      ],
      "mapped",
      [
        24038
      ]
    ],
    [
      [
        127533,
        127533
      ],
      "mapped",
      [
        20013
      ]
    ],
    [
      [
        127534,
        127534
      ],
      "mapped",
      [
        21491
      ]
    ],
    [
      [
        127535,
        127535
      ],
      "mapped",
      [
        25351
      ]
    ],
    [
      [
        127536,
        127536
      ],
      "mapped",
      [
        36208
      ]
    ],
    [
      [
        127537,
        127537
      ],
      "mapped",
      [
        25171
      ]
    ],
    [
      [
        127538,
        127538
      ],
      "mapped",
      [
        31105
      ]
    ],
    [
      [
        127539,
        127539
      ],
      "mapped",
      [
        31354
      ]
    ],
    [
      [
        127540,
        127540
      ],
      "mapped",
      [
        21512
      ]
    ],
    [
      [
        127541,
        127541
      ],
      "mapped",
      [
        28288
      ]
    ],
    [
      [
        127542,
        127542
      ],
      "mapped",
      [
        26377
      ]
    ],
    [
      [
        127543,
        127543
      ],
      "mapped",
      [
        26376
      ]
    ],
    [
      [
        127544,
        127544
      ],
      "mapped",
      [
        30003
      ]
    ],
    [
      [
        127545,
        127545
      ],
      "mapped",
      [
        21106
      ]
    ],
    [
      [
        127546,
        127546
      ],
      "mapped",
      [
        21942
      ]
    ],
    [
      [
        127547,
        127551
      ],
      "disallowed"
    ],
    [
      [
        127552,
        127552
      ],
      "mapped",
      [
        12308,
        26412,
        12309
      ]
    ],
    [
      [
        127553,
        127553
      ],
      "mapped",
      [
        12308,
        19977,
        12309
      ]
    ],
    [
      [
        127554,
        127554
      ],
      "mapped",
      [
        12308,
        20108,
        12309
      ]
    ],
    [
      [
        127555,
        127555
      ],
      "mapped",
      [
        12308,
        23433,
        12309
      ]
    ],
    [
      [
        127556,
        127556
      ],
      "mapped",
      [
        12308,
        28857,
        12309
      ]
    ],
    [
      [
        127557,
        127557
      ],
      "mapped",
      [
        12308,
        25171,
        12309
      ]
    ],
    [
      [
        127558,
        127558
      ],
      "mapped",
      [
        12308,
        30423,
        12309
      ]
    ],
    [
      [
        127559,
        127559
      ],
      "mapped",
      [
        12308,
        21213,
        12309
      ]
    ],
    [
      [
        127560,
        127560
      ],
      "mapped",
      [
        12308,
        25943,
        12309
      ]
    ],
    [
      [
        127561,
        127567
      ],
      "disallowed"
    ],
    [
      [
        127568,
        127568
      ],
      "mapped",
      [
        24471
      ]
    ],
    [
      [
        127569,
        127569
      ],
      "mapped",
      [
        21487
      ]
    ],
    [
      [
        127570,
        127743
      ],
      "disallowed"
    ],
    [
      [
        127744,
        127776
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127777,
        127788
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127789,
        127791
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127792,
        127797
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127798,
        127798
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127799,
        127868
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127869,
        127869
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127870,
        127871
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127872,
        127891
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127892,
        127903
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127904,
        127940
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127941,
        127941
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127942,
        127946
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127947,
        127950
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127951,
        127955
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127956,
        127967
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127968,
        127984
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127985,
        127991
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        127992,
        127999
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128e3,
        128062
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128063,
        128063
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128064,
        128064
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128065,
        128065
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128066,
        128247
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128248,
        128248
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128249,
        128252
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128253,
        128254
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128255,
        128255
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128256,
        128317
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128318,
        128319
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128320,
        128323
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128324,
        128330
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128331,
        128335
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128336,
        128359
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128360,
        128377
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128378,
        128378
      ],
      "disallowed"
    ],
    [
      [
        128379,
        128419
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128420,
        128420
      ],
      "disallowed"
    ],
    [
      [
        128421,
        128506
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128507,
        128511
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128512,
        128512
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128513,
        128528
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128529,
        128529
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128530,
        128532
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128533,
        128533
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128534,
        128534
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128535,
        128535
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128536,
        128536
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128537,
        128537
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128538,
        128538
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128539,
        128539
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128540,
        128542
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128543,
        128543
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128544,
        128549
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128550,
        128551
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128552,
        128555
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128556,
        128556
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128557,
        128557
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128558,
        128559
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128560,
        128563
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128564,
        128564
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128565,
        128576
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128577,
        128578
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128579,
        128580
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128581,
        128591
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128592,
        128639
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128640,
        128709
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128710,
        128719
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128720,
        128720
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128721,
        128735
      ],
      "disallowed"
    ],
    [
      [
        128736,
        128748
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128749,
        128751
      ],
      "disallowed"
    ],
    [
      [
        128752,
        128755
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128756,
        128767
      ],
      "disallowed"
    ],
    [
      [
        128768,
        128883
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128884,
        128895
      ],
      "disallowed"
    ],
    [
      [
        128896,
        128980
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        128981,
        129023
      ],
      "disallowed"
    ],
    [
      [
        129024,
        129035
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129036,
        129039
      ],
      "disallowed"
    ],
    [
      [
        129040,
        129095
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129096,
        129103
      ],
      "disallowed"
    ],
    [
      [
        129104,
        129113
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129114,
        129119
      ],
      "disallowed"
    ],
    [
      [
        129120,
        129159
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129160,
        129167
      ],
      "disallowed"
    ],
    [
      [
        129168,
        129197
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129198,
        129295
      ],
      "disallowed"
    ],
    [
      [
        129296,
        129304
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129305,
        129407
      ],
      "disallowed"
    ],
    [
      [
        129408,
        129412
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129413,
        129471
      ],
      "disallowed"
    ],
    [
      [
        129472,
        129472
      ],
      "valid",
      [],
      "NV8"
    ],
    [
      [
        129473,
        131069
      ],
      "disallowed"
    ],
    [
      [
        131070,
        131071
      ],
      "disallowed"
    ],
    [
      [
        131072,
        173782
      ],
      "valid"
    ],
    [
      [
        173783,
        173823
      ],
      "disallowed"
    ],
    [
      [
        173824,
        177972
      ],
      "valid"
    ],
    [
      [
        177973,
        177983
      ],
      "disallowed"
    ],
    [
      [
        177984,
        178205
      ],
      "valid"
    ],
    [
      [
        178206,
        178207
      ],
      "disallowed"
    ],
    [
      [
        178208,
        183969
      ],
      "valid"
    ],
    [
      [
        183970,
        194559
      ],
      "disallowed"
    ],
    [
      [
        194560,
        194560
      ],
      "mapped",
      [
        20029
      ]
    ],
    [
      [
        194561,
        194561
      ],
      "mapped",
      [
        20024
      ]
    ],
    [
      [
        194562,
        194562
      ],
      "mapped",
      [
        20033
      ]
    ],
    [
      [
        194563,
        194563
      ],
      "mapped",
      [
        131362
      ]
    ],
    [
      [
        194564,
        194564
      ],
      "mapped",
      [
        20320
      ]
    ],
    [
      [
        194565,
        194565
      ],
      "mapped",
      [
        20398
      ]
    ],
    [
      [
        194566,
        194566
      ],
      "mapped",
      [
        20411
      ]
    ],
    [
      [
        194567,
        194567
      ],
      "mapped",
      [
        20482
      ]
    ],
    [
      [
        194568,
        194568
      ],
      "mapped",
      [
        20602
      ]
    ],
    [
      [
        194569,
        194569
      ],
      "mapped",
      [
        20633
      ]
    ],
    [
      [
        194570,
        194570
      ],
      "mapped",
      [
        20711
      ]
    ],
    [
      [
        194571,
        194571
      ],
      "mapped",
      [
        20687
      ]
    ],
    [
      [
        194572,
        194572
      ],
      "mapped",
      [
        13470
      ]
    ],
    [
      [
        194573,
        194573
      ],
      "mapped",
      [
        132666
      ]
    ],
    [
      [
        194574,
        194574
      ],
      "mapped",
      [
        20813
      ]
    ],
    [
      [
        194575,
        194575
      ],
      "mapped",
      [
        20820
      ]
    ],
    [
      [
        194576,
        194576
      ],
      "mapped",
      [
        20836
      ]
    ],
    [
      [
        194577,
        194577
      ],
      "mapped",
      [
        20855
      ]
    ],
    [
      [
        194578,
        194578
      ],
      "mapped",
      [
        132380
      ]
    ],
    [
      [
        194579,
        194579
      ],
      "mapped",
      [
        13497
      ]
    ],
    [
      [
        194580,
        194580
      ],
      "mapped",
      [
        20839
      ]
    ],
    [
      [
        194581,
        194581
      ],
      "mapped",
      [
        20877
      ]
    ],
    [
      [
        194582,
        194582
      ],
      "mapped",
      [
        132427
      ]
    ],
    [
      [
        194583,
        194583
      ],
      "mapped",
      [
        20887
      ]
    ],
    [
      [
        194584,
        194584
      ],
      "mapped",
      [
        20900
      ]
    ],
    [
      [
        194585,
        194585
      ],
      "mapped",
      [
        20172
      ]
    ],
    [
      [
        194586,
        194586
      ],
      "mapped",
      [
        20908
      ]
    ],
    [
      [
        194587,
        194587
      ],
      "mapped",
      [
        20917
      ]
    ],
    [
      [
        194588,
        194588
      ],
      "mapped",
      [
        168415
      ]
    ],
    [
      [
        194589,
        194589
      ],
      "mapped",
      [
        20981
      ]
    ],
    [
      [
        194590,
        194590
      ],
      "mapped",
      [
        20995
      ]
    ],
    [
      [
        194591,
        194591
      ],
      "mapped",
      [
        13535
      ]
    ],
    [
      [
        194592,
        194592
      ],
      "mapped",
      [
        21051
      ]
    ],
    [
      [
        194593,
        194593
      ],
      "mapped",
      [
        21062
      ]
    ],
    [
      [
        194594,
        194594
      ],
      "mapped",
      [
        21106
      ]
    ],
    [
      [
        194595,
        194595
      ],
      "mapped",
      [
        21111
      ]
    ],
    [
      [
        194596,
        194596
      ],
      "mapped",
      [
        13589
      ]
    ],
    [
      [
        194597,
        194597
      ],
      "mapped",
      [
        21191
      ]
    ],
    [
      [
        194598,
        194598
      ],
      "mapped",
      [
        21193
      ]
    ],
    [
      [
        194599,
        194599
      ],
      "mapped",
      [
        21220
      ]
    ],
    [
      [
        194600,
        194600
      ],
      "mapped",
      [
        21242
      ]
    ],
    [
      [
        194601,
        194601
      ],
      "mapped",
      [
        21253
      ]
    ],
    [
      [
        194602,
        194602
      ],
      "mapped",
      [
        21254
      ]
    ],
    [
      [
        194603,
        194603
      ],
      "mapped",
      [
        21271
      ]
    ],
    [
      [
        194604,
        194604
      ],
      "mapped",
      [
        21321
      ]
    ],
    [
      [
        194605,
        194605
      ],
      "mapped",
      [
        21329
      ]
    ],
    [
      [
        194606,
        194606
      ],
      "mapped",
      [
        21338
      ]
    ],
    [
      [
        194607,
        194607
      ],
      "mapped",
      [
        21363
      ]
    ],
    [
      [
        194608,
        194608
      ],
      "mapped",
      [
        21373
      ]
    ],
    [
      [
        194609,
        194611
      ],
      "mapped",
      [
        21375
      ]
    ],
    [
      [
        194612,
        194612
      ],
      "mapped",
      [
        133676
      ]
    ],
    [
      [
        194613,
        194613
      ],
      "mapped",
      [
        28784
      ]
    ],
    [
      [
        194614,
        194614
      ],
      "mapped",
      [
        21450
      ]
    ],
    [
      [
        194615,
        194615
      ],
      "mapped",
      [
        21471
      ]
    ],
    [
      [
        194616,
        194616
      ],
      "mapped",
      [
        133987
      ]
    ],
    [
      [
        194617,
        194617
      ],
      "mapped",
      [
        21483
      ]
    ],
    [
      [
        194618,
        194618
      ],
      "mapped",
      [
        21489
      ]
    ],
    [
      [
        194619,
        194619
      ],
      "mapped",
      [
        21510
      ]
    ],
    [
      [
        194620,
        194620
      ],
      "mapped",
      [
        21662
      ]
    ],
    [
      [
        194621,
        194621
      ],
      "mapped",
      [
        21560
      ]
    ],
    [
      [
        194622,
        194622
      ],
      "mapped",
      [
        21576
      ]
    ],
    [
      [
        194623,
        194623
      ],
      "mapped",
      [
        21608
      ]
    ],
    [
      [
        194624,
        194624
      ],
      "mapped",
      [
        21666
      ]
    ],
    [
      [
        194625,
        194625
      ],
      "mapped",
      [
        21750
      ]
    ],
    [
      [
        194626,
        194626
      ],
      "mapped",
      [
        21776
      ]
    ],
    [
      [
        194627,
        194627
      ],
      "mapped",
      [
        21843
      ]
    ],
    [
      [
        194628,
        194628
      ],
      "mapped",
      [
        21859
      ]
    ],
    [
      [
        194629,
        194630
      ],
      "mapped",
      [
        21892
      ]
    ],
    [
      [
        194631,
        194631
      ],
      "mapped",
      [
        21913
      ]
    ],
    [
      [
        194632,
        194632
      ],
      "mapped",
      [
        21931
      ]
    ],
    [
      [
        194633,
        194633
      ],
      "mapped",
      [
        21939
      ]
    ],
    [
      [
        194634,
        194634
      ],
      "mapped",
      [
        21954
      ]
    ],
    [
      [
        194635,
        194635
      ],
      "mapped",
      [
        22294
      ]
    ],
    [
      [
        194636,
        194636
      ],
      "mapped",
      [
        22022
      ]
    ],
    [
      [
        194637,
        194637
      ],
      "mapped",
      [
        22295
      ]
    ],
    [
      [
        194638,
        194638
      ],
      "mapped",
      [
        22097
      ]
    ],
    [
      [
        194639,
        194639
      ],
      "mapped",
      [
        22132
      ]
    ],
    [
      [
        194640,
        194640
      ],
      "mapped",
      [
        20999
      ]
    ],
    [
      [
        194641,
        194641
      ],
      "mapped",
      [
        22766
      ]
    ],
    [
      [
        194642,
        194642
      ],
      "mapped",
      [
        22478
      ]
    ],
    [
      [
        194643,
        194643
      ],
      "mapped",
      [
        22516
      ]
    ],
    [
      [
        194644,
        194644
      ],
      "mapped",
      [
        22541
      ]
    ],
    [
      [
        194645,
        194645
      ],
      "mapped",
      [
        22411
      ]
    ],
    [
      [
        194646,
        194646
      ],
      "mapped",
      [
        22578
      ]
    ],
    [
      [
        194647,
        194647
      ],
      "mapped",
      [
        22577
      ]
    ],
    [
      [
        194648,
        194648
      ],
      "mapped",
      [
        22700
      ]
    ],
    [
      [
        194649,
        194649
      ],
      "mapped",
      [
        136420
      ]
    ],
    [
      [
        194650,
        194650
      ],
      "mapped",
      [
        22770
      ]
    ],
    [
      [
        194651,
        194651
      ],
      "mapped",
      [
        22775
      ]
    ],
    [
      [
        194652,
        194652
      ],
      "mapped",
      [
        22790
      ]
    ],
    [
      [
        194653,
        194653
      ],
      "mapped",
      [
        22810
      ]
    ],
    [
      [
        194654,
        194654
      ],
      "mapped",
      [
        22818
      ]
    ],
    [
      [
        194655,
        194655
      ],
      "mapped",
      [
        22882
      ]
    ],
    [
      [
        194656,
        194656
      ],
      "mapped",
      [
        136872
      ]
    ],
    [
      [
        194657,
        194657
      ],
      "mapped",
      [
        136938
      ]
    ],
    [
      [
        194658,
        194658
      ],
      "mapped",
      [
        23020
      ]
    ],
    [
      [
        194659,
        194659
      ],
      "mapped",
      [
        23067
      ]
    ],
    [
      [
        194660,
        194660
      ],
      "mapped",
      [
        23079
      ]
    ],
    [
      [
        194661,
        194661
      ],
      "mapped",
      [
        23e3
      ]
    ],
    [
      [
        194662,
        194662
      ],
      "mapped",
      [
        23142
      ]
    ],
    [
      [
        194663,
        194663
      ],
      "mapped",
      [
        14062
      ]
    ],
    [
      [
        194664,
        194664
      ],
      "disallowed"
    ],
    [
      [
        194665,
        194665
      ],
      "mapped",
      [
        23304
      ]
    ],
    [
      [
        194666,
        194667
      ],
      "mapped",
      [
        23358
      ]
    ],
    [
      [
        194668,
        194668
      ],
      "mapped",
      [
        137672
      ]
    ],
    [
      [
        194669,
        194669
      ],
      "mapped",
      [
        23491
      ]
    ],
    [
      [
        194670,
        194670
      ],
      "mapped",
      [
        23512
      ]
    ],
    [
      [
        194671,
        194671
      ],
      "mapped",
      [
        23527
      ]
    ],
    [
      [
        194672,
        194672
      ],
      "mapped",
      [
        23539
      ]
    ],
    [
      [
        194673,
        194673
      ],
      "mapped",
      [
        138008
      ]
    ],
    [
      [
        194674,
        194674
      ],
      "mapped",
      [
        23551
      ]
    ],
    [
      [
        194675,
        194675
      ],
      "mapped",
      [
        23558
      ]
    ],
    [
      [
        194676,
        194676
      ],
      "disallowed"
    ],
    [
      [
        194677,
        194677
      ],
      "mapped",
      [
        23586
      ]
    ],
    [
      [
        194678,
        194678
      ],
      "mapped",
      [
        14209
      ]
    ],
    [
      [
        194679,
        194679
      ],
      "mapped",
      [
        23648
      ]
    ],
    [
      [
        194680,
        194680
      ],
      "mapped",
      [
        23662
      ]
    ],
    [
      [
        194681,
        194681
      ],
      "mapped",
      [
        23744
      ]
    ],
    [
      [
        194682,
        194682
      ],
      "mapped",
      [
        23693
      ]
    ],
    [
      [
        194683,
        194683
      ],
      "mapped",
      [
        138724
      ]
    ],
    [
      [
        194684,
        194684
      ],
      "mapped",
      [
        23875
      ]
    ],
    [
      [
        194685,
        194685
      ],
      "mapped",
      [
        138726
      ]
    ],
    [
      [
        194686,
        194686
      ],
      "mapped",
      [
        23918
      ]
    ],
    [
      [
        194687,
        194687
      ],
      "mapped",
      [
        23915
      ]
    ],
    [
      [
        194688,
        194688
      ],
      "mapped",
      [
        23932
      ]
    ],
    [
      [
        194689,
        194689
      ],
      "mapped",
      [
        24033
      ]
    ],
    [
      [
        194690,
        194690
      ],
      "mapped",
      [
        24034
      ]
    ],
    [
      [
        194691,
        194691
      ],
      "mapped",
      [
        14383
      ]
    ],
    [
      [
        194692,
        194692
      ],
      "mapped",
      [
        24061
      ]
    ],
    [
      [
        194693,
        194693
      ],
      "mapped",
      [
        24104
      ]
    ],
    [
      [
        194694,
        194694
      ],
      "mapped",
      [
        24125
      ]
    ],
    [
      [
        194695,
        194695
      ],
      "mapped",
      [
        24169
      ]
    ],
    [
      [
        194696,
        194696
      ],
      "mapped",
      [
        14434
      ]
    ],
    [
      [
        194697,
        194697
      ],
      "mapped",
      [
        139651
      ]
    ],
    [
      [
        194698,
        194698
      ],
      "mapped",
      [
        14460
      ]
    ],
    [
      [
        194699,
        194699
      ],
      "mapped",
      [
        24240
      ]
    ],
    [
      [
        194700,
        194700
      ],
      "mapped",
      [
        24243
      ]
    ],
    [
      [
        194701,
        194701
      ],
      "mapped",
      [
        24246
      ]
    ],
    [
      [
        194702,
        194702
      ],
      "mapped",
      [
        24266
      ]
    ],
    [
      [
        194703,
        194703
      ],
      "mapped",
      [
        172946
      ]
    ],
    [
      [
        194704,
        194704
      ],
      "mapped",
      [
        24318
      ]
    ],
    [
      [
        194705,
        194706
      ],
      "mapped",
      [
        140081
      ]
    ],
    [
      [
        194707,
        194707
      ],
      "mapped",
      [
        33281
      ]
    ],
    [
      [
        194708,
        194709
      ],
      "mapped",
      [
        24354
      ]
    ],
    [
      [
        194710,
        194710
      ],
      "mapped",
      [
        14535
      ]
    ],
    [
      [
        194711,
        194711
      ],
      "mapped",
      [
        144056
      ]
    ],
    [
      [
        194712,
        194712
      ],
      "mapped",
      [
        156122
      ]
    ],
    [
      [
        194713,
        194713
      ],
      "mapped",
      [
        24418
      ]
    ],
    [
      [
        194714,
        194714
      ],
      "mapped",
      [
        24427
      ]
    ],
    [
      [
        194715,
        194715
      ],
      "mapped",
      [
        14563
      ]
    ],
    [
      [
        194716,
        194716
      ],
      "mapped",
      [
        24474
      ]
    ],
    [
      [
        194717,
        194717
      ],
      "mapped",
      [
        24525
      ]
    ],
    [
      [
        194718,
        194718
      ],
      "mapped",
      [
        24535
      ]
    ],
    [
      [
        194719,
        194719
      ],
      "mapped",
      [
        24569
      ]
    ],
    [
      [
        194720,
        194720
      ],
      "mapped",
      [
        24705
      ]
    ],
    [
      [
        194721,
        194721
      ],
      "mapped",
      [
        14650
      ]
    ],
    [
      [
        194722,
        194722
      ],
      "mapped",
      [
        14620
      ]
    ],
    [
      [
        194723,
        194723
      ],
      "mapped",
      [
        24724
      ]
    ],
    [
      [
        194724,
        194724
      ],
      "mapped",
      [
        141012
      ]
    ],
    [
      [
        194725,
        194725
      ],
      "mapped",
      [
        24775
      ]
    ],
    [
      [
        194726,
        194726
      ],
      "mapped",
      [
        24904
      ]
    ],
    [
      [
        194727,
        194727
      ],
      "mapped",
      [
        24908
      ]
    ],
    [
      [
        194728,
        194728
      ],
      "mapped",
      [
        24910
      ]
    ],
    [
      [
        194729,
        194729
      ],
      "mapped",
      [
        24908
      ]
    ],
    [
      [
        194730,
        194730
      ],
      "mapped",
      [
        24954
      ]
    ],
    [
      [
        194731,
        194731
      ],
      "mapped",
      [
        24974
      ]
    ],
    [
      [
        194732,
        194732
      ],
      "mapped",
      [
        25010
      ]
    ],
    [
      [
        194733,
        194733
      ],
      "mapped",
      [
        24996
      ]
    ],
    [
      [
        194734,
        194734
      ],
      "mapped",
      [
        25007
      ]
    ],
    [
      [
        194735,
        194735
      ],
      "mapped",
      [
        25054
      ]
    ],
    [
      [
        194736,
        194736
      ],
      "mapped",
      [
        25074
      ]
    ],
    [
      [
        194737,
        194737
      ],
      "mapped",
      [
        25078
      ]
    ],
    [
      [
        194738,
        194738
      ],
      "mapped",
      [
        25104
      ]
    ],
    [
      [
        194739,
        194739
      ],
      "mapped",
      [
        25115
      ]
    ],
    [
      [
        194740,
        194740
      ],
      "mapped",
      [
        25181
      ]
    ],
    [
      [
        194741,
        194741
      ],
      "mapped",
      [
        25265
      ]
    ],
    [
      [
        194742,
        194742
      ],
      "mapped",
      [
        25300
      ]
    ],
    [
      [
        194743,
        194743
      ],
      "mapped",
      [
        25424
      ]
    ],
    [
      [
        194744,
        194744
      ],
      "mapped",
      [
        142092
      ]
    ],
    [
      [
        194745,
        194745
      ],
      "mapped",
      [
        25405
      ]
    ],
    [
      [
        194746,
        194746
      ],
      "mapped",
      [
        25340
      ]
    ],
    [
      [
        194747,
        194747
      ],
      "mapped",
      [
        25448
      ]
    ],
    [
      [
        194748,
        194748
      ],
      "mapped",
      [
        25475
      ]
    ],
    [
      [
        194749,
        194749
      ],
      "mapped",
      [
        25572
      ]
    ],
    [
      [
        194750,
        194750
      ],
      "mapped",
      [
        142321
      ]
    ],
    [
      [
        194751,
        194751
      ],
      "mapped",
      [
        25634
      ]
    ],
    [
      [
        194752,
        194752
      ],
      "mapped",
      [
        25541
      ]
    ],
    [
      [
        194753,
        194753
      ],
      "mapped",
      [
        25513
      ]
    ],
    [
      [
        194754,
        194754
      ],
      "mapped",
      [
        14894
      ]
    ],
    [
      [
        194755,
        194755
      ],
      "mapped",
      [
        25705
      ]
    ],
    [
      [
        194756,
        194756
      ],
      "mapped",
      [
        25726
      ]
    ],
    [
      [
        194757,
        194757
      ],
      "mapped",
      [
        25757
      ]
    ],
    [
      [
        194758,
        194758
      ],
      "mapped",
      [
        25719
      ]
    ],
    [
      [
        194759,
        194759
      ],
      "mapped",
      [
        14956
      ]
    ],
    [
      [
        194760,
        194760
      ],
      "mapped",
      [
        25935
      ]
    ],
    [
      [
        194761,
        194761
      ],
      "mapped",
      [
        25964
      ]
    ],
    [
      [
        194762,
        194762
      ],
      "mapped",
      [
        143370
      ]
    ],
    [
      [
        194763,
        194763
      ],
      "mapped",
      [
        26083
      ]
    ],
    [
      [
        194764,
        194764
      ],
      "mapped",
      [
        26360
      ]
    ],
    [
      [
        194765,
        194765
      ],
      "mapped",
      [
        26185
      ]
    ],
    [
      [
        194766,
        194766
      ],
      "mapped",
      [
        15129
      ]
    ],
    [
      [
        194767,
        194767
      ],
      "mapped",
      [
        26257
      ]
    ],
    [
      [
        194768,
        194768
      ],
      "mapped",
      [
        15112
      ]
    ],
    [
      [
        194769,
        194769
      ],
      "mapped",
      [
        15076
      ]
    ],
    [
      [
        194770,
        194770
      ],
      "mapped",
      [
        20882
      ]
    ],
    [
      [
        194771,
        194771
      ],
      "mapped",
      [
        20885
      ]
    ],
    [
      [
        194772,
        194772
      ],
      "mapped",
      [
        26368
      ]
    ],
    [
      [
        194773,
        194773
      ],
      "mapped",
      [
        26268
      ]
    ],
    [
      [
        194774,
        194774
      ],
      "mapped",
      [
        32941
      ]
    ],
    [
      [
        194775,
        194775
      ],
      "mapped",
      [
        17369
      ]
    ],
    [
      [
        194776,
        194776
      ],
      "mapped",
      [
        26391
      ]
    ],
    [
      [
        194777,
        194777
      ],
      "mapped",
      [
        26395
      ]
    ],
    [
      [
        194778,
        194778
      ],
      "mapped",
      [
        26401
      ]
    ],
    [
      [
        194779,
        194779
      ],
      "mapped",
      [
        26462
      ]
    ],
    [
      [
        194780,
        194780
      ],
      "mapped",
      [
        26451
      ]
    ],
    [
      [
        194781,
        194781
      ],
      "mapped",
      [
        144323
      ]
    ],
    [
      [
        194782,
        194782
      ],
      "mapped",
      [
        15177
      ]
    ],
    [
      [
        194783,
        194783
      ],
      "mapped",
      [
        26618
      ]
    ],
    [
      [
        194784,
        194784
      ],
      "mapped",
      [
        26501
      ]
    ],
    [
      [
        194785,
        194785
      ],
      "mapped",
      [
        26706
      ]
    ],
    [
      [
        194786,
        194786
      ],
      "mapped",
      [
        26757
      ]
    ],
    [
      [
        194787,
        194787
      ],
      "mapped",
      [
        144493
      ]
    ],
    [
      [
        194788,
        194788
      ],
      "mapped",
      [
        26766
      ]
    ],
    [
      [
        194789,
        194789
      ],
      "mapped",
      [
        26655
      ]
    ],
    [
      [
        194790,
        194790
      ],
      "mapped",
      [
        26900
      ]
    ],
    [
      [
        194791,
        194791
      ],
      "mapped",
      [
        15261
      ]
    ],
    [
      [
        194792,
        194792
      ],
      "mapped",
      [
        26946
      ]
    ],
    [
      [
        194793,
        194793
      ],
      "mapped",
      [
        27043
      ]
    ],
    [
      [
        194794,
        194794
      ],
      "mapped",
      [
        27114
      ]
    ],
    [
      [
        194795,
        194795
      ],
      "mapped",
      [
        27304
      ]
    ],
    [
      [
        194796,
        194796
      ],
      "mapped",
      [
        145059
      ]
    ],
    [
      [
        194797,
        194797
      ],
      "mapped",
      [
        27355
      ]
    ],
    [
      [
        194798,
        194798
      ],
      "mapped",
      [
        15384
      ]
    ],
    [
      [
        194799,
        194799
      ],
      "mapped",
      [
        27425
      ]
    ],
    [
      [
        194800,
        194800
      ],
      "mapped",
      [
        145575
      ]
    ],
    [
      [
        194801,
        194801
      ],
      "mapped",
      [
        27476
      ]
    ],
    [
      [
        194802,
        194802
      ],
      "mapped",
      [
        15438
      ]
    ],
    [
      [
        194803,
        194803
      ],
      "mapped",
      [
        27506
      ]
    ],
    [
      [
        194804,
        194804
      ],
      "mapped",
      [
        27551
      ]
    ],
    [
      [
        194805,
        194805
      ],
      "mapped",
      [
        27578
      ]
    ],
    [
      [
        194806,
        194806
      ],
      "mapped",
      [
        27579
      ]
    ],
    [
      [
        194807,
        194807
      ],
      "mapped",
      [
        146061
      ]
    ],
    [
      [
        194808,
        194808
      ],
      "mapped",
      [
        138507
      ]
    ],
    [
      [
        194809,
        194809
      ],
      "mapped",
      [
        146170
      ]
    ],
    [
      [
        194810,
        194810
      ],
      "mapped",
      [
        27726
      ]
    ],
    [
      [
        194811,
        194811
      ],
      "mapped",
      [
        146620
      ]
    ],
    [
      [
        194812,
        194812
      ],
      "mapped",
      [
        27839
      ]
    ],
    [
      [
        194813,
        194813
      ],
      "mapped",
      [
        27853
      ]
    ],
    [
      [
        194814,
        194814
      ],
      "mapped",
      [
        27751
      ]
    ],
    [
      [
        194815,
        194815
      ],
      "mapped",
      [
        27926
      ]
    ],
    [
      [
        194816,
        194816
      ],
      "mapped",
      [
        27966
      ]
    ],
    [
      [
        194817,
        194817
      ],
      "mapped",
      [
        28023
      ]
    ],
    [
      [
        194818,
        194818
      ],
      "mapped",
      [
        27969
      ]
    ],
    [
      [
        194819,
        194819
      ],
      "mapped",
      [
        28009
      ]
    ],
    [
      [
        194820,
        194820
      ],
      "mapped",
      [
        28024
      ]
    ],
    [
      [
        194821,
        194821
      ],
      "mapped",
      [
        28037
      ]
    ],
    [
      [
        194822,
        194822
      ],
      "mapped",
      [
        146718
      ]
    ],
    [
      [
        194823,
        194823
      ],
      "mapped",
      [
        27956
      ]
    ],
    [
      [
        194824,
        194824
      ],
      "mapped",
      [
        28207
      ]
    ],
    [
      [
        194825,
        194825
      ],
      "mapped",
      [
        28270
      ]
    ],
    [
      [
        194826,
        194826
      ],
      "mapped",
      [
        15667
      ]
    ],
    [
      [
        194827,
        194827
      ],
      "mapped",
      [
        28363
      ]
    ],
    [
      [
        194828,
        194828
      ],
      "mapped",
      [
        28359
      ]
    ],
    [
      [
        194829,
        194829
      ],
      "mapped",
      [
        147153
      ]
    ],
    [
      [
        194830,
        194830
      ],
      "mapped",
      [
        28153
      ]
    ],
    [
      [
        194831,
        194831
      ],
      "mapped",
      [
        28526
      ]
    ],
    [
      [
        194832,
        194832
      ],
      "mapped",
      [
        147294
      ]
    ],
    [
      [
        194833,
        194833
      ],
      "mapped",
      [
        147342
      ]
    ],
    [
      [
        194834,
        194834
      ],
      "mapped",
      [
        28614
      ]
    ],
    [
      [
        194835,
        194835
      ],
      "mapped",
      [
        28729
      ]
    ],
    [
      [
        194836,
        194836
      ],
      "mapped",
      [
        28702
      ]
    ],
    [
      [
        194837,
        194837
      ],
      "mapped",
      [
        28699
      ]
    ],
    [
      [
        194838,
        194838
      ],
      "mapped",
      [
        15766
      ]
    ],
    [
      [
        194839,
        194839
      ],
      "mapped",
      [
        28746
      ]
    ],
    [
      [
        194840,
        194840
      ],
      "mapped",
      [
        28797
      ]
    ],
    [
      [
        194841,
        194841
      ],
      "mapped",
      [
        28791
      ]
    ],
    [
      [
        194842,
        194842
      ],
      "mapped",
      [
        28845
      ]
    ],
    [
      [
        194843,
        194843
      ],
      "mapped",
      [
        132389
      ]
    ],
    [
      [
        194844,
        194844
      ],
      "mapped",
      [
        28997
      ]
    ],
    [
      [
        194845,
        194845
      ],
      "mapped",
      [
        148067
      ]
    ],
    [
      [
        194846,
        194846
      ],
      "mapped",
      [
        29084
      ]
    ],
    [
      [
        194847,
        194847
      ],
      "disallowed"
    ],
    [
      [
        194848,
        194848
      ],
      "mapped",
      [
        29224
      ]
    ],
    [
      [
        194849,
        194849
      ],
      "mapped",
      [
        29237
      ]
    ],
    [
      [
        194850,
        194850
      ],
      "mapped",
      [
        29264
      ]
    ],
    [
      [
        194851,
        194851
      ],
      "mapped",
      [
        149e3
      ]
    ],
    [
      [
        194852,
        194852
      ],
      "mapped",
      [
        29312
      ]
    ],
    [
      [
        194853,
        194853
      ],
      "mapped",
      [
        29333
      ]
    ],
    [
      [
        194854,
        194854
      ],
      "mapped",
      [
        149301
      ]
    ],
    [
      [
        194855,
        194855
      ],
      "mapped",
      [
        149524
      ]
    ],
    [
      [
        194856,
        194856
      ],
      "mapped",
      [
        29562
      ]
    ],
    [
      [
        194857,
        194857
      ],
      "mapped",
      [
        29579
      ]
    ],
    [
      [
        194858,
        194858
      ],
      "mapped",
      [
        16044
      ]
    ],
    [
      [
        194859,
        194859
      ],
      "mapped",
      [
        29605
      ]
    ],
    [
      [
        194860,
        194861
      ],
      "mapped",
      [
        16056
      ]
    ],
    [
      [
        194862,
        194862
      ],
      "mapped",
      [
        29767
      ]
    ],
    [
      [
        194863,
        194863
      ],
      "mapped",
      [
        29788
      ]
    ],
    [
      [
        194864,
        194864
      ],
      "mapped",
      [
        29809
      ]
    ],
    [
      [
        194865,
        194865
      ],
      "mapped",
      [
        29829
      ]
    ],
    [
      [
        194866,
        194866
      ],
      "mapped",
      [
        29898
      ]
    ],
    [
      [
        194867,
        194867
      ],
      "mapped",
      [
        16155
      ]
    ],
    [
      [
        194868,
        194868
      ],
      "mapped",
      [
        29988
      ]
    ],
    [
      [
        194869,
        194869
      ],
      "mapped",
      [
        150582
      ]
    ],
    [
      [
        194870,
        194870
      ],
      "mapped",
      [
        30014
      ]
    ],
    [
      [
        194871,
        194871
      ],
      "mapped",
      [
        150674
      ]
    ],
    [
      [
        194872,
        194872
      ],
      "mapped",
      [
        30064
      ]
    ],
    [
      [
        194873,
        194873
      ],
      "mapped",
      [
        139679
      ]
    ],
    [
      [
        194874,
        194874
      ],
      "mapped",
      [
        30224
      ]
    ],
    [
      [
        194875,
        194875
      ],
      "mapped",
      [
        151457
      ]
    ],
    [
      [
        194876,
        194876
      ],
      "mapped",
      [
        151480
      ]
    ],
    [
      [
        194877,
        194877
      ],
      "mapped",
      [
        151620
      ]
    ],
    [
      [
        194878,
        194878
      ],
      "mapped",
      [
        16380
      ]
    ],
    [
      [
        194879,
        194879
      ],
      "mapped",
      [
        16392
      ]
    ],
    [
      [
        194880,
        194880
      ],
      "mapped",
      [
        30452
      ]
    ],
    [
      [
        194881,
        194881
      ],
      "mapped",
      [
        151795
      ]
    ],
    [
      [
        194882,
        194882
      ],
      "mapped",
      [
        151794
      ]
    ],
    [
      [
        194883,
        194883
      ],
      "mapped",
      [
        151833
      ]
    ],
    [
      [
        194884,
        194884
      ],
      "mapped",
      [
        151859
      ]
    ],
    [
      [
        194885,
        194885
      ],
      "mapped",
      [
        30494
      ]
    ],
    [
      [
        194886,
        194887
      ],
      "mapped",
      [
        30495
      ]
    ],
    [
      [
        194888,
        194888
      ],
      "mapped",
      [
        30538
      ]
    ],
    [
      [
        194889,
        194889
      ],
      "mapped",
      [
        16441
      ]
    ],
    [
      [
        194890,
        194890
      ],
      "mapped",
      [
        30603
      ]
    ],
    [
      [
        194891,
        194891
      ],
      "mapped",
      [
        16454
      ]
    ],
    [
      [
        194892,
        194892
      ],
      "mapped",
      [
        16534
      ]
    ],
    [
      [
        194893,
        194893
      ],
      "mapped",
      [
        152605
      ]
    ],
    [
      [
        194894,
        194894
      ],
      "mapped",
      [
        30798
      ]
    ],
    [
      [
        194895,
        194895
      ],
      "mapped",
      [
        30860
      ]
    ],
    [
      [
        194896,
        194896
      ],
      "mapped",
      [
        30924
      ]
    ],
    [
      [
        194897,
        194897
      ],
      "mapped",
      [
        16611
      ]
    ],
    [
      [
        194898,
        194898
      ],
      "mapped",
      [
        153126
      ]
    ],
    [
      [
        194899,
        194899
      ],
      "mapped",
      [
        31062
      ]
    ],
    [
      [
        194900,
        194900
      ],
      "mapped",
      [
        153242
      ]
    ],
    [
      [
        194901,
        194901
      ],
      "mapped",
      [
        153285
      ]
    ],
    [
      [
        194902,
        194902
      ],
      "mapped",
      [
        31119
      ]
    ],
    [
      [
        194903,
        194903
      ],
      "mapped",
      [
        31211
      ]
    ],
    [
      [
        194904,
        194904
      ],
      "mapped",
      [
        16687
      ]
    ],
    [
      [
        194905,
        194905
      ],
      "mapped",
      [
        31296
      ]
    ],
    [
      [
        194906,
        194906
      ],
      "mapped",
      [
        31306
      ]
    ],
    [
      [
        194907,
        194907
      ],
      "mapped",
      [
        31311
      ]
    ],
    [
      [
        194908,
        194908
      ],
      "mapped",
      [
        153980
      ]
    ],
    [
      [
        194909,
        194910
      ],
      "mapped",
      [
        154279
      ]
    ],
    [
      [
        194911,
        194911
      ],
      "disallowed"
    ],
    [
      [
        194912,
        194912
      ],
      "mapped",
      [
        16898
      ]
    ],
    [
      [
        194913,
        194913
      ],
      "mapped",
      [
        154539
      ]
    ],
    [
      [
        194914,
        194914
      ],
      "mapped",
      [
        31686
      ]
    ],
    [
      [
        194915,
        194915
      ],
      "mapped",
      [
        31689
      ]
    ],
    [
      [
        194916,
        194916
      ],
      "mapped",
      [
        16935
      ]
    ],
    [
      [
        194917,
        194917
      ],
      "mapped",
      [
        154752
      ]
    ],
    [
      [
        194918,
        194918
      ],
      "mapped",
      [
        31954
      ]
    ],
    [
      [
        194919,
        194919
      ],
      "mapped",
      [
        17056
      ]
    ],
    [
      [
        194920,
        194920
      ],
      "mapped",
      [
        31976
      ]
    ],
    [
      [
        194921,
        194921
      ],
      "mapped",
      [
        31971
      ]
    ],
    [
      [
        194922,
        194922
      ],
      "mapped",
      [
        32e3
      ]
    ],
    [
      [
        194923,
        194923
      ],
      "mapped",
      [
        155526
      ]
    ],
    [
      [
        194924,
        194924
      ],
      "mapped",
      [
        32099
      ]
    ],
    [
      [
        194925,
        194925
      ],
      "mapped",
      [
        17153
      ]
    ],
    [
      [
        194926,
        194926
      ],
      "mapped",
      [
        32199
      ]
    ],
    [
      [
        194927,
        194927
      ],
      "mapped",
      [
        32258
      ]
    ],
    [
      [
        194928,
        194928
      ],
      "mapped",
      [
        32325
      ]
    ],
    [
      [
        194929,
        194929
      ],
      "mapped",
      [
        17204
      ]
    ],
    [
      [
        194930,
        194930
      ],
      "mapped",
      [
        156200
      ]
    ],
    [
      [
        194931,
        194931
      ],
      "mapped",
      [
        156231
      ]
    ],
    [
      [
        194932,
        194932
      ],
      "mapped",
      [
        17241
      ]
    ],
    [
      [
        194933,
        194933
      ],
      "mapped",
      [
        156377
      ]
    ],
    [
      [
        194934,
        194934
      ],
      "mapped",
      [
        32634
      ]
    ],
    [
      [
        194935,
        194935
      ],
      "mapped",
      [
        156478
      ]
    ],
    [
      [
        194936,
        194936
      ],
      "mapped",
      [
        32661
      ]
    ],
    [
      [
        194937,
        194937
      ],
      "mapped",
      [
        32762
      ]
    ],
    [
      [
        194938,
        194938
      ],
      "mapped",
      [
        32773
      ]
    ],
    [
      [
        194939,
        194939
      ],
      "mapped",
      [
        156890
      ]
    ],
    [
      [
        194940,
        194940
      ],
      "mapped",
      [
        156963
      ]
    ],
    [
      [
        194941,
        194941
      ],
      "mapped",
      [
        32864
      ]
    ],
    [
      [
        194942,
        194942
      ],
      "mapped",
      [
        157096
      ]
    ],
    [
      [
        194943,
        194943
      ],
      "mapped",
      [
        32880
      ]
    ],
    [
      [
        194944,
        194944
      ],
      "mapped",
      [
        144223
      ]
    ],
    [
      [
        194945,
        194945
      ],
      "mapped",
      [
        17365
      ]
    ],
    [
      [
        194946,
        194946
      ],
      "mapped",
      [
        32946
      ]
    ],
    [
      [
        194947,
        194947
      ],
      "mapped",
      [
        33027
      ]
    ],
    [
      [
        194948,
        194948
      ],
      "mapped",
      [
        17419
      ]
    ],
    [
      [
        194949,
        194949
      ],
      "mapped",
      [
        33086
      ]
    ],
    [
      [
        194950,
        194950
      ],
      "mapped",
      [
        23221
      ]
    ],
    [
      [
        194951,
        194951
      ],
      "mapped",
      [
        157607
      ]
    ],
    [
      [
        194952,
        194952
      ],
      "mapped",
      [
        157621
      ]
    ],
    [
      [
        194953,
        194953
      ],
      "mapped",
      [
        144275
      ]
    ],
    [
      [
        194954,
        194954
      ],
      "mapped",
      [
        144284
      ]
    ],
    [
      [
        194955,
        194955
      ],
      "mapped",
      [
        33281
      ]
    ],
    [
      [
        194956,
        194956
      ],
      "mapped",
      [
        33284
      ]
    ],
    [
      [
        194957,
        194957
      ],
      "mapped",
      [
        36766
      ]
    ],
    [
      [
        194958,
        194958
      ],
      "mapped",
      [
        17515
      ]
    ],
    [
      [
        194959,
        194959
      ],
      "mapped",
      [
        33425
      ]
    ],
    [
      [
        194960,
        194960
      ],
      "mapped",
      [
        33419
      ]
    ],
    [
      [
        194961,
        194961
      ],
      "mapped",
      [
        33437
      ]
    ],
    [
      [
        194962,
        194962
      ],
      "mapped",
      [
        21171
      ]
    ],
    [
      [
        194963,
        194963
      ],
      "mapped",
      [
        33457
      ]
    ],
    [
      [
        194964,
        194964
      ],
      "mapped",
      [
        33459
      ]
    ],
    [
      [
        194965,
        194965
      ],
      "mapped",
      [
        33469
      ]
    ],
    [
      [
        194966,
        194966
      ],
      "mapped",
      [
        33510
      ]
    ],
    [
      [
        194967,
        194967
      ],
      "mapped",
      [
        158524
      ]
    ],
    [
      [
        194968,
        194968
      ],
      "mapped",
      [
        33509
      ]
    ],
    [
      [
        194969,
        194969
      ],
      "mapped",
      [
        33565
      ]
    ],
    [
      [
        194970,
        194970
      ],
      "mapped",
      [
        33635
      ]
    ],
    [
      [
        194971,
        194971
      ],
      "mapped",
      [
        33709
      ]
    ],
    [
      [
        194972,
        194972
      ],
      "mapped",
      [
        33571
      ]
    ],
    [
      [
        194973,
        194973
      ],
      "mapped",
      [
        33725
      ]
    ],
    [
      [
        194974,
        194974
      ],
      "mapped",
      [
        33767
      ]
    ],
    [
      [
        194975,
        194975
      ],
      "mapped",
      [
        33879
      ]
    ],
    [
      [
        194976,
        194976
      ],
      "mapped",
      [
        33619
      ]
    ],
    [
      [
        194977,
        194977
      ],
      "mapped",
      [
        33738
      ]
    ],
    [
      [
        194978,
        194978
      ],
      "mapped",
      [
        33740
      ]
    ],
    [
      [
        194979,
        194979
      ],
      "mapped",
      [
        33756
      ]
    ],
    [
      [
        194980,
        194980
      ],
      "mapped",
      [
        158774
      ]
    ],
    [
      [
        194981,
        194981
      ],
      "mapped",
      [
        159083
      ]
    ],
    [
      [
        194982,
        194982
      ],
      "mapped",
      [
        158933
      ]
    ],
    [
      [
        194983,
        194983
      ],
      "mapped",
      [
        17707
      ]
    ],
    [
      [
        194984,
        194984
      ],
      "mapped",
      [
        34033
      ]
    ],
    [
      [
        194985,
        194985
      ],
      "mapped",
      [
        34035
      ]
    ],
    [
      [
        194986,
        194986
      ],
      "mapped",
      [
        34070
      ]
    ],
    [
      [
        194987,
        194987
      ],
      "mapped",
      [
        160714
      ]
    ],
    [
      [
        194988,
        194988
      ],
      "mapped",
      [
        34148
      ]
    ],
    [
      [
        194989,
        194989
      ],
      "mapped",
      [
        159532
      ]
    ],
    [
      [
        194990,
        194990
      ],
      "mapped",
      [
        17757
      ]
    ],
    [
      [
        194991,
        194991
      ],
      "mapped",
      [
        17761
      ]
    ],
    [
      [
        194992,
        194992
      ],
      "mapped",
      [
        159665
      ]
    ],
    [
      [
        194993,
        194993
      ],
      "mapped",
      [
        159954
      ]
    ],
    [
      [
        194994,
        194994
      ],
      "mapped",
      [
        17771
      ]
    ],
    [
      [
        194995,
        194995
      ],
      "mapped",
      [
        34384
      ]
    ],
    [
      [
        194996,
        194996
      ],
      "mapped",
      [
        34396
      ]
    ],
    [
      [
        194997,
        194997
      ],
      "mapped",
      [
        34407
      ]
    ],
    [
      [
        194998,
        194998
      ],
      "mapped",
      [
        34409
      ]
    ],
    [
      [
        194999,
        194999
      ],
      "mapped",
      [
        34473
      ]
    ],
    [
      [
        195e3,
        195e3
      ],
      "mapped",
      [
        34440
      ]
    ],
    [
      [
        195001,
        195001
      ],
      "mapped",
      [
        34574
      ]
    ],
    [
      [
        195002,
        195002
      ],
      "mapped",
      [
        34530
      ]
    ],
    [
      [
        195003,
        195003
      ],
      "mapped",
      [
        34681
      ]
    ],
    [
      [
        195004,
        195004
      ],
      "mapped",
      [
        34600
      ]
    ],
    [
      [
        195005,
        195005
      ],
      "mapped",
      [
        34667
      ]
    ],
    [
      [
        195006,
        195006
      ],
      "mapped",
      [
        34694
      ]
    ],
    [
      [
        195007,
        195007
      ],
      "disallowed"
    ],
    [
      [
        195008,
        195008
      ],
      "mapped",
      [
        34785
      ]
    ],
    [
      [
        195009,
        195009
      ],
      "mapped",
      [
        34817
      ]
    ],
    [
      [
        195010,
        195010
      ],
      "mapped",
      [
        17913
      ]
    ],
    [
      [
        195011,
        195011
      ],
      "mapped",
      [
        34912
      ]
    ],
    [
      [
        195012,
        195012
      ],
      "mapped",
      [
        34915
      ]
    ],
    [
      [
        195013,
        195013
      ],
      "mapped",
      [
        161383
      ]
    ],
    [
      [
        195014,
        195014
      ],
      "mapped",
      [
        35031
      ]
    ],
    [
      [
        195015,
        195015
      ],
      "mapped",
      [
        35038
      ]
    ],
    [
      [
        195016,
        195016
      ],
      "mapped",
      [
        17973
      ]
    ],
    [
      [
        195017,
        195017
      ],
      "mapped",
      [
        35066
      ]
    ],
    [
      [
        195018,
        195018
      ],
      "mapped",
      [
        13499
      ]
    ],
    [
      [
        195019,
        195019
      ],
      "mapped",
      [
        161966
      ]
    ],
    [
      [
        195020,
        195020
      ],
      "mapped",
      [
        162150
      ]
    ],
    [
      [
        195021,
        195021
      ],
      "mapped",
      [
        18110
      ]
    ],
    [
      [
        195022,
        195022
      ],
      "mapped",
      [
        18119
      ]
    ],
    [
      [
        195023,
        195023
      ],
      "mapped",
      [
        35488
      ]
    ],
    [
      [
        195024,
        195024
      ],
      "mapped",
      [
        35565
      ]
    ],
    [
      [
        195025,
        195025
      ],
      "mapped",
      [
        35722
      ]
    ],
    [
      [
        195026,
        195026
      ],
      "mapped",
      [
        35925
      ]
    ],
    [
      [
        195027,
        195027
      ],
      "mapped",
      [
        162984
      ]
    ],
    [
      [
        195028,
        195028
      ],
      "mapped",
      [
        36011
      ]
    ],
    [
      [
        195029,
        195029
      ],
      "mapped",
      [
        36033
      ]
    ],
    [
      [
        195030,
        195030
      ],
      "mapped",
      [
        36123
      ]
    ],
    [
      [
        195031,
        195031
      ],
      "mapped",
      [
        36215
      ]
    ],
    [
      [
        195032,
        195032
      ],
      "mapped",
      [
        163631
      ]
    ],
    [
      [
        195033,
        195033
      ],
      "mapped",
      [
        133124
      ]
    ],
    [
      [
        195034,
        195034
      ],
      "mapped",
      [
        36299
      ]
    ],
    [
      [
        195035,
        195035
      ],
      "mapped",
      [
        36284
      ]
    ],
    [
      [
        195036,
        195036
      ],
      "mapped",
      [
        36336
      ]
    ],
    [
      [
        195037,
        195037
      ],
      "mapped",
      [
        133342
      ]
    ],
    [
      [
        195038,
        195038
      ],
      "mapped",
      [
        36564
      ]
    ],
    [
      [
        195039,
        195039
      ],
      "mapped",
      [
        36664
      ]
    ],
    [
      [
        195040,
        195040
      ],
      "mapped",
      [
        165330
      ]
    ],
    [
      [
        195041,
        195041
      ],
      "mapped",
      [
        165357
      ]
    ],
    [
      [
        195042,
        195042
      ],
      "mapped",
      [
        37012
      ]
    ],
    [
      [
        195043,
        195043
      ],
      "mapped",
      [
        37105
      ]
    ],
    [
      [
        195044,
        195044
      ],
      "mapped",
      [
        37137
      ]
    ],
    [
      [
        195045,
        195045
      ],
      "mapped",
      [
        165678
      ]
    ],
    [
      [
        195046,
        195046
      ],
      "mapped",
      [
        37147
      ]
    ],
    [
      [
        195047,
        195047
      ],
      "mapped",
      [
        37432
      ]
    ],
    [
      [
        195048,
        195048
      ],
      "mapped",
      [
        37591
      ]
    ],
    [
      [
        195049,
        195049
      ],
      "mapped",
      [
        37592
      ]
    ],
    [
      [
        195050,
        195050
      ],
      "mapped",
      [
        37500
      ]
    ],
    [
      [
        195051,
        195051
      ],
      "mapped",
      [
        37881
      ]
    ],
    [
      [
        195052,
        195052
      ],
      "mapped",
      [
        37909
      ]
    ],
    [
      [
        195053,
        195053
      ],
      "mapped",
      [
        166906
      ]
    ],
    [
      [
        195054,
        195054
      ],
      "mapped",
      [
        38283
      ]
    ],
    [
      [
        195055,
        195055
      ],
      "mapped",
      [
        18837
      ]
    ],
    [
      [
        195056,
        195056
      ],
      "mapped",
      [
        38327
      ]
    ],
    [
      [
        195057,
        195057
      ],
      "mapped",
      [
        167287
      ]
    ],
    [
      [
        195058,
        195058
      ],
      "mapped",
      [
        18918
      ]
    ],
    [
      [
        195059,
        195059
      ],
      "mapped",
      [
        38595
      ]
    ],
    [
      [
        195060,
        195060
      ],
      "mapped",
      [
        23986
      ]
    ],
    [
      [
        195061,
        195061
      ],
      "mapped",
      [
        38691
      ]
    ],
    [
      [
        195062,
        195062
      ],
      "mapped",
      [
        168261
      ]
    ],
    [
      [
        195063,
        195063
      ],
      "mapped",
      [
        168474
      ]
    ],
    [
      [
        195064,
        195064
      ],
      "mapped",
      [
        19054
      ]
    ],
    [
      [
        195065,
        195065
      ],
      "mapped",
      [
        19062
      ]
    ],
    [
      [
        195066,
        195066
      ],
      "mapped",
      [
        38880
      ]
    ],
    [
      [
        195067,
        195067
      ],
      "mapped",
      [
        168970
      ]
    ],
    [
      [
        195068,
        195068
      ],
      "mapped",
      [
        19122
      ]
    ],
    [
      [
        195069,
        195069
      ],
      "mapped",
      [
        169110
      ]
    ],
    [
      [
        195070,
        195071
      ],
      "mapped",
      [
        38923
      ]
    ],
    [
      [
        195072,
        195072
      ],
      "mapped",
      [
        38953
      ]
    ],
    [
      [
        195073,
        195073
      ],
      "mapped",
      [
        169398
      ]
    ],
    [
      [
        195074,
        195074
      ],
      "mapped",
      [
        39138
      ]
    ],
    [
      [
        195075,
        195075
      ],
      "mapped",
      [
        19251
      ]
    ],
    [
      [
        195076,
        195076
      ],
      "mapped",
      [
        39209
      ]
    ],
    [
      [
        195077,
        195077
      ],
      "mapped",
      [
        39335
      ]
    ],
    [
      [
        195078,
        195078
      ],
      "mapped",
      [
        39362
      ]
    ],
    [
      [
        195079,
        195079
      ],
      "mapped",
      [
        39422
      ]
    ],
    [
      [
        195080,
        195080
      ],
      "mapped",
      [
        19406
      ]
    ],
    [
      [
        195081,
        195081
      ],
      "mapped",
      [
        170800
      ]
    ],
    [
      [
        195082,
        195082
      ],
      "mapped",
      [
        39698
      ]
    ],
    [
      [
        195083,
        195083
      ],
      "mapped",
      [
        4e4
      ]
    ],
    [
      [
        195084,
        195084
      ],
      "mapped",
      [
        40189
      ]
    ],
    [
      [
        195085,
        195085
      ],
      "mapped",
      [
        19662
      ]
    ],
    [
      [
        195086,
        195086
      ],
      "mapped",
      [
        19693
      ]
    ],
    [
      [
        195087,
        195087
      ],
      "mapped",
      [
        40295
      ]
    ],
    [
      [
        195088,
        195088
      ],
      "mapped",
      [
        172238
      ]
    ],
    [
      [
        195089,
        195089
      ],
      "mapped",
      [
        19704
      ]
    ],
    [
      [
        195090,
        195090
      ],
      "mapped",
      [
        172293
      ]
    ],
    [
      [
        195091,
        195091
      ],
      "mapped",
      [
        172558
      ]
    ],
    [
      [
        195092,
        195092
      ],
      "mapped",
      [
        172689
      ]
    ],
    [
      [
        195093,
        195093
      ],
      "mapped",
      [
        40635
      ]
    ],
    [
      [
        195094,
        195094
      ],
      "mapped",
      [
        19798
      ]
    ],
    [
      [
        195095,
        195095
      ],
      "mapped",
      [
        40697
      ]
    ],
    [
      [
        195096,
        195096
      ],
      "mapped",
      [
        40702
      ]
    ],
    [
      [
        195097,
        195097
      ],
      "mapped",
      [
        40709
      ]
    ],
    [
      [
        195098,
        195098
      ],
      "mapped",
      [
        40719
      ]
    ],
    [
      [
        195099,
        195099
      ],
      "mapped",
      [
        40726
      ]
    ],
    [
      [
        195100,
        195100
      ],
      "mapped",
      [
        40763
      ]
    ],
    [
      [
        195101,
        195101
      ],
      "mapped",
      [
        173568
      ]
    ],
    [
      [
        195102,
        196605
      ],
      "disallowed"
    ],
    [
      [
        196606,
        196607
      ],
      "disallowed"
    ],
    [
      [
        196608,
        262141
      ],
      "disallowed"
    ],
    [
      [
        262142,
        262143
      ],
      "disallowed"
    ],
    [
      [
        262144,
        327677
      ],
      "disallowed"
    ],
    [
      [
        327678,
        327679
      ],
      "disallowed"
    ],
    [
      [
        327680,
        393213
      ],
      "disallowed"
    ],
    [
      [
        393214,
        393215
      ],
      "disallowed"
    ],
    [
      [
        393216,
        458749
      ],
      "disallowed"
    ],
    [
      [
        458750,
        458751
      ],
      "disallowed"
    ],
    [
      [
        458752,
        524285
      ],
      "disallowed"
    ],
    [
      [
        524286,
        524287
      ],
      "disallowed"
    ],
    [
      [
        524288,
        589821
      ],
      "disallowed"
    ],
    [
      [
        589822,
        589823
      ],
      "disallowed"
    ],
    [
      [
        589824,
        655357
      ],
      "disallowed"
    ],
    [
      [
        655358,
        655359
      ],
      "disallowed"
    ],
    [
      [
        655360,
        720893
      ],
      "disallowed"
    ],
    [
      [
        720894,
        720895
      ],
      "disallowed"
    ],
    [
      [
        720896,
        786429
      ],
      "disallowed"
    ],
    [
      [
        786430,
        786431
      ],
      "disallowed"
    ],
    [
      [
        786432,
        851965
      ],
      "disallowed"
    ],
    [
      [
        851966,
        851967
      ],
      "disallowed"
    ],
    [
      [
        851968,
        917501
      ],
      "disallowed"
    ],
    [
      [
        917502,
        917503
      ],
      "disallowed"
    ],
    [
      [
        917504,
        917504
      ],
      "disallowed"
    ],
    [
      [
        917505,
        917505
      ],
      "disallowed"
    ],
    [
      [
        917506,
        917535
      ],
      "disallowed"
    ],
    [
      [
        917536,
        917631
      ],
      "disallowed"
    ],
    [
      [
        917632,
        917759
      ],
      "disallowed"
    ],
    [
      [
        917760,
        917999
      ],
      "ignored"
    ],
    [
      [
        918e3,
        983037
      ],
      "disallowed"
    ],
    [
      [
        983038,
        983039
      ],
      "disallowed"
    ],
    [
      [
        983040,
        1048573
      ],
      "disallowed"
    ],
    [
      [
        1048574,
        1048575
      ],
      "disallowed"
    ],
    [
      [
        1048576,
        1114109
      ],
      "disallowed"
    ],
    [
      [
        1114110,
        1114111
      ],
      "disallowed"
    ]
  ];
});
var require_tr46 = __commonJSMin((exports, module2) => {
  "use strict";
  var punycode = __require("punycode");
  var mappingTable = (init_mappingTable(), __toCommonJS(mappingTable_exports));
  var PROCESSING_OPTIONS = {
    TRANSITIONAL: 0,
    NONTRANSITIONAL: 1
  };
  function normalize(str) {
    return str.split("\0").map(function(s) {
      return s.normalize("NFC");
    }).join("\0");
  }
  function findStatus(val) {
    var start = 0;
    var end = mappingTable.length - 1;
    while (start <= end) {
      var mid = Math.floor((start + end) / 2);
      var target = mappingTable[mid];
      if (target[0][0] <= val && target[0][1] >= val) {
        return target;
      } else if (target[0][0] > val) {
        end = mid - 1;
      } else {
        start = mid + 1;
      }
    }
    return null;
  }
  var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  function countSymbols(string) {
    return string.replace(regexAstralSymbols, "_").length;
  }
  function mapChars(domain_name, useSTD3, processing_option) {
    var hasError = false;
    var processed = "";
    var len = countSymbols(domain_name);
    for (var i = 0; i < len; ++i) {
      var codePoint = domain_name.codePointAt(i);
      var status = findStatus(codePoint);
      switch (status[1]) {
        case "disallowed":
          hasError = true;
          processed += String.fromCodePoint(codePoint);
          break;
        case "ignored":
          break;
        case "mapped":
          processed += String.fromCodePoint.apply(String, status[2]);
          break;
        case "deviation":
          if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
            processed += String.fromCodePoint.apply(String, status[2]);
          } else {
            processed += String.fromCodePoint(codePoint);
          }
          break;
        case "valid":
          processed += String.fromCodePoint(codePoint);
          break;
        case "disallowed_STD3_mapped":
          if (useSTD3) {
            hasError = true;
            processed += String.fromCodePoint(codePoint);
          } else {
            processed += String.fromCodePoint.apply(String, status[2]);
          }
          break;
        case "disallowed_STD3_valid":
          if (useSTD3) {
            hasError = true;
          }
          processed += String.fromCodePoint(codePoint);
          break;
      }
    }
    return {
      string: processed,
      error: hasError
    };
  }
  var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
  function validateLabel(label, processing_option) {
    if (label.substr(0, 4) === "xn--") {
      label = punycode.toUnicode(label);
      processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
    }
    var error = false;
    if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
      error = true;
    }
    var len = countSymbols(label);
    for (var i = 0; i < len; ++i) {
      var status = findStatus(label.codePointAt(i));
      if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
        error = true;
        break;
      }
    }
    return {
      label,
      error
    };
  }
  function processing(domain_name, useSTD3, processing_option) {
    var result = mapChars(domain_name, useSTD3, processing_option);
    result.string = normalize(result.string);
    var labels = result.string.split(".");
    for (var i = 0; i < labels.length; ++i) {
      try {
        var validation = validateLabel(labels[i]);
        labels[i] = validation.label;
        result.error = result.error || validation.error;
      } catch (e) {
        result.error = true;
      }
    }
    return {
      string: labels.join("."),
      error: result.error
    };
  }
  module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
    var result = processing(domain_name, useSTD3, processing_option);
    var labels = result.string.split(".");
    labels = labels.map(function(l) {
      try {
        return punycode.toASCII(l);
      } catch (e) {
        result.error = true;
        return l;
      }
    });
    if (verifyDnsLength) {
      var total = labels.slice(0, labels.length - 1).join(".").length;
      if (total.length > 253 || total.length === 0) {
        result.error = true;
      }
      for (var i = 0; i < labels.length; ++i) {
        if (labels.length > 63 || labels.length === 0) {
          result.error = true;
          break;
        }
      }
    }
    if (result.error)
      return null;
    return labels.join(".");
  };
  module2.exports.toUnicode = function(domain_name, useSTD3) {
    var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
    return {
      domain: result.string,
      error: result.error
    };
  };
  module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
});
var require_url_state_machine = __commonJSMin((exports, module2) => {
  "use strict";
  var punycode = __require("punycode");
  var tr46 = require_tr46();
  var specialSchemes = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var failure = Symbol("failure");
  function countSymbols(str) {
    return punycode.ucs2.decode(str).length;
  }
  function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? void 0 : String.fromCodePoint(c);
  }
  function isASCIIDigit(c) {
    return c >= 48 && c <= 57;
  }
  function isASCIIAlpha(c) {
    return c >= 65 && c <= 90 || c >= 97 && c <= 122;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
  }
  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  }
  function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== void 0;
  }
  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function utf8PercentEncode(c) {
    const buf = new Buffer(c);
    let str = "";
    for (let i = 0; i < buf.length; ++i) {
      str += percentEncode(buf[i]);
    }
    return str;
  }
  function utf8PercentDecode(str) {
    const input = new Buffer(str);
    const output = [];
    for (let i = 0; i < input.length; ++i) {
      if (input[i] !== 37) {
        output.push(input[i]);
      } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
        output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
        i += 2;
      } else {
        output.push(input[i]);
      }
    }
    return new Buffer(output).toString();
  }
  function isC0ControlPercentEncode(c) {
    return c <= 31 || c > 126;
  }
  var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function isPathPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    const cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    const numbers = [];
    for (const part of parts) {
      if (part === "") {
        return input;
      }
      const n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (let i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    let ipv4 = numbers.pop();
    let counter = 0;
    for (const n of numbers) {
      ipv4 += n * Math.pow(256, 3 - counter);
      ++counter;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    let output = "";
    let n = address;
    for (let i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = "." + output;
      }
      n = Math.floor(n / 256);
    }
    return output;
  }
  function parseIPv6(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = punycode.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      let value = 0;
      let length = 0;
      while (length < 4 && isASCIIHex(input[pointer])) {
        value = value * 16 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        let numbersSeen = 0;
        while (input[pointer] !== void 0) {
          let ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (isASCIIDigit(input[pointer])) {
            const number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === void 0) {
          return failure;
        }
      } else if (input[pointer] !== void 0) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    let output = "";
    const seqResult = findLongestZeroSequence(address);
    const compress = seqResult.idx;
    let ignore0 = false;
    for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  }
  function parseHost(input, isSpecialArg) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (!isSpecialArg) {
      return parseOpaqueHost(input);
    }
    const domain = utf8PercentDecode(input);
    const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (asciiDomain === null) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    let output = "";
    const decoded = punycode.ucs2.decode(input);
    for (let i = 0; i < decoded.length; ++i) {
      output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
  }
  function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1;
    let currStart = null;
    let currLen = 0;
    for (let i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    const path9 = url.path;
    if (path9.length === 0) {
      return;
    }
    if (url.scheme === "file" && path9.length === 1 && isNormalizedWindowsDriveLetter(path9[0])) {
      return;
    }
    path9.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/.test(string);
  }
  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      const res2 = trimControlChars(this.input);
      if (res2 !== this.input) {
        this.parseError = true;
      }
      this.input = res2;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
      const ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break;
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      this.buffer = "";
      if (this.stateOverride) {
        return false;
      }
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;
      const len = countSymbols(this.buffer);
      for (let pointer = 0; pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== void 0) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      const buffer = new Buffer(this.buffer);
      for (let i = 0; i < buffer.length; ++i) {
        if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
          this.url.query += percentEncode(buffer[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c)) {
    } else if (c === 0) {
      this.parseError = true;
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    let output = url.scheme + ":";
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += ":" + url.password;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output += "//";
    }
    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      for (const string of url.path) {
        output += "/" + string;
      }
    }
    if (url.query !== null) {
      output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += "#" + url.fragment;
    }
    return output;
  }
  function serializeOrigin(tuple) {
    let result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module2.exports.serializeURL = serializeURL;
  module2.exports.serializeURLOrigin = function(url) {
    switch (url.scheme) {
      case "blob":
        try {
          return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
        } catch (e) {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        return "file://";
      default:
        return "null";
    }
  };
  module2.exports.basicURLParse = function(input, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    const usm = new URLStateMachine(input, options2.baseURL, options2.encodingOverride, options2.url, options2.stateOverride);
    if (usm.failure) {
      return "failure";
    }
    return usm.url;
  };
  module2.exports.setTheUsername = function(url, username) {
    url.username = "";
    const decoded = punycode.ucs2.decode(username);
    for (let i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module2.exports.setThePassword = function(url, password) {
    url.password = "";
    const decoded = punycode.ucs2.decode(password);
    for (let i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module2.exports.serializeHost = serializeHost;
  module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module2.exports.serializeInteger = function(integer) {
    return String(integer);
  };
  module2.exports.parseURL = function(input, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return module2.exports.basicURLParse(input, { baseURL: options2.baseURL, encodingOverride: options2.encodingOverride });
  };
});
var require_URL_impl = __commonJSMin((exports) => {
  "use strict";
  var usm = require_url_state_machine();
  exports.implementation = class URLImpl {
    constructor(constructorArgs) {
      const url = constructorArgs[0];
      const base = constructorArgs[1];
      let parsedBase = null;
      if (base !== void 0) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === "failure") {
          throw new TypeError("Invalid base URL");
        }
      }
      const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
      if (parsedURL === "failure") {
        throw new TypeError("Invalid URL");
      }
      this._url = parsedURL;
    }
    get href() {
      return usm.serializeURL(this._url);
    }
    set href(v) {
      const parsedURL = usm.basicURLParse(v);
      if (parsedURL === "failure") {
        throw new TypeError("Invalid URL");
      }
      this._url = parsedURL;
    }
    get origin() {
      return usm.serializeURLOrigin(this._url);
    }
    get protocol() {
      return this._url.scheme + ":";
    }
    set protocol(v) {
      usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
    }
    get username() {
      return this._url.username;
    }
    set username(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      usm.setTheUsername(this._url, v);
    }
    get password() {
      return this._url.password;
    }
    set password(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      usm.setThePassword(this._url, v);
    }
    get host() {
      const url = this._url;
      if (url.host === null) {
        return "";
      }
      if (url.port === null) {
        return usm.serializeHost(url.host);
      }
      return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
    }
    set host(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }
      usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
    }
    get hostname() {
      if (this._url.host === null) {
        return "";
      }
      return usm.serializeHost(this._url.host);
    }
    set hostname(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }
      usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
    }
    get port() {
      if (this._url.port === null) {
        return "";
      }
      return usm.serializeInteger(this._url.port);
    }
    set port(v) {
      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }
      if (v === "") {
        this._url.port = null;
      } else {
        usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
      }
    }
    get pathname() {
      if (this._url.cannotBeABaseURL) {
        return this._url.path[0];
      }
      if (this._url.path.length === 0) {
        return "";
      }
      return "/" + this._url.path.join("/");
    }
    set pathname(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }
      this._url.path = [];
      usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
    }
    get search() {
      if (this._url.query === null || this._url.query === "") {
        return "";
      }
      return "?" + this._url.query;
    }
    set search(v) {
      const url = this._url;
      if (v === "") {
        url.query = null;
        return;
      }
      const input = v[0] === "?" ? v.substring(1) : v;
      url.query = "";
      usm.basicURLParse(input, { url, stateOverride: "query" });
    }
    get hash() {
      if (this._url.fragment === null || this._url.fragment === "") {
        return "";
      }
      return "#" + this._url.fragment;
    }
    set hash(v) {
      if (v === "") {
        this._url.fragment = null;
        return;
      }
      const input = v[0] === "#" ? v.substring(1) : v;
      this._url.fragment = "";
      usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
    }
    toJSON() {
      return this.href;
    }
  };
});
var require_URL = __commonJSMin((exports, module2) => {
  "use strict";
  var conversions = require_lib2();
  var utils = require_utils3();
  var Impl = require_URL_impl();
  var impl = utils.implSymbol;
  function URL3(url) {
    if (!this || this[impl] || !(this instanceof URL3)) {
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    }
    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 2; ++i) {
      args[i] = arguments[i];
    }
    args[0] = conversions["USVString"](args[0]);
    if (args[1] !== void 0) {
      args[1] = conversions["USVString"](args[1]);
    }
    module2.exports.setup(this, args);
  }
  URL3.prototype.toJSON = function toJSON() {
    if (!this || !module2.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 0; ++i) {
      args[i] = arguments[i];
    }
    return this[impl].toJSON.apply(this[impl], args);
  };
  Object.defineProperty(URL3.prototype, "href", {
    get() {
      return this[impl].href;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].href = V;
    },
    enumerable: true,
    configurable: true
  });
  URL3.prototype.toString = function() {
    if (!this || !module2.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    return this.href;
  };
  Object.defineProperty(URL3.prototype, "origin", {
    get() {
      return this[impl].origin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "protocol", {
    get() {
      return this[impl].protocol;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].protocol = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "username", {
    get() {
      return this[impl].username;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].username = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "password", {
    get() {
      return this[impl].password;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].password = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "host", {
    get() {
      return this[impl].host;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].host = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "hostname", {
    get() {
      return this[impl].hostname;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].hostname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "port", {
    get() {
      return this[impl].port;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].port = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "pathname", {
    get() {
      return this[impl].pathname;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].pathname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "search", {
    get() {
      return this[impl].search;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].search = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL3.prototype, "hash", {
    get() {
      return this[impl].hash;
    },
    set(V) {
      V = conversions["USVString"](V);
      this[impl].hash = V;
    },
    enumerable: true,
    configurable: true
  });
  module2.exports = {
    is(obj) {
      return !!obj && obj[impl] instanceof Impl.implementation;
    },
    create(constructorArgs, privateData) {
      let obj = Object.create(URL3.prototype);
      this.setup(obj, constructorArgs, privateData);
      return obj;
    },
    setup(obj, constructorArgs, privateData) {
      if (!privateData)
        privateData = {};
      privateData.wrapper = obj;
      obj[impl] = new Impl.implementation(constructorArgs, privateData);
      obj[impl][utils.wrapperSymbol] = obj;
    },
    interface: URL3,
    expose: {
      Window: { URL: URL3 },
      Worker: { URL: URL3 }
    }
  };
});
var require_public_api = __commonJSMin((exports) => {
  "use strict";
  exports.URL = require_URL().interface;
  exports.serializeURL = require_url_state_machine().serializeURL;
  exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
  exports.basicURLParse = require_url_state_machine().basicURLParse;
  exports.setTheUsername = require_url_state_machine().setTheUsername;
  exports.setThePassword = require_url_state_machine().setThePassword;
  exports.serializeHost = require_url_state_machine().serializeHost;
  exports.serializeInteger = require_url_state_machine().serializeInteger;
  exports.parseURL = require_url_state_machine().parseURL;
});
function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof import_stream.default)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof import_stream.default) {
    body.on("error", function(err) {
      const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error;
    });
  }
}
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof import_stream.default)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer, headers) {
  if (typeof convert !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct = headers.get("content-type");
  let charset = "utf-8";
  let res, str;
  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }
  str = buffer.slice(0, 1024).toString();
  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  }
  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert(buffer, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof import_stream.default) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
function validateName(name2) {
  name2 = `${name2}`;
  if (invalidTokenRegex.test(name2) || name2 === "") {
    throw new TypeError(`${name2} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map, name2) {
  name2 = name2.toLowerCase();
  for (const key in map) {
    if (key.toLowerCase() === name2) {
      return key;
    }
  }
  return void 0;
}
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
function createHeadersIterator(target, kind) {
  const iterator2 = Object.create(HeadersIteratorPrototype);
  iterator2[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator2;
}
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers();
  for (const name2 of Object.keys(obj)) {
    if (invalidTokenRegex.test(name2)) {
      continue;
    }
    if (Array.isArray(obj[name2])) {
      for (const val of obj[name2]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name2] === void 0) {
          headers[MAP][name2] = [val];
        } else {
          headers[MAP][name2].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name2])) {
      headers[MAP][name2] = [obj[name2]];
    }
  }
  return headers;
}
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL2(urlStr).toString();
  }
  return parse_url(urlStr);
}
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
function getNodeRequestOptions(request2) {
  const parsedURL = request2[INTERNALS$2].parsedURL;
  const headers = new Headers(request2[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request2.signal && request2.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
    contentLengthValue = "0";
  }
  if (request2.body != null) {
    const totalBytes = getTotalBytes(request2);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request2.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request2.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  return Object.assign({}, parsedURL, {
    method: request2.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
function fetch(url, opts) {
  if (!fetch.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch.Promise;
  return new fetch.Promise(function(resolve, reject) {
    const request2 = new Request(url, opts);
    const options2 = getNodeRequestOptions(request2);
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const signal = request2.signal;
    let response = null;
    const abort = function abort2() {
      let error = new AbortError("The user aborted a request.");
      reject(error);
      if (request2.body && request2.body instanceof import_stream.default.Readable) {
        request2.body.destroy(error);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options2);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request2.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
          finalize();
        }, request2.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request2.url} failed, reason: ${err.message}`, "system", err));
      finalize();
    });
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1(location, request2.url).toString();
        } catch (err) {
          if (request2.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request2.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request2.counter >= request2.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers(request2.headers),
              follow: request2.follow,
              counter: request2.counter + 1,
              agent: request2.agent,
              compress: request2.compress,
              method: request2.method,
              body: request2.body,
              signal: request2.signal,
              timeout: request2.timeout,
              size: request2.size
            };
            if (!isDomainOrSubdomain(request2.url, locationURL)) {
              for (const name2 of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name2);
              }
            }
            if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request2.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request2.size,
        timeout: request2.timeout,
        counter: request2.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(import_zlib.default.createInflate());
          } else {
            body = body.pipe(import_zlib.default.createInflateRaw());
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        return;
      }
      if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
        body = body.pipe(import_zlib.default.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request2);
  });
}
var import_whatwg_url, Readable, BUFFER, TYPE, Blob, convert, INTERNALS, PassThrough, invalidTokenRegex, invalidHeaderCharRegex, MAP, Headers, INTERNAL, HeadersIteratorPrototype, INTERNALS$1, STATUS_CODES, Response, INTERNALS$2, URL2, parse_url, format_url, streamDestructionSupported, Request, URL$1, PassThrough$1, isDomainOrSubdomain, lib_default;
var init_lib = __esmMin(() => {
  import_whatwg_url = __toESM2(require_public_api(), 1);
  Readable = import_stream.default.Readable;
  BUFFER = Symbol("buffer");
  TYPE = Symbol("type");
  Blob = class {
    constructor() {
      this[TYPE] = "";
      const blobParts = arguments[0];
      const options2 = arguments[1];
      const buffers = [];
      let size = 0;
      if (blobParts) {
        const a = blobParts;
        const length = Number(a.length);
        for (let i = 0; i < length; i++) {
          const element = a[i];
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      let type = options2 && options2.type !== void 0 && String(options2.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    get size() {
      return this[BUFFER].length;
    }
    get type() {
      return this[TYPE];
    }
    text() {
      return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
      const buf = this[BUFFER];
      const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
    stream() {
      const readable = new Readable();
      readable._read = function() {
      };
      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const size = this.size;
      const start = arguments[0];
      const end = arguments[1];
      let relativeStart, relativeEnd;
      if (start === void 0) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }
      if (end === void 0) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }
      const span = Math.max(relativeEnd - relativeStart, 0);
      const buffer = this[BUFFER];
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      const blob = new Blob([], { type: arguments[2] });
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  };
  Object.defineProperties(Blob.prototype, {
    size: { enumerable: true },
    type: { enumerable: true },
    slice: { enumerable: true }
  });
  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: "Blob",
    writable: false,
    enumerable: false,
    configurable: true
  });
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = "FetchError";
  try {
    convert = __require("encoding").convert;
  } catch (e) {
  }
  INTERNALS = Symbol("Body internals");
  PassThrough = import_stream.default.PassThrough;
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    arrayBuffer() {
      return consumeBody.call(this).then(function(buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    blob() {
      let ct = this.headers && this.headers.get("content-type") || "";
      return consumeBody.call(this).then(function(buf) {
        return Object.assign(new Blob([], {
          type: ct.toLowerCase()
        }), {
          [BUFFER]: buf
        });
      });
    },
    json() {
      var _this2 = this;
      return consumeBody.call(this).then(function(buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
        }
      });
    },
    text() {
      return consumeBody.call(this).then(function(buffer) {
        return buffer.toString();
      });
    },
    buffer() {
      return consumeBody.call(this);
    },
    textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function(buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };
  Object.defineProperties(Body.prototype, {
    body: { enumerable: true },
    bodyUsed: { enumerable: true },
    arrayBuffer: { enumerable: true },
    blob: { enumerable: true },
    json: { enumerable: true },
    text: { enumerable: true }
  });
  Body.mixIn = function(proto) {
    for (const name2 of Object.getOwnPropertyNames(Body.prototype)) {
      if (!(name2 in proto)) {
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name2);
        Object.defineProperty(proto, name2, desc);
      }
    }
  };
  Body.Promise = global.Promise;
  invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  MAP = Symbol("map");
  Headers = class {
    constructor() {
      let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
      this[MAP] = /* @__PURE__ */ Object.create(null);
      if (init instanceof Headers) {
        const rawHeaders = init.raw();
        const headerNames = Object.keys(rawHeaders);
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value);
          }
        }
        return;
      }
      if (init == null)
        ;
      else if (typeof init === "object") {
        const method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          const pairs = [];
          for (const pair of init) {
            if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
              throw new TypeError("Each header pair must be iterable");
            }
            pairs.push(Array.from(pair));
          }
          for (const pair of pairs) {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          for (const key of Object.keys(init)) {
            const value = init[key];
            this.append(key, value);
          }
        }
      } else {
        throw new TypeError("Provided initializer must be an object");
      }
    }
    get(name2) {
      name2 = `${name2}`;
      validateName(name2);
      const key = find(this[MAP], name2);
      if (key === void 0) {
        return null;
      }
      return this[MAP][key].join(", ");
    }
    forEach(callback) {
      let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      let pairs = getHeaders(this);
      let i = 0;
      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        const name2 = _pairs$i[0], value = _pairs$i[1];
        callback.call(thisArg, value, name2, this);
        pairs = getHeaders(this);
        i++;
      }
    }
    set(name2, value) {
      name2 = `${name2}`;
      value = `${value}`;
      validateName(name2);
      validateValue(value);
      const key = find(this[MAP], name2);
      this[MAP][key !== void 0 ? key : name2] = [value];
    }
    append(name2, value) {
      name2 = `${name2}`;
      value = `${value}`;
      validateName(name2);
      validateValue(value);
      const key = find(this[MAP], name2);
      if (key !== void 0) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name2] = [value];
      }
    }
    has(name2) {
      name2 = `${name2}`;
      validateName(name2);
      return find(this[MAP], name2) !== void 0;
    }
    delete(name2) {
      name2 = `${name2}`;
      validateName(name2);
      const key = find(this[MAP], name2);
      if (key !== void 0) {
        delete this[MAP][key];
      }
    }
    raw() {
      return this[MAP];
    }
    keys() {
      return createHeadersIterator(this, "key");
    }
    values() {
      return createHeadersIterator(this, "value");
    }
    [Symbol.iterator]() {
      return createHeadersIterator(this, "key+value");
    }
  };
  Headers.prototype.entries = Headers.prototype[Symbol.iterator];
  Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
    value: "Headers",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers.prototype, {
    get: { enumerable: true },
    forEach: { enumerable: true },
    set: { enumerable: true },
    append: { enumerable: true },
    has: { enumerable: true },
    delete: { enumerable: true },
    keys: { enumerable: true },
    values: { enumerable: true },
    entries: { enumerable: true }
  });
  INTERNAL = Symbol("internal");
  HeadersIteratorPrototype = Object.setPrototypeOf({
    next() {
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError("Value of `this` is not a HeadersIterator");
      }
      var _INTERNAL = this[INTERNAL];
      const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
      const values = getHeaders(target, kind);
      const len = values.length;
      if (index >= len) {
        return {
          value: void 0,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: "HeadersIterator",
    writable: false,
    enumerable: false,
    configurable: true
  });
  INTERNALS$1 = Symbol("Response internals");
  STATUS_CODES = import_http.default.STATUS_CODES;
  Response = class {
    constructor() {
      let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      Body.call(this, body, opts);
      const status = opts.status || 200;
      const headers = new Headers(opts.headers);
      if (body != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter
      };
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    clone() {
      return new Response(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  };
  Body.mixIn(Response.prototype);
  Object.defineProperties(Response.prototype, {
    url: { enumerable: true },
    status: { enumerable: true },
    ok: { enumerable: true },
    redirected: { enumerable: true },
    statusText: { enumerable: true },
    headers: { enumerable: true },
    clone: { enumerable: true }
  });
  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: "Response",
    writable: false,
    enumerable: false,
    configurable: true
  });
  INTERNALS$2 = Symbol("Request internals");
  URL2 = import_url.default.URL || import_whatwg_url.default.URL;
  parse_url = import_url.default.parse;
  format_url = import_url.default.format;
  streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
  Request = class {
    constructor(input) {
      let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      let parsedURL;
      if (!isRequest(input)) {
        if (input && input.href) {
          parsedURL = parseURL(input.href);
        } else {
          parsedURL = parseURL(`${input}`);
        }
        input = {};
      } else {
        parsedURL = parseURL(input.url);
      }
      let method = init.method || input.method || "GET";
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      const headers = new Headers(init.headers || input.headers || {});
      if (inputBody != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init)
        signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      }
      this[INTERNALS$2] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal
      };
      this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
      this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    get method() {
      return this[INTERNALS$2].method;
    }
    get url() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
      return this[INTERNALS$2].headers;
    }
    get redirect() {
      return this[INTERNALS$2].redirect;
    }
    get signal() {
      return this[INTERNALS$2].signal;
    }
    clone() {
      return new Request(this);
    }
  };
  Body.mixIn(Request.prototype);
  Object.defineProperty(Request.prototype, Symbol.toStringTag, {
    value: "Request",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request.prototype, {
    method: { enumerable: true },
    url: { enumerable: true },
    headers: { enumerable: true },
    redirect: { enumerable: true },
    clone: { enumerable: true },
    signal: { enumerable: true }
  });
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = "AbortError";
  URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
  PassThrough$1 = import_stream.default.PassThrough;
  isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
    const orig = new URL$1(original).hostname;
    const dest = new URL$1(destination).hostname;
    return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
  };
  fetch.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };
  fetch.Promise = global.Promise;
  lib_default = fetch;
});
var Deprecation;
var init_dist_web3 = __esmMin(() => {
  Deprecation = class extends Error {
    constructor(message) {
      super(message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = "Deprecation";
    }
  };
});
var require_wrappy = __commonJSMin((exports, module2) => {
  module2.exports = wrappy;
  function wrappy(fn, cb) {
    if (fn && cb)
      return wrappy(fn)(cb);
    if (typeof fn !== "function")
      throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
      wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      var ret = fn.apply(this, args);
      var cb2 = args[args.length - 1];
      if (typeof ret === "function" && ret !== cb2) {
        Object.keys(cb2).forEach(function(k) {
          ret[k] = cb2[k];
        });
      }
      return ret;
    }
  }
});
var require_once = __commonJSMin((exports, module2) => {
  var wrappy = require_wrappy();
  module2.exports = wrappy(once2);
  module2.exports.strict = wrappy(onceStrict);
  once2.proto = once2(function() {
    Object.defineProperty(Function.prototype, "once", {
      value: function() {
        return once2(this);
      },
      configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
      value: function() {
        return onceStrict(this);
      },
      configurable: true
    });
  });
  function once2(fn) {
    var f = function() {
      if (f.called)
        return f.value;
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
  }
  function onceStrict(fn) {
    var f = function() {
      if (f.called)
        throw new Error(f.onceError);
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    var name2 = fn.name || "Function wrapped with `once`";
    f.onceError = name2 + " shouldn't be called more than once";
    f.called = false;
    return f;
  }
});
var import_once, logOnceCode, logOnceHeaders, RequestError;
var init_dist_web4 = __esmMin(() => {
  init_dist_web3();
  import_once = __toESM2(require_once());
  logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
  logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
  RequestError = class extends Error {
    constructor(message, statusCode, options2) {
      super(message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = "HttpError";
      this.status = statusCode;
      let headers;
      if ("headers" in options2 && typeof options2.headers !== "undefined") {
        headers = options2.headers;
      }
      if ("response" in options2) {
        this.response = options2.response;
        headers = options2.response.headers;
      }
      const requestCopy = Object.assign({}, options2.request);
      if (options2.request.headers.authorization) {
        requestCopy.headers = Object.assign({}, options2.request.headers, {
          authorization: options2.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
        });
      }
      requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
      this.request = requestCopy;
      Object.defineProperty(this, "code", {
        get() {
          logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
          return statusCode;
        }
      });
      Object.defineProperty(this, "headers", {
        get() {
          logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
          return headers || {};
        }
      });
    }
  };
});
function getBufferResponse(response) {
  return response.arrayBuffer();
}
function fetchWrapper(requestOptions) {
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  const fetch2 = requestOptions.request && requestOptions.request.fetch || lib_default;
  return fetch2(requestOptions.url, Object.assign({
    method: requestOptions.method,
    body: requestOptions.body,
    headers: requestOptions.headers,
    redirect: requestOptions.redirect
  }, requestOptions.request)).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error = new RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers,
          data
        },
        request: requestOptions
      });
      throw error;
    }
    return getResponseData(response);
  }).then((data) => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch((error) => {
    if (error instanceof RequestError)
      throw error;
    throw new RequestError(error.message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json();
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
    }
    return data.message;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}
function withDefaults2(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults2.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults2.bind(null, endpoint2)
  });
}
var VERSION2, request;
var init_dist_web5 = __esmMin(() => {
  init_dist_web2();
  init_dist_web();
  init_is_plain_object();
  init_lib();
  init_dist_web4();
  VERSION2 = "5.6.3";
  request = withDefaults2(endpoint, {
    headers: {
      "user-agent": `octokit-request.js/${VERSION2} ${getUserAgent()}`
    }
  });
});
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
function graphql(request2, query, options2) {
  if (options2) {
    if (typeof query === "string" && "query" in options2) {
      return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
    }
    for (const key in options2) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
        continue;
      return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options2) : query;
  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(requestOptions, headers, response.data);
    }
    return response.data.data;
  });
}
function withDefaults3(request$1, newDefaults) {
  const newRequest = request$1.defaults(newDefaults);
  const newApi = (query, options2) => {
    return graphql(newRequest, query, options2);
  };
  return Object.assign(newApi, {
    defaults: withDefaults3.bind(null, newRequest),
    endpoint: request.endpoint
  });
}
function withCustomRequest(customRequest) {
  return withDefaults3(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}
var VERSION3, GraphqlResponseError, NON_VARIABLE_OPTIONS, FORBIDDEN_VARIABLE_OPTIONS, GHES_V3_SUFFIX_REGEX, graphql$1;
var init_dist_web6 = __esmMin(() => {
  init_dist_web5();
  init_dist_web();
  VERSION3 = "4.8.0";
  GraphqlResponseError = class extends Error {
    constructor(request2, headers, response) {
      super(_buildMessageForResponseErrors(response));
      this.request = request2;
      this.headers = headers;
      this.response = response;
      this.name = "GraphqlResponseError";
      this.errors = response.errors;
      this.data = response.data;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
    }
  };
  NON_VARIABLE_OPTIONS = [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "query",
    "mediaType"
  ];
  FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
  GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
  graphql$1 = withDefaults3(request, {
    headers: {
      "user-agent": `octokit-graphql.js/${VERSION3} ${getUserAgent()}`
    },
    method: "POST",
    url: "/graphql"
  });
});
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}
async function hook(token, request2, route, parameters) {
  const endpoint2 = request2.endpoint.merge(route, parameters);
  endpoint2.headers.authorization = withAuthorizationPrefix(token);
  return request2(endpoint2);
}
var REGEX_IS_INSTALLATION_LEGACY, REGEX_IS_INSTALLATION, REGEX_IS_USER_TO_SERVER, createTokenAuth;
var init_dist_web7 = __esmMin(() => {
  REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
  REGEX_IS_INSTALLATION = /^ghs_/;
  REGEX_IS_USER_TO_SERVER = /^ghu_/;
  createTokenAuth = function createTokenAuth2(token) {
    if (!token) {
      throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
    }
    if (typeof token !== "string") {
      throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
    }
    token = token.replace(/^(token|bearer) +/i, "");
    return Object.assign(auth.bind(null, token), {
      hook: hook.bind(null, token)
    });
  };
});
var dist_web_exports = {};
__export(dist_web_exports, {
  Octokit: () => Octokit
});
var import_before_after_hook, VERSION4, Octokit;
var init_dist_web8 = __esmMin(() => {
  init_dist_web();
  import_before_after_hook = __toESM2(require_before_after_hook());
  init_dist_web5();
  init_dist_web6();
  init_dist_web7();
  VERSION4 = "3.6.0";
  Octokit = class {
    constructor(options2 = {}) {
      const hook2 = new import_before_after_hook.Collection();
      const requestDefaults = {
        baseUrl: request.endpoint.DEFAULTS.baseUrl,
        headers: {},
        request: Object.assign({}, options2.request, {
          hook: hook2.bind(null, "request")
        }),
        mediaType: {
          previews: [],
          format: ""
        }
      };
      requestDefaults.headers["user-agent"] = [
        options2.userAgent,
        `octokit-core.js/${VERSION4} ${getUserAgent()}`
      ].filter(Boolean).join(" ");
      if (options2.baseUrl) {
        requestDefaults.baseUrl = options2.baseUrl;
      }
      if (options2.previews) {
        requestDefaults.mediaType.previews = options2.previews;
      }
      if (options2.timeZone) {
        requestDefaults.headers["time-zone"] = options2.timeZone;
      }
      this.request = request.defaults(requestDefaults);
      this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
      this.log = Object.assign({
        debug: () => {
        },
        info: () => {
        },
        warn: console.warn.bind(console),
        error: console.error.bind(console)
      }, options2.log);
      this.hook = hook2;
      if (!options2.authStrategy) {
        if (!options2.auth) {
          this.auth = async () => ({
            type: "unauthenticated"
          });
        } else {
          const auth2 = createTokenAuth(options2.auth);
          hook2.wrap("request", auth2.hook);
          this.auth = auth2;
        }
      } else {
        const { authStrategy, ...otherOptions } = options2;
        const auth2 = authStrategy(Object.assign({
          request: this.request,
          log: this.log,
          octokit: this,
          octokitOptions: otherOptions
        }, options2.auth));
        hook2.wrap("request", auth2.hook);
        this.auth = auth2;
      }
      const classConstructor = this.constructor;
      classConstructor.plugins.forEach((plugin) => {
        Object.assign(this, plugin(this, options2));
      });
    }
    static defaults(defaults) {
      const OctokitWithDefaults = class extends this {
        constructor(...args) {
          const options2 = args[0] || {};
          if (typeof defaults === "function") {
            super(defaults(options2));
            return;
          }
          super(Object.assign({}, defaults, options2, options2.userAgent && defaults.userAgent ? {
            userAgent: `${options2.userAgent} ${defaults.userAgent}`
          } : null));
        }
      };
      return OctokitWithDefaults;
    }
    static plugin(...newPlugins) {
      var _a;
      const currentPlugins = this.plugins;
      const NewOctokit = (_a = class extends this {
      }, _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a);
      return NewOctokit;
    }
  };
  Octokit.VERSION = VERSION4;
  Octokit.plugins = [];
});
var dist_web_exports2 = {};
__export(dist_web_exports2, {
  legacyRestEndpointMethods: () => legacyRestEndpointMethods,
  restEndpointMethods: () => restEndpointMethods
});
function endpointsToMethods(octokit, endpointsMap) {
  const newMethods = {};
  for (const [scope, endpoints] of Object.entries(endpointsMap)) {
    for (const [methodName, endpoint2] of Object.entries(endpoints)) {
      const [route, defaults, decorations] = endpoint2;
      const [method, url] = route.split(/ /);
      const endpointDefaults = Object.assign({ method, url }, defaults);
      if (!newMethods[scope]) {
        newMethods[scope] = {};
      }
      const scopeMethods = newMethods[scope];
      if (decorations) {
        scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
        continue;
      }
      scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
    }
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options2 = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options2 = Object.assign({}, options2, {
        data: options2[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options2);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options3 = requestWithDefaults.endpoint.merge(...args);
      for (const [name2, alias] of Object.entries(decorations.renamedParameters)) {
        if (name2 in options3) {
          octokit.log.warn(`"${name2}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
          if (!(alias in options3)) {
            options3[alias] = options3[name2];
          }
          delete options3[name2];
        }
      }
      return requestWithDefaults(options3);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}
function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit, Endpoints);
  return {
    rest: api
  };
}
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit, Endpoints);
  return {
    ...api,
    rest: api
  };
}
var Endpoints, VERSION5;
var init_dist_web9 = __esmMin(() => {
  Endpoints = {
    actions: {
      addCustomLabelsToSelfHostedRunnerForOrg: [
        "POST /orgs/{org}/actions/runners/{runner_id}/labels"
      ],
      addCustomLabelsToSelfHostedRunnerForRepo: [
        "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
      ],
      addSelectedRepoToOrgSecret: [
        "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
      ],
      approveWorkflowRun: [
        "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
      ],
      cancelWorkflowRun: [
        "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
      ],
      createOrUpdateEnvironmentSecret: [
        "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
      ],
      createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
      createOrUpdateRepoSecret: [
        "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
      ],
      createRegistrationTokenForOrg: [
        "POST /orgs/{org}/actions/runners/registration-token"
      ],
      createRegistrationTokenForRepo: [
        "POST /repos/{owner}/{repo}/actions/runners/registration-token"
      ],
      createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
      createRemoveTokenForRepo: [
        "POST /repos/{owner}/{repo}/actions/runners/remove-token"
      ],
      createWorkflowDispatch: [
        "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
      ],
      deleteArtifact: [
        "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
      ],
      deleteEnvironmentSecret: [
        "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
      ],
      deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
      deleteRepoSecret: [
        "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
      ],
      deleteSelfHostedRunnerFromOrg: [
        "DELETE /orgs/{org}/actions/runners/{runner_id}"
      ],
      deleteSelfHostedRunnerFromRepo: [
        "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
      ],
      deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
      deleteWorkflowRunLogs: [
        "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
      ],
      disableSelectedRepositoryGithubActionsOrganization: [
        "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
      ],
      disableWorkflow: [
        "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
      ],
      downloadArtifact: [
        "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
      ],
      downloadJobLogsForWorkflowRun: [
        "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
      ],
      downloadWorkflowRunAttemptLogs: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
      ],
      downloadWorkflowRunLogs: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
      ],
      enableSelectedRepositoryGithubActionsOrganization: [
        "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
      ],
      enableWorkflow: [
        "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
      ],
      getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
      getActionsCacheUsageByRepoForOrg: [
        "GET /orgs/{org}/actions/cache/usage-by-repository"
      ],
      getActionsCacheUsageForEnterprise: [
        "GET /enterprises/{enterprise}/actions/cache/usage"
      ],
      getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
      getAllowedActionsOrganization: [
        "GET /orgs/{org}/actions/permissions/selected-actions"
      ],
      getAllowedActionsRepository: [
        "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
      ],
      getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
      getEnvironmentPublicKey: [
        "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
      ],
      getEnvironmentSecret: [
        "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
      ],
      getGithubActionsDefaultWorkflowPermissionsEnterprise: [
        "GET /enterprises/{enterprise}/actions/permissions/workflow"
      ],
      getGithubActionsDefaultWorkflowPermissionsOrganization: [
        "GET /orgs/{org}/actions/permissions/workflow"
      ],
      getGithubActionsDefaultWorkflowPermissionsRepository: [
        "GET /repos/{owner}/{repo}/actions/permissions/workflow"
      ],
      getGithubActionsPermissionsOrganization: [
        "GET /orgs/{org}/actions/permissions"
      ],
      getGithubActionsPermissionsRepository: [
        "GET /repos/{owner}/{repo}/actions/permissions"
      ],
      getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
      getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
      getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
      getPendingDeploymentsForRun: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
      ],
      getRepoPermissions: [
        "GET /repos/{owner}/{repo}/actions/permissions",
        {},
        { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
      ],
      getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
      getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
      getReviewsForRun: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
      ],
      getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
      getSelfHostedRunnerForRepo: [
        "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
      ],
      getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
      getWorkflowAccessToRepository: [
        "GET /repos/{owner}/{repo}/actions/permissions/access"
      ],
      getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
      getWorkflowRunAttempt: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
      ],
      getWorkflowRunUsage: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
      ],
      getWorkflowUsage: [
        "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
      ],
      listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
      listEnvironmentSecrets: [
        "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
      ],
      listJobsForWorkflowRun: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
      ],
      listJobsForWorkflowRunAttempt: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
      ],
      listLabelsForSelfHostedRunnerForOrg: [
        "GET /orgs/{org}/actions/runners/{runner_id}/labels"
      ],
      listLabelsForSelfHostedRunnerForRepo: [
        "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
      ],
      listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
      listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
      listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
      listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
      listRunnerApplicationsForRepo: [
        "GET /repos/{owner}/{repo}/actions/runners/downloads"
      ],
      listSelectedReposForOrgSecret: [
        "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
      ],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [
        "GET /orgs/{org}/actions/permissions/repositories"
      ],
      listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
      listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
      listWorkflowRunArtifacts: [
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
      ],
      listWorkflowRuns: [
        "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
      ],
      listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
      reRunJobForWorkflowRun: [
        "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
      ],
      reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
      reRunWorkflowFailedJobs: [
        "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
      ],
      removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
        "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
      ],
      removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
        "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
      ],
      removeCustomLabelFromSelfHostedRunnerForOrg: [
        "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
      ],
      removeCustomLabelFromSelfHostedRunnerForRepo: [
        "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
      ],
      removeSelectedRepoFromOrgSecret: [
        "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
      ],
      reviewPendingDeploymentsForRun: [
        "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
      ],
      setAllowedActionsOrganization: [
        "PUT /orgs/{org}/actions/permissions/selected-actions"
      ],
      setAllowedActionsRepository: [
        "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
      ],
      setCustomLabelsForSelfHostedRunnerForOrg: [
        "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
      ],
      setCustomLabelsForSelfHostedRunnerForRepo: [
        "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
      ],
      setGithubActionsDefaultWorkflowPermissionsEnterprise: [
        "PUT /enterprises/{enterprise}/actions/permissions/workflow"
      ],
      setGithubActionsDefaultWorkflowPermissionsOrganization: [
        "PUT /orgs/{org}/actions/permissions/workflow"
      ],
      setGithubActionsDefaultWorkflowPermissionsRepository: [
        "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
      ],
      setGithubActionsPermissionsOrganization: [
        "PUT /orgs/{org}/actions/permissions"
      ],
      setGithubActionsPermissionsRepository: [
        "PUT /repos/{owner}/{repo}/actions/permissions"
      ],
      setSelectedReposForOrgSecret: [
        "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
      ],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [
        "PUT /orgs/{org}/actions/permissions/repositories"
      ],
      setWorkflowAccessToRepository: [
        "PUT /repos/{owner}/{repo}/actions/permissions/access"
      ]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
      deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
      deleteThreadSubscription: [
        "DELETE /notifications/threads/{thread_id}/subscription"
      ],
      getFeeds: ["GET /feeds"],
      getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
      getThread: ["GET /notifications/threads/{thread_id}"],
      getThreadSubscriptionForAuthenticatedUser: [
        "GET /notifications/threads/{thread_id}/subscription"
      ],
      listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
      listNotificationsForAuthenticatedUser: ["GET /notifications"],
      listOrgEventsForAuthenticatedUser: [
        "GET /users/{username}/events/orgs/{org}"
      ],
      listPublicEvents: ["GET /events"],
      listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
      listPublicEventsForUser: ["GET /users/{username}/events/public"],
      listPublicOrgEvents: ["GET /orgs/{org}/events"],
      listReceivedEventsForUser: ["GET /users/{username}/received_events"],
      listReceivedPublicEventsForUser: [
        "GET /users/{username}/received_events/public"
      ],
      listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
      listRepoNotificationsForAuthenticatedUser: [
        "GET /repos/{owner}/{repo}/notifications"
      ],
      listReposStarredByAuthenticatedUser: ["GET /user/starred"],
      listReposStarredByUser: ["GET /users/{username}/starred"],
      listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
      listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
      listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
      listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
      markNotificationsAsRead: ["PUT /notifications"],
      markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
      markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
      setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
      setThreadSubscription: [
        "PUT /notifications/threads/{thread_id}/subscription"
      ],
      starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
      unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
    },
    apps: {
      addRepoToInstallation: [
        "PUT /user/installations/{installation_id}/repositories/{repository_id}",
        {},
        { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
      ],
      addRepoToInstallationForAuthenticatedUser: [
        "PUT /user/installations/{installation_id}/repositories/{repository_id}"
      ],
      checkToken: ["POST /applications/{client_id}/token"],
      createFromManifest: ["POST /app-manifests/{code}/conversions"],
      createInstallationAccessToken: [
        "POST /app/installations/{installation_id}/access_tokens"
      ],
      deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
      deleteInstallation: ["DELETE /app/installations/{installation_id}"],
      deleteToken: ["DELETE /applications/{client_id}/token"],
      getAuthenticated: ["GET /app"],
      getBySlug: ["GET /apps/{app_slug}"],
      getInstallation: ["GET /app/installations/{installation_id}"],
      getOrgInstallation: ["GET /orgs/{org}/installation"],
      getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
      getSubscriptionPlanForAccount: [
        "GET /marketplace_listing/accounts/{account_id}"
      ],
      getSubscriptionPlanForAccountStubbed: [
        "GET /marketplace_listing/stubbed/accounts/{account_id}"
      ],
      getUserInstallation: ["GET /users/{username}/installation"],
      getWebhookConfigForApp: ["GET /app/hook/config"],
      getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
      listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
      listAccountsForPlanStubbed: [
        "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
      ],
      listInstallationReposForAuthenticatedUser: [
        "GET /user/installations/{installation_id}/repositories"
      ],
      listInstallations: ["GET /app/installations"],
      listInstallationsForAuthenticatedUser: ["GET /user/installations"],
      listPlans: ["GET /marketplace_listing/plans"],
      listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
      listReposAccessibleToInstallation: ["GET /installation/repositories"],
      listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
      listSubscriptionsForAuthenticatedUserStubbed: [
        "GET /user/marketplace_purchases/stubbed"
      ],
      listWebhookDeliveries: ["GET /app/hook/deliveries"],
      redeliverWebhookDelivery: [
        "POST /app/hook/deliveries/{delivery_id}/attempts"
      ],
      removeRepoFromInstallation: [
        "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
        {},
        { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
      ],
      removeRepoFromInstallationForAuthenticatedUser: [
        "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
      ],
      resetToken: ["PATCH /applications/{client_id}/token"],
      revokeInstallationAccessToken: ["DELETE /installation/token"],
      scopeToken: ["POST /applications/{client_id}/token/scoped"],
      suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
      unsuspendInstallation: [
        "DELETE /app/installations/{installation_id}/suspended"
      ],
      updateWebhookConfigForApp: ["PATCH /app/hook/config"]
    },
    billing: {
      getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
      getGithubActionsBillingUser: [
        "GET /users/{username}/settings/billing/actions"
      ],
      getGithubAdvancedSecurityBillingGhe: [
        "GET /enterprises/{enterprise}/settings/billing/advanced-security"
      ],
      getGithubAdvancedSecurityBillingOrg: [
        "GET /orgs/{org}/settings/billing/advanced-security"
      ],
      getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
      getGithubPackagesBillingUser: [
        "GET /users/{username}/settings/billing/packages"
      ],
      getSharedStorageBillingOrg: [
        "GET /orgs/{org}/settings/billing/shared-storage"
      ],
      getSharedStorageBillingUser: [
        "GET /users/{username}/settings/billing/shared-storage"
      ]
    },
    checks: {
      create: ["POST /repos/{owner}/{repo}/check-runs"],
      createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
      get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
      getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
      listAnnotations: [
        "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
      ],
      listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
      listForSuite: [
        "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
      ],
      listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
      rerequestRun: [
        "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
      ],
      rerequestSuite: [
        "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
      ],
      setSuitesPreferences: [
        "PATCH /repos/{owner}/{repo}/check-suites/preferences"
      ],
      update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
    },
    codeScanning: {
      deleteAnalysis: [
        "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
      ],
      getAlert: [
        "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        {},
        { renamedParameters: { alert_id: "alert_number" } }
      ],
      getAnalysis: [
        "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
      ],
      getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
      listAlertInstances: [
        "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
      ],
      listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
      listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
      listAlertsInstances: [
        "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        {},
        { renamed: ["codeScanning", "listAlertInstances"] }
      ],
      listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
      updateAlert: [
        "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
      ],
      uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
    },
    codesOfConduct: {
      getAllCodesOfConduct: ["GET /codes_of_conduct"],
      getConductCode: ["GET /codes_of_conduct/{key}"]
    },
    codespaces: {
      addRepositoryForSecretForAuthenticatedUser: [
        "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
      ],
      codespaceMachinesForAuthenticatedUser: [
        "GET /user/codespaces/{codespace_name}/machines"
      ],
      createForAuthenticatedUser: ["POST /user/codespaces"],
      createOrUpdateRepoSecret: [
        "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
      ],
      createOrUpdateSecretForAuthenticatedUser: [
        "PUT /user/codespaces/secrets/{secret_name}"
      ],
      createWithPrForAuthenticatedUser: [
        "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
      ],
      createWithRepoForAuthenticatedUser: [
        "POST /repos/{owner}/{repo}/codespaces"
      ],
      deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
      deleteRepoSecret: [
        "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
      ],
      deleteSecretForAuthenticatedUser: [
        "DELETE /user/codespaces/secrets/{secret_name}"
      ],
      exportForAuthenticatedUser: [
        "POST /user/codespaces/{codespace_name}/exports"
      ],
      getExportDetailsForAuthenticatedUser: [
        "GET /user/codespaces/{codespace_name}/exports/{export_id}"
      ],
      getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
      getPublicKeyForAuthenticatedUser: [
        "GET /user/codespaces/secrets/public-key"
      ],
      getRepoPublicKey: [
        "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
      ],
      getRepoSecret: [
        "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
      ],
      getSecretForAuthenticatedUser: [
        "GET /user/codespaces/secrets/{secret_name}"
      ],
      listDevcontainersInRepositoryForAuthenticatedUser: [
        "GET /repos/{owner}/{repo}/codespaces/devcontainers"
      ],
      listForAuthenticatedUser: ["GET /user/codespaces"],
      listInRepositoryForAuthenticatedUser: [
        "GET /repos/{owner}/{repo}/codespaces"
      ],
      listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
      listRepositoriesForSecretForAuthenticatedUser: [
        "GET /user/codespaces/secrets/{secret_name}/repositories"
      ],
      listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
      removeRepositoryForSecretForAuthenticatedUser: [
        "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
      ],
      repoMachinesForAuthenticatedUser: [
        "GET /repos/{owner}/{repo}/codespaces/machines"
      ],
      setRepositoriesForSecretForAuthenticatedUser: [
        "PUT /user/codespaces/secrets/{secret_name}/repositories"
      ],
      startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
      stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
      updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
    },
    dependabot: {
      addSelectedRepoToOrgSecret: [
        "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
      ],
      createOrUpdateOrgSecret: [
        "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
      ],
      createOrUpdateRepoSecret: [
        "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
      ],
      deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
      deleteRepoSecret: [
        "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
      ],
      getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
      getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
      getRepoPublicKey: [
        "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
      ],
      getRepoSecret: [
        "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
      ],
      listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
      listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
      listSelectedReposForOrgSecret: [
        "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
      ],
      removeSelectedRepoFromOrgSecret: [
        "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
      ],
      setSelectedReposForOrgSecret: [
        "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
      ]
    },
    dependencyGraph: {
      diffRange: [
        "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
      ]
    },
    emojis: { get: ["GET /emojis"] },
    enterpriseAdmin: {
      addCustomLabelsToSelfHostedRunnerForEnterprise: [
        "POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
      ],
      disableSelectedOrganizationGithubActionsEnterprise: [
        "DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
      ],
      enableSelectedOrganizationGithubActionsEnterprise: [
        "PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
      ],
      getAllowedActionsEnterprise: [
        "GET /enterprises/{enterprise}/actions/permissions/selected-actions"
      ],
      getGithubActionsPermissionsEnterprise: [
        "GET /enterprises/{enterprise}/actions/permissions"
      ],
      getServerStatistics: [
        "GET /enterprise-installation/{enterprise_or_org}/server-statistics"
      ],
      listLabelsForSelfHostedRunnerForEnterprise: [
        "GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
      ],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [
        "GET /enterprises/{enterprise}/actions/permissions/organizations"
      ],
      removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [
        "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
      ],
      removeCustomLabelFromSelfHostedRunnerForEnterprise: [
        "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"
      ],
      setAllowedActionsEnterprise: [
        "PUT /enterprises/{enterprise}/actions/permissions/selected-actions"
      ],
      setCustomLabelsForSelfHostedRunnerForEnterprise: [
        "PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
      ],
      setGithubActionsPermissionsEnterprise: [
        "PUT /enterprises/{enterprise}/actions/permissions"
      ],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [
        "PUT /enterprises/{enterprise}/actions/permissions/organizations"
      ]
    },
    gists: {
      checkIsStarred: ["GET /gists/{gist_id}/star"],
      create: ["POST /gists"],
      createComment: ["POST /gists/{gist_id}/comments"],
      delete: ["DELETE /gists/{gist_id}"],
      deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
      fork: ["POST /gists/{gist_id}/forks"],
      get: ["GET /gists/{gist_id}"],
      getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
      getRevision: ["GET /gists/{gist_id}/{sha}"],
      list: ["GET /gists"],
      listComments: ["GET /gists/{gist_id}/comments"],
      listCommits: ["GET /gists/{gist_id}/commits"],
      listForUser: ["GET /users/{username}/gists"],
      listForks: ["GET /gists/{gist_id}/forks"],
      listPublic: ["GET /gists/public"],
      listStarred: ["GET /gists/starred"],
      star: ["PUT /gists/{gist_id}/star"],
      unstar: ["DELETE /gists/{gist_id}/star"],
      update: ["PATCH /gists/{gist_id}"],
      updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
    },
    git: {
      createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
      createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
      createRef: ["POST /repos/{owner}/{repo}/git/refs"],
      createTag: ["POST /repos/{owner}/{repo}/git/tags"],
      createTree: ["POST /repos/{owner}/{repo}/git/trees"],
      deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
      getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
      getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
      getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
      getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
      getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
      listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
      updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
    },
    gitignore: {
      getAllTemplates: ["GET /gitignore/templates"],
      getTemplate: ["GET /gitignore/templates/{name}"]
    },
    interactions: {
      getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
      getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
      getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
      getRestrictionsForYourPublicRepos: [
        "GET /user/interaction-limits",
        {},
        { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
      ],
      removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
      removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
      removeRestrictionsForRepo: [
        "DELETE /repos/{owner}/{repo}/interaction-limits"
      ],
      removeRestrictionsForYourPublicRepos: [
        "DELETE /user/interaction-limits",
        {},
        { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
      ],
      setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
      setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
      setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
      setRestrictionsForYourPublicRepos: [
        "PUT /user/interaction-limits",
        {},
        { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
      ]
    },
    issues: {
      addAssignees: [
        "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
      ],
      addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
      checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
      create: ["POST /repos/{owner}/{repo}/issues"],
      createComment: [
        "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
      ],
      createLabel: ["POST /repos/{owner}/{repo}/labels"],
      createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
      deleteComment: [
        "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
      ],
      deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
      deleteMilestone: [
        "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
      ],
      get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
      getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
      getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
      getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
      getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
      list: ["GET /issues"],
      listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
      listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
      listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
      listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
      listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
      listEventsForTimeline: [
        "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
      ],
      listForAuthenticatedUser: ["GET /user/issues"],
      listForOrg: ["GET /orgs/{org}/issues"],
      listForRepo: ["GET /repos/{owner}/{repo}/issues"],
      listLabelsForMilestone: [
        "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
      ],
      listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
      listLabelsOnIssue: [
        "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
      ],
      listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
      lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
      removeAllLabels: [
        "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
      ],
      removeAssignees: [
        "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
      ],
      removeLabel: [
        "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
      ],
      setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
      unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
      update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
      updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
      updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
      updateMilestone: [
        "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
      ]
    },
    licenses: {
      get: ["GET /licenses/{license}"],
      getAllCommonlyUsed: ["GET /licenses"],
      getForRepo: ["GET /repos/{owner}/{repo}/license"]
    },
    markdown: {
      render: ["POST /markdown"],
      renderRaw: [
        "POST /markdown/raw",
        { headers: { "content-type": "text/plain; charset=utf-8" } }
      ]
    },
    meta: {
      get: ["GET /meta"],
      getOctocat: ["GET /octocat"],
      getZen: ["GET /zen"],
      root: ["GET /"]
    },
    migrations: {
      cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
      deleteArchiveForAuthenticatedUser: [
        "DELETE /user/migrations/{migration_id}/archive"
      ],
      deleteArchiveForOrg: [
        "DELETE /orgs/{org}/migrations/{migration_id}/archive"
      ],
      downloadArchiveForOrg: [
        "GET /orgs/{org}/migrations/{migration_id}/archive"
      ],
      getArchiveForAuthenticatedUser: [
        "GET /user/migrations/{migration_id}/archive"
      ],
      getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
      getImportStatus: ["GET /repos/{owner}/{repo}/import"],
      getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
      getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
      getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
      listForAuthenticatedUser: ["GET /user/migrations"],
      listForOrg: ["GET /orgs/{org}/migrations"],
      listReposForAuthenticatedUser: [
        "GET /user/migrations/{migration_id}/repositories"
      ],
      listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
      listReposForUser: [
        "GET /user/migrations/{migration_id}/repositories",
        {},
        { renamed: ["migrations", "listReposForAuthenticatedUser"] }
      ],
      mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
      setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
      startForAuthenticatedUser: ["POST /user/migrations"],
      startForOrg: ["POST /orgs/{org}/migrations"],
      startImport: ["PUT /repos/{owner}/{repo}/import"],
      unlockRepoForAuthenticatedUser: [
        "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
      ],
      unlockRepoForOrg: [
        "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
      ],
      updateImport: ["PATCH /repos/{owner}/{repo}/import"]
    },
    orgs: {
      blockUser: ["PUT /orgs/{org}/blocks/{username}"],
      cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
      checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
      checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
      checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
      convertMemberToOutsideCollaborator: [
        "PUT /orgs/{org}/outside_collaborators/{username}"
      ],
      createInvitation: ["POST /orgs/{org}/invitations"],
      createWebhook: ["POST /orgs/{org}/hooks"],
      deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
      get: ["GET /orgs/{org}"],
      getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
      getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
      getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
      getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
      getWebhookDelivery: [
        "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
      ],
      list: ["GET /organizations"],
      listAppInstallations: ["GET /orgs/{org}/installations"],
      listBlockedUsers: ["GET /orgs/{org}/blocks"],
      listCustomRoles: ["GET /organizations/{organization_id}/custom_roles"],
      listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
      listForAuthenticatedUser: ["GET /user/orgs"],
      listForUser: ["GET /users/{username}/orgs"],
      listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
      listMembers: ["GET /orgs/{org}/members"],
      listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
      listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
      listPendingInvitations: ["GET /orgs/{org}/invitations"],
      listPublicMembers: ["GET /orgs/{org}/public_members"],
      listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
      listWebhooks: ["GET /orgs/{org}/hooks"],
      pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
      redeliverWebhookDelivery: [
        "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
      ],
      removeMember: ["DELETE /orgs/{org}/members/{username}"],
      removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
      removeOutsideCollaborator: [
        "DELETE /orgs/{org}/outside_collaborators/{username}"
      ],
      removePublicMembershipForAuthenticatedUser: [
        "DELETE /orgs/{org}/public_members/{username}"
      ],
      setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
      setPublicMembershipForAuthenticatedUser: [
        "PUT /orgs/{org}/public_members/{username}"
      ],
      unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
      update: ["PATCH /orgs/{org}"],
      updateMembershipForAuthenticatedUser: [
        "PATCH /user/memberships/orgs/{org}"
      ],
      updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
      updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
    },
    packages: {
      deletePackageForAuthenticatedUser: [
        "DELETE /user/packages/{package_type}/{package_name}"
      ],
      deletePackageForOrg: [
        "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
      ],
      deletePackageForUser: [
        "DELETE /users/{username}/packages/{package_type}/{package_name}"
      ],
      deletePackageVersionForAuthenticatedUser: [
        "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      deletePackageVersionForOrg: [
        "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      deletePackageVersionForUser: [
        "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [
        "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
        {},
        { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
      ],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
        "GET /user/packages/{package_type}/{package_name}/versions",
        {},
        {
          renamed: [
            "packages",
            "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
          ]
        }
      ],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
        "GET /user/packages/{package_type}/{package_name}/versions"
      ],
      getAllPackageVersionsForPackageOwnedByOrg: [
        "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
      ],
      getAllPackageVersionsForPackageOwnedByUser: [
        "GET /users/{username}/packages/{package_type}/{package_name}/versions"
      ],
      getPackageForAuthenticatedUser: [
        "GET /user/packages/{package_type}/{package_name}"
      ],
      getPackageForOrganization: [
        "GET /orgs/{org}/packages/{package_type}/{package_name}"
      ],
      getPackageForUser: [
        "GET /users/{username}/packages/{package_type}/{package_name}"
      ],
      getPackageVersionForAuthenticatedUser: [
        "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      getPackageVersionForOrganization: [
        "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      getPackageVersionForUser: [
        "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
      ],
      listPackagesForAuthenticatedUser: ["GET /user/packages"],
      listPackagesForOrganization: ["GET /orgs/{org}/packages"],
      listPackagesForUser: ["GET /users/{username}/packages"],
      restorePackageForAuthenticatedUser: [
        "POST /user/packages/{package_type}/{package_name}/restore{?token}"
      ],
      restorePackageForOrg: [
        "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
      ],
      restorePackageForUser: [
        "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
      ],
      restorePackageVersionForAuthenticatedUser: [
        "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
      ],
      restorePackageVersionForOrg: [
        "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
      ],
      restorePackageVersionForUser: [
        "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
      ]
    },
    projects: {
      addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
      createCard: ["POST /projects/columns/{column_id}/cards"],
      createColumn: ["POST /projects/{project_id}/columns"],
      createForAuthenticatedUser: ["POST /user/projects"],
      createForOrg: ["POST /orgs/{org}/projects"],
      createForRepo: ["POST /repos/{owner}/{repo}/projects"],
      delete: ["DELETE /projects/{project_id}"],
      deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
      deleteColumn: ["DELETE /projects/columns/{column_id}"],
      get: ["GET /projects/{project_id}"],
      getCard: ["GET /projects/columns/cards/{card_id}"],
      getColumn: ["GET /projects/columns/{column_id}"],
      getPermissionForUser: [
        "GET /projects/{project_id}/collaborators/{username}/permission"
      ],
      listCards: ["GET /projects/columns/{column_id}/cards"],
      listCollaborators: ["GET /projects/{project_id}/collaborators"],
      listColumns: ["GET /projects/{project_id}/columns"],
      listForOrg: ["GET /orgs/{org}/projects"],
      listForRepo: ["GET /repos/{owner}/{repo}/projects"],
      listForUser: ["GET /users/{username}/projects"],
      moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
      moveColumn: ["POST /projects/columns/{column_id}/moves"],
      removeCollaborator: [
        "DELETE /projects/{project_id}/collaborators/{username}"
      ],
      update: ["PATCH /projects/{project_id}"],
      updateCard: ["PATCH /projects/columns/cards/{card_id}"],
      updateColumn: ["PATCH /projects/columns/{column_id}"]
    },
    pulls: {
      checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
      create: ["POST /repos/{owner}/{repo}/pulls"],
      createReplyForReviewComment: [
        "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
      ],
      createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
      createReviewComment: [
        "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
      ],
      deletePendingReview: [
        "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
      ],
      deleteReviewComment: [
        "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
      ],
      dismissReview: [
        "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
      ],
      get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
      getReview: [
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
      ],
      getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
      list: ["GET /repos/{owner}/{repo}/pulls"],
      listCommentsForReview: [
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
      ],
      listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
      listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
      listRequestedReviewers: [
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
      ],
      listReviewComments: [
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
      ],
      listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
      listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
      merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
      removeRequestedReviewers: [
        "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
      ],
      requestReviewers: [
        "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
      ],
      submitReview: [
        "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
      ],
      update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
      updateBranch: [
        "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
      ],
      updateReview: [
        "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
      ],
      updateReviewComment: [
        "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
      ]
    },
    rateLimit: { get: ["GET /rate_limit"] },
    reactions: {
      createForCommitComment: [
        "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
      ],
      createForIssue: [
        "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
      ],
      createForIssueComment: [
        "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
      ],
      createForPullRequestReviewComment: [
        "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
      ],
      createForRelease: [
        "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
      ],
      createForTeamDiscussionCommentInOrg: [
        "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
      ],
      createForTeamDiscussionInOrg: [
        "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
      ],
      deleteForCommitComment: [
        "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
      ],
      deleteForIssue: [
        "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
      ],
      deleteForIssueComment: [
        "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
      ],
      deleteForPullRequestComment: [
        "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
      ],
      deleteForRelease: [
        "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
      ],
      deleteForTeamDiscussion: [
        "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
      ],
      deleteForTeamDiscussionComment: [
        "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
      ],
      listForCommitComment: [
        "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
      ],
      listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
      listForIssueComment: [
        "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
      ],
      listForPullRequestReviewComment: [
        "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
      ],
      listForRelease: [
        "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
      ],
      listForTeamDiscussionCommentInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
      ],
      listForTeamDiscussionInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
      ]
    },
    repos: {
      acceptInvitation: [
        "PATCH /user/repository_invitations/{invitation_id}",
        {},
        { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
      ],
      acceptInvitationForAuthenticatedUser: [
        "PATCH /user/repository_invitations/{invitation_id}"
      ],
      addAppAccessRestrictions: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        {},
        { mapToData: "apps" }
      ],
      addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
      addStatusCheckContexts: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        {},
        { mapToData: "contexts" }
      ],
      addTeamAccessRestrictions: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        {},
        { mapToData: "teams" }
      ],
      addUserAccessRestrictions: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        {},
        { mapToData: "users" }
      ],
      checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
      checkVulnerabilityAlerts: [
        "GET /repos/{owner}/{repo}/vulnerability-alerts"
      ],
      codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
      compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
      compareCommitsWithBasehead: [
        "GET /repos/{owner}/{repo}/compare/{basehead}"
      ],
      createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
      createCommitComment: [
        "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
      ],
      createCommitSignatureProtection: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
      ],
      createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
      createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
      createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
      createDeploymentStatus: [
        "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
      ],
      createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
      createForAuthenticatedUser: ["POST /user/repos"],
      createFork: ["POST /repos/{owner}/{repo}/forks"],
      createInOrg: ["POST /orgs/{org}/repos"],
      createOrUpdateEnvironment: [
        "PUT /repos/{owner}/{repo}/environments/{environment_name}"
      ],
      createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
      createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
      createRelease: ["POST /repos/{owner}/{repo}/releases"],
      createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
      createUsingTemplate: [
        "POST /repos/{template_owner}/{template_repo}/generate"
      ],
      createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
      declineInvitation: [
        "DELETE /user/repository_invitations/{invitation_id}",
        {},
        { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
      ],
      declineInvitationForAuthenticatedUser: [
        "DELETE /user/repository_invitations/{invitation_id}"
      ],
      delete: ["DELETE /repos/{owner}/{repo}"],
      deleteAccessRestrictions: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
      ],
      deleteAdminBranchProtection: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
      ],
      deleteAnEnvironment: [
        "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
      ],
      deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
      deleteBranchProtection: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
      ],
      deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
      deleteCommitSignatureProtection: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
      ],
      deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
      deleteDeployment: [
        "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
      ],
      deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
      deleteInvitation: [
        "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
      ],
      deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
      deletePullRequestReviewProtection: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
      ],
      deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
      deleteReleaseAsset: [
        "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
      ],
      deleteTagProtection: [
        "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
      ],
      deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
      disableAutomatedSecurityFixes: [
        "DELETE /repos/{owner}/{repo}/automated-security-fixes"
      ],
      disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
      disableVulnerabilityAlerts: [
        "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
      ],
      downloadArchive: [
        "GET /repos/{owner}/{repo}/zipball/{ref}",
        {},
        { renamed: ["repos", "downloadZipballArchive"] }
      ],
      downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
      downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
      enableAutomatedSecurityFixes: [
        "PUT /repos/{owner}/{repo}/automated-security-fixes"
      ],
      enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
      enableVulnerabilityAlerts: [
        "PUT /repos/{owner}/{repo}/vulnerability-alerts"
      ],
      generateReleaseNotes: [
        "POST /repos/{owner}/{repo}/releases/generate-notes"
      ],
      get: ["GET /repos/{owner}/{repo}"],
      getAccessRestrictions: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
      ],
      getAdminBranchProtection: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
      ],
      getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
      getAllStatusCheckContexts: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
      ],
      getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
      getAppsWithAccessToProtectedBranch: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
      ],
      getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
      getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
      getBranchProtection: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection"
      ],
      getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
      getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
      getCollaboratorPermissionLevel: [
        "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
      ],
      getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
      getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
      getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
      getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
      getCommitSignatureProtection: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
      ],
      getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
      getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
      getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
      getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
      getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
      getDeploymentStatus: [
        "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
      ],
      getEnvironment: [
        "GET /repos/{owner}/{repo}/environments/{environment_name}"
      ],
      getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
      getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
      getPages: ["GET /repos/{owner}/{repo}/pages"],
      getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
      getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
      getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
      getPullRequestReviewProtection: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
      ],
      getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
      getReadme: ["GET /repos/{owner}/{repo}/readme"],
      getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
      getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
      getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
      getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
      getStatusChecksProtection: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
      ],
      getTeamsWithAccessToProtectedBranch: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
      ],
      getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
      getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
      getUsersWithAccessToProtectedBranch: [
        "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
      ],
      getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
      getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
      getWebhookConfigForRepo: [
        "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
      ],
      getWebhookDelivery: [
        "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
      ],
      listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
      listBranches: ["GET /repos/{owner}/{repo}/branches"],
      listBranchesForHeadCommit: [
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
      ],
      listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
      listCommentsForCommit: [
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
      ],
      listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
      listCommitStatusesForRef: [
        "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
      ],
      listCommits: ["GET /repos/{owner}/{repo}/commits"],
      listContributors: ["GET /repos/{owner}/{repo}/contributors"],
      listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
      listDeploymentStatuses: [
        "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
      ],
      listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
      listForAuthenticatedUser: ["GET /user/repos"],
      listForOrg: ["GET /orgs/{org}/repos"],
      listForUser: ["GET /users/{username}/repos"],
      listForks: ["GET /repos/{owner}/{repo}/forks"],
      listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
      listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
      listLanguages: ["GET /repos/{owner}/{repo}/languages"],
      listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
      listPublic: ["GET /repositories"],
      listPullRequestsAssociatedWithCommit: [
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
      ],
      listReleaseAssets: [
        "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
      ],
      listReleases: ["GET /repos/{owner}/{repo}/releases"],
      listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
      listTags: ["GET /repos/{owner}/{repo}/tags"],
      listTeams: ["GET /repos/{owner}/{repo}/teams"],
      listWebhookDeliveries: [
        "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
      ],
      listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
      merge: ["POST /repos/{owner}/{repo}/merges"],
      mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
      pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
      redeliverWebhookDelivery: [
        "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
      ],
      removeAppAccessRestrictions: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        {},
        { mapToData: "apps" }
      ],
      removeCollaborator: [
        "DELETE /repos/{owner}/{repo}/collaborators/{username}"
      ],
      removeStatusCheckContexts: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        {},
        { mapToData: "contexts" }
      ],
      removeStatusCheckProtection: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
      ],
      removeTeamAccessRestrictions: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        {},
        { mapToData: "teams" }
      ],
      removeUserAccessRestrictions: [
        "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        {},
        { mapToData: "users" }
      ],
      renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
      replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
      requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
      setAdminBranchProtection: [
        "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
      ],
      setAppAccessRestrictions: [
        "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        {},
        { mapToData: "apps" }
      ],
      setStatusCheckContexts: [
        "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        {},
        { mapToData: "contexts" }
      ],
      setTeamAccessRestrictions: [
        "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        {},
        { mapToData: "teams" }
      ],
      setUserAccessRestrictions: [
        "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        {},
        { mapToData: "users" }
      ],
      testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
      transfer: ["POST /repos/{owner}/{repo}/transfer"],
      update: ["PATCH /repos/{owner}/{repo}"],
      updateBranchProtection: [
        "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
      ],
      updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
      updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
      updateInvitation: [
        "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
      ],
      updatePullRequestReviewProtection: [
        "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
      ],
      updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
      updateReleaseAsset: [
        "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
      ],
      updateStatusCheckPotection: [
        "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        {},
        { renamed: ["repos", "updateStatusCheckProtection"] }
      ],
      updateStatusCheckProtection: [
        "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
      ],
      updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
      updateWebhookConfigForRepo: [
        "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
      ],
      uploadReleaseAsset: [
        "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
        { baseUrl: "https://uploads.github.com" }
      ]
    },
    search: {
      code: ["GET /search/code"],
      commits: ["GET /search/commits"],
      issuesAndPullRequests: ["GET /search/issues"],
      labels: ["GET /search/labels"],
      repos: ["GET /search/repositories"],
      topics: ["GET /search/topics"],
      users: ["GET /search/users"]
    },
    secretScanning: {
      getAlert: [
        "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
      ],
      listAlertsForEnterprise: [
        "GET /enterprises/{enterprise}/secret-scanning/alerts"
      ],
      listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
      listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
      listLocationsForAlert: [
        "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
      ],
      updateAlert: [
        "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
      ]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [
        "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
      ],
      addOrUpdateProjectPermissionsInOrg: [
        "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
      ],
      addOrUpdateRepoPermissionsInOrg: [
        "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
      ],
      checkPermissionsForProjectInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
      ],
      checkPermissionsForRepoInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
      ],
      create: ["POST /orgs/{org}/teams"],
      createDiscussionCommentInOrg: [
        "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
      ],
      createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
      deleteDiscussionCommentInOrg: [
        "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
      ],
      deleteDiscussionInOrg: [
        "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
      ],
      deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
      getByName: ["GET /orgs/{org}/teams/{team_slug}"],
      getDiscussionCommentInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
      ],
      getDiscussionInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
      ],
      getMembershipForUserInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
      ],
      list: ["GET /orgs/{org}/teams"],
      listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
      listDiscussionCommentsInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
      ],
      listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
      listForAuthenticatedUser: ["GET /user/teams"],
      listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
      listPendingInvitationsInOrg: [
        "GET /orgs/{org}/teams/{team_slug}/invitations"
      ],
      listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
      listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
      removeMembershipForUserInOrg: [
        "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
      ],
      removeProjectInOrg: [
        "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
      ],
      removeRepoInOrg: [
        "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
      ],
      updateDiscussionCommentInOrg: [
        "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
      ],
      updateDiscussionInOrg: [
        "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
      ],
      updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
    },
    users: {
      addEmailForAuthenticated: [
        "POST /user/emails",
        {},
        { renamed: ["users", "addEmailForAuthenticatedUser"] }
      ],
      addEmailForAuthenticatedUser: ["POST /user/emails"],
      block: ["PUT /user/blocks/{username}"],
      checkBlocked: ["GET /user/blocks/{username}"],
      checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
      checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
      createGpgKeyForAuthenticated: [
        "POST /user/gpg_keys",
        {},
        { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
      ],
      createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
      createPublicSshKeyForAuthenticated: [
        "POST /user/keys",
        {},
        { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
      ],
      createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
      deleteEmailForAuthenticated: [
        "DELETE /user/emails",
        {},
        { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
      ],
      deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
      deleteGpgKeyForAuthenticated: [
        "DELETE /user/gpg_keys/{gpg_key_id}",
        {},
        { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
      ],
      deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
      deletePublicSshKeyForAuthenticated: [
        "DELETE /user/keys/{key_id}",
        {},
        { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
      ],
      deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
      follow: ["PUT /user/following/{username}"],
      getAuthenticated: ["GET /user"],
      getByUsername: ["GET /users/{username}"],
      getContextForUser: ["GET /users/{username}/hovercard"],
      getGpgKeyForAuthenticated: [
        "GET /user/gpg_keys/{gpg_key_id}",
        {},
        { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
      ],
      getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
      getPublicSshKeyForAuthenticated: [
        "GET /user/keys/{key_id}",
        {},
        { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
      ],
      getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
      list: ["GET /users"],
      listBlockedByAuthenticated: [
        "GET /user/blocks",
        {},
        { renamed: ["users", "listBlockedByAuthenticatedUser"] }
      ],
      listBlockedByAuthenticatedUser: ["GET /user/blocks"],
      listEmailsForAuthenticated: [
        "GET /user/emails",
        {},
        { renamed: ["users", "listEmailsForAuthenticatedUser"] }
      ],
      listEmailsForAuthenticatedUser: ["GET /user/emails"],
      listFollowedByAuthenticated: [
        "GET /user/following",
        {},
        { renamed: ["users", "listFollowedByAuthenticatedUser"] }
      ],
      listFollowedByAuthenticatedUser: ["GET /user/following"],
      listFollowersForAuthenticatedUser: ["GET /user/followers"],
      listFollowersForUser: ["GET /users/{username}/followers"],
      listFollowingForUser: ["GET /users/{username}/following"],
      listGpgKeysForAuthenticated: [
        "GET /user/gpg_keys",
        {},
        { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
      ],
      listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
      listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
      listPublicEmailsForAuthenticated: [
        "GET /user/public_emails",
        {},
        { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
      ],
      listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
      listPublicKeysForUser: ["GET /users/{username}/keys"],
      listPublicSshKeysForAuthenticated: [
        "GET /user/keys",
        {},
        { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
      ],
      listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
      setPrimaryEmailVisibilityForAuthenticated: [
        "PATCH /user/email/visibility",
        {},
        { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
      ],
      setPrimaryEmailVisibilityForAuthenticatedUser: [
        "PATCH /user/email/visibility"
      ],
      unblock: ["DELETE /user/blocks/{username}"],
      unfollow: ["DELETE /user/following/{username}"],
      updateAuthenticated: ["PATCH /user"]
    }
  };
  VERSION5 = "5.15.0";
  restEndpointMethods.VERSION = VERSION5;
  legacyRestEndpointMethods.VERSION = VERSION5;
});
var dist_web_exports3 = {};
__export(dist_web_exports3, {
  composePaginateRest: () => composePaginateRest,
  isPaginatingEndpoint: () => isPaginatingEndpoint,
  paginateRest: () => paginateRest,
  paginatingEndpoints: () => paginatingEndpoints
});
function normalizePaginatedListResponse(response) {
  if (!response.data) {
    return {
      ...response,
      data: []
    };
  }
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization)
    return response;
  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;
  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }
  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }
  response.data.total_count = totalCount;
  return response;
}
function iterator(octokit, route, parameters) {
  const options2 = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options2.method;
  const headers = options2.headers;
  let url = options2.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url)
          return { done: true };
        try {
          const response = await requestMethod({ method, url, headers });
          const normalizedResponse = normalizePaginatedListResponse(response);
          url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
          return { value: normalizedResponse };
        } catch (error) {
          if (error.status !== 409)
            throw error;
          url = "";
          return {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}
function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = void 0;
  }
  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}
function gather(octokit, results, iterator2, mapFn) {
  return iterator2.next().then((result) => {
    if (result.done) {
      return results;
    }
    let earlyExit = false;
    function done() {
      earlyExit = true;
    }
    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
    if (earlyExit) {
      return results;
    }
    return gather(octokit, results, iterator2, mapFn);
  });
}
function isPaginatingEndpoint(arg) {
  if (typeof arg === "string") {
    return paginatingEndpoints.includes(arg);
  } else {
    return false;
  }
}
function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
var VERSION6, composePaginateRest, paginatingEndpoints;
var init_dist_web10 = __esmMin(() => {
  VERSION6 = "2.19.0";
  composePaginateRest = Object.assign(paginate, {
    iterator
  });
  paginatingEndpoints = [
    "GET /app/hook/deliveries",
    "GET /app/installations",
    "GET /applications/grants",
    "GET /authorizations",
    "GET /enterprises/{enterprise}/actions/permissions/organizations",
    "GET /enterprises/{enterprise}/actions/runner-groups",
    "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
    "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
    "GET /enterprises/{enterprise}/actions/runners",
    "GET /enterprises/{enterprise}/actions/runners/downloads",
    "GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels",
    "GET /enterprises/{enterprise}/secret-scanning/alerts",
    "GET /events",
    "GET /gists",
    "GET /gists/public",
    "GET /gists/starred",
    "GET /gists/{gist_id}/comments",
    "GET /gists/{gist_id}/commits",
    "GET /gists/{gist_id}/forks",
    "GET /installation/repositories",
    "GET /issues",
    "GET /marketplace_listing/plans",
    "GET /marketplace_listing/plans/{plan_id}/accounts",
    "GET /marketplace_listing/stubbed/plans",
    "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
    "GET /networks/{owner}/{repo}/events",
    "GET /notifications",
    "GET /organizations",
    "GET /organizations/{organization_id}/custom_roles",
    "GET /orgs/{org}/actions/permissions/repositories",
    "GET /orgs/{org}/actions/runner-groups",
    "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
    "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
    "GET /orgs/{org}/actions/runners",
    "GET /orgs/{org}/actions/runners/downloads",
    "GET /orgs/{org}/actions/runners/{runner_id}/labels",
    "GET /orgs/{org}/actions/secrets",
    "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/blocks",
    "GET /orgs/{org}/code-scanning/alerts",
    "GET /orgs/{org}/credential-authorizations",
    "GET /orgs/{org}/dependabot/secrets",
    "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/events",
    "GET /orgs/{org}/external-groups",
    "GET /orgs/{org}/failed_invitations",
    "GET /orgs/{org}/hooks",
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    "GET /orgs/{org}/installations",
    "GET /orgs/{org}/invitations",
    "GET /orgs/{org}/invitations/{invitation_id}/teams",
    "GET /orgs/{org}/issues",
    "GET /orgs/{org}/members",
    "GET /orgs/{org}/migrations",
    "GET /orgs/{org}/migrations/{migration_id}/repositories",
    "GET /orgs/{org}/outside_collaborators",
    "GET /orgs/{org}/packages",
    "GET /orgs/{org}/projects",
    "GET /orgs/{org}/public_members",
    "GET /orgs/{org}/repos",
    "GET /orgs/{org}/secret-scanning/alerts",
    "GET /orgs/{org}/team-sync/groups",
    "GET /orgs/{org}/teams",
    "GET /orgs/{org}/teams/{team_slug}/discussions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/external-groups",
    "GET /orgs/{org}/teams/{team_slug}/invitations",
    "GET /orgs/{org}/teams/{team_slug}/members",
    "GET /orgs/{org}/teams/{team_slug}/projects",
    "GET /orgs/{org}/teams/{team_slug}/repos",
    "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
    "GET /orgs/{org}/teams/{team_slug}/teams",
    "GET /projects/columns/{column_id}/cards",
    "GET /projects/{project_id}/collaborators",
    "GET /projects/{project_id}/columns",
    "GET /repos/{owner}/{repo}/actions/artifacts",
    "GET /repos/{owner}/{repo}/actions/runners",
    "GET /repos/{owner}/{repo}/actions/runners/downloads",
    "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
    "GET /repos/{owner}/{repo}/actions/runs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
    "GET /repos/{owner}/{repo}/actions/secrets",
    "GET /repos/{owner}/{repo}/actions/workflows",
    "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
    "GET /repos/{owner}/{repo}/assignees",
    "GET /repos/{owner}/{repo}/autolinks",
    "GET /repos/{owner}/{repo}/branches",
    "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
    "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
    "GET /repos/{owner}/{repo}/code-scanning/alerts",
    "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
    "GET /repos/{owner}/{repo}/code-scanning/analyses",
    "GET /repos/{owner}/{repo}/codespaces",
    "GET /repos/{owner}/{repo}/codespaces/devcontainers",
    "GET /repos/{owner}/{repo}/codespaces/secrets",
    "GET /repos/{owner}/{repo}/collaborators",
    "GET /repos/{owner}/{repo}/comments",
    "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/commits",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
    "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
    "GET /repos/{owner}/{repo}/contributors",
    "GET /repos/{owner}/{repo}/dependabot/secrets",
    "GET /repos/{owner}/{repo}/deployments",
    "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
    "GET /repos/{owner}/{repo}/events",
    "GET /repos/{owner}/{repo}/forks",
    "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
    "GET /repos/{owner}/{repo}/hooks",
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    "GET /repos/{owner}/{repo}/invitations",
    "GET /repos/{owner}/{repo}/issues",
    "GET /repos/{owner}/{repo}/issues/comments",
    "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/issues/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
    "GET /repos/{owner}/{repo}/keys",
    "GET /repos/{owner}/{repo}/labels",
    "GET /repos/{owner}/{repo}/milestones",
    "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
    "GET /repos/{owner}/{repo}/notifications",
    "GET /repos/{owner}/{repo}/pages/builds",
    "GET /repos/{owner}/{repo}/projects",
    "GET /repos/{owner}/{repo}/pulls",
    "GET /repos/{owner}/{repo}/pulls/comments",
    "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
    "GET /repos/{owner}/{repo}/releases",
    "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
    "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
    "GET /repos/{owner}/{repo}/secret-scanning/alerts",
    "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
    "GET /repos/{owner}/{repo}/stargazers",
    "GET /repos/{owner}/{repo}/subscribers",
    "GET /repos/{owner}/{repo}/tags",
    "GET /repos/{owner}/{repo}/tags/protection",
    "GET /repos/{owner}/{repo}/teams",
    "GET /repositories",
    "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
    "GET /scim/v2/enterprises/{enterprise}/Groups",
    "GET /scim/v2/enterprises/{enterprise}/Users",
    "GET /scim/v2/organizations/{org}/Users",
    "GET /search/code",
    "GET /search/commits",
    "GET /search/issues",
    "GET /search/labels",
    "GET /search/repositories",
    "GET /search/topics",
    "GET /search/users",
    "GET /teams/{team_id}/discussions",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
    "GET /teams/{team_id}/invitations",
    "GET /teams/{team_id}/members",
    "GET /teams/{team_id}/projects",
    "GET /teams/{team_id}/repos",
    "GET /teams/{team_id}/team-sync/group-mappings",
    "GET /teams/{team_id}/teams",
    "GET /user/blocks",
    "GET /user/codespaces",
    "GET /user/codespaces/secrets",
    "GET /user/codespaces/secrets/{secret_name}/repositories",
    "GET /user/emails",
    "GET /user/followers",
    "GET /user/following",
    "GET /user/gpg_keys",
    "GET /user/installations",
    "GET /user/installations/{installation_id}/repositories",
    "GET /user/issues",
    "GET /user/keys",
    "GET /user/marketplace_purchases",
    "GET /user/marketplace_purchases/stubbed",
    "GET /user/memberships/orgs",
    "GET /user/migrations",
    "GET /user/migrations/{migration_id}/repositories",
    "GET /user/orgs",
    "GET /user/packages",
    "GET /user/public_emails",
    "GET /user/repos",
    "GET /user/repository_invitations",
    "GET /user/starred",
    "GET /user/subscriptions",
    "GET /user/teams",
    "GET /users",
    "GET /users/{username}/events",
    "GET /users/{username}/events/orgs/{org}",
    "GET /users/{username}/events/public",
    "GET /users/{username}/followers",
    "GET /users/{username}/following",
    "GET /users/{username}/gists",
    "GET /users/{username}/gpg_keys",
    "GET /users/{username}/keys",
    "GET /users/{username}/orgs",
    "GET /users/{username}/packages",
    "GET /users/{username}/projects",
    "GET /users/{username}/received_events",
    "GET /users/{username}/received_events/public",
    "GET /users/{username}/repos",
    "GET /users/{username}/starred",
    "GET /users/{username}/subscriptions"
  ];
  paginateRest.VERSION = VERSION6;
});
var require_utils4 = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getOctokitOptions = exports.GitHub = exports.context = void 0;
  var Context = __importStar(require_context());
  var Utils = __importStar(require_utils2());
  var core_1 = (init_dist_web8(), __toCommonJS(dist_web_exports));
  var plugin_rest_endpoint_methods_1 = (init_dist_web9(), __toCommonJS(dist_web_exports2));
  var plugin_paginate_rest_1 = (init_dist_web10(), __toCommonJS(dist_web_exports3));
  exports.context = new Context.Context();
  var baseUrl = Utils.getApiBaseUrl();
  var defaults = {
    baseUrl,
    request: {
      agent: Utils.getProxyAgent(baseUrl)
    }
  };
  exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(defaults);
  function getOctokitOptions(token, options2) {
    const opts = Object.assign({}, options2 || {});
    const auth2 = Utils.getAuthString(token, opts);
    if (auth2) {
      opts.auth = auth2;
    }
    return opts;
  }
  exports.getOctokitOptions = getOctokitOptions;
});
var require_github = __commonJSMin((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getOctokit = exports.context = void 0;
  var Context = __importStar(require_context());
  var utils_1 = require_utils4();
  exports.context = new Context.Context();
  function getOctokit2(token, options2) {
    return new utils_1.GitHub(utils_1.getOctokitOptions(token, options2));
  }
  exports.getOctokit = getOctokit2;
});
var require_universalify = __commonJSMin((exports) => {
  "use strict";
  exports.fromCallback = function(fn) {
    return Object.defineProperty(function() {
      if (typeof arguments[arguments.length - 1] === "function")
        fn.apply(this, arguments);
      else {
        return new Promise((resolve, reject) => {
          arguments[arguments.length] = (err, res) => {
            if (err)
              return reject(err);
            resolve(res);
          };
          arguments.length++;
          fn.apply(this, arguments);
        });
      }
    }, "name", { value: fn.name });
  };
  exports.fromPromise = function(fn) {
    return Object.defineProperty(function() {
      const cb = arguments[arguments.length - 1];
      if (typeof cb !== "function")
        return fn.apply(this, arguments);
      else
        fn.apply(this, arguments).then((r) => cb(null, r), cb);
    }, "name", { value: fn.name });
  };
});
var require_polyfills = __commonJSMin((exports, module2) => {
  var constants = __require("constants");
  var origCwd = process.cwd;
  var cwd = null;
  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  if (typeof process.chdir === "function") {
    chdir = process.chdir;
    process.chdir = function(d) {
      cwd = null;
      chdir.call(process, d);
    };
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(process.chdir, chdir);
  }
  var chdir;
  module2.exports = patch;
  function patch(fs9) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs9);
    }
    if (!fs9.lutimes) {
      patchLutimes(fs9);
    }
    fs9.chown = chownFix(fs9.chown);
    fs9.fchown = chownFix(fs9.fchown);
    fs9.lchown = chownFix(fs9.lchown);
    fs9.chmod = chmodFix(fs9.chmod);
    fs9.fchmod = chmodFix(fs9.fchmod);
    fs9.lchmod = chmodFix(fs9.lchmod);
    fs9.chownSync = chownFixSync(fs9.chownSync);
    fs9.fchownSync = chownFixSync(fs9.fchownSync);
    fs9.lchownSync = chownFixSync(fs9.lchownSync);
    fs9.chmodSync = chmodFixSync(fs9.chmodSync);
    fs9.fchmodSync = chmodFixSync(fs9.fchmodSync);
    fs9.lchmodSync = chmodFixSync(fs9.lchmodSync);
    fs9.stat = statFix(fs9.stat);
    fs9.fstat = statFix(fs9.fstat);
    fs9.lstat = statFix(fs9.lstat);
    fs9.statSync = statFixSync(fs9.statSync);
    fs9.fstatSync = statFixSync(fs9.fstatSync);
    fs9.lstatSync = statFixSync(fs9.lstatSync);
    if (!fs9.lchmod) {
      fs9.lchmod = function(path9, mode, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs9.lchmodSync = function() {
      };
    }
    if (!fs9.lchown) {
      fs9.lchown = function(path9, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs9.lchownSync = function() {
      };
    }
    if (platform === "win32") {
      fs9.rename = function(fs$rename) {
        return function(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
              setTimeout(function() {
                fs9.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er);
          });
        };
      }(fs9.rename);
    }
    fs9.read = function(fs$read) {
      function read2(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs9, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs9, fd, buffer, offset, length, position, callback);
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(read2, fs$read);
      return read2;
    }(fs9.read);
    fs9.readSync = function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs9, fd, buffer, offset, length, position);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs9.readSync);
    function patchLchmod(fs10) {
      fs10.lchmod = function(path9, mode, callback) {
        fs10.open(path9, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs10.fchmod(fd, mode, function(err2) {
            fs10.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        });
      };
      fs10.lchmodSync = function(path9, mode) {
        var fd = fs10.openSync(path9, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs10.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs10.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs10.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs10) {
      if (constants.hasOwnProperty("O_SYMLINK")) {
        fs10.lutimes = function(path9, at, mt, cb) {
          fs10.open(path9, constants.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb)
                cb(er);
              return;
            }
            fs10.futimes(fd, at, mt, function(er2) {
              fs10.close(fd, function(er22) {
                if (cb)
                  cb(er2 || er22);
              });
            });
          });
        };
        fs10.lutimesSync = function(path9, at, mt) {
          var fd = fs10.openSync(path9, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs10.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs10.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs10.closeSync(fd);
            }
          }
          return ret;
        };
      } else {
        fs10.lutimes = function(_a, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs10.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode, cb) {
        return orig.call(fs9, target, mode, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode) {
        try {
          return orig.call(fs9, target, mode);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs9, target, uid, gid, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs9, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options2, cb) {
        if (typeof options2 === "function") {
          cb = options2;
          options2 = null;
        }
        function callback(er, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options2 ? orig.call(fs9, target, options2, callback) : orig.call(fs9, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options2) {
        var stats = options2 ? orig.call(fs9, target, options2) : orig.call(fs9, target);
        if (stats.uid < 0)
          stats.uid += 4294967296;
        if (stats.gid < 0)
          stats.gid += 4294967296;
        return stats;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
});
var require_legacy_streams = __commonJSMin((exports, module2) => {
  var Stream2 = __require("stream").Stream;
  module2.exports = legacy;
  function legacy(fs9) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path9, options2) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path9, options2);
      Stream2.call(this);
      var self2 = this;
      this.path = path9;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options2 = options2 || {};
      var keys = Object.keys(options2);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options2[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.end === void 0) {
          this.end = Infinity;
        } else if (typeof this.end !== "number") {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs9.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream(path9, options2) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path9, options2);
      Stream2.call(this);
      this.path = path9;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options2 = options2 || {};
      var keys = Object.keys(options2);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options2[key];
      }
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs9.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
        this.flush();
      }
    }
  }
});
var require_clone = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = clone2;
  var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone2(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy = { __proto__: getPrototypeOf(obj) };
    else
      var copy = /* @__PURE__ */ Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
});
var require_graceful_fs = __commonJSMin((exports, module2) => {
  var fs9 = __require("fs");
  var polyfills = require_polyfills();
  var legacy = require_legacy_streams();
  var clone2 = require_clone();
  var util2 = __require("util");
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context3, queue2) {
    Object.defineProperty(context3, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug = noop;
  if (util2.debuglog)
    debug = util2.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug = function() {
      var m = util2.format.apply(util2, arguments);
      m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
      console.error(m);
    };
  if (!fs9[gracefulQueue]) {
    queue = global[gracefulQueue] || [];
    publishQueue(fs9, queue);
    fs9.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs9, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs9.close);
    fs9.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs9, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs9.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug(fs9[gracefulQueue]);
        __require("assert").equal(fs9[gracefulQueue].length, 0);
      });
    }
  }
  var queue;
  if (!global[gracefulQueue]) {
    publishQueue(global, fs9[gracefulQueue]);
  }
  module2.exports = patch(clone2(fs9));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs9.__patched) {
    module2.exports = patch(fs9);
    fs9.__patched = true;
  }
  function patch(fs10) {
    polyfills(fs10);
    fs10.gracefulify = patch;
    fs10.createReadStream = createReadStream;
    fs10.createWriteStream = createWriteStream;
    var fs$readFile = fs10.readFile;
    fs10.readFile = readFile2;
    function readFile2(path9, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$readFile(path9, options2, cb);
      function go$readFile(path10, options3, cb2, startTime) {
        return fs$readFile(path10, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path10, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs10.writeFile;
    fs10.writeFile = writeFile;
    function writeFile(path9, data, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$writeFile(path9, data, options2, cb);
      function go$writeFile(path10, data2, options3, cb2, startTime) {
        return fs$writeFile(path10, data2, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path10, data2, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs10.appendFile;
    if (fs$appendFile)
      fs10.appendFile = appendFile;
    function appendFile(path9, data, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$appendFile(path9, data, options2, cb);
      function go$appendFile(path10, data2, options3, cb2, startTime) {
        return fs$appendFile(path10, data2, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path10, data2, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs10.copyFile;
    if (fs$copyFile)
      fs10.copyFile = copyFile;
    function copyFile(src, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src, dest, flags, cb);
      function go$copyFile(src2, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src2, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs10.readdir;
    fs10.readdir = readdir;
    function readdir(path9, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$readdir(path9, options2, cb);
      function go$readdir(path10, options3, cb2, startTime) {
        return fs$readdir(path10, options3, function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readdir, [path10, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        });
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs10);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs10.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs10.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs10, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs10, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs10, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs10, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path9, options2) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path9, options2) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path9, options2) {
      return new fs10.ReadStream(path9, options2);
    }
    function createWriteStream(path9, options2) {
      return new fs10.WriteStream(path9, options2);
    }
    var fs$open = fs10.open;
    fs10.open = open;
    function open(path9, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path9, flags, mode, cb);
      function go$open(path10, flags2, mode2, cb2, startTime) {
        return fs$open(path10, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path10, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs10;
  }
  function enqueue(elem) {
    debug("ENQUEUE", elem[0].name, elem[1]);
    fs9[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now = Date.now();
    for (var i = 0; i < fs9[gracefulQueue].length; ++i) {
      if (fs9[gracefulQueue][i].length > 2) {
        fs9[gracefulQueue][i][3] = now;
        fs9[gracefulQueue][i][4] = now;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = void 0;
    if (fs9[gracefulQueue].length === 0)
      return;
    var elem = fs9[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === void 0) {
      debug("RETRY", fn.name, args);
      fn.apply(null, args);
    } else if (Date.now() - startTime >= 6e4) {
      debug("TIMEOUT", fn.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args.concat([startTime]));
      } else {
        fs9[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === void 0) {
      retryTimer = setTimeout(retry, 0);
    }
  }
});
var require_fs = __commonJSMin((exports) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var api = [
    "access",
    "appendFile",
    "chmod",
    "chown",
    "close",
    "copyFile",
    "fchmod",
    "fchown",
    "fdatasync",
    "fstat",
    "fsync",
    "ftruncate",
    "futimes",
    "lchown",
    "lchmod",
    "link",
    "lstat",
    "mkdir",
    "mkdtemp",
    "open",
    "readFile",
    "readdir",
    "readlink",
    "realpath",
    "rename",
    "rmdir",
    "stat",
    "symlink",
    "truncate",
    "unlink",
    "utimes",
    "writeFile"
  ].filter((key) => {
    return typeof fs9[key] === "function";
  });
  Object.keys(fs9).forEach((key) => {
    if (key === "promises") {
      return;
    }
    exports[key] = fs9[key];
  });
  api.forEach((method) => {
    exports[method] = u(fs9[method]);
  });
  exports.exists = function(filename, callback) {
    if (typeof callback === "function") {
      return fs9.exists(filename, callback);
    }
    return new Promise((resolve) => {
      return fs9.exists(filename, resolve);
    });
  };
  exports.read = function(fd, buffer, offset, length, position, callback) {
    if (typeof callback === "function") {
      return fs9.read(fd, buffer, offset, length, position, callback);
    }
    return new Promise((resolve, reject) => {
      fs9.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesRead, buffer: buffer2 });
      });
    });
  };
  exports.write = function(fd, buffer, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs9.write(fd, buffer, ...args);
    }
    return new Promise((resolve, reject) => {
      fs9.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesWritten, buffer: buffer2 });
      });
    });
  };
});
var require_win32 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  function getRootPath(p) {
    p = path9.normalize(path9.resolve(p)).split(path9.sep);
    if (p.length > 0)
      return p[0];
    return null;
  }
  var INVALID_PATH_CHARS = /[<>:"|?*]/;
  function invalidWin32Path(p) {
    const rp = getRootPath(p);
    p = p.replace(rp, "");
    return INVALID_PATH_CHARS.test(p);
  }
  module2.exports = {
    getRootPath,
    invalidWin32Path
  };
});
var require_mkdirs = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var invalidWin32Path = require_win32().invalidWin32Path;
  var o777 = parseInt("0777", 8);
  function mkdirs(p, opts, callback, made) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    } else if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      return callback(errInval);
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs9;
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    callback = callback || function() {
    };
    p = path9.resolve(p);
    xfs.mkdir(p, mode, (er) => {
      if (!er) {
        made = made || p;
        return callback(null, made);
      }
      switch (er.code) {
        case "ENOENT":
          if (path9.dirname(p) === p)
            return callback(er);
          mkdirs(path9.dirname(p), opts, (er2, made2) => {
            if (er2)
              callback(er2, made2);
            else
              mkdirs(p, opts, callback, made2);
          });
          break;
        default:
          xfs.stat(p, (er2, stat) => {
            if (er2 || !stat.isDirectory())
              callback(er, made);
            else
              callback(null, made);
          });
          break;
      }
    });
  }
  module2.exports = mkdirs;
});
var require_mkdirs_sync = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var invalidWin32Path = require_win32().invalidWin32Path;
  var o777 = parseInt("0777", 8);
  function mkdirsSync(p, opts, made) {
    if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs9;
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      throw errInval;
    }
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    p = path9.resolve(p);
    try {
      xfs.mkdirSync(p, mode);
      made = made || p;
    } catch (err0) {
      if (err0.code === "ENOENT") {
        if (path9.dirname(p) === p)
          throw err0;
        made = mkdirsSync(path9.dirname(p), opts, made);
        mkdirsSync(p, opts, made);
      } else {
        let stat;
        try {
          stat = xfs.statSync(p);
        } catch (err1) {
          throw err0;
        }
        if (!stat.isDirectory())
          throw err0;
      }
    }
    return made;
  }
  module2.exports = mkdirsSync;
});
var require_mkdirs2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var mkdirs = u(require_mkdirs());
  var mkdirsSync = require_mkdirs_sync();
  module2.exports = {
    mkdirs,
    mkdirsSync,
    mkdirp: mkdirs,
    mkdirpSync: mkdirsSync,
    ensureDir: mkdirs,
    ensureDirSync: mkdirsSync
  };
});
var require_utimes = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var os2 = __require("os");
  var path9 = __require("path");
  function hasMillisResSync() {
    let tmpfile = path9.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path9.join(os2.tmpdir(), tmpfile);
    const d = new Date(1435410243862);
    fs9.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
    const fd = fs9.openSync(tmpfile, "r+");
    fs9.futimesSync(fd, d, d);
    fs9.closeSync(fd);
    return fs9.statSync(tmpfile).mtime > 1435410243e3;
  }
  function hasMillisRes(callback) {
    let tmpfile = path9.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path9.join(os2.tmpdir(), tmpfile);
    const d = new Date(1435410243862);
    fs9.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
      if (err)
        return callback(err);
      fs9.open(tmpfile, "r+", (err2, fd) => {
        if (err2)
          return callback(err2);
        fs9.futimes(fd, d, d, (err3) => {
          if (err3)
            return callback(err3);
          fs9.close(fd, (err4) => {
            if (err4)
              return callback(err4);
            fs9.stat(tmpfile, (err5, stats) => {
              if (err5)
                return callback(err5);
              callback(null, stats.mtime > 1435410243e3);
            });
          });
        });
      });
    });
  }
  function timeRemoveMillis(timestamp) {
    if (typeof timestamp === "number") {
      return Math.floor(timestamp / 1e3) * 1e3;
    } else if (timestamp instanceof Date) {
      return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
    } else {
      throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
    }
  }
  function utimesMillis(path10, atime, mtime, callback) {
    fs9.open(path10, "r+", (err, fd) => {
      if (err)
        return callback(err);
      fs9.futimes(fd, atime, mtime, (futimesErr) => {
        fs9.close(fd, (closeErr) => {
          if (callback)
            callback(futimesErr || closeErr);
        });
      });
    });
  }
  function utimesMillisSync(path10, atime, mtime) {
    const fd = fs9.openSync(path10, "r+");
    fs9.futimesSync(fd, atime, mtime);
    return fs9.closeSync(fd);
  }
  module2.exports = {
    hasMillisRes,
    hasMillisResSync,
    timeRemoveMillis,
    utimesMillis,
    utimesMillisSync
  };
});
var require_buffer = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = function(size) {
    if (typeof Buffer.allocUnsafe === "function") {
      try {
        return Buffer.allocUnsafe(size);
      } catch (e) {
        return new Buffer(size);
      }
    }
    return new Buffer(size);
  };
});
var require_copy_sync = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdirpSync = require_mkdirs2().mkdirsSync;
  var utimesSync = require_utimes().utimesMillisSync;
  var notExist = Symbol("notExist");
  function copySync(src, dest, opts) {
    if (typeof opts === "function") {
      opts = { filter: opts };
    }
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    const destStat = checkPaths(src, dest);
    if (opts.filter && !opts.filter(src, dest))
      return;
    const destParent = path9.dirname(dest);
    if (!fs9.existsSync(destParent))
      mkdirpSync(destParent);
    return startCopy(destStat, src, dest, opts);
  }
  function startCopy(destStat, src, dest, opts) {
    if (opts.filter && !opts.filter(src, dest))
      return;
    return getStats(destStat, src, dest, opts);
  }
  function getStats(destStat, src, dest, opts) {
    const statSync = opts.dereference ? fs9.statSync : fs9.lstatSync;
    const srcStat = statSync(src);
    if (srcStat.isDirectory())
      return onDir(srcStat, destStat, src, dest, opts);
    else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
      return onFile(srcStat, destStat, src, dest, opts);
    else if (srcStat.isSymbolicLink())
      return onLink(destStat, src, dest, opts);
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (destStat === notExist)
      return copyFile(srcStat, src, dest, opts);
    return mayCopyFile(srcStat, src, dest, opts);
  }
  function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.overwrite) {
      fs9.unlinkSync(dest);
      return copyFile(srcStat, src, dest, opts);
    } else if (opts.errorOnExist) {
      throw new Error(`'${dest}' already exists`);
    }
  }
  function copyFile(srcStat, src, dest, opts) {
    if (typeof fs9.copyFileSync === "function") {
      fs9.copyFileSync(src, dest);
      fs9.chmodSync(dest, srcStat.mode);
      if (opts.preserveTimestamps) {
        return utimesSync(dest, srcStat.atime, srcStat.mtime);
      }
      return;
    }
    return copyFileFallback(srcStat, src, dest, opts);
  }
  function copyFileFallback(srcStat, src, dest, opts) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = require_buffer()(BUF_LENGTH);
    const fdr = fs9.openSync(src, "r");
    const fdw = fs9.openSync(dest, "w", srcStat.mode);
    let pos = 0;
    while (pos < srcStat.size) {
      const bytesRead = fs9.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      fs9.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }
    if (opts.preserveTimestamps)
      fs9.futimesSync(fdw, srcStat.atime, srcStat.mtime);
    fs9.closeSync(fdr);
    fs9.closeSync(fdw);
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (destStat === notExist)
      return mkDirAndCopy(srcStat, src, dest, opts);
    if (destStat && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
    }
    return copyDir(src, dest, opts);
  }
  function mkDirAndCopy(srcStat, src, dest, opts) {
    fs9.mkdirSync(dest);
    copyDir(src, dest, opts);
    return fs9.chmodSync(dest, srcStat.mode);
  }
  function copyDir(src, dest, opts) {
    fs9.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
  }
  function copyDirItem(item, src, dest, opts) {
    const srcItem = path9.join(src, item);
    const destItem = path9.join(dest, item);
    const destStat = checkPaths(srcItem, destItem);
    return startCopy(destStat, srcItem, destItem, opts);
  }
  function onLink(destStat, src, dest, opts) {
    let resolvedSrc = fs9.readlinkSync(src);
    if (opts.dereference) {
      resolvedSrc = path9.resolve(process.cwd(), resolvedSrc);
    }
    if (destStat === notExist) {
      return fs9.symlinkSync(resolvedSrc, dest);
    } else {
      let resolvedDest;
      try {
        resolvedDest = fs9.readlinkSync(dest);
      } catch (err) {
        if (err.code === "EINVAL" || err.code === "UNKNOWN")
          return fs9.symlinkSync(resolvedSrc, dest);
        throw err;
      }
      if (opts.dereference) {
        resolvedDest = path9.resolve(process.cwd(), resolvedDest);
      }
      if (isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (fs9.statSync(dest).isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      return copyLink(resolvedSrc, dest);
    }
  }
  function copyLink(resolvedSrc, dest) {
    fs9.unlinkSync(dest);
    return fs9.symlinkSync(resolvedSrc, dest);
  }
  function isSrcSubdir(src, dest) {
    const srcArray = path9.resolve(src).split(path9.sep);
    const destArray = path9.resolve(dest).split(path9.sep);
    return srcArray.reduce((acc, current, i) => acc && destArray[i] === current, true);
  }
  function checkStats(src, dest) {
    const srcStat = fs9.statSync(src);
    let destStat;
    try {
      destStat = fs9.statSync(dest);
    } catch (err) {
      if (err.code === "ENOENT")
        return { srcStat, destStat: notExist };
      throw err;
    }
    return { srcStat, destStat };
  }
  function checkPaths(src, dest) {
    const { srcStat, destStat } = checkStats(src, dest);
    if (destStat.ino && destStat.ino === srcStat.ino) {
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`);
    }
    return destStat;
  }
  module2.exports = copySync;
});
var require_copy_sync2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    copySync: require_copy_sync()
  };
});
var require_path_exists = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromPromise;
  var fs9 = require_fs();
  function pathExists(path9) {
    return fs9.access(path9).then(() => true).catch(() => false);
  }
  module2.exports = {
    pathExists: u(pathExists),
    pathExistsSync: fs9.existsSync
  };
});
var require_copy = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdirp = require_mkdirs2().mkdirs;
  var pathExists = require_path_exists().pathExists;
  var utimes = require_utimes().utimesMillis;
  var notExist = Symbol("notExist");
  function copy(src, dest, opts, cb) {
    if (typeof opts === "function" && !cb) {
      cb = opts;
      opts = {};
    } else if (typeof opts === "function") {
      opts = { filter: opts };
    }
    cb = cb || function() {
    };
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    checkPaths(src, dest, (err, destStat) => {
      if (err)
        return cb(err);
      if (opts.filter)
        return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
      return checkParentDir(destStat, src, dest, opts, cb);
    });
  }
  function checkParentDir(destStat, src, dest, opts, cb) {
    const destParent = path9.dirname(dest);
    pathExists(destParent, (err, dirExists) => {
      if (err)
        return cb(err);
      if (dirExists)
        return startCopy(destStat, src, dest, opts, cb);
      mkdirp(destParent, (err2) => {
        if (err2)
          return cb(err2);
        return startCopy(destStat, src, dest, opts, cb);
      });
    });
  }
  function handleFilter(onInclude, destStat, src, dest, opts, cb) {
    Promise.resolve(opts.filter(src, dest)).then((include) => {
      if (include) {
        if (destStat)
          return onInclude(destStat, src, dest, opts, cb);
        return onInclude(src, dest, opts, cb);
      }
      return cb();
    }, (error) => cb(error));
  }
  function startCopy(destStat, src, dest, opts, cb) {
    if (opts.filter)
      return handleFilter(getStats, destStat, src, dest, opts, cb);
    return getStats(destStat, src, dest, opts, cb);
  }
  function getStats(destStat, src, dest, opts, cb) {
    const stat = opts.dereference ? fs9.stat : fs9.lstat;
    stat(src, (err, srcStat) => {
      if (err)
        return cb(err);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts, cb);
    });
  }
  function onFile(srcStat, destStat, src, dest, opts, cb) {
    if (destStat === notExist)
      return copyFile(srcStat, src, dest, opts, cb);
    return mayCopyFile(srcStat, src, dest, opts, cb);
  }
  function mayCopyFile(srcStat, src, dest, opts, cb) {
    if (opts.overwrite) {
      fs9.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return copyFile(srcStat, src, dest, opts, cb);
      });
    } else if (opts.errorOnExist) {
      return cb(new Error(`'${dest}' already exists`));
    } else
      return cb();
  }
  function copyFile(srcStat, src, dest, opts, cb) {
    if (typeof fs9.copyFile === "function") {
      return fs9.copyFile(src, dest, (err) => {
        if (err)
          return cb(err);
        return setDestModeAndTimestamps(srcStat, dest, opts, cb);
      });
    }
    return copyFileFallback(srcStat, src, dest, opts, cb);
  }
  function copyFileFallback(srcStat, src, dest, opts, cb) {
    const rs = fs9.createReadStream(src);
    rs.on("error", (err) => cb(err)).once("open", () => {
      const ws = fs9.createWriteStream(dest, { mode: srcStat.mode });
      ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
    });
  }
  function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
    fs9.chmod(dest, srcStat.mode, (err) => {
      if (err)
        return cb(err);
      if (opts.preserveTimestamps) {
        return utimes(dest, srcStat.atime, srcStat.mtime, cb);
      }
      return cb();
    });
  }
  function onDir(srcStat, destStat, src, dest, opts, cb) {
    if (destStat === notExist)
      return mkDirAndCopy(srcStat, src, dest, opts, cb);
    if (destStat && !destStat.isDirectory()) {
      return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
    }
    return copyDir(src, dest, opts, cb);
  }
  function mkDirAndCopy(srcStat, src, dest, opts, cb) {
    fs9.mkdir(dest, (err) => {
      if (err)
        return cb(err);
      copyDir(src, dest, opts, (err2) => {
        if (err2)
          return cb(err2);
        return fs9.chmod(dest, srcStat.mode, cb);
      });
    });
  }
  function copyDir(src, dest, opts, cb) {
    fs9.readdir(src, (err, items) => {
      if (err)
        return cb(err);
      return copyDirItems(items, src, dest, opts, cb);
    });
  }
  function copyDirItems(items, src, dest, opts, cb) {
    const item = items.pop();
    if (!item)
      return cb();
    return copyDirItem(items, item, src, dest, opts, cb);
  }
  function copyDirItem(items, item, src, dest, opts, cb) {
    const srcItem = path9.join(src, item);
    const destItem = path9.join(dest, item);
    checkPaths(srcItem, destItem, (err, destStat) => {
      if (err)
        return cb(err);
      startCopy(destStat, srcItem, destItem, opts, (err2) => {
        if (err2)
          return cb(err2);
        return copyDirItems(items, src, dest, opts, cb);
      });
    });
  }
  function onLink(destStat, src, dest, opts, cb) {
    fs9.readlink(src, (err, resolvedSrc) => {
      if (err)
        return cb(err);
      if (opts.dereference) {
        resolvedSrc = path9.resolve(process.cwd(), resolvedSrc);
      }
      if (destStat === notExist) {
        return fs9.symlink(resolvedSrc, dest, cb);
      } else {
        fs9.readlink(dest, (err2, resolvedDest) => {
          if (err2) {
            if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
              return fs9.symlink(resolvedSrc, dest, cb);
            return cb(err2);
          }
          if (opts.dereference) {
            resolvedDest = path9.resolve(process.cwd(), resolvedDest);
          }
          if (isSrcSubdir(resolvedSrc, resolvedDest)) {
            return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
          }
          if (destStat.isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {
            return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
          }
          return copyLink(resolvedSrc, dest, cb);
        });
      }
    });
  }
  function copyLink(resolvedSrc, dest, cb) {
    fs9.unlink(dest, (err) => {
      if (err)
        return cb(err);
      return fs9.symlink(resolvedSrc, dest, cb);
    });
  }
  function isSrcSubdir(src, dest) {
    const srcArray = path9.resolve(src).split(path9.sep);
    const destArray = path9.resolve(dest).split(path9.sep);
    return srcArray.reduce((acc, current, i) => acc && destArray[i] === current, true);
  }
  function checkStats(src, dest, cb) {
    fs9.stat(src, (err, srcStat) => {
      if (err)
        return cb(err);
      fs9.stat(dest, (err2, destStat) => {
        if (err2) {
          if (err2.code === "ENOENT")
            return cb(null, { srcStat, destStat: notExist });
          return cb(err2);
        }
        return cb(null, { srcStat, destStat });
      });
    });
  }
  function checkPaths(src, dest, cb) {
    checkStats(src, dest, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      if (destStat.ino && destStat.ino === srcStat.ino) {
        return cb(new Error("Source and destination must not be the same."));
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        return cb(new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`));
      }
      return cb(null, destStat);
    });
  }
  module2.exports = copy;
});
var require_copy2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  module2.exports = {
    copy: u(require_copy())
  };
});
var require_rimraf = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var assert = __require("assert");
  var isWindows = process.platform === "win32";
  function defaults(options2) {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m) => {
      options2[m] = options2[m] || fs9[m];
      m = m + "Sync";
      options2[m] = options2[m] || fs9[m];
    });
    options2.maxBusyTries = options2.maxBusyTries || 3;
  }
  function rimraf(p, options2, cb) {
    let busyTries = 0;
    if (typeof options2 === "function") {
      cb = options2;
      options2 = {};
    }
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert.strictEqual(typeof cb, "function", "rimraf: callback function required");
    assert(options2, "rimraf: invalid options argument provided");
    assert.strictEqual(typeof options2, "object", "rimraf: options should be object");
    defaults(options2);
    rimraf_(p, options2, function CB(er) {
      if (er) {
        if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options2.maxBusyTries) {
          busyTries++;
          const time = busyTries * 100;
          return setTimeout(() => rimraf_(p, options2, CB), time);
        }
        if (er.code === "ENOENT")
          er = null;
      }
      cb(er);
    });
  }
  function rimraf_(p, options2, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    options2.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT") {
        return cb(null);
      }
      if (er && er.code === "EPERM" && isWindows) {
        return fixWinEPERM(p, options2, er, cb);
      }
      if (st && st.isDirectory()) {
        return rmdir(p, options2, er, cb);
      }
      options2.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT") {
            return cb(null);
          }
          if (er2.code === "EPERM") {
            return isWindows ? fixWinEPERM(p, options2, er2, cb) : rmdir(p, options2, er2, cb);
          }
          if (er2.code === "EISDIR") {
            return rmdir(p, options2, er2, cb);
          }
        }
        return cb(er2);
      });
    });
  }
  function fixWinEPERM(p, options2, er, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    if (er) {
      assert(er instanceof Error);
    }
    options2.chmod(p, 438, (er2) => {
      if (er2) {
        cb(er2.code === "ENOENT" ? null : er);
      } else {
        options2.stat(p, (er3, stats) => {
          if (er3) {
            cb(er3.code === "ENOENT" ? null : er);
          } else if (stats.isDirectory()) {
            rmdir(p, options2, er, cb);
          } else {
            options2.unlink(p, cb);
          }
        });
      }
    });
  }
  function fixWinEPERMSync(p, options2, er) {
    let stats;
    assert(p);
    assert(options2);
    if (er) {
      assert(er instanceof Error);
    }
    try {
      options2.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    try {
      stats = options2.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    if (stats.isDirectory()) {
      rmdirSync(p, options2, er);
    } else {
      options2.unlinkSync(p);
    }
  }
  function rmdir(p, options2, originalEr, cb) {
    assert(p);
    assert(options2);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    assert(typeof cb === "function");
    options2.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
        rmkids(p, options2, cb);
      } else if (er && er.code === "ENOTDIR") {
        cb(originalEr);
      } else {
        cb(er);
      }
    });
  }
  function rmkids(p, options2, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    options2.readdir(p, (er, files) => {
      if (er)
        return cb(er);
      let n = files.length;
      let errState;
      if (n === 0)
        return options2.rmdir(p, cb);
      files.forEach((f) => {
        rimraf(path9.join(p, f), options2, (er2) => {
          if (errState) {
            return;
          }
          if (er2)
            return cb(errState = er2);
          if (--n === 0) {
            options2.rmdir(p, cb);
          }
        });
      });
    });
  }
  function rimrafSync(p, options2) {
    let st;
    options2 = options2 || {};
    defaults(options2);
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert(options2, "rimraf: missing options");
    assert.strictEqual(typeof options2, "object", "rimraf: options should be object");
    try {
      st = options2.lstatSync(p);
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      }
      if (er.code === "EPERM" && isWindows) {
        fixWinEPERMSync(p, options2, er);
      }
    }
    try {
      if (st && st.isDirectory()) {
        rmdirSync(p, options2, null);
      } else {
        options2.unlinkSync(p);
      }
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      } else if (er.code === "EPERM") {
        return isWindows ? fixWinEPERMSync(p, options2, er) : rmdirSync(p, options2, er);
      } else if (er.code !== "EISDIR") {
        throw er;
      }
      rmdirSync(p, options2, er);
    }
  }
  function rmdirSync(p, options2, originalEr) {
    assert(p);
    assert(options2);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    try {
      options2.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOTDIR") {
        throw originalEr;
      } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
        rmkidsSync(p, options2);
      } else if (er.code !== "ENOENT") {
        throw er;
      }
    }
  }
  function rmkidsSync(p, options2) {
    assert(p);
    assert(options2);
    options2.readdirSync(p).forEach((f) => rimrafSync(path9.join(p, f), options2));
    if (isWindows) {
      const startTime = Date.now();
      do {
        try {
          const ret = options2.rmdirSync(p, options2);
          return ret;
        } catch (er) {
        }
      } while (Date.now() - startTime < 500);
    } else {
      const ret = options2.rmdirSync(p, options2);
      return ret;
    }
  }
  module2.exports = rimraf;
  rimraf.sync = rimrafSync;
});
var require_remove2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var rimraf = require_rimraf();
  module2.exports = {
    remove: u(rimraf),
    removeSync: rimraf.sync
  };
});
var require_empty = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = __require("fs");
  var path9 = __require("path");
  var mkdir = require_mkdirs2();
  var remove = require_remove2();
  var emptyDir = u(function emptyDir2(dir, callback) {
    callback = callback || function() {
    };
    fs9.readdir(dir, (err, items) => {
      if (err)
        return mkdir.mkdirs(dir, callback);
      items = items.map((item) => path9.join(dir, item));
      deleteItem();
      function deleteItem() {
        const item = items.pop();
        if (!item)
          return callback();
        remove.remove(item, (err2) => {
          if (err2)
            return callback(err2);
          deleteItem();
        });
      }
    });
  });
  function emptyDirSync(dir) {
    let items;
    try {
      items = fs9.readdirSync(dir);
    } catch (err) {
      return mkdir.mkdirsSync(dir);
    }
    items.forEach((item) => {
      item = path9.join(dir, item);
      remove.removeSync(item);
    });
  }
  module2.exports = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };
});
var require_file = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var mkdir = require_mkdirs2();
  var pathExists = require_path_exists().pathExists;
  function createFile(file, callback) {
    function makeFile() {
      fs9.writeFile(file, "", (err) => {
        if (err)
          return callback(err);
        callback();
      });
    }
    fs9.stat(file, (err, stats) => {
      if (!err && stats.isFile())
        return callback();
      const dir = path9.dirname(file);
      pathExists(dir, (err2, dirExists) => {
        if (err2)
          return callback(err2);
        if (dirExists)
          return makeFile();
        mkdir.mkdirs(dir, (err3) => {
          if (err3)
            return callback(err3);
          makeFile();
        });
      });
    });
  }
  function createFileSync(file) {
    let stats;
    try {
      stats = fs9.statSync(file);
    } catch (e) {
    }
    if (stats && stats.isFile())
      return;
    const dir = path9.dirname(file);
    if (!fs9.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    fs9.writeFileSync(file, "");
  }
  module2.exports = {
    createFile: u(createFile),
    createFileSync
  };
});
var require_link = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var mkdir = require_mkdirs2();
  var pathExists = require_path_exists().pathExists;
  function createLink(srcpath, dstpath, callback) {
    function makeLink(srcpath2, dstpath2) {
      fs9.link(srcpath2, dstpath2, (err) => {
        if (err)
          return callback(err);
        callback(null);
      });
    }
    pathExists(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      fs9.lstat(srcpath, (err2) => {
        if (err2) {
          err2.message = err2.message.replace("lstat", "ensureLink");
          return callback(err2);
        }
        const dir = path9.dirname(dstpath);
        pathExists(dir, (err3, dirExists) => {
          if (err3)
            return callback(err3);
          if (dirExists)
            return makeLink(srcpath, dstpath);
          mkdir.mkdirs(dir, (err4) => {
            if (err4)
              return callback(err4);
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }
  function createLinkSync(srcpath, dstpath) {
    const destinationExists = fs9.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    try {
      fs9.lstatSync(srcpath);
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureLink");
      throw err;
    }
    const dir = path9.dirname(dstpath);
    const dirExists = fs9.existsSync(dir);
    if (dirExists)
      return fs9.linkSync(srcpath, dstpath);
    mkdir.mkdirsSync(dir);
    return fs9.linkSync(srcpath, dstpath);
  }
  module2.exports = {
    createLink: u(createLink),
    createLinkSync
  };
});
var require_symlink_paths = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var pathExists = require_path_exists().pathExists;
  function symlinkPaths(srcpath, dstpath, callback) {
    if (path9.isAbsolute(srcpath)) {
      return fs9.lstat(srcpath, (err) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          return callback(err);
        }
        return callback(null, {
          "toCwd": srcpath,
          "toDst": srcpath
        });
      });
    } else {
      const dstdir = path9.dirname(dstpath);
      const relativeToDst = path9.join(dstdir, srcpath);
      return pathExists(relativeToDst, (err, exists) => {
        if (err)
          return callback(err);
        if (exists) {
          return callback(null, {
            "toCwd": relativeToDst,
            "toDst": srcpath
          });
        } else {
          return fs9.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureSymlink");
              return callback(err2);
            }
            return callback(null, {
              "toCwd": srcpath,
              "toDst": path9.relative(dstdir, srcpath)
            });
          });
        }
      });
    }
  }
  function symlinkPathsSync(srcpath, dstpath) {
    let exists;
    if (path9.isAbsolute(srcpath)) {
      exists = fs9.existsSync(srcpath);
      if (!exists)
        throw new Error("absolute srcpath does not exist");
      return {
        "toCwd": srcpath,
        "toDst": srcpath
      };
    } else {
      const dstdir = path9.dirname(dstpath);
      const relativeToDst = path9.join(dstdir, srcpath);
      exists = fs9.existsSync(relativeToDst);
      if (exists) {
        return {
          "toCwd": relativeToDst,
          "toDst": srcpath
        };
      } else {
        exists = fs9.existsSync(srcpath);
        if (!exists)
          throw new Error("relative srcpath does not exist");
        return {
          "toCwd": srcpath,
          "toDst": path9.relative(dstdir, srcpath)
        };
      }
    }
  }
  module2.exports = {
    symlinkPaths,
    symlinkPathsSync
  };
});
var require_symlink_type = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  function symlinkType(srcpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    if (type)
      return callback(null, type);
    fs9.lstat(srcpath, (err, stats) => {
      if (err)
        return callback(null, "file");
      type = stats && stats.isDirectory() ? "dir" : "file";
      callback(null, type);
    });
  }
  function symlinkTypeSync(srcpath, type) {
    let stats;
    if (type)
      return type;
    try {
      stats = fs9.lstatSync(srcpath);
    } catch (e) {
      return "file";
    }
    return stats && stats.isDirectory() ? "dir" : "file";
  }
  module2.exports = {
    symlinkType,
    symlinkTypeSync
  };
});
var require_symlink = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var _mkdirs = require_mkdirs2();
  var mkdirs = _mkdirs.mkdirs;
  var mkdirsSync = _mkdirs.mkdirsSync;
  var _symlinkPaths = require_symlink_paths();
  var symlinkPaths = _symlinkPaths.symlinkPaths;
  var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
  var _symlinkType = require_symlink_type();
  var symlinkType = _symlinkType.symlinkType;
  var symlinkTypeSync = _symlinkType.symlinkTypeSync;
  var pathExists = require_path_exists().pathExists;
  function createSymlink(srcpath, dstpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    pathExists(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      symlinkPaths(srcpath, dstpath, (err2, relative) => {
        if (err2)
          return callback(err2);
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type, (err3, type2) => {
          if (err3)
            return callback(err3);
          const dir = path9.dirname(dstpath);
          pathExists(dir, (err4, dirExists) => {
            if (err4)
              return callback(err4);
            if (dirExists)
              return fs9.symlink(srcpath, dstpath, type2, callback);
            mkdirs(dir, (err5) => {
              if (err5)
                return callback(err5);
              fs9.symlink(srcpath, dstpath, type2, callback);
            });
          });
        });
      });
    });
  }
  function createSymlinkSync(srcpath, dstpath, type) {
    const destinationExists = fs9.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    const relative = symlinkPathsSync(srcpath, dstpath);
    srcpath = relative.toDst;
    type = symlinkTypeSync(relative.toCwd, type);
    const dir = path9.dirname(dstpath);
    const exists = fs9.existsSync(dir);
    if (exists)
      return fs9.symlinkSync(srcpath, dstpath, type);
    mkdirsSync(dir);
    return fs9.symlinkSync(srcpath, dstpath, type);
  }
  module2.exports = {
    createSymlink: u(createSymlink),
    createSymlinkSync
  };
});
var require_ensure = __commonJSMin((exports, module2) => {
  "use strict";
  var file = require_file();
  var link = require_link();
  var symlink = require_symlink();
  module2.exports = {
    createFile: file.createFile,
    createFileSync: file.createFileSync,
    ensureFile: file.createFile,
    ensureFileSync: file.createFileSync,
    createLink: link.createLink,
    createLinkSync: link.createLinkSync,
    ensureLink: link.createLink,
    ensureLinkSync: link.createLinkSync,
    createSymlink: symlink.createSymlink,
    createSymlinkSync: symlink.createSymlinkSync,
    ensureSymlink: symlink.createSymlink,
    ensureSymlinkSync: symlink.createSymlinkSync
  };
});
var require_polyfills2 = __commonJSMin((exports, module2) => {
  var constants = __require("constants");
  var origCwd = process.cwd;
  var cwd = null;
  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  if (typeof process.chdir === "function") {
    chdir = process.chdir;
    process.chdir = function(d) {
      cwd = null;
      chdir.call(process, d);
    };
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(process.chdir, chdir);
  }
  var chdir;
  module2.exports = patch;
  function patch(fs9) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs9);
    }
    if (!fs9.lutimes) {
      patchLutimes(fs9);
    }
    fs9.chown = chownFix(fs9.chown);
    fs9.fchown = chownFix(fs9.fchown);
    fs9.lchown = chownFix(fs9.lchown);
    fs9.chmod = chmodFix(fs9.chmod);
    fs9.fchmod = chmodFix(fs9.fchmod);
    fs9.lchmod = chmodFix(fs9.lchmod);
    fs9.chownSync = chownFixSync(fs9.chownSync);
    fs9.fchownSync = chownFixSync(fs9.fchownSync);
    fs9.lchownSync = chownFixSync(fs9.lchownSync);
    fs9.chmodSync = chmodFixSync(fs9.chmodSync);
    fs9.fchmodSync = chmodFixSync(fs9.fchmodSync);
    fs9.lchmodSync = chmodFixSync(fs9.lchmodSync);
    fs9.stat = statFix(fs9.stat);
    fs9.fstat = statFix(fs9.fstat);
    fs9.lstat = statFix(fs9.lstat);
    fs9.statSync = statFixSync(fs9.statSync);
    fs9.fstatSync = statFixSync(fs9.fstatSync);
    fs9.lstatSync = statFixSync(fs9.lstatSync);
    if (fs9.chmod && !fs9.lchmod) {
      fs9.lchmod = function(path9, mode, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs9.lchmodSync = function() {
      };
    }
    if (fs9.chown && !fs9.lchown) {
      fs9.lchown = function(path9, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs9.lchownSync = function() {
      };
    }
    if (platform === "win32") {
      fs9.rename = typeof fs9.rename !== "function" ? fs9.rename : function(fs$rename) {
        function rename(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
              setTimeout(function() {
                fs9.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er);
          });
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(rename, fs$rename);
        return rename;
      }(fs9.rename);
    }
    fs9.read = typeof fs9.read !== "function" ? fs9.read : function(fs$read) {
      function read2(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs9, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs9, fd, buffer, offset, length, position, callback);
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(read2, fs$read);
      return read2;
    }(fs9.read);
    fs9.readSync = typeof fs9.readSync !== "function" ? fs9.readSync : function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs9, fd, buffer, offset, length, position);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs9.readSync);
    function patchLchmod(fs10) {
      fs10.lchmod = function(path9, mode, callback) {
        fs10.open(path9, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs10.fchmod(fd, mode, function(err2) {
            fs10.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        });
      };
      fs10.lchmodSync = function(path9, mode) {
        var fd = fs10.openSync(path9, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs10.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs10.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs10.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs10) {
      if (constants.hasOwnProperty("O_SYMLINK") && fs10.futimes) {
        fs10.lutimes = function(path9, at, mt, cb) {
          fs10.open(path9, constants.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb)
                cb(er);
              return;
            }
            fs10.futimes(fd, at, mt, function(er2) {
              fs10.close(fd, function(er22) {
                if (cb)
                  cb(er2 || er22);
              });
            });
          });
        };
        fs10.lutimesSync = function(path9, at, mt) {
          var fd = fs10.openSync(path9, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs10.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs10.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs10.closeSync(fd);
            }
          }
          return ret;
        };
      } else if (fs10.futimes) {
        fs10.lutimes = function(_a, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs10.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode, cb) {
        return orig.call(fs9, target, mode, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode) {
        try {
          return orig.call(fs9, target, mode);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs9, target, uid, gid, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs9, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options2, cb) {
        if (typeof options2 === "function") {
          cb = options2;
          options2 = null;
        }
        function callback(er, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options2 ? orig.call(fs9, target, options2, callback) : orig.call(fs9, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options2) {
        var stats = options2 ? orig.call(fs9, target, options2) : orig.call(fs9, target);
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        return stats;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
});
var require_legacy_streams2 = __commonJSMin((exports, module2) => {
  var Stream2 = __require("stream").Stream;
  module2.exports = legacy;
  function legacy(fs9) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path9, options2) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path9, options2);
      Stream2.call(this);
      var self2 = this;
      this.path = path9;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options2 = options2 || {};
      var keys = Object.keys(options2);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options2[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.end === void 0) {
          this.end = Infinity;
        } else if (typeof this.end !== "number") {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs9.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream(path9, options2) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path9, options2);
      Stream2.call(this);
      this.path = path9;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options2 = options2 || {};
      var keys = Object.keys(options2);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options2[key];
      }
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs9.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
        this.flush();
      }
    }
  }
});
var require_clone2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = clone2;
  var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone2(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy = { __proto__: getPrototypeOf(obj) };
    else
      var copy = /* @__PURE__ */ Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
});
var require_graceful_fs2 = __commonJSMin((exports, module2) => {
  var fs9 = __require("fs");
  var polyfills = require_polyfills2();
  var legacy = require_legacy_streams2();
  var clone2 = require_clone2();
  var util2 = __require("util");
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context3, queue2) {
    Object.defineProperty(context3, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug = noop;
  if (util2.debuglog)
    debug = util2.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug = function() {
      var m = util2.format.apply(util2, arguments);
      m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
      console.error(m);
    };
  if (!fs9[gracefulQueue]) {
    queue = global[gracefulQueue] || [];
    publishQueue(fs9, queue);
    fs9.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs9, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs9.close);
    fs9.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs9, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs9.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug(fs9[gracefulQueue]);
        __require("assert").equal(fs9[gracefulQueue].length, 0);
      });
    }
  }
  var queue;
  if (!global[gracefulQueue]) {
    publishQueue(global, fs9[gracefulQueue]);
  }
  module2.exports = patch(clone2(fs9));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs9.__patched) {
    module2.exports = patch(fs9);
    fs9.__patched = true;
  }
  function patch(fs10) {
    polyfills(fs10);
    fs10.gracefulify = patch;
    fs10.createReadStream = createReadStream;
    fs10.createWriteStream = createWriteStream;
    var fs$readFile = fs10.readFile;
    fs10.readFile = readFile2;
    function readFile2(path9, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$readFile(path9, options2, cb);
      function go$readFile(path10, options3, cb2, startTime) {
        return fs$readFile(path10, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path10, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs10.writeFile;
    fs10.writeFile = writeFile;
    function writeFile(path9, data, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$writeFile(path9, data, options2, cb);
      function go$writeFile(path10, data2, options3, cb2, startTime) {
        return fs$writeFile(path10, data2, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path10, data2, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs10.appendFile;
    if (fs$appendFile)
      fs10.appendFile = appendFile;
    function appendFile(path9, data, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      return go$appendFile(path9, data, options2, cb);
      function go$appendFile(path10, data2, options3, cb2, startTime) {
        return fs$appendFile(path10, data2, options3, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path10, data2, options3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs10.copyFile;
    if (fs$copyFile)
      fs10.copyFile = copyFile;
    function copyFile(src, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src, dest, flags, cb);
      function go$copyFile(src2, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src2, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs10.readdir;
    fs10.readdir = readdir;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir(path9, options2, cb) {
      if (typeof options2 === "function")
        cb = options2, options2 = null;
      var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path10, options3, cb2, startTime) {
        return fs$readdir(path10, fs$readdirCallback(path10, options3, cb2, startTime));
      } : function go$readdir2(path10, options3, cb2, startTime) {
        return fs$readdir(path10, options3, fs$readdirCallback(path10, options3, cb2, startTime));
      };
      return go$readdir(path9, options2, cb);
      function fs$readdirCallback(path10, options3, cb2, startTime) {
        return function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([
              go$readdir,
              [path10, options3, cb2],
              err,
              startTime || Date.now(),
              Date.now()
            ]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs10);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs10.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs10.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs10, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs10, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs10, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs10, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path9, options2) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path9, options2) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path9, options2) {
      return new fs10.ReadStream(path9, options2);
    }
    function createWriteStream(path9, options2) {
      return new fs10.WriteStream(path9, options2);
    }
    var fs$open = fs10.open;
    fs10.open = open;
    function open(path9, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path9, flags, mode, cb);
      function go$open(path10, flags2, mode2, cb2, startTime) {
        return fs$open(path10, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path10, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs10;
  }
  function enqueue(elem) {
    debug("ENQUEUE", elem[0].name, elem[1]);
    fs9[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now = Date.now();
    for (var i = 0; i < fs9[gracefulQueue].length; ++i) {
      if (fs9[gracefulQueue][i].length > 2) {
        fs9[gracefulQueue][i][3] = now;
        fs9[gracefulQueue][i][4] = now;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = void 0;
    if (fs9[gracefulQueue].length === 0)
      return;
    var elem = fs9[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === void 0) {
      debug("RETRY", fn.name, args);
      fn.apply(null, args);
    } else if (Date.now() - startTime >= 6e4) {
      debug("TIMEOUT", fn.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args.concat([startTime]));
      } else {
        fs9[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === void 0) {
      retryTimer = setTimeout(retry, 0);
    }
  }
});
var require_jsonfile = __commonJSMin((exports, module2) => {
  var _fs;
  try {
    _fs = require_graceful_fs2();
  } catch (_) {
    _fs = __require("fs");
  }
  function readFile2(file, options2, callback) {
    if (callback == null) {
      callback = options2;
      options2 = {};
    }
    if (typeof options2 === "string") {
      options2 = { encoding: options2 };
    }
    options2 = options2 || {};
    var fs9 = options2.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options2) {
      shouldThrow = options2.throws;
    }
    fs9.readFile(file, options2, function(err, data) {
      if (err)
        return callback(err);
      data = stripBom(data);
      var obj;
      try {
        obj = JSON.parse(data, options2 ? options2.reviver : null);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = file + ": " + err2.message;
          return callback(err2);
        } else {
          return callback(null, null);
        }
      }
      callback(null, obj);
    });
  }
  function readFileSync(file, options2) {
    options2 = options2 || {};
    if (typeof options2 === "string") {
      options2 = { encoding: options2 };
    }
    var fs9 = options2.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options2) {
      shouldThrow = options2.throws;
    }
    try {
      var content = fs9.readFileSync(file, options2);
      content = stripBom(content);
      return JSON.parse(content, options2.reviver);
    } catch (err) {
      if (shouldThrow) {
        err.message = file + ": " + err.message;
        throw err;
      } else {
        return null;
      }
    }
  }
  function stringify(obj, options2) {
    var spaces;
    var EOL = "\n";
    if (typeof options2 === "object" && options2 !== null) {
      if (options2.spaces) {
        spaces = options2.spaces;
      }
      if (options2.EOL) {
        EOL = options2.EOL;
      }
    }
    var str = JSON.stringify(obj, options2 ? options2.replacer : null, spaces);
    return str.replace(/\n/g, EOL) + EOL;
  }
  function writeFile(file, obj, options2, callback) {
    if (callback == null) {
      callback = options2;
      options2 = {};
    }
    options2 = options2 || {};
    var fs9 = options2.fs || _fs;
    var str = "";
    try {
      str = stringify(obj, options2);
    } catch (err) {
      if (callback)
        callback(err, null);
      return;
    }
    fs9.writeFile(file, str, options2, callback);
  }
  function writeFileSync(file, obj, options2) {
    options2 = options2 || {};
    var fs9 = options2.fs || _fs;
    var str = stringify(obj, options2);
    return fs9.writeFileSync(file, str, options2);
  }
  function stripBom(content) {
    if (Buffer.isBuffer(content))
      content = content.toString("utf8");
    content = content.replace(/^\uFEFF/, "");
    return content;
  }
  var jsonfile = {
    readFile: readFile2,
    readFileSync,
    writeFile,
    writeFileSync
  };
  module2.exports = jsonfile;
});
var require_jsonfile2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var jsonFile = require_jsonfile();
  module2.exports = {
    readJson: u(jsonFile.readFile),
    readJsonSync: jsonFile.readFileSync,
    writeJson: u(jsonFile.writeFile),
    writeJsonSync: jsonFile.writeFileSync
  };
});
var require_output_json = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var mkdir = require_mkdirs2();
  var pathExists = require_path_exists().pathExists;
  var jsonFile = require_jsonfile2();
  function outputJson(file, data, options2, callback) {
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    const dir = path9.dirname(file);
    pathExists(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return jsonFile.writeJson(file, data, options2, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        jsonFile.writeJson(file, data, options2, callback);
      });
    });
  }
  module2.exports = outputJson;
});
var require_output_json_sync = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdir = require_mkdirs2();
  var jsonFile = require_jsonfile2();
  function outputJsonSync(file, data, options2) {
    const dir = path9.dirname(file);
    if (!fs9.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    jsonFile.writeJsonSync(file, data, options2);
  }
  module2.exports = outputJsonSync;
});
var require_json = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var jsonFile = require_jsonfile2();
  jsonFile.outputJson = u(require_output_json());
  jsonFile.outputJsonSync = require_output_json_sync();
  jsonFile.outputJSON = jsonFile.outputJson;
  jsonFile.outputJSONSync = jsonFile.outputJsonSync;
  jsonFile.writeJSON = jsonFile.writeJson;
  jsonFile.writeJSONSync = jsonFile.writeJsonSync;
  jsonFile.readJSON = jsonFile.readJson;
  jsonFile.readJSONSync = jsonFile.readJsonSync;
  module2.exports = jsonFile;
});
var require_move_sync = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var copySync = require_copy_sync2().copySync;
  var removeSync = require_remove2().removeSync;
  var mkdirpSync = require_mkdirs2().mkdirsSync;
  var buffer = require_buffer();
  function moveSync(src, dest, options2) {
    options2 = options2 || {};
    const overwrite = options2.overwrite || options2.clobber || false;
    src = path9.resolve(src);
    dest = path9.resolve(dest);
    if (src === dest)
      return fs9.accessSync(src);
    if (isSrcSubdir(src, dest))
      throw new Error(`Cannot move '${src}' into itself '${dest}'.`);
    mkdirpSync(path9.dirname(dest));
    tryRenameSync();
    function tryRenameSync() {
      if (overwrite) {
        try {
          return fs9.renameSync(src, dest);
        } catch (err) {
          if (err.code === "ENOTEMPTY" || err.code === "EEXIST" || err.code === "EPERM") {
            removeSync(dest);
            options2.overwrite = false;
            return moveSync(src, dest, options2);
          }
          if (err.code !== "EXDEV")
            throw err;
          return moveSyncAcrossDevice(src, dest, overwrite);
        }
      } else {
        try {
          fs9.linkSync(src, dest);
          return fs9.unlinkSync(src);
        } catch (err) {
          if (err.code === "EXDEV" || err.code === "EISDIR" || err.code === "EPERM" || err.code === "ENOTSUP") {
            return moveSyncAcrossDevice(src, dest, overwrite);
          }
          throw err;
        }
      }
    }
  }
  function moveSyncAcrossDevice(src, dest, overwrite) {
    const stat = fs9.statSync(src);
    if (stat.isDirectory()) {
      return moveDirSyncAcrossDevice(src, dest, overwrite);
    } else {
      return moveFileSyncAcrossDevice(src, dest, overwrite);
    }
  }
  function moveFileSyncAcrossDevice(src, dest, overwrite) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = buffer(BUF_LENGTH);
    const flags = overwrite ? "w" : "wx";
    const fdr = fs9.openSync(src, "r");
    const stat = fs9.fstatSync(fdr);
    const fdw = fs9.openSync(dest, flags, stat.mode);
    let pos = 0;
    while (pos < stat.size) {
      const bytesRead = fs9.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      fs9.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }
    fs9.closeSync(fdr);
    fs9.closeSync(fdw);
    return fs9.unlinkSync(src);
  }
  function moveDirSyncAcrossDevice(src, dest, overwrite) {
    const options2 = {
      overwrite: false
    };
    if (overwrite) {
      removeSync(dest);
      tryCopySync();
    } else {
      tryCopySync();
    }
    function tryCopySync() {
      copySync(src, dest, options2);
      return removeSync(src);
    }
  }
  function isSrcSubdir(src, dest) {
    try {
      return fs9.statSync(src).isDirectory() && src !== dest && dest.indexOf(src) > -1 && dest.split(path9.dirname(src) + path9.sep)[1].split(path9.sep)[0] === path9.basename(src);
    } catch (e) {
      return false;
    }
  }
  module2.exports = {
    moveSync
  };
});
var require_move = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var copy = require_copy2().copy;
  var remove = require_remove2().remove;
  var mkdirp = require_mkdirs2().mkdirp;
  var pathExists = require_path_exists().pathExists;
  function move(src, dest, opts, cb) {
    if (typeof opts === "function") {
      cb = opts;
      opts = {};
    }
    const overwrite = opts.overwrite || opts.clobber || false;
    src = path9.resolve(src);
    dest = path9.resolve(dest);
    if (src === dest)
      return fs9.access(src, cb);
    fs9.stat(src, (err, st) => {
      if (err)
        return cb(err);
      if (st.isDirectory() && isSrcSubdir(src, dest)) {
        return cb(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`));
      }
      mkdirp(path9.dirname(dest), (err2) => {
        if (err2)
          return cb(err2);
        return doRename(src, dest, overwrite, cb);
      });
    });
  }
  function doRename(src, dest, overwrite, cb) {
    if (overwrite) {
      return remove(dest, (err) => {
        if (err)
          return cb(err);
        return rename(src, dest, overwrite, cb);
      });
    }
    pathExists(dest, (err, destExists) => {
      if (err)
        return cb(err);
      if (destExists)
        return cb(new Error("dest already exists."));
      return rename(src, dest, overwrite, cb);
    });
  }
  function rename(src, dest, overwrite, cb) {
    fs9.rename(src, dest, (err) => {
      if (!err)
        return cb();
      if (err.code !== "EXDEV")
        return cb(err);
      return moveAcrossDevice(src, dest, overwrite, cb);
    });
  }
  function moveAcrossDevice(src, dest, overwrite, cb) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copy(src, dest, opts, (err) => {
      if (err)
        return cb(err);
      return remove(src, cb);
    });
  }
  function isSrcSubdir(src, dest) {
    const srcArray = src.split(path9.sep);
    const destArray = dest.split(path9.sep);
    return srcArray.reduce((acc, current, i) => {
      return acc && destArray[i] === current;
    }, true);
  }
  module2.exports = {
    move: u(move)
  };
});
var require_output = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdir = require_mkdirs2();
  var pathExists = require_path_exists().pathExists;
  function outputFile(file, data, encoding, callback) {
    if (typeof encoding === "function") {
      callback = encoding;
      encoding = "utf8";
    }
    const dir = path9.dirname(file);
    pathExists(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return fs9.writeFile(file, data, encoding, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        fs9.writeFile(file, data, encoding, callback);
      });
    });
  }
  function outputFileSync(file, ...args) {
    const dir = path9.dirname(file);
    if (fs9.existsSync(dir)) {
      return fs9.writeFileSync(file, ...args);
    }
    mkdir.mkdirsSync(dir);
    fs9.writeFileSync(file, ...args);
  }
  module2.exports = {
    outputFile: u(outputFile),
    outputFileSync
  };
});
var require_lib3 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = Object.assign({}, require_fs(), require_copy_sync2(), require_copy2(), require_empty(), require_ensure(), require_json(), require_mkdirs2(), require_move_sync(), require_move(), require_output(), require_path_exists(), require_remove2());
  var fs9 = __require("fs");
  if (Object.getOwnPropertyDescriptor(fs9, "promises")) {
    Object.defineProperty(module2.exports, "promises", {
      get() {
        return fs9.promises;
      }
    });
  }
});
var require_common = __commonJSMin((exports, module2) => {
  "use strict";
  function isNothing(subject) {
    return typeof subject === "undefined" || subject === null;
  }
  function isObject2(subject) {
    return typeof subject === "object" && subject !== null;
  }
  function toArray(sequence) {
    if (Array.isArray(sequence))
      return sequence;
    else if (isNothing(sequence))
      return [];
    return [sequence];
  }
  function extend(target, source) {
    var index, length, key, sourceKeys;
    if (source) {
      sourceKeys = Object.keys(source);
      for (index = 0, length = sourceKeys.length; index < length; index += 1) {
        key = sourceKeys[index];
        target[key] = source[key];
      }
    }
    return target;
  }
  function repeat(string, count) {
    var result = "", cycle;
    for (cycle = 0; cycle < count; cycle += 1) {
      result += string;
    }
    return result;
  }
  function isNegativeZero(number) {
    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
  }
  module2.exports.isNothing = isNothing;
  module2.exports.isObject = isObject2;
  module2.exports.toArray = toArray;
  module2.exports.repeat = repeat;
  module2.exports.isNegativeZero = isNegativeZero;
  module2.exports.extend = extend;
});
var require_exception = __commonJSMin((exports, module2) => {
  "use strict";
  function YAMLException(reason, mark) {
    Error.call(this);
    this.name = "YAMLException";
    this.reason = reason;
    this.mark = mark;
    this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack || "";
    }
  }
  YAMLException.prototype = Object.create(Error.prototype);
  YAMLException.prototype.constructor = YAMLException;
  YAMLException.prototype.toString = function toString(compact) {
    var result = this.name + ": ";
    result += this.reason || "(unknown reason)";
    if (!compact && this.mark) {
      result += " " + this.mark.toString();
    }
    return result;
  };
  module2.exports = YAMLException;
});
var require_mark = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  function Mark(name2, buffer, position, line, column) {
    this.name = name2;
    this.buffer = buffer;
    this.position = position;
    this.line = line;
    this.column = column;
  }
  Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
    var head, start, tail, end, snippet;
    if (!this.buffer)
      return null;
    indent = indent || 4;
    maxLength = maxLength || 75;
    head = "";
    start = this.position;
    while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
      start -= 1;
      if (this.position - start > maxLength / 2 - 1) {
        head = " ... ";
        start += 5;
        break;
      }
    }
    tail = "";
    end = this.position;
    while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
      end += 1;
      if (end - this.position > maxLength / 2 - 1) {
        tail = " ... ";
        end -= 5;
        break;
      }
    }
    snippet = this.buffer.slice(start, end);
    return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
  };
  Mark.prototype.toString = function toString(compact) {
    var snippet, where = "";
    if (this.name) {
      where += 'in "' + this.name + '" ';
    }
    where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
    if (!compact) {
      snippet = this.getSnippet();
      if (snippet) {
        where += ":\n" + snippet;
      }
    }
    return where;
  };
  module2.exports = Mark;
});
var require_type2 = __commonJSMin((exports, module2) => {
  "use strict";
  var YAMLException = require_exception();
  var TYPE_CONSTRUCTOR_OPTIONS = [
    "kind",
    "resolve",
    "construct",
    "instanceOf",
    "predicate",
    "represent",
    "defaultStyle",
    "styleAliases"
  ];
  var YAML_NODE_KINDS = [
    "scalar",
    "sequence",
    "mapping"
  ];
  function compileStyleAliases(map) {
    var result = {};
    if (map !== null) {
      Object.keys(map).forEach(function(style) {
        map[style].forEach(function(alias) {
          result[String(alias)] = style;
        });
      });
    }
    return result;
  }
  function Type(tag, options2) {
    options2 = options2 || {};
    Object.keys(options2).forEach(function(name2) {
      if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name2) === -1) {
        throw new YAMLException('Unknown option "' + name2 + '" is met in definition of "' + tag + '" YAML type.');
      }
    });
    this.tag = tag;
    this.kind = options2["kind"] || null;
    this.resolve = options2["resolve"] || function() {
      return true;
    };
    this.construct = options2["construct"] || function(data) {
      return data;
    };
    this.instanceOf = options2["instanceOf"] || null;
    this.predicate = options2["predicate"] || null;
    this.represent = options2["represent"] || null;
    this.defaultStyle = options2["defaultStyle"] || null;
    this.styleAliases = compileStyleAliases(options2["styleAliases"] || null);
    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
      throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
    }
  }
  module2.exports = Type;
});
var require_schema = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  var YAMLException = require_exception();
  var Type = require_type2();
  function compileList(schema, name2, result) {
    var exclude = [];
    schema.include.forEach(function(includedSchema) {
      result = compileList(includedSchema, name2, result);
    });
    schema[name2].forEach(function(currentType) {
      result.forEach(function(previousType, previousIndex) {
        if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
          exclude.push(previousIndex);
        }
      });
      result.push(currentType);
    });
    return result.filter(function(type, index) {
      return exclude.indexOf(index) === -1;
    });
  }
  function compileMap() {
    var result = {
      scalar: {},
      sequence: {},
      mapping: {},
      fallback: {}
    }, index, length;
    function collectType(type) {
      result[type.kind][type.tag] = result["fallback"][type.tag] = type;
    }
    for (index = 0, length = arguments.length; index < length; index += 1) {
      arguments[index].forEach(collectType);
    }
    return result;
  }
  function Schema(definition) {
    this.include = definition.include || [];
    this.implicit = definition.implicit || [];
    this.explicit = definition.explicit || [];
    this.implicit.forEach(function(type) {
      if (type.loadKind && type.loadKind !== "scalar") {
        throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
      }
    });
    this.compiledImplicit = compileList(this, "implicit", []);
    this.compiledExplicit = compileList(this, "explicit", []);
    this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
  }
  Schema.DEFAULT = null;
  Schema.create = function createSchema() {
    var schemas, types;
    switch (arguments.length) {
      case 1:
        schemas = Schema.DEFAULT;
        types = arguments[0];
        break;
      case 2:
        schemas = arguments[0];
        types = arguments[1];
        break;
      default:
        throw new YAMLException("Wrong number of arguments for Schema.create function");
    }
    schemas = common.toArray(schemas);
    types = common.toArray(types);
    if (!schemas.every(function(schema) {
      return schema instanceof Schema;
    })) {
      throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
    }
    if (!types.every(function(type) {
      return type instanceof Type;
    })) {
      throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    return new Schema({
      include: schemas,
      explicit: types
    });
  };
  module2.exports = Schema;
});
var require_str = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  module2.exports = new Type("tag:yaml.org,2002:str", {
    kind: "scalar",
    construct: function(data) {
      return data !== null ? data : "";
    }
  });
});
var require_seq = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  module2.exports = new Type("tag:yaml.org,2002:seq", {
    kind: "sequence",
    construct: function(data) {
      return data !== null ? data : [];
    }
  });
});
var require_map = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  module2.exports = new Type("tag:yaml.org,2002:map", {
    kind: "mapping",
    construct: function(data) {
      return data !== null ? data : {};
    }
  });
});
var require_failsafe = __commonJSMin((exports, module2) => {
  "use strict";
  var Schema = require_schema();
  module2.exports = new Schema({
    explicit: [
      require_str(),
      require_seq(),
      require_map()
    ]
  });
});
var require_null = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  function resolveYamlNull(data) {
    if (data === null)
      return true;
    var max = data.length;
    return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
  }
  function constructYamlNull() {
    return null;
  }
  function isNull(object) {
    return object === null;
  }
  module2.exports = new Type("tag:yaml.org,2002:null", {
    kind: "scalar",
    resolve: resolveYamlNull,
    construct: constructYamlNull,
    predicate: isNull,
    represent: {
      canonical: function() {
        return "~";
      },
      lowercase: function() {
        return "null";
      },
      uppercase: function() {
        return "NULL";
      },
      camelcase: function() {
        return "Null";
      }
    },
    defaultStyle: "lowercase"
  });
});
var require_bool = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  function resolveYamlBoolean(data) {
    if (data === null)
      return false;
    var max = data.length;
    return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
  }
  function constructYamlBoolean(data) {
    return data === "true" || data === "True" || data === "TRUE";
  }
  function isBoolean(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  }
  module2.exports = new Type("tag:yaml.org,2002:bool", {
    kind: "scalar",
    resolve: resolveYamlBoolean,
    construct: constructYamlBoolean,
    predicate: isBoolean,
    represent: {
      lowercase: function(object) {
        return object ? "true" : "false";
      },
      uppercase: function(object) {
        return object ? "TRUE" : "FALSE";
      },
      camelcase: function(object) {
        return object ? "True" : "False";
      }
    },
    defaultStyle: "lowercase"
  });
});
var require_int = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  var Type = require_type2();
  function isHexCode(c) {
    return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
  }
  function isOctCode(c) {
    return 48 <= c && c <= 55;
  }
  function isDecCode(c) {
    return 48 <= c && c <= 57;
  }
  function resolveYamlInteger(data) {
    if (data === null)
      return false;
    var max = data.length, index = 0, hasDigits = false, ch;
    if (!max)
      return false;
    ch = data[index];
    if (ch === "-" || ch === "+") {
      ch = data[++index];
    }
    if (ch === "0") {
      if (index + 1 === max)
        return true;
      ch = data[++index];
      if (ch === "b") {
        index++;
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (ch !== "0" && ch !== "1")
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "x") {
        index++;
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (!isHexCode(data.charCodeAt(index)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "_")
      return false;
    for (; index < max; index++) {
      ch = data[index];
      if (ch === "_")
        continue;
      if (ch === ":")
        break;
      if (!isDecCode(data.charCodeAt(index))) {
        return false;
      }
      hasDigits = true;
    }
    if (!hasDigits || ch === "_")
      return false;
    if (ch !== ":")
      return true;
    return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
  }
  function constructYamlInteger(data) {
    var value = data, sign = 1, ch, base, digits = [];
    if (value.indexOf("_") !== -1) {
      value = value.replace(/_/g, "");
    }
    ch = value[0];
    if (ch === "-" || ch === "+") {
      if (ch === "-")
        sign = -1;
      value = value.slice(1);
      ch = value[0];
    }
    if (value === "0")
      return 0;
    if (ch === "0") {
      if (value[1] === "b")
        return sign * parseInt(value.slice(2), 2);
      if (value[1] === "x")
        return sign * parseInt(value, 16);
      return sign * parseInt(value, 8);
    }
    if (value.indexOf(":") !== -1) {
      value.split(":").forEach(function(v) {
        digits.unshift(parseInt(v, 10));
      });
      value = 0;
      base = 1;
      digits.forEach(function(d) {
        value += d * base;
        base *= 60;
      });
      return sign * value;
    }
    return sign * parseInt(value, 10);
  }
  function isInteger(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
  }
  module2.exports = new Type("tag:yaml.org,2002:int", {
    kind: "scalar",
    resolve: resolveYamlInteger,
    construct: constructYamlInteger,
    predicate: isInteger,
    represent: {
      binary: function(obj) {
        return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
      },
      octal: function(obj) {
        return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
      },
      decimal: function(obj) {
        return obj.toString(10);
      },
      hexadecimal: function(obj) {
        return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
      }
    },
    defaultStyle: "decimal",
    styleAliases: {
      binary: [2, "bin"],
      octal: [8, "oct"],
      decimal: [10, "dec"],
      hexadecimal: [16, "hex"]
    }
  });
});
var require_float = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  var Type = require_type2();
  var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
  function resolveYamlFloat(data) {
    if (data === null)
      return false;
    if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
      return false;
    }
    return true;
  }
  function constructYamlFloat(data) {
    var value, sign, base, digits;
    value = data.replace(/_/g, "").toLowerCase();
    sign = value[0] === "-" ? -1 : 1;
    digits = [];
    if ("+-".indexOf(value[0]) >= 0) {
      value = value.slice(1);
    }
    if (value === ".inf") {
      return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    } else if (value === ".nan") {
      return NaN;
    } else if (value.indexOf(":") >= 0) {
      value.split(":").forEach(function(v) {
        digits.unshift(parseFloat(v, 10));
      });
      value = 0;
      base = 1;
      digits.forEach(function(d) {
        value += d * base;
        base *= 60;
      });
      return sign * value;
    }
    return sign * parseFloat(value, 10);
  }
  var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
  function representYamlFloat(object, style) {
    var res;
    if (isNaN(object)) {
      switch (style) {
        case "lowercase":
          return ".nan";
        case "uppercase":
          return ".NAN";
        case "camelcase":
          return ".NaN";
      }
    } else if (Number.POSITIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return ".inf";
        case "uppercase":
          return ".INF";
        case "camelcase":
          return ".Inf";
      }
    } else if (Number.NEGATIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return "-.inf";
        case "uppercase":
          return "-.INF";
        case "camelcase":
          return "-.Inf";
      }
    } else if (common.isNegativeZero(object)) {
      return "-0.0";
    }
    res = object.toString(10);
    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
  }
  function isFloat(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
  }
  module2.exports = new Type("tag:yaml.org,2002:float", {
    kind: "scalar",
    resolve: resolveYamlFloat,
    construct: constructYamlFloat,
    predicate: isFloat,
    represent: representYamlFloat,
    defaultStyle: "lowercase"
  });
});
var require_json2 = __commonJSMin((exports, module2) => {
  "use strict";
  var Schema = require_schema();
  module2.exports = new Schema({
    include: [
      require_failsafe()
    ],
    implicit: [
      require_null(),
      require_bool(),
      require_int(),
      require_float()
    ]
  });
});
var require_core3 = __commonJSMin((exports, module2) => {
  "use strict";
  var Schema = require_schema();
  module2.exports = new Schema({
    include: [
      require_json2()
    ]
  });
});
var require_timestamp = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
  var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
  function resolveYamlTimestamp(data) {
    if (data === null)
      return false;
    if (YAML_DATE_REGEXP.exec(data) !== null)
      return true;
    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
      return true;
    return false;
  }
  function constructYamlTimestamp(data) {
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_DATE_REGEXP.exec(data);
    if (match === null)
      match = YAML_TIMESTAMP_REGEXP.exec(data);
    if (match === null)
      throw new Error("Date resolve error");
    year = +match[1];
    month = +match[2] - 1;
    day = +match[3];
    if (!match[4]) {
      return new Date(Date.UTC(year, month, day));
    }
    hour = +match[4];
    minute = +match[5];
    second = +match[6];
    if (match[7]) {
      fraction = match[7].slice(0, 3);
      while (fraction.length < 3) {
        fraction += "0";
      }
      fraction = +fraction;
    }
    if (match[9]) {
      tz_hour = +match[10];
      tz_minute = +(match[11] || 0);
      delta = (tz_hour * 60 + tz_minute) * 6e4;
      if (match[9] === "-")
        delta = -delta;
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (delta)
      date.setTime(date.getTime() - delta);
    return date;
  }
  function representYamlTimestamp(object) {
    return object.toISOString();
  }
  module2.exports = new Type("tag:yaml.org,2002:timestamp", {
    kind: "scalar",
    resolve: resolveYamlTimestamp,
    construct: constructYamlTimestamp,
    instanceOf: Date,
    represent: representYamlTimestamp
  });
});
var require_merge = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  function resolveYamlMerge(data) {
    return data === "<<" || data === null;
  }
  module2.exports = new Type("tag:yaml.org,2002:merge", {
    kind: "scalar",
    resolve: resolveYamlMerge
  });
});
var require_binary = __commonJSMin((exports, module2) => {
  "use strict";
  var NodeBuffer;
  try {
    _require = __require;
    NodeBuffer = _require("buffer").Buffer;
  } catch (__) {
  }
  var _require;
  var Type = require_type2();
  var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
  function resolveYamlBinary(data) {
    if (data === null)
      return false;
    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
    for (idx = 0; idx < max; idx++) {
      code = map.indexOf(data.charAt(idx));
      if (code > 64)
        continue;
      if (code < 0)
        return false;
      bitlen += 6;
    }
    return bitlen % 8 === 0;
  }
  function constructYamlBinary(data) {
    var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
    for (idx = 0; idx < max; idx++) {
      if (idx % 4 === 0 && idx) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      }
      bits = bits << 6 | map.indexOf(input.charAt(idx));
    }
    tailbits = max % 4 * 6;
    if (tailbits === 0) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    } else if (tailbits === 18) {
      result.push(bits >> 10 & 255);
      result.push(bits >> 2 & 255);
    } else if (tailbits === 12) {
      result.push(bits >> 4 & 255);
    }
    if (NodeBuffer) {
      return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
    }
    return result;
  }
  function representYamlBinary(object) {
    var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
    for (idx = 0; idx < max; idx++) {
      if (idx % 3 === 0 && idx) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      }
      bits = (bits << 8) + object[idx];
    }
    tail = max % 3;
    if (tail === 0) {
      result += map[bits >> 18 & 63];
      result += map[bits >> 12 & 63];
      result += map[bits >> 6 & 63];
      result += map[bits & 63];
    } else if (tail === 2) {
      result += map[bits >> 10 & 63];
      result += map[bits >> 4 & 63];
      result += map[bits << 2 & 63];
      result += map[64];
    } else if (tail === 1) {
      result += map[bits >> 2 & 63];
      result += map[bits << 4 & 63];
      result += map[64];
      result += map[64];
    }
    return result;
  }
  function isBinary(object) {
    return NodeBuffer && NodeBuffer.isBuffer(object);
  }
  module2.exports = new Type("tag:yaml.org,2002:binary", {
    kind: "scalar",
    resolve: resolveYamlBinary,
    construct: constructYamlBinary,
    predicate: isBinary,
    represent: representYamlBinary
  });
});
var require_omap = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var _toString = Object.prototype.toString;
  function resolveYamlOmap(data) {
    if (data === null)
      return true;
    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
    for (index = 0, length = object.length; index < length; index += 1) {
      pair = object[index];
      pairHasKey = false;
      if (_toString.call(pair) !== "[object Object]")
        return false;
      for (pairKey in pair) {
        if (_hasOwnProperty.call(pair, pairKey)) {
          if (!pairHasKey)
            pairHasKey = true;
          else
            return false;
        }
      }
      if (!pairHasKey)
        return false;
      if (objectKeys.indexOf(pairKey) === -1)
        objectKeys.push(pairKey);
      else
        return false;
    }
    return true;
  }
  function constructYamlOmap(data) {
    return data !== null ? data : [];
  }
  module2.exports = new Type("tag:yaml.org,2002:omap", {
    kind: "sequence",
    resolve: resolveYamlOmap,
    construct: constructYamlOmap
  });
});
var require_pairs = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  var _toString = Object.prototype.toString;
  function resolveYamlPairs(data) {
    if (data === null)
      return true;
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for (index = 0, length = object.length; index < length; index += 1) {
      pair = object[index];
      if (_toString.call(pair) !== "[object Object]")
        return false;
      keys = Object.keys(pair);
      if (keys.length !== 1)
        return false;
      result[index] = [keys[0], pair[keys[0]]];
    }
    return true;
  }
  function constructYamlPairs(data) {
    if (data === null)
      return [];
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for (index = 0, length = object.length; index < length; index += 1) {
      pair = object[index];
      keys = Object.keys(pair);
      result[index] = [keys[0], pair[keys[0]]];
    }
    return result;
  }
  module2.exports = new Type("tag:yaml.org,2002:pairs", {
    kind: "sequence",
    resolve: resolveYamlPairs,
    construct: constructYamlPairs
  });
});
var require_set = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  function resolveYamlSet(data) {
    if (data === null)
      return true;
    var key, object = data;
    for (key in object) {
      if (_hasOwnProperty.call(object, key)) {
        if (object[key] !== null)
          return false;
      }
    }
    return true;
  }
  function constructYamlSet(data) {
    return data !== null ? data : {};
  }
  module2.exports = new Type("tag:yaml.org,2002:set", {
    kind: "mapping",
    resolve: resolveYamlSet,
    construct: constructYamlSet
  });
});
var require_default_safe = __commonJSMin((exports, module2) => {
  "use strict";
  var Schema = require_schema();
  module2.exports = new Schema({
    include: [
      require_core3()
    ],
    implicit: [
      require_timestamp(),
      require_merge()
    ],
    explicit: [
      require_binary(),
      require_omap(),
      require_pairs(),
      require_set()
    ]
  });
});
var require_undefined = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  function resolveJavascriptUndefined() {
    return true;
  }
  function constructJavascriptUndefined() {
    return void 0;
  }
  function representJavascriptUndefined() {
    return "";
  }
  function isUndefined(object) {
    return typeof object === "undefined";
  }
  module2.exports = new Type("tag:yaml.org,2002:js/undefined", {
    kind: "scalar",
    resolve: resolveJavascriptUndefined,
    construct: constructJavascriptUndefined,
    predicate: isUndefined,
    represent: representJavascriptUndefined
  });
});
var require_regexp = __commonJSMin((exports, module2) => {
  "use strict";
  var Type = require_type2();
  function resolveJavascriptRegExp(data) {
    if (data === null)
      return false;
    if (data.length === 0)
      return false;
    var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
    if (regexp[0] === "/") {
      if (tail)
        modifiers = tail[1];
      if (modifiers.length > 3)
        return false;
      if (regexp[regexp.length - modifiers.length - 1] !== "/")
        return false;
    }
    return true;
  }
  function constructJavascriptRegExp(data) {
    var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
    if (regexp[0] === "/") {
      if (tail)
        modifiers = tail[1];
      regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
    }
    return new RegExp(regexp, modifiers);
  }
  function representJavascriptRegExp(object) {
    var result = "/" + object.source + "/";
    if (object.global)
      result += "g";
    if (object.multiline)
      result += "m";
    if (object.ignoreCase)
      result += "i";
    return result;
  }
  function isRegExp(object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
  }
  module2.exports = new Type("tag:yaml.org,2002:js/regexp", {
    kind: "scalar",
    resolve: resolveJavascriptRegExp,
    construct: constructJavascriptRegExp,
    predicate: isRegExp,
    represent: representJavascriptRegExp
  });
});
var require_function = __commonJSMin((exports, module2) => {
  "use strict";
  var esprima;
  try {
    _require = __require;
    esprima = _require("esprima");
  } catch (_) {
    if (typeof window !== "undefined")
      esprima = window.esprima;
  }
  var _require;
  var Type = require_type2();
  function resolveJavascriptFunction(data) {
    if (data === null)
      return false;
    try {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  function constructJavascriptFunction(data) {
    var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
    if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
      throw new Error("Failed to resolve function");
    }
    ast.body[0].expression.params.forEach(function(param) {
      params.push(param.name);
    });
    body = ast.body[0].expression.body.range;
    if (ast.body[0].expression.body.type === "BlockStatement") {
      return new Function(params, source.slice(body[0] + 1, body[1] - 1));
    }
    return new Function(params, "return " + source.slice(body[0], body[1]));
  }
  function representJavascriptFunction(object) {
    return object.toString();
  }
  function isFunction(object) {
    return Object.prototype.toString.call(object) === "[object Function]";
  }
  module2.exports = new Type("tag:yaml.org,2002:js/function", {
    kind: "scalar",
    resolve: resolveJavascriptFunction,
    construct: constructJavascriptFunction,
    predicate: isFunction,
    represent: representJavascriptFunction
  });
});
var require_default_full = __commonJSMin((exports, module2) => {
  "use strict";
  var Schema = require_schema();
  module2.exports = Schema.DEFAULT = new Schema({
    include: [
      require_default_safe()
    ],
    explicit: [
      require_undefined(),
      require_regexp(),
      require_function()
    ]
  });
});
var require_loader = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  var YAMLException = require_exception();
  var Mark = require_mark();
  var DEFAULT_SAFE_SCHEMA = require_default_safe();
  var DEFAULT_FULL_SCHEMA = require_default_full();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var CONTEXT_FLOW_IN = 1;
  var CONTEXT_FLOW_OUT = 2;
  var CONTEXT_BLOCK_IN = 3;
  var CONTEXT_BLOCK_OUT = 4;
  var CHOMPING_CLIP = 1;
  var CHOMPING_STRIP = 2;
  var CHOMPING_KEEP = 3;
  var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
  var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
  var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
  var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
  function _class(obj) {
    return Object.prototype.toString.call(obj);
  }
  function is_EOL(c) {
    return c === 10 || c === 13;
  }
  function is_WHITE_SPACE(c) {
    return c === 9 || c === 32;
  }
  function is_WS_OR_EOL(c) {
    return c === 9 || c === 32 || c === 10 || c === 13;
  }
  function is_FLOW_INDICATOR(c) {
    return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
  }
  function fromHexCode(c) {
    var lc;
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    lc = c | 32;
    if (97 <= lc && lc <= 102) {
      return lc - 97 + 10;
    }
    return -1;
  }
  function escapedHexLen(c) {
    if (c === 120) {
      return 2;
    }
    if (c === 117) {
      return 4;
    }
    if (c === 85) {
      return 8;
    }
    return 0;
  }
  function fromDecimalCode(c) {
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    return -1;
  }
  function simpleEscapeSequence(c) {
    return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
  }
  function charFromCodepoint(c) {
    if (c <= 65535) {
      return String.fromCharCode(c);
    }
    return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
  }
  var simpleEscapeCheck = new Array(256);
  var simpleEscapeMap = new Array(256);
  for (i = 0; i < 256; i++) {
    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
    simpleEscapeMap[i] = simpleEscapeSequence(i);
  }
  var i;
  function State(input, options2) {
    this.input = input;
    this.filename = options2["filename"] || null;
    this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
    this.onWarning = options2["onWarning"] || null;
    this.legacy = options2["legacy"] || false;
    this.json = options2["json"] || false;
    this.listener = options2["listener"] || null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.typeMap = this.schema.compiledTypeMap;
    this.length = input.length;
    this.position = 0;
    this.line = 0;
    this.lineStart = 0;
    this.lineIndent = 0;
    this.documents = [];
  }
  function generateError(state, message) {
    return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
  }
  function throwError(state, message) {
    throw generateError(state, message);
  }
  function throwWarning(state, message) {
    if (state.onWarning) {
      state.onWarning.call(null, generateError(state, message));
    }
  }
  var directiveHandlers = {
    YAML: function handleYamlDirective(state, name2, args) {
      var match, major, minor;
      if (state.version !== null) {
        throwError(state, "duplication of %YAML directive");
      }
      if (args.length !== 1) {
        throwError(state, "YAML directive accepts exactly one argument");
      }
      match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
      if (match === null) {
        throwError(state, "ill-formed argument of the YAML directive");
      }
      major = parseInt(match[1], 10);
      minor = parseInt(match[2], 10);
      if (major !== 1) {
        throwError(state, "unacceptable YAML version of the document");
      }
      state.version = args[0];
      state.checkLineBreaks = minor < 2;
      if (minor !== 1 && minor !== 2) {
        throwWarning(state, "unsupported YAML version of the document");
      }
    },
    TAG: function handleTagDirective(state, name2, args) {
      var handle, prefix2;
      if (args.length !== 2) {
        throwError(state, "TAG directive accepts exactly two arguments");
      }
      handle = args[0];
      prefix2 = args[1];
      if (!PATTERN_TAG_HANDLE.test(handle)) {
        throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
      }
      if (_hasOwnProperty.call(state.tagMap, handle)) {
        throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
      }
      if (!PATTERN_TAG_URI.test(prefix2)) {
        throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
      }
      state.tagMap[handle] = prefix2;
    }
  };
  function captureSegment(state, start, end, checkJson) {
    var _position, _length, _character, _result;
    if (start < end) {
      _result = state.input.slice(start, end);
      if (checkJson) {
        for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
          _character = _result.charCodeAt(_position);
          if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
            throwError(state, "expected valid JSON character");
          }
        }
      } else if (PATTERN_NON_PRINTABLE.test(_result)) {
        throwError(state, "the stream contains non-printable characters");
      }
      state.result += _result;
    }
  }
  function mergeMappings(state, destination, source, overridableKeys) {
    var sourceKeys, key, index, quantity;
    if (!common.isObject(source)) {
      throwError(state, "cannot merge mappings; the provided source object is unacceptable");
    }
    sourceKeys = Object.keys(source);
    for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
      key = sourceKeys[index];
      if (!_hasOwnProperty.call(destination, key)) {
        destination[key] = source[key];
        overridableKeys[key] = true;
      }
    }
  }
  function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
    var index, quantity;
    if (Array.isArray(keyNode)) {
      keyNode = Array.prototype.slice.call(keyNode);
      for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
        if (Array.isArray(keyNode[index])) {
          throwError(state, "nested arrays are not supported inside keys");
        }
        if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
          keyNode[index] = "[object Object]";
        }
      }
    }
    if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
      keyNode = "[object Object]";
    }
    keyNode = String(keyNode);
    if (_result === null) {
      _result = {};
    }
    if (keyTag === "tag:yaml.org,2002:merge") {
      if (Array.isArray(valueNode)) {
        for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
          mergeMappings(state, _result, valueNode[index], overridableKeys);
        }
      } else {
        mergeMappings(state, _result, valueNode, overridableKeys);
      }
    } else {
      if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
        state.line = startLine || state.line;
        state.position = startPos || state.position;
        throwError(state, "duplicated mapping key");
      }
      _result[keyNode] = valueNode;
      delete overridableKeys[keyNode];
    }
    return _result;
  }
  function readLineBreak(state) {
    var ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 10) {
      state.position++;
    } else if (ch === 13) {
      state.position++;
      if (state.input.charCodeAt(state.position) === 10) {
        state.position++;
      }
    } else {
      throwError(state, "a line break is expected");
    }
    state.line += 1;
    state.lineStart = state.position;
  }
  function skipSeparationSpace(state, allowComments, checkIndent) {
    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (allowComments && ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 10 && ch !== 13 && ch !== 0);
      }
      if (is_EOL(ch)) {
        readLineBreak(state);
        ch = state.input.charCodeAt(state.position);
        lineBreaks++;
        state.lineIndent = 0;
        while (ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
      } else {
        break;
      }
    }
    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
      throwWarning(state, "deficient indentation");
    }
    return lineBreaks;
  }
  function testDocumentSeparator(state) {
    var _position = state.position, ch;
    ch = state.input.charCodeAt(_position);
    if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
      _position += 3;
      ch = state.input.charCodeAt(_position);
      if (ch === 0 || is_WS_OR_EOL(ch)) {
        return true;
      }
    }
    return false;
  }
  function writeFoldedLines(state, count) {
    if (count === 1) {
      state.result += " ";
    } else if (count > 1) {
      state.result += common.repeat("\n", count - 1);
    }
  }
  function readPlainScalar(state, nodeIndent, withinFlowCollection) {
    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
    ch = state.input.charCodeAt(state.position);
    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
      return false;
    }
    if (ch === 63 || ch === 45) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        return false;
      }
    }
    state.kind = "scalar";
    state.result = "";
    captureStart = captureEnd = state.position;
    hasPendingContent = false;
    while (ch !== 0) {
      if (ch === 58) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          break;
        }
      } else if (ch === 35) {
        preceding = state.input.charCodeAt(state.position - 1);
        if (is_WS_OR_EOL(preceding)) {
          break;
        }
      } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
        break;
      } else if (is_EOL(ch)) {
        _line = state.line;
        _lineStart = state.lineStart;
        _lineIndent = state.lineIndent;
        skipSeparationSpace(state, false, -1);
        if (state.lineIndent >= nodeIndent) {
          hasPendingContent = true;
          ch = state.input.charCodeAt(state.position);
          continue;
        } else {
          state.position = captureEnd;
          state.line = _line;
          state.lineStart = _lineStart;
          state.lineIndent = _lineIndent;
          break;
        }
      }
      if (hasPendingContent) {
        captureSegment(state, captureStart, captureEnd, false);
        writeFoldedLines(state, state.line - _line);
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
      }
      if (!is_WHITE_SPACE(ch)) {
        captureEnd = state.position + 1;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, captureEnd, false);
    if (state.result) {
      return true;
    }
    state.kind = _kind;
    state.result = _result;
    return false;
  }
  function readSingleQuotedScalar(state, nodeIndent) {
    var ch, captureStart, captureEnd;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 39) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 39) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (ch === 39) {
          captureStart = state.position;
          state.position++;
          captureEnd = state.position;
        } else {
          return true;
        }
      } else if (is_EOL(ch)) {
        captureSegment(state, captureStart, captureEnd, true);
        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
        throwError(state, "unexpected end of the document within a single quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError(state, "unexpected end of the stream within a single quoted scalar");
  }
  function readDoubleQuotedScalar(state, nodeIndent) {
    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 34) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 34) {
        captureSegment(state, captureStart, state.position, true);
        state.position++;
        return true;
      } else if (ch === 92) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (is_EOL(ch)) {
          skipSeparationSpace(state, false, nodeIndent);
        } else if (ch < 256 && simpleEscapeCheck[ch]) {
          state.result += simpleEscapeMap[ch];
          state.position++;
        } else if ((tmp = escapedHexLen(ch)) > 0) {
          hexLength = tmp;
          hexResult = 0;
          for (; hexLength > 0; hexLength--) {
            ch = state.input.charCodeAt(++state.position);
            if ((tmp = fromHexCode(ch)) >= 0) {
              hexResult = (hexResult << 4) + tmp;
            } else {
              throwError(state, "expected hexadecimal character");
            }
          }
          state.result += charFromCodepoint(hexResult);
          state.position++;
        } else {
          throwError(state, "unknown escape sequence");
        }
        captureStart = captureEnd = state.position;
      } else if (is_EOL(ch)) {
        captureSegment(state, captureStart, captureEnd, true);
        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
        throwError(state, "unexpected end of the document within a double quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError(state, "unexpected end of the stream within a double quoted scalar");
  }
  function readFlowCollection(state, nodeIndent) {
    var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 91) {
      terminator = 93;
      isMapping = false;
      _result = [];
    } else if (ch === 123) {
      terminator = 125;
      isMapping = true;
      _result = {};
    } else {
      return false;
    }
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(++state.position);
    while (ch !== 0) {
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === terminator) {
        state.position++;
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = isMapping ? "mapping" : "sequence";
        state.result = _result;
        return true;
      } else if (!readNext) {
        throwError(state, "missed comma between flow collection entries");
      }
      keyTag = keyNode = valueNode = null;
      isPair = isExplicitPair = false;
      if (ch === 63) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following)) {
          isPair = isExplicitPair = true;
          state.position++;
          skipSeparationSpace(state, true, nodeIndent);
        }
      }
      _line = state.line;
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      keyTag = state.tag;
      keyNode = state.result;
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if ((isExplicitPair || state.line === _line) && ch === 58) {
        isPair = true;
        ch = state.input.charCodeAt(++state.position);
        skipSeparationSpace(state, true, nodeIndent);
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        valueNode = state.result;
      }
      if (isMapping) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
      } else if (isPair) {
        _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
      } else {
        _result.push(keyNode);
      }
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === 44) {
        readNext = true;
        ch = state.input.charCodeAt(++state.position);
      } else {
        readNext = false;
      }
    }
    throwError(state, "unexpected end of the stream within a flow collection");
  }
  function readBlockScalar(state, nodeIndent) {
    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 124) {
      folding = false;
    } else if (ch === 62) {
      folding = true;
    } else {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    while (ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
      if (ch === 43 || ch === 45) {
        if (CHOMPING_CLIP === chomping) {
          chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
        } else {
          throwError(state, "repeat of a chomping mode identifier");
        }
      } else if ((tmp = fromDecimalCode(ch)) >= 0) {
        if (tmp === 0) {
          throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
        } else if (!detectedIndent) {
          textIndent = nodeIndent + tmp - 1;
          detectedIndent = true;
        } else {
          throwError(state, "repeat of an indentation width identifier");
        }
      } else {
        break;
      }
    }
    if (is_WHITE_SPACE(ch)) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (is_WHITE_SPACE(ch));
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (!is_EOL(ch) && ch !== 0);
      }
    }
    while (ch !== 0) {
      readLineBreak(state);
      state.lineIndent = 0;
      ch = state.input.charCodeAt(state.position);
      while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
      if (!detectedIndent && state.lineIndent > textIndent) {
        textIndent = state.lineIndent;
      }
      if (is_EOL(ch)) {
        emptyLines++;
        continue;
      }
      if (state.lineIndent < textIndent) {
        if (chomping === CHOMPING_KEEP) {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (chomping === CHOMPING_CLIP) {
          if (didReadContent) {
            state.result += "\n";
          }
        }
        break;
      }
      if (folding) {
        if (is_WHITE_SPACE(ch)) {
          atMoreIndented = true;
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (atMoreIndented) {
          atMoreIndented = false;
          state.result += common.repeat("\n", emptyLines + 1);
        } else if (emptyLines === 0) {
          if (didReadContent) {
            state.result += " ";
          }
        } else {
          state.result += common.repeat("\n", emptyLines);
        }
      } else {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      }
      didReadContent = true;
      detectedIndent = true;
      emptyLines = 0;
      captureStart = state.position;
      while (!is_EOL(ch) && ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, state.position, false);
    }
    return true;
  }
  function readBlockSequence(state, nodeIndent) {
    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      if (ch !== 45) {
        break;
      }
      following = state.input.charCodeAt(state.position + 1);
      if (!is_WS_OR_EOL(following)) {
        break;
      }
      detected = true;
      state.position++;
      if (skipSeparationSpace(state, true, -1)) {
        if (state.lineIndent <= nodeIndent) {
          _result.push(null);
          ch = state.input.charCodeAt(state.position);
          continue;
        }
      }
      _line = state.line;
      composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
      _result.push(state.result);
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
        throwError(state, "bad indentation of a sequence entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "sequence";
      state.result = _result;
      return true;
    }
    return false;
  }
  function readBlockMapping(state, nodeIndent, flowIndent) {
    var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      following = state.input.charCodeAt(state.position + 1);
      _line = state.line;
      _pos = state.position;
      if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
        if (ch === 63) {
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = true;
          allowCompact = true;
        } else if (atExplicitKey) {
          atExplicitKey = false;
          allowCompact = true;
        } else {
          throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
        }
        state.position += 1;
        ch = following;
      } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        if (state.line === _line) {
          ch = state.input.charCodeAt(state.position);
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 58) {
            ch = state.input.charCodeAt(++state.position);
            if (!is_WS_OR_EOL(ch)) {
              throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
            }
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = false;
            allowCompact = false;
            keyTag = state.tag;
            keyNode = state.result;
          } else if (detected) {
            throwError(state, "can not read an implicit mapping pair; a colon is missed");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else if (detected) {
          throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else {
        break;
      }
      if (state.line === _line || state.lineIndent > nodeIndent) {
        if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
          if (atExplicitKey) {
            keyNode = state.result;
          } else {
            valueNode = state.result;
          }
        }
        if (!atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
          keyTag = keyNode = valueNode = null;
        }
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
      }
      if (state.lineIndent > nodeIndent && ch !== 0) {
        throwError(state, "bad indentation of a mapping entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (atExplicitKey) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "mapping";
      state.result = _result;
    }
    return detected;
  }
  function readTagProperty(state) {
    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 33)
      return false;
    if (state.tag !== null) {
      throwError(state, "duplication of a tag property");
    }
    ch = state.input.charCodeAt(++state.position);
    if (ch === 60) {
      isVerbatim = true;
      ch = state.input.charCodeAt(++state.position);
    } else if (ch === 33) {
      isNamed = true;
      tagHandle = "!!";
      ch = state.input.charCodeAt(++state.position);
    } else {
      tagHandle = "!";
    }
    _position = state.position;
    if (isVerbatim) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0 && ch !== 62);
      if (state.position < state.length) {
        tagName = state.input.slice(_position, state.position);
        ch = state.input.charCodeAt(++state.position);
      } else {
        throwError(state, "unexpected end of the stream within a verbatim tag");
      }
    } else {
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        if (ch === 33) {
          if (!isNamed) {
            tagHandle = state.input.slice(_position - 1, state.position + 1);
            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
              throwError(state, "named tag handle cannot contain such characters");
            }
            isNamed = true;
            _position = state.position + 1;
          } else {
            throwError(state, "tag suffix cannot contain exclamation marks");
          }
        }
        ch = state.input.charCodeAt(++state.position);
      }
      tagName = state.input.slice(_position, state.position);
      if (PATTERN_FLOW_INDICATORS.test(tagName)) {
        throwError(state, "tag suffix cannot contain flow indicator characters");
      }
    }
    if (tagName && !PATTERN_TAG_URI.test(tagName)) {
      throwError(state, "tag name cannot contain such characters: " + tagName);
    }
    if (isVerbatim) {
      state.tag = tagName;
    } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
      state.tag = state.tagMap[tagHandle] + tagName;
    } else if (tagHandle === "!") {
      state.tag = "!" + tagName;
    } else if (tagHandle === "!!") {
      state.tag = "tag:yaml.org,2002:" + tagName;
    } else {
      throwError(state, 'undeclared tag handle "' + tagHandle + '"');
    }
    return true;
  }
  function readAnchorProperty(state) {
    var _position, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 38)
      return false;
    if (state.anchor !== null) {
      throwError(state, "duplication of an anchor property");
    }
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError(state, "name of an anchor node must contain at least one character");
    }
    state.anchor = state.input.slice(_position, state.position);
    return true;
  }
  function readAlias(state) {
    var _position, alias, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 42)
      return false;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError(state, "name of an alias node must contain at least one character");
    }
    alias = state.input.slice(_position, state.position);
    if (!_hasOwnProperty.call(state.anchorMap, alias)) {
      throwError(state, 'unidentified alias "' + alias + '"');
    }
    state.result = state.anchorMap[alias];
    skipSeparationSpace(state, true, -1);
    return true;
  }
  function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
    if (state.listener !== null) {
      state.listener("open", state);
    }
    state.tag = null;
    state.anchor = null;
    state.kind = null;
    state.result = null;
    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
    if (allowToSeek) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      }
    }
    if (indentStatus === 1) {
      while (readTagProperty(state) || readAnchorProperty(state)) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          allowBlockCollections = allowBlockStyles;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        } else {
          allowBlockCollections = false;
        }
      }
    }
    if (allowBlockCollections) {
      allowBlockCollections = atNewLine || allowCompact;
    }
    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
      if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
        flowIndent = parentIndent;
      } else {
        flowIndent = parentIndent + 1;
      }
      blockIndent = state.position - state.lineStart;
      if (indentStatus === 1) {
        if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
          hasContent = true;
        } else {
          if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
            hasContent = true;
          } else if (readAlias(state)) {
            hasContent = true;
            if (state.tag !== null || state.anchor !== null) {
              throwError(state, "alias node should not have any properties");
            }
          } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
            hasContent = true;
            if (state.tag === null) {
              state.tag = "?";
            }
          }
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      } else if (indentStatus === 0) {
        hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
      }
    }
    if (state.tag !== null && state.tag !== "!") {
      if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
        type = state.typeMap[state.kind || "fallback"][state.tag];
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      } else {
        throwError(state, "unknown tag !<" + state.tag + ">");
      }
    }
    if (state.listener !== null) {
      state.listener("close", state);
    }
    return state.tag !== null || state.anchor !== null || hasContent;
  }
  function readDocument(state) {
    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
    state.version = null;
    state.checkLineBreaks = state.legacy;
    state.tagMap = {};
    state.anchorMap = {};
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if (state.lineIndent > 0 || ch !== 37) {
        break;
      }
      hasDirectives = true;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveName = state.input.slice(_position, state.position);
      directiveArgs = [];
      if (directiveName.length < 1) {
        throwError(state, "directive name must not be less than one character in length");
      }
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && !is_EOL(ch));
          break;
        }
        if (is_EOL(ch))
          break;
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveArgs.push(state.input.slice(_position, state.position));
      }
      if (ch !== 0)
        readLineBreak(state);
      if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
        directiveHandlers[directiveName](state, directiveName, directiveArgs);
      } else {
        throwWarning(state, 'unknown document directive "' + directiveName + '"');
      }
    }
    skipSeparationSpace(state, true, -1);
    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    } else if (hasDirectives) {
      throwError(state, "directives end mark is expected");
    }
    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
    skipSeparationSpace(state, true, -1);
    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
      throwWarning(state, "non-ASCII line breaks are interpreted as content");
    }
    state.documents.push(state.result);
    if (state.position === state.lineStart && testDocumentSeparator(state)) {
      if (state.input.charCodeAt(state.position) === 46) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      }
      return;
    }
    if (state.position < state.length - 1) {
      throwError(state, "end of the stream or a document separator is expected");
    } else {
      return;
    }
  }
  function loadDocuments(input, options2) {
    input = String(input);
    options2 = options2 || {};
    if (input.length !== 0) {
      if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
        input += "\n";
      }
      if (input.charCodeAt(0) === 65279) {
        input = input.slice(1);
      }
    }
    var state = new State(input, options2);
    var nullpos = input.indexOf("\0");
    if (nullpos !== -1) {
      state.position = nullpos;
      throwError(state, "null byte is not allowed in input");
    }
    state.input += "\0";
    while (state.input.charCodeAt(state.position) === 32) {
      state.lineIndent += 1;
      state.position += 1;
    }
    while (state.position < state.length - 1) {
      readDocument(state);
    }
    return state.documents;
  }
  function loadAll(input, iterator2, options2) {
    if (iterator2 !== null && typeof iterator2 === "object" && typeof options2 === "undefined") {
      options2 = iterator2;
      iterator2 = null;
    }
    var documents = loadDocuments(input, options2);
    if (typeof iterator2 !== "function") {
      return documents;
    }
    for (var index = 0, length = documents.length; index < length; index += 1) {
      iterator2(documents[index]);
    }
  }
  function load(input, options2) {
    var documents = loadDocuments(input, options2);
    if (documents.length === 0) {
      return void 0;
    } else if (documents.length === 1) {
      return documents[0];
    }
    throw new YAMLException("expected a single document in the stream, but found more");
  }
  function safeLoadAll(input, iterator2, options2) {
    if (typeof iterator2 === "object" && iterator2 !== null && typeof options2 === "undefined") {
      options2 = iterator2;
      iterator2 = null;
    }
    return loadAll(input, iterator2, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
  }
  function safeLoad(input, options2) {
    return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
  }
  module2.exports.loadAll = loadAll;
  module2.exports.load = load;
  module2.exports.safeLoadAll = safeLoadAll;
  module2.exports.safeLoad = safeLoad;
});
var require_dumper = __commonJSMin((exports, module2) => {
  "use strict";
  var common = require_common();
  var YAMLException = require_exception();
  var DEFAULT_FULL_SCHEMA = require_default_full();
  var DEFAULT_SAFE_SCHEMA = require_default_safe();
  var _toString = Object.prototype.toString;
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var CHAR_TAB = 9;
  var CHAR_LINE_FEED = 10;
  var CHAR_CARRIAGE_RETURN = 13;
  var CHAR_SPACE = 32;
  var CHAR_EXCLAMATION = 33;
  var CHAR_DOUBLE_QUOTE = 34;
  var CHAR_SHARP = 35;
  var CHAR_PERCENT = 37;
  var CHAR_AMPERSAND = 38;
  var CHAR_SINGLE_QUOTE = 39;
  var CHAR_ASTERISK = 42;
  var CHAR_COMMA = 44;
  var CHAR_MINUS = 45;
  var CHAR_COLON = 58;
  var CHAR_EQUALS = 61;
  var CHAR_GREATER_THAN = 62;
  var CHAR_QUESTION = 63;
  var CHAR_COMMERCIAL_AT = 64;
  var CHAR_LEFT_SQUARE_BRACKET = 91;
  var CHAR_RIGHT_SQUARE_BRACKET = 93;
  var CHAR_GRAVE_ACCENT = 96;
  var CHAR_LEFT_CURLY_BRACKET = 123;
  var CHAR_VERTICAL_LINE = 124;
  var CHAR_RIGHT_CURLY_BRACKET = 125;
  var ESCAPE_SEQUENCES = {};
  ESCAPE_SEQUENCES[0] = "\\0";
  ESCAPE_SEQUENCES[7] = "\\a";
  ESCAPE_SEQUENCES[8] = "\\b";
  ESCAPE_SEQUENCES[9] = "\\t";
  ESCAPE_SEQUENCES[10] = "\\n";
  ESCAPE_SEQUENCES[11] = "\\v";
  ESCAPE_SEQUENCES[12] = "\\f";
  ESCAPE_SEQUENCES[13] = "\\r";
  ESCAPE_SEQUENCES[27] = "\\e";
  ESCAPE_SEQUENCES[34] = '\\"';
  ESCAPE_SEQUENCES[92] = "\\\\";
  ESCAPE_SEQUENCES[133] = "\\N";
  ESCAPE_SEQUENCES[160] = "\\_";
  ESCAPE_SEQUENCES[8232] = "\\L";
  ESCAPE_SEQUENCES[8233] = "\\P";
  var DEPRECATED_BOOLEANS_SYNTAX = [
    "y",
    "Y",
    "yes",
    "Yes",
    "YES",
    "on",
    "On",
    "ON",
    "n",
    "N",
    "no",
    "No",
    "NO",
    "off",
    "Off",
    "OFF"
  ];
  function compileStyleMap(schema, map) {
    var result, keys, index, length, tag, style, type;
    if (map === null)
      return {};
    result = {};
    keys = Object.keys(map);
    for (index = 0, length = keys.length; index < length; index += 1) {
      tag = keys[index];
      style = String(map[tag]);
      if (tag.slice(0, 2) === "!!") {
        tag = "tag:yaml.org,2002:" + tag.slice(2);
      }
      type = schema.compiledTypeMap["fallback"][tag];
      if (type && _hasOwnProperty.call(type.styleAliases, style)) {
        style = type.styleAliases[style];
      }
      result[tag] = style;
    }
    return result;
  }
  function encodeHex(character) {
    var string, handle, length;
    string = character.toString(16).toUpperCase();
    if (character <= 255) {
      handle = "x";
      length = 2;
    } else if (character <= 65535) {
      handle = "u";
      length = 4;
    } else if (character <= 4294967295) {
      handle = "U";
      length = 8;
    } else {
      throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
    }
    return "\\" + handle + common.repeat("0", length - string.length) + string;
  }
  function State(options2) {
    this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
    this.indent = Math.max(1, options2["indent"] || 2);
    this.noArrayIndent = options2["noArrayIndent"] || false;
    this.skipInvalid = options2["skipInvalid"] || false;
    this.flowLevel = common.isNothing(options2["flowLevel"]) ? -1 : options2["flowLevel"];
    this.styleMap = compileStyleMap(this.schema, options2["styles"] || null);
    this.sortKeys = options2["sortKeys"] || false;
    this.lineWidth = options2["lineWidth"] || 80;
    this.noRefs = options2["noRefs"] || false;
    this.noCompatMode = options2["noCompatMode"] || false;
    this.condenseFlow = options2["condenseFlow"] || false;
    this.implicitTypes = this.schema.compiledImplicit;
    this.explicitTypes = this.schema.compiledExplicit;
    this.tag = null;
    this.result = "";
    this.duplicates = [];
    this.usedDuplicates = null;
  }
  function indentString(string, spaces) {
    var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
    while (position < length) {
      next = string.indexOf("\n", position);
      if (next === -1) {
        line = string.slice(position);
        position = length;
      } else {
        line = string.slice(position, next + 1);
        position = next + 1;
      }
      if (line.length && line !== "\n")
        result += ind;
      result += line;
    }
    return result;
  }
  function generateNextLine(state, level) {
    return "\n" + common.repeat(" ", state.indent * level);
  }
  function testImplicitResolving(state, str) {
    var index, length, type;
    for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
      type = state.implicitTypes[index];
      if (type.resolve(str)) {
        return true;
      }
    }
    return false;
  }
  function isWhitespace(c) {
    return c === CHAR_SPACE || c === CHAR_TAB;
  }
  function isPrintable(c) {
    return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
  }
  function isNsChar(c) {
    return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
  }
  function isPlainSafe(c, prev) {
    return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
  }
  function isPlainSafeFirst(c) {
    return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
  }
  function needIndentIndicator(string) {
    var leadingSpaceRe = /^\n* /;
    return leadingSpaceRe.test(string);
  }
  var STYLE_PLAIN = 1;
  var STYLE_SINGLE = 2;
  var STYLE_LITERAL = 3;
  var STYLE_FOLDED = 4;
  var STYLE_DOUBLE = 5;
  function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
    var i;
    var char, prev_char;
    var hasLineBreak = false;
    var hasFoldableLine = false;
    var shouldTrackWidth = lineWidth !== -1;
    var previousLineBreak = -1;
    var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
    if (singleLineOnly) {
      for (i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (!isPrintable(char)) {
          return STYLE_DOUBLE;
        }
        prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
        plain = plain && isPlainSafe(char, prev_char);
      }
    } else {
      for (i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (char === CHAR_LINE_FEED) {
          hasLineBreak = true;
          if (shouldTrackWidth) {
            hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
            previousLineBreak = i;
          }
        } else if (!isPrintable(char)) {
          return STYLE_DOUBLE;
        }
        prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
        plain = plain && isPlainSafe(char, prev_char);
      }
      hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
    }
    if (!hasLineBreak && !hasFoldableLine) {
      return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
    }
    if (indentPerLevel > 9 && needIndentIndicator(string)) {
      return STYLE_DOUBLE;
    }
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  function writeScalar(state, string, level, iskey) {
    state.dump = function() {
      if (string.length === 0) {
        return "''";
      }
      if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
        return "'" + string + "'";
      }
      var indent = state.indent * Math.max(1, level);
      var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
      var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
      function testAmbiguity(string2) {
        return testImplicitResolving(state, string2);
      }
      switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
        case STYLE_PLAIN:
          return string;
        case STYLE_SINGLE:
          return "'" + string.replace(/'/g, "''") + "'";
        case STYLE_LITERAL:
          return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
        case STYLE_FOLDED:
          return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
        case STYLE_DOUBLE:
          return '"' + escapeString(string, lineWidth) + '"';
        default:
          throw new YAMLException("impossible error: invalid scalar style");
      }
    }();
  }
  function blockHeader(string, indentPerLevel) {
    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
    var clip = string[string.length - 1] === "\n";
    var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
    var chomp = keep ? "+" : clip ? "" : "-";
    return indentIndicator + chomp + "\n";
  }
  function dropEndingNewline(string) {
    return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
  }
  function foldString(string, width) {
    var lineRe = /(\n+)([^\n]*)/g;
    var result = function() {
      var nextLF = string.indexOf("\n");
      nextLF = nextLF !== -1 ? nextLF : string.length;
      lineRe.lastIndex = nextLF;
      return foldLine(string.slice(0, nextLF), width);
    }();
    var prevMoreIndented = string[0] === "\n" || string[0] === " ";
    var moreIndented;
    var match;
    while (match = lineRe.exec(string)) {
      var prefix2 = match[1], line = match[2];
      moreIndented = line[0] === " ";
      result += prefix2 + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
      prevMoreIndented = moreIndented;
    }
    return result;
  }
  function foldLine(line, width) {
    if (line === "" || line[0] === " ")
      return line;
    var breakRe = / [^ ]/g;
    var match;
    var start = 0, end, curr = 0, next = 0;
    var result = "";
    while (match = breakRe.exec(line)) {
      next = match.index;
      if (next - start > width) {
        end = curr > start ? curr : next;
        result += "\n" + line.slice(start, end);
        start = end + 1;
      }
      curr = next;
    }
    result += "\n";
    if (line.length - start > width && curr > start) {
      result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
    } else {
      result += line.slice(start);
    }
    return result.slice(1);
  }
  function escapeString(string) {
    var result = "";
    var char, nextChar;
    var escapeSeq;
    for (var i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (char >= 55296 && char <= 56319) {
        nextChar = string.charCodeAt(i + 1);
        if (nextChar >= 56320 && nextChar <= 57343) {
          result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
          i++;
          continue;
        }
      }
      escapeSeq = ESCAPE_SEQUENCES[char];
      result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
    }
    return result;
  }
  function writeFlowSequence(state, level, object) {
    var _result = "", _tag = state.tag, index, length;
    for (index = 0, length = object.length; index < length; index += 1) {
      if (writeNode(state, level, object[index], false, false)) {
        if (index !== 0)
          _result += "," + (!state.condenseFlow ? " " : "");
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = "[" + _result + "]";
  }
  function writeBlockSequence(state, level, object, compact) {
    var _result = "", _tag = state.tag, index, length;
    for (index = 0, length = object.length; index < length; index += 1) {
      if (writeNode(state, level + 1, object[index], true, true)) {
        if (!compact || index !== 0) {
          _result += generateNextLine(state, level);
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          _result += "-";
        } else {
          _result += "- ";
        }
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = _result || "[]";
  }
  function writeFlowMapping(state, level, object) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
    for (index = 0, length = objectKeyList.length; index < length; index += 1) {
      pairBuffer = "";
      if (index !== 0)
        pairBuffer += ", ";
      if (state.condenseFlow)
        pairBuffer += '"';
      objectKey = objectKeyList[index];
      objectValue = object[objectKey];
      if (!writeNode(state, level, objectKey, false, false)) {
        continue;
      }
      if (state.dump.length > 1024)
        pairBuffer += "? ";
      pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
      if (!writeNode(state, level, objectValue, false, false)) {
        continue;
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = "{" + _result + "}";
  }
  function writeBlockMapping(state, level, object, compact) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
    if (state.sortKeys === true) {
      objectKeyList.sort();
    } else if (typeof state.sortKeys === "function") {
      objectKeyList.sort(state.sortKeys);
    } else if (state.sortKeys) {
      throw new YAMLException("sortKeys must be a boolean or a function");
    }
    for (index = 0, length = objectKeyList.length; index < length; index += 1) {
      pairBuffer = "";
      if (!compact || index !== 0) {
        pairBuffer += generateNextLine(state, level);
      }
      objectKey = objectKeyList[index];
      objectValue = object[objectKey];
      if (!writeNode(state, level + 1, objectKey, true, true, true)) {
        continue;
      }
      explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
      if (explicitPair) {
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += "?";
        } else {
          pairBuffer += "? ";
        }
      }
      pairBuffer += state.dump;
      if (explicitPair) {
        pairBuffer += generateNextLine(state, level);
      }
      if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
        continue;
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += ":";
      } else {
        pairBuffer += ": ";
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = _result || "{}";
  }
  function detectType(state, object, explicit) {
    var _result, typeList, index, length, type, style;
    typeList = explicit ? state.explicitTypes : state.implicitTypes;
    for (index = 0, length = typeList.length; index < length; index += 1) {
      type = typeList[index];
      if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
        state.tag = explicit ? type.tag : "?";
        if (type.represent) {
          style = state.styleMap[type.tag] || type.defaultStyle;
          if (_toString.call(type.represent) === "[object Function]") {
            _result = type.represent(object, style);
          } else if (_hasOwnProperty.call(type.represent, style)) {
            _result = type.represent[style](object, style);
          } else {
            throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
          }
          state.dump = _result;
        }
        return true;
      }
    }
    return false;
  }
  function writeNode(state, level, object, block, compact, iskey) {
    state.tag = null;
    state.dump = object;
    if (!detectType(state, object, false)) {
      detectType(state, object, true);
    }
    var type = _toString.call(state.dump);
    if (block) {
      block = state.flowLevel < 0 || state.flowLevel > level;
    }
    var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
    if (objectOrArray) {
      duplicateIndex = state.duplicates.indexOf(object);
      duplicate = duplicateIndex !== -1;
    }
    if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
      compact = false;
    }
    if (duplicate && state.usedDuplicates[duplicateIndex]) {
      state.dump = "*ref_" + duplicateIndex;
    } else {
      if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
        state.usedDuplicates[duplicateIndex] = true;
      }
      if (type === "[object Object]") {
        if (block && Object.keys(state.dump).length !== 0) {
          writeBlockMapping(state, level, state.dump, compact);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowMapping(state, level, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type === "[object Array]") {
        var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
        if (block && state.dump.length !== 0) {
          writeBlockSequence(state, arrayLevel, state.dump, compact);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowSequence(state, arrayLevel, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type === "[object String]") {
        if (state.tag !== "?") {
          writeScalar(state, state.dump, level, iskey);
        }
      } else {
        if (state.skipInvalid)
          return false;
        throw new YAMLException("unacceptable kind of an object to dump " + type);
      }
      if (state.tag !== null && state.tag !== "?") {
        state.dump = "!<" + state.tag + "> " + state.dump;
      }
    }
    return true;
  }
  function getDuplicateReferences(object, state) {
    var objects = [], duplicatesIndexes = [], index, length;
    inspectNode(object, objects, duplicatesIndexes);
    for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
      state.duplicates.push(objects[duplicatesIndexes[index]]);
    }
    state.usedDuplicates = new Array(length);
  }
  function inspectNode(object, objects, duplicatesIndexes) {
    var objectKeyList, index, length;
    if (object !== null && typeof object === "object") {
      index = objects.indexOf(object);
      if (index !== -1) {
        if (duplicatesIndexes.indexOf(index) === -1) {
          duplicatesIndexes.push(index);
        }
      } else {
        objects.push(object);
        if (Array.isArray(object)) {
          for (index = 0, length = object.length; index < length; index += 1) {
            inspectNode(object[index], objects, duplicatesIndexes);
          }
        } else {
          objectKeyList = Object.keys(object);
          for (index = 0, length = objectKeyList.length; index < length; index += 1) {
            inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
          }
        }
      }
    }
  }
  function dump(input, options2) {
    options2 = options2 || {};
    var state = new State(options2);
    if (!state.noRefs)
      getDuplicateReferences(input, state);
    if (writeNode(state, 0, input, true, true))
      return state.dump + "\n";
    return "";
  }
  function safeDump(input, options2) {
    return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
  }
  module2.exports.dump = dump;
  module2.exports.safeDump = safeDump;
});
var require_js_yaml2 = __commonJSMin((exports, module2) => {
  "use strict";
  var loader = require_loader();
  var dumper = require_dumper();
  function deprecated(name2) {
    return function() {
      throw new Error("Function " + name2 + " is deprecated and cannot be used.");
    };
  }
  module2.exports.Type = require_type2();
  module2.exports.Schema = require_schema();
  module2.exports.FAILSAFE_SCHEMA = require_failsafe();
  module2.exports.JSON_SCHEMA = require_json2();
  module2.exports.CORE_SCHEMA = require_core3();
  module2.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
  module2.exports.DEFAULT_FULL_SCHEMA = require_default_full();
  module2.exports.load = loader.load;
  module2.exports.loadAll = loader.loadAll;
  module2.exports.safeLoad = loader.safeLoad;
  module2.exports.safeLoadAll = loader.safeLoadAll;
  module2.exports.dump = dumper.dump;
  module2.exports.safeDump = dumper.safeDump;
  module2.exports.YAMLException = require_exception();
  module2.exports.MINIMAL_SCHEMA = require_failsafe();
  module2.exports.SAFE_SCHEMA = require_default_safe();
  module2.exports.DEFAULT_SCHEMA = require_default_full();
  module2.exports.scan = deprecated("scan");
  module2.exports.parse = deprecated("parse");
  module2.exports.compose = deprecated("compose");
  module2.exports.addConstructor = deprecated("addConstructor");
});
var require_js_yaml3 = __commonJSMin((exports, module2) => {
  "use strict";
  var yaml2 = require_js_yaml2();
  module2.exports = yaml2;
});
var require_which2 = __commonJSMin((exports, module2) => {
  module2.exports = which;
  which.sync = whichSync;
  var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
  var path9 = __require("path");
  var COLON = isWindows ? ";" : ":";
  var isexe = require_isexe();
  function getNotFoundError(cmd) {
    var er = new Error("not found: " + cmd);
    er.code = "ENOENT";
    return er;
  }
  function getPathInfo(cmd, opt) {
    var colon = opt.colon || COLON;
    var pathEnv = opt.path || process.env.PATH || "";
    var pathExt = [""];
    pathEnv = pathEnv.split(colon);
    var pathExtExe = "";
    if (isWindows) {
      pathEnv.unshift(process.cwd());
      pathExtExe = opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM";
      pathExt = pathExtExe.split(colon);
      if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
        pathExt.unshift("");
    }
    if (cmd.match(/\//) || isWindows && cmd.match(/\\/))
      pathEnv = [""];
    return {
      env: pathEnv,
      ext: pathExt,
      extExe: pathExtExe
    };
  }
  function which(cmd, opt, cb) {
    if (typeof opt === "function") {
      cb = opt;
      opt = {};
    }
    var info = getPathInfo(cmd, opt);
    var pathEnv = info.env;
    var pathExt = info.ext;
    var pathExtExe = info.extExe;
    var found = [];
    (function F(i, l) {
      if (i === l) {
        if (opt.all && found.length)
          return cb(null, found);
        else
          return cb(getNotFoundError(cmd));
      }
      var pathPart = pathEnv[i];
      if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
        pathPart = pathPart.slice(1, -1);
      var p = path9.join(pathPart, cmd);
      if (!pathPart && /^\.[\\\/]/.test(cmd)) {
        p = cmd.slice(0, 2) + p;
      }
      ;
      (function E(ii, ll) {
        if (ii === ll)
          return F(i + 1, l);
        var ext = pathExt[ii];
        isexe(p + ext, { pathExt: pathExtExe }, function(er, is) {
          if (!er && is) {
            if (opt.all)
              found.push(p + ext);
            else
              return cb(null, p + ext);
          }
          return E(ii + 1, ll);
        });
      })(0, pathExt.length);
    })(0, pathEnv.length);
  }
  function whichSync(cmd, opt) {
    opt = opt || {};
    var info = getPathInfo(cmd, opt);
    var pathEnv = info.env;
    var pathExt = info.ext;
    var pathExtExe = info.extExe;
    var found = [];
    for (var i = 0, l = pathEnv.length; i < l; i++) {
      var pathPart = pathEnv[i];
      if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
        pathPart = pathPart.slice(1, -1);
      var p = path9.join(pathPart, cmd);
      if (!pathPart && /^\.[\\\/]/.test(cmd)) {
        p = cmd.slice(0, 2) + p;
      }
      for (var j = 0, ll = pathExt.length; j < ll; j++) {
        var cur = p + pathExt[j];
        var is;
        try {
          is = isexe.sync(cur, { pathExt: pathExtExe });
          if (is) {
            if (opt.all)
              found.push(cur);
            else
              return cur;
          }
        } catch (ex) {
        }
      }
    }
    if (opt.all && found.length)
      return found;
    if (opt.nothrow)
      return null;
    throw getNotFoundError(cmd);
  }
});
var require_pseudomap = __commonJSMin((exports, module2) => {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module2.exports = PseudoMap;
  function PseudoMap(set2) {
    if (!(this instanceof PseudoMap))
      throw new TypeError("Constructor PseudoMap requires 'new'");
    this.clear();
    if (set2) {
      if (set2 instanceof PseudoMap || typeof Map === "function" && set2 instanceof Map)
        set2.forEach(function(value, key) {
          this.set(key, value);
        }, this);
      else if (Array.isArray(set2))
        set2.forEach(function(kv) {
          this.set(kv[0], kv[1]);
        }, this);
      else
        throw new TypeError("invalid argument");
    }
  }
  PseudoMap.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    Object.keys(this._data).forEach(function(k) {
      if (k !== "size")
        fn.call(thisp, this._data[k].value, this._data[k].key);
    }, this);
  };
  PseudoMap.prototype.has = function(k) {
    return !!find2(this._data, k);
  };
  PseudoMap.prototype.get = function(k) {
    var res = find2(this._data, k);
    return res && res.value;
  };
  PseudoMap.prototype.set = function(k, v) {
    set(this._data, k, v);
  };
  PseudoMap.prototype.delete = function(k) {
    var res = find2(this._data, k);
    if (res) {
      delete this._data[res._index];
      this._data.size--;
    }
  };
  PseudoMap.prototype.clear = function() {
    var data = /* @__PURE__ */ Object.create(null);
    data.size = 0;
    Object.defineProperty(this, "_data", {
      value: data,
      enumerable: false,
      configurable: true,
      writable: false
    });
  };
  Object.defineProperty(PseudoMap.prototype, "size", {
    get: function() {
      return this._data.size;
    },
    set: function(n) {
    },
    enumerable: true,
    configurable: true
  });
  PseudoMap.prototype.values = PseudoMap.prototype.keys = PseudoMap.prototype.entries = function() {
    throw new Error("iterators are not implemented in this version");
  };
  function same(a, b) {
    return a === b || a !== a && b !== b;
  }
  function Entry(k, v, i) {
    this.key = k;
    this.value = v;
    this._index = i;
  }
  function find2(data, k) {
    for (var i = 0, s = "_" + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {
      if (same(data[key].key, k))
        return data[key];
    }
  }
  function set(data, k, v) {
    for (var i = 0, s = "_" + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {
      if (same(data[key].key, k)) {
        data[key].value = v;
        return;
      }
    }
    data.size++;
    data[key] = new Entry(k, v, key);
  }
});
var require_map2 = __commonJSMin((exports, module2) => {
  if (process.env.npm_package_name === "pseudomap" && process.env.npm_lifecycle_script === "test")
    process.env.TEST_PSEUDOMAP = "true";
  if (typeof Map === "function" && !process.env.TEST_PSEUDOMAP) {
    module2.exports = Map;
  } else {
    module2.exports = require_pseudomap();
  }
});
var require_yallist = __commonJSMin((exports, module2) => {
  module2.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (!(self2 instanceof Yallist)) {
      self2 = new Yallist();
    }
    self2.tail = null;
    self2.head = null;
    self2.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function(item) {
        self2.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self2.push(arguments[i]);
      }
    }
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function push(self2, item) {
    self2.tail = new Node(item, self2.tail, null, self2);
    if (!self2.head) {
      self2.head = self2.tail;
    }
    self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node(item, null, self2.head, self2);
    if (!self2.tail) {
      self2.tail = self2.head;
    }
    self2.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
});
var require_lru_cache = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = LRUCache;
  var Map2 = require_map2();
  var util2 = __require("util");
  var Yallist = require_yallist();
  var hasSymbol = typeof Symbol === "function" && process.env._nodeLRUCacheForceNoSymbol !== "1";
  var makeSymbol;
  if (hasSymbol) {
    makeSymbol = function(key) {
      return Symbol(key);
    };
  } else {
    makeSymbol = function(key) {
      return "_" + key;
    };
  }
  var MAX = makeSymbol("max");
  var LENGTH = makeSymbol("length");
  var LENGTH_CALCULATOR = makeSymbol("lengthCalculator");
  var ALLOW_STALE = makeSymbol("allowStale");
  var MAX_AGE = makeSymbol("maxAge");
  var DISPOSE = makeSymbol("dispose");
  var NO_DISPOSE_ON_SET = makeSymbol("noDisposeOnSet");
  var LRU_LIST = makeSymbol("lruList");
  var CACHE = makeSymbol("cache");
  function naiveLength() {
    return 1;
  }
  function LRUCache(options2) {
    if (!(this instanceof LRUCache)) {
      return new LRUCache(options2);
    }
    if (typeof options2 === "number") {
      options2 = { max: options2 };
    }
    if (!options2) {
      options2 = {};
    }
    var max = this[MAX] = options2.max;
    if (!max || !(typeof max === "number") || max <= 0) {
      this[MAX] = Infinity;
    }
    var lc = options2.length || naiveLength;
    if (typeof lc !== "function") {
      lc = naiveLength;
    }
    this[LENGTH_CALCULATOR] = lc;
    this[ALLOW_STALE] = options2.stale || false;
    this[MAX_AGE] = options2.maxAge || 0;
    this[DISPOSE] = options2.dispose;
    this[NO_DISPOSE_ON_SET] = options2.noDisposeOnSet || false;
    this.reset();
  }
  Object.defineProperty(LRUCache.prototype, "max", {
    set: function(mL) {
      if (!mL || !(typeof mL === "number") || mL <= 0) {
        mL = Infinity;
      }
      this[MAX] = mL;
      trim(this);
    },
    get: function() {
      return this[MAX];
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, "allowStale", {
    set: function(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    },
    get: function() {
      return this[ALLOW_STALE];
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, "maxAge", {
    set: function(mA) {
      if (!mA || !(typeof mA === "number") || mA < 0) {
        mA = 0;
      }
      this[MAX_AGE] = mA;
      trim(this);
    },
    get: function() {
      return this[MAX_AGE];
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, "lengthCalculator", {
    set: function(lC) {
      if (typeof lC !== "function") {
        lC = naiveLength;
      }
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach(function(hit) {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        }, this);
      }
      trim(this);
    },
    get: function() {
      return this[LENGTH_CALCULATOR];
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, "length", {
    get: function() {
      return this[LENGTH];
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, "itemCount", {
    get: function() {
      return this[LRU_LIST].length;
    },
    enumerable: true
  });
  LRUCache.prototype.rforEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this[LRU_LIST].tail; walker !== null; ) {
      var prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  };
  function forEachStep(self2, fn, node, thisp) {
    var hit = node.value;
    if (isStale(self2, hit)) {
      del(self2, node);
      if (!self2[ALLOW_STALE]) {
        hit = void 0;
      }
    }
    if (hit) {
      fn.call(thisp, hit.value, hit.key, self2);
    }
  }
  LRUCache.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this[LRU_LIST].head; walker !== null; ) {
      var next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  };
  LRUCache.prototype.keys = function() {
    return this[LRU_LIST].toArray().map(function(k) {
      return k.key;
    }, this);
  };
  LRUCache.prototype.values = function() {
    return this[LRU_LIST].toArray().map(function(k) {
      return k.value;
    }, this);
  };
  LRUCache.prototype.reset = function() {
    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
      this[LRU_LIST].forEach(function(hit) {
        this[DISPOSE](hit.key, hit.value);
      }, this);
    }
    this[CACHE] = new Map2();
    this[LRU_LIST] = new Yallist();
    this[LENGTH] = 0;
  };
  LRUCache.prototype.dump = function() {
    return this[LRU_LIST].map(function(hit) {
      if (!isStale(this, hit)) {
        return {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        };
      }
    }, this).toArray().filter(function(h) {
      return h;
    });
  };
  LRUCache.prototype.dumpLru = function() {
    return this[LRU_LIST];
  };
  LRUCache.prototype.inspect = function(n, opts) {
    var str = "LRUCache {";
    var extras = false;
    var as = this[ALLOW_STALE];
    if (as) {
      str += "\n  allowStale: true";
      extras = true;
    }
    var max = this[MAX];
    if (max && max !== Infinity) {
      if (extras) {
        str += ",";
      }
      str += "\n  max: " + util2.inspect(max, opts);
      extras = true;
    }
    var maxAge = this[MAX_AGE];
    if (maxAge) {
      if (extras) {
        str += ",";
      }
      str += "\n  maxAge: " + util2.inspect(maxAge, opts);
      extras = true;
    }
    var lc = this[LENGTH_CALCULATOR];
    if (lc && lc !== naiveLength) {
      if (extras) {
        str += ",";
      }
      str += "\n  length: " + util2.inspect(this[LENGTH], opts);
      extras = true;
    }
    var didFirst = false;
    this[LRU_LIST].forEach(function(item) {
      if (didFirst) {
        str += ",\n  ";
      } else {
        if (extras) {
          str += ",\n";
        }
        didFirst = true;
        str += "\n  ";
      }
      var key = util2.inspect(item.key).split("\n").join("\n  ");
      var val = { value: item.value };
      if (item.maxAge !== maxAge) {
        val.maxAge = item.maxAge;
      }
      if (lc !== naiveLength) {
        val.length = item.length;
      }
      if (isStale(this, item)) {
        val.stale = true;
      }
      val = util2.inspect(val, opts).split("\n").join("\n  ");
      str += key + " => " + val;
    });
    if (didFirst || extras) {
      str += "\n";
    }
    str += "}";
    return str;
  };
  LRUCache.prototype.set = function(key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE];
    var now = maxAge ? Date.now() : 0;
    var len = this[LENGTH_CALCULATOR](value, key);
    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key));
        return false;
      }
      var node = this[CACHE].get(key);
      var item = node.value;
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET]) {
          this[DISPOSE](key, item.value);
        }
      }
      item.now = now;
      item.maxAge = maxAge;
      item.value = value;
      this[LENGTH] += len - item.length;
      item.length = len;
      this.get(key);
      trim(this);
      return true;
    }
    var hit = new Entry(key, value, len, now, maxAge);
    if (hit.length > this[MAX]) {
      if (this[DISPOSE]) {
        this[DISPOSE](key, value);
      }
      return false;
    }
    this[LENGTH] += hit.length;
    this[LRU_LIST].unshift(hit);
    this[CACHE].set(key, this[LRU_LIST].head);
    trim(this);
    return true;
  };
  LRUCache.prototype.has = function(key) {
    if (!this[CACHE].has(key))
      return false;
    var hit = this[CACHE].get(key).value;
    if (isStale(this, hit)) {
      return false;
    }
    return true;
  };
  LRUCache.prototype.get = function(key) {
    return get(this, key, true);
  };
  LRUCache.prototype.peek = function(key) {
    return get(this, key, false);
  };
  LRUCache.prototype.pop = function() {
    var node = this[LRU_LIST].tail;
    if (!node)
      return null;
    del(this, node);
    return node.value;
  };
  LRUCache.prototype.del = function(key) {
    del(this, this[CACHE].get(key));
  };
  LRUCache.prototype.load = function(arr) {
    this.reset();
    var now = Date.now();
    for (var l = arr.length - 1; l >= 0; l--) {
      var hit = arr[l];
      var expiresAt = hit.e || 0;
      if (expiresAt === 0) {
        this.set(hit.k, hit.v);
      } else {
        var maxAge = expiresAt - now;
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge);
        }
      }
    }
  };
  LRUCache.prototype.prune = function() {
    var self2 = this;
    this[CACHE].forEach(function(value, key) {
      get(self2, key, false);
    });
  };
  function get(self2, key, doUse) {
    var node = self2[CACHE].get(key);
    if (node) {
      var hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      } else {
        if (doUse) {
          self2[LRU_LIST].unshiftNode(node);
        }
      }
      if (hit)
        hit = hit.value;
    }
    return hit;
  }
  function isStale(self2, hit) {
    if (!hit || !hit.maxAge && !self2[MAX_AGE]) {
      return false;
    }
    var stale = false;
    var diff = Date.now() - hit.now;
    if (hit.maxAge) {
      stale = diff > hit.maxAge;
    } else {
      stale = self2[MAX_AGE] && diff > self2[MAX_AGE];
    }
    return stale;
  }
  function trim(self2) {
    if (self2[LENGTH] > self2[MAX]) {
      for (var walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        var prev = walker.prev;
        del(self2, walker);
        walker = prev;
      }
    }
  }
  function del(self2, node) {
    if (node) {
      var hit = node.value;
      if (self2[DISPOSE]) {
        self2[DISPOSE](hit.key, hit.value);
      }
      self2[LENGTH] -= hit.length;
      self2[CACHE].delete(hit.key);
      self2[LRU_LIST].removeNode(node);
    }
  }
  function Entry(key, value, length, now, maxAge) {
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
  }
});
var require_resolveCommand2 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var which = require_which2();
  var LRU = require_lru_cache();
  var commandCache = new LRU({ max: 50, maxAge: 30 * 1e3 });
  function resolveCommand(command, noExtension) {
    var resolved;
    noExtension = !!noExtension;
    resolved = commandCache.get(command + "!" + noExtension);
    if (commandCache.has(command)) {
      return commandCache.get(command);
    }
    try {
      resolved = !noExtension ? which.sync(command) : which.sync(command, { pathExt: path9.delimiter + (process.env.PATHEXT || "") });
    } catch (e) {
    }
    commandCache.set(command + "!" + noExtension, resolved);
    return resolved;
  }
  module2.exports = resolveCommand;
});
var require_hasEmptyArgumentBug = __commonJSMin((exports, module2) => {
  "use strict";
  function hasEmptyArgumentBug() {
    var nodeVer;
    if (process.platform !== "win32") {
      return false;
    }
    nodeVer = process.version.substr(1).split(".").map(function(num) {
      return parseInt(num, 10);
    });
    return nodeVer[0] === 0 && nodeVer[1] < 12;
  }
  module2.exports = hasEmptyArgumentBug();
});
var require_escapeArgument = __commonJSMin((exports, module2) => {
  "use strict";
  function escapeArgument(arg, quote) {
    arg = "" + arg;
    if (!quote) {
      arg = arg.replace(/([()%!^<>&|;,"'\s])/g, "^$1");
    } else {
      arg = arg.replace(/(\\*)"/g, '$1$1\\"');
      arg = arg.replace(/(\\*)$/, "$1$1");
      arg = '"' + arg + '"';
    }
    return arg;
  }
  module2.exports = escapeArgument;
});
var require_escapeCommand = __commonJSMin((exports, module2) => {
  "use strict";
  var escapeArgument = require_escapeArgument();
  function escapeCommand(command) {
    return /^[a-z0-9_-]+$/i.test(command) ? command : escapeArgument(command, true);
  }
  module2.exports = escapeCommand;
});
var require_shebang_regex2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = /^#!.*/;
});
var require_shebang_command2 = __commonJSMin((exports, module2) => {
  "use strict";
  var shebangRegex = require_shebang_regex2();
  module2.exports = function(str) {
    var match = str.match(shebangRegex);
    if (!match) {
      return null;
    }
    var arr = match[0].replace(/#! ?/, "").split(" ");
    var bin = arr[0].split("/").pop();
    var arg = arr[1];
    return bin === "env" ? arg : bin + (arg ? " " + arg : "");
  };
});
var require_readShebang2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = __require("fs");
  var LRU = require_lru_cache();
  var shebangCommand = require_shebang_command2();
  var shebangCache = new LRU({ max: 50, maxAge: 30 * 1e3 });
  function readShebang(command) {
    var buffer;
    var fd;
    var shebang;
    if (shebangCache.has(command)) {
      return shebangCache.get(command);
    }
    buffer = new Buffer(150);
    try {
      fd = fs9.openSync(command, "r");
      fs9.readSync(fd, buffer, 0, 150, 0);
      fs9.closeSync(fd);
    } catch (e) {
    }
    shebang = shebangCommand(buffer.toString());
    shebangCache.set(command, shebang);
    return shebang;
  }
  module2.exports = readShebang;
});
var require_parse2 = __commonJSMin((exports, module2) => {
  "use strict";
  var resolveCommand = require_resolveCommand2();
  var hasEmptyArgumentBug = require_hasEmptyArgumentBug();
  var escapeArgument = require_escapeArgument();
  var escapeCommand = require_escapeCommand();
  var readShebang = require_readShebang2();
  var isWin = process.platform === "win32";
  var skipShellRegExp = /\.(?:com|exe)$/i;
  var supportsShellOption = parseInt(process.version.substr(1).split(".")[0], 10) >= 6 || parseInt(process.version.substr(1).split(".")[0], 10) === 4 && parseInt(process.version.substr(1).split(".")[1], 10) >= 8;
  function parseNonShell(parsed) {
    var shebang;
    var needsShell;
    var applyQuotes;
    if (!isWin) {
      return parsed;
    }
    parsed.file = resolveCommand(parsed.command);
    parsed.file = parsed.file || resolveCommand(parsed.command, true);
    shebang = parsed.file && readShebang(parsed.file);
    if (shebang) {
      parsed.args.unshift(parsed.file);
      parsed.command = shebang;
      needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(resolveCommand(shebang) || resolveCommand(shebang, true));
    } else {
      needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(parsed.file);
    }
    if (needsShell) {
      applyQuotes = parsed.command !== "echo";
      parsed.command = escapeCommand(parsed.command);
      parsed.args = parsed.args.map(function(arg) {
        return escapeArgument(arg, applyQuotes);
      });
      parsed.args = ["/d", "/s", "/c", '"' + parsed.command + (parsed.args.length ? " " + parsed.args.join(" ") : "") + '"'];
      parsed.command = process.env.comspec || "cmd.exe";
      parsed.options.windowsVerbatimArguments = true;
    }
    return parsed;
  }
  function parseShell(parsed) {
    var shellCommand;
    if (supportsShellOption) {
      return parsed;
    }
    shellCommand = [parsed.command].concat(parsed.args).join(" ");
    if (isWin) {
      parsed.command = typeof parsed.options.shell === "string" ? parsed.options.shell : process.env.comspec || "cmd.exe";
      parsed.args = ["/d", "/s", "/c", '"' + shellCommand + '"'];
      parsed.options.windowsVerbatimArguments = true;
    } else {
      if (typeof parsed.options.shell === "string") {
        parsed.command = parsed.options.shell;
      } else if (process.platform === "android") {
        parsed.command = "/system/bin/sh";
      } else {
        parsed.command = "/bin/sh";
      }
      parsed.args = ["-c", shellCommand];
    }
    return parsed;
  }
  function parse4(command, args, options2) {
    var parsed;
    if (args && !Array.isArray(args)) {
      options2 = args;
      args = null;
    }
    args = args ? args.slice(0) : [];
    options2 = options2 || {};
    parsed = {
      command,
      args,
      options: options2,
      file: void 0,
      original: command
    };
    return options2.shell ? parseShell(parsed) : parseNonShell(parsed);
  }
  module2.exports = parse4;
});
var require_enoent2 = __commonJSMin((exports, module2) => {
  "use strict";
  var isWin = process.platform === "win32";
  var resolveCommand = require_resolveCommand2();
  var isNode10 = process.version.indexOf("v0.10.") === 0;
  function notFoundError(command, syscall) {
    var err;
    err = new Error(syscall + " " + command + " ENOENT");
    err.code = err.errno = "ENOENT";
    err.syscall = syscall + " " + command;
    return err;
  }
  function hookChildProcess(cp, parsed) {
    var originalEmit;
    if (!isWin) {
      return;
    }
    originalEmit = cp.emit;
    cp.emit = function(name2, arg1) {
      var err;
      if (name2 === "exit") {
        err = verifyENOENT(arg1, parsed, "spawn");
        if (err) {
          return originalEmit.call(cp, "error", err);
        }
      }
      return originalEmit.apply(cp, arguments);
    };
  }
  function verifyENOENT(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawn");
    }
    return null;
  }
  function verifyENOENTSync(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
    if (isNode10 && status === -1) {
      parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);
      if (!parsed.file) {
        return notFoundError(parsed.original, "spawnSync");
      }
    }
    return null;
  }
  module2.exports.hookChildProcess = hookChildProcess;
  module2.exports.verifyENOENT = verifyENOENT;
  module2.exports.verifyENOENTSync = verifyENOENTSync;
  module2.exports.notFoundError = notFoundError;
});
var require_cross_spawn2 = __commonJSMin((exports, module2) => {
  "use strict";
  var cp = __require("child_process");
  var parse4 = require_parse2();
  var enoent = require_enoent2();
  var cpSpawnSync = cp.spawnSync;
  function spawn2(command, args, options2) {
    var parsed;
    var spawned;
    parsed = parse4(command, args, options2);
    spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
    enoent.hookChildProcess(spawned, parsed);
    return spawned;
  }
  function spawnSync(command, args, options2) {
    var parsed;
    var result;
    if (!cpSpawnSync) {
      try {
        cpSpawnSync = __require("spawn-sync");
      } catch (ex) {
        throw new Error("In order to use spawnSync on node 0.10 or older, you must install spawn-sync:\n\n  npm install spawn-sync --save");
      }
    }
    parsed = parse4(command, args, options2);
    result = cpSpawnSync(parsed.command, parsed.args, parsed.options);
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
    return result;
  }
  module2.exports = spawn2;
  module2.exports.spawn = spawn2;
  module2.exports.sync = spawnSync;
  module2.exports._parse = parse4;
  module2.exports._enoent = enoent;
});
var require_promise2 = __commonJSMin((exports, module2) => {
  "use strict";
  var EventEmitter = __require("events");
  var ChildProcessPromise = class extends Promise {
    constructor(executer) {
      let resolve;
      let reject;
      super((res, rej) => {
        resolve = res;
        reject = rej;
      });
      executer(resolve, reject, this);
    }
  };
  Object.assign(ChildProcessPromise.prototype, EventEmitter.prototype);
  module2.exports = ChildProcessPromise;
});
var require_spawndamnit = __commonJSMin((exports, module2) => {
  "use strict";
  var crossSpawn = require_cross_spawn2();
  var onExit = require_signal_exit();
  var EventEmitter = __require("events");
  var ChildProcessPromise = require_promise2();
  var activeProcesses = /* @__PURE__ */ new Set();
  onExit(() => {
    for (let child of activeProcesses) {
      child.kill("SIGTERM");
    }
  });
  function spawn2(cmd, args, opts) {
    return new ChildProcessPromise((resolve, reject, events) => {
      let child = crossSpawn(cmd, args, opts);
      let stdout = Buffer.from("");
      let stderr = Buffer.from("");
      activeProcesses.add(child);
      if (child.stdout) {
        child.stdout.on("data", (data) => {
          stdout = Buffer.concat([stdout, data]);
          events.emit("stdout", data);
        });
      }
      if (child.stderr) {
        child.stderr.on("data", (data) => {
          stderr = Buffer.concat([stderr, data]);
          events.emit("stderr", data);
        });
      }
      child.on("error", (err) => {
        activeProcesses.delete(child);
        reject(err);
      });
      child.on("close", (code) => {
        activeProcesses.delete(child);
        resolve({ code, stdout, stderr });
      });
    });
  }
  module2.exports = spawn2;
  module2.exports.ChildProcessPromise = ChildProcessPromise;
});
var require_runtime = __commonJSMin((exports, module2) => {
  var runtime = function(exports2) {
    "use strict";
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined2;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define2(obj, key, value) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      define2({}, "");
    } catch (err) {
      define2 = function(obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context3 = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self2, context3);
      return generator;
    }
    exports2.wrap = wrap;
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {};
    define2(IteratorPrototype, iteratorSymbol, function() {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define2(Gp, "constructor", GeneratorFunctionPrototype);
    define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define2(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports2.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports2.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define2(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
    exports2.awrap = function(arg) {
      return { __await: arg };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function(unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
      this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
      return this;
    });
    exports2.AsyncIterator = AsyncIterator;
    exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0)
        PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self2, context3) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }
          return doneResult();
        }
        context3.method = method;
        context3.arg = arg;
        while (true) {
          var delegate = context3.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context3);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if (context3.method === "next") {
            context3.sent = context3._sent = context3.arg;
          } else if (context3.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context3.arg;
            }
            context3.dispatchException(context3.arg);
          } else if (context3.method === "return") {
            context3.abrupt("return", context3.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self2, context3);
          if (record.type === "normal") {
            state = context3.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context3.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context3.method = "throw";
            context3.arg = record.arg;
          }
        }
      };
    }
    function maybeInvokeDelegate(delegate, context3) {
      var method = delegate.iterator[context3.method];
      if (method === undefined2) {
        context3.delegate = null;
        if (context3.method === "throw") {
          if (delegate.iterator["return"]) {
            context3.method = "return";
            context3.arg = undefined2;
            maybeInvokeDelegate(delegate, context3);
            if (context3.method === "throw") {
              return ContinueSentinel;
            }
          }
          context3.method = "throw";
          context3.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method, delegate.iterator, context3.arg);
      if (record.type === "throw") {
        context3.method = "throw";
        context3.arg = record.arg;
        context3.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context3.method = "throw";
        context3.arg = new TypeError("iterator result is not an object");
        context3.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        context3[delegate.resultName] = info.value;
        context3.next = delegate.nextLoc;
        if (context3.method !== "return") {
          context3.method = "next";
          context3.arg = undefined2;
        }
      } else {
        return info;
      }
      context3.delegate = null;
      return ContinueSentinel;
    }
    defineIteratorMethods(Gp);
    define2(Gp, toStringTagSymbol, "Generator");
    define2(Gp, iteratorSymbol, function() {
      return this;
    });
    define2(Gp, "toString", function() {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports2.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();
      return function next() {
        while (keys.length) {
          var key2 = keys.pop();
          if (key2 in object) {
            next.value = key2;
            next.done = false;
            return next;
          }
        }
        next.done = true;
        return next;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1, next = function next2() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next2.value = iterable[i];
                next2.done = false;
                return next2;
              }
            }
            next2.value = undefined2;
            next2.done = true;
            return next2;
          };
          return next.next = next;
        }
      }
      return { next: doneResult };
    }
    exports2.values = values;
    function doneResult() {
      return { value: undefined2, done: true };
    }
    Context.prototype = {
      constructor: Context,
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined2;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined2;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name2 in this) {
            if (name2.charAt(0) === "t" && hasOwn.call(this, name2) && !isNaN(+name2.slice(1))) {
              this[name2] = undefined2;
            }
          }
        }
      },
      stop: function() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
        var context3 = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context3.next = loc;
          if (caught) {
            context3.method = "next";
            context3.arg = undefined2;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName,
          nextLoc
        };
        if (this.method === "next") {
          this.arg = undefined2;
        }
        return ContinueSentinel;
      }
    };
    return exports2;
  }(typeof module2 === "object" ? module2.exports : {});
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
});
var require_regenerator = __commonJSMin((exports, module2) => {
  module2.exports = require_runtime();
});
var require_asyncToGenerator = __commonJSMin((exports, module2) => {
  function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator2(fn) {
    return function() {
      var self2 = this, args = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args);
        function _next(value) {
          asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  module2.exports = _asyncToGenerator2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_classCallCheck = __commonJSMin((exports, module2) => {
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  module2.exports = _classCallCheck2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_typeof = __commonJSMin((exports, module2) => {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      module2.exports = _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
      module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    } else {
      module2.exports = _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
      module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    }
    return _typeof2(obj);
  }
  module2.exports = _typeof2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_assertThisInitialized = __commonJSMin((exports, module2) => {
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  module2.exports = _assertThisInitialized2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_possibleConstructorReturn = __commonJSMin((exports, module2) => {
  var _typeof2 = require_typeof()["default"];
  var assertThisInitialized = require_assertThisInitialized();
  function _possibleConstructorReturn2(self2, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return assertThisInitialized(self2);
  }
  module2.exports = _possibleConstructorReturn2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_getPrototypeOf = __commonJSMin((exports, module2) => {
  function _getPrototypeOf2(o) {
    module2.exports = _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    return _getPrototypeOf2(o);
  }
  module2.exports = _getPrototypeOf2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_setPrototypeOf = __commonJSMin((exports, module2) => {
  function _setPrototypeOf2(o, p) {
    module2.exports = _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    return _setPrototypeOf2(o, p);
  }
  module2.exports = _setPrototypeOf2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_inherits = __commonJSMin((exports, module2) => {
  var setPrototypeOf = require_setPrototypeOf();
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      setPrototypeOf(subClass, superClass);
  }
  module2.exports = _inherits2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_isNativeFunction = __commonJSMin((exports, module2) => {
  function _isNativeFunction2(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  module2.exports = _isNativeFunction2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_isNativeReflectConstruct = __commonJSMin((exports, module2) => {
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  module2.exports = _isNativeReflectConstruct2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_construct = __commonJSMin((exports, module2) => {
  var setPrototypeOf = require_setPrototypeOf();
  var isNativeReflectConstruct = require_isNativeReflectConstruct();
  function _construct2(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module2.exports = _construct2 = Reflect.construct;
      module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    } else {
      module2.exports = _construct2 = function _construct3(Parent2, args2, Class2) {
        var a = [null];
        a.push.apply(a, args2);
        var Constructor = Function.bind.apply(Parent2, a);
        var instance = new Constructor();
        if (Class2)
          setPrototypeOf(instance, Class2.prototype);
        return instance;
      };
      module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    }
    return _construct2.apply(null, arguments);
  }
  module2.exports = _construct2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_wrapNativeSuper = __commonJSMin((exports, module2) => {
  var getPrototypeOf = require_getPrototypeOf();
  var setPrototypeOf = require_setPrototypeOf();
  var isNativeFunction = require_isNativeFunction();
  var construct = require_construct();
  function _wrapNativeSuper2(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    module2.exports = _wrapNativeSuper2 = function _wrapNativeSuper3(Class2) {
      if (Class2 === null || !isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return construct(Class2, arguments, getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class2);
    };
    module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
    return _wrapNativeSuper2(Class);
  }
  module2.exports = _wrapNativeSuper2;
  module2.exports["default"] = module2.exports, module2.exports.__esModule = true;
});
var require_fs2 = __commonJSMin((exports) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var api = [
    "access",
    "appendFile",
    "chmod",
    "chown",
    "close",
    "copyFile",
    "fchmod",
    "fchown",
    "fdatasync",
    "fstat",
    "fsync",
    "ftruncate",
    "futimes",
    "lchown",
    "lchmod",
    "link",
    "lstat",
    "mkdir",
    "mkdtemp",
    "open",
    "readFile",
    "readdir",
    "readlink",
    "realpath",
    "rename",
    "rmdir",
    "stat",
    "symlink",
    "truncate",
    "unlink",
    "utimes",
    "writeFile"
  ].filter((key) => {
    return typeof fs9[key] === "function";
  });
  Object.keys(fs9).forEach((key) => {
    if (key === "promises") {
      return;
    }
    exports[key] = fs9[key];
  });
  api.forEach((method) => {
    exports[method] = u(fs9[method]);
  });
  exports.exists = function(filename, callback) {
    if (typeof callback === "function") {
      return fs9.exists(filename, callback);
    }
    return new Promise((resolve) => {
      return fs9.exists(filename, resolve);
    });
  };
  exports.read = function(fd, buffer, offset, length, position, callback) {
    if (typeof callback === "function") {
      return fs9.read(fd, buffer, offset, length, position, callback);
    }
    return new Promise((resolve, reject) => {
      fs9.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesRead, buffer: buffer2 });
      });
    });
  };
  exports.write = function(fd, buffer, ...args) {
    if (typeof args[args.length - 1] === "function") {
      return fs9.write(fd, buffer, ...args);
    }
    return new Promise((resolve, reject) => {
      fs9.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
        if (err)
          return reject(err);
        resolve({ bytesWritten, buffer: buffer2 });
      });
    });
  };
  if (typeof fs9.realpath.native === "function") {
    exports.realpath.native = u(fs9.realpath.native);
  }
});
var require_win322 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  function getRootPath(p) {
    p = path9.normalize(path9.resolve(p)).split(path9.sep);
    if (p.length > 0)
      return p[0];
    return null;
  }
  var INVALID_PATH_CHARS = /[<>:"|?*]/;
  function invalidWin32Path(p) {
    const rp = getRootPath(p);
    p = p.replace(rp, "");
    return INVALID_PATH_CHARS.test(p);
  }
  module2.exports = {
    getRootPath,
    invalidWin32Path
  };
});
var require_mkdirs3 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var invalidWin32Path = require_win322().invalidWin32Path;
  var o777 = parseInt("0777", 8);
  function mkdirs(p, opts, callback, made) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    } else if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      return callback(errInval);
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs9;
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    callback = callback || function() {
    };
    p = path9.resolve(p);
    xfs.mkdir(p, mode, (er) => {
      if (!er) {
        made = made || p;
        return callback(null, made);
      }
      switch (er.code) {
        case "ENOENT":
          if (path9.dirname(p) === p)
            return callback(er);
          mkdirs(path9.dirname(p), opts, (er2, made2) => {
            if (er2)
              callback(er2, made2);
            else
              mkdirs(p, opts, callback, made2);
          });
          break;
        default:
          xfs.stat(p, (er2, stat) => {
            if (er2 || !stat.isDirectory())
              callback(er, made);
            else
              callback(null, made);
          });
          break;
      }
    });
  }
  module2.exports = mkdirs;
});
var require_mkdirs_sync2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var invalidWin32Path = require_win322().invalidWin32Path;
  var o777 = parseInt("0777", 8);
  function mkdirsSync(p, opts, made) {
    if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs9;
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      throw errInval;
    }
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    p = path9.resolve(p);
    try {
      xfs.mkdirSync(p, mode);
      made = made || p;
    } catch (err0) {
      if (err0.code === "ENOENT") {
        if (path9.dirname(p) === p)
          throw err0;
        made = mkdirsSync(path9.dirname(p), opts, made);
        mkdirsSync(p, opts, made);
      } else {
        let stat;
        try {
          stat = xfs.statSync(p);
        } catch (err1) {
          throw err0;
        }
        if (!stat.isDirectory())
          throw err0;
      }
    }
    return made;
  }
  module2.exports = mkdirsSync;
});
var require_mkdirs4 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var mkdirs = u(require_mkdirs3());
  var mkdirsSync = require_mkdirs_sync2();
  module2.exports = {
    mkdirs,
    mkdirsSync,
    mkdirp: mkdirs,
    mkdirpSync: mkdirsSync,
    ensureDir: mkdirs,
    ensureDirSync: mkdirsSync
  };
});
var require_utimes2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var os2 = __require("os");
  var path9 = __require("path");
  function hasMillisResSync() {
    let tmpfile = path9.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path9.join(os2.tmpdir(), tmpfile);
    const d = new Date(1435410243862);
    fs9.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
    const fd = fs9.openSync(tmpfile, "r+");
    fs9.futimesSync(fd, d, d);
    fs9.closeSync(fd);
    return fs9.statSync(tmpfile).mtime > 1435410243e3;
  }
  function hasMillisRes(callback) {
    let tmpfile = path9.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path9.join(os2.tmpdir(), tmpfile);
    const d = new Date(1435410243862);
    fs9.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
      if (err)
        return callback(err);
      fs9.open(tmpfile, "r+", (err2, fd) => {
        if (err2)
          return callback(err2);
        fs9.futimes(fd, d, d, (err3) => {
          if (err3)
            return callback(err3);
          fs9.close(fd, (err4) => {
            if (err4)
              return callback(err4);
            fs9.stat(tmpfile, (err5, stats) => {
              if (err5)
                return callback(err5);
              callback(null, stats.mtime > 1435410243e3);
            });
          });
        });
      });
    });
  }
  function timeRemoveMillis(timestamp) {
    if (typeof timestamp === "number") {
      return Math.floor(timestamp / 1e3) * 1e3;
    } else if (timestamp instanceof Date) {
      return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
    } else {
      throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
    }
  }
  function utimesMillis(path10, atime, mtime, callback) {
    fs9.open(path10, "r+", (err, fd) => {
      if (err)
        return callback(err);
      fs9.futimes(fd, atime, mtime, (futimesErr) => {
        fs9.close(fd, (closeErr) => {
          if (callback)
            callback(futimesErr || closeErr);
        });
      });
    });
  }
  function utimesMillisSync(path10, atime, mtime) {
    const fd = fs9.openSync(path10, "r+");
    fs9.futimesSync(fd, atime, mtime);
    return fs9.closeSync(fd);
  }
  module2.exports = {
    hasMillisRes,
    hasMillisResSync,
    timeRemoveMillis,
    utimesMillis,
    utimesMillisSync
  };
});
var require_stat = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var NODE_VERSION_MAJOR_WITH_BIGINT = 10;
  var NODE_VERSION_MINOR_WITH_BIGINT = 5;
  var NODE_VERSION_PATCH_WITH_BIGINT = 0;
  var nodeVersion = process.versions.node.split(".");
  var nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);
  var nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);
  var nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);
  function nodeSupportsBigInt() {
    if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) {
      return true;
    } else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {
      if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) {
        return true;
      } else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {
        if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) {
          return true;
        }
      }
    }
    return false;
  }
  function getStats(src, dest, cb) {
    if (nodeSupportsBigInt()) {
      fs9.stat(src, { bigint: true }, (err, srcStat) => {
        if (err)
          return cb(err);
        fs9.stat(dest, { bigint: true }, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT")
              return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    } else {
      fs9.stat(src, (err, srcStat) => {
        if (err)
          return cb(err);
        fs9.stat(dest, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT")
              return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    }
  }
  function getStatsSync(src, dest) {
    let srcStat, destStat;
    if (nodeSupportsBigInt()) {
      srcStat = fs9.statSync(src, { bigint: true });
    } else {
      srcStat = fs9.statSync(src);
    }
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs9.statSync(dest, { bigint: true });
      } else {
        destStat = fs9.statSync(dest);
      }
    } catch (err) {
      if (err.code === "ENOENT")
        return { srcStat, destStat: null };
      throw err;
    }
    return { srcStat, destStat };
  }
  function checkPaths(src, dest, funcName, cb) {
    getStats(src, dest, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
        return cb(new Error("Source and destination must not be the same."));
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        return cb(new Error(errMsg(src, dest, funcName)));
      }
      return cb(null, { srcStat, destStat });
    });
  }
  function checkPathsSync(src, dest, funcName) {
    const { srcStat, destStat } = getStatsSync(src, dest);
    if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return { srcStat, destStat };
  }
  function checkParentPaths(src, srcStat, dest, funcName, cb) {
    const srcParent = path9.resolve(path9.dirname(src));
    const destParent = path9.resolve(path9.dirname(dest));
    if (destParent === srcParent || destParent === path9.parse(destParent).root)
      return cb();
    if (nodeSupportsBigInt()) {
      fs9.stat(destParent, { bigint: true }, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      });
    } else {
      fs9.stat(destParent, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      });
    }
  }
  function checkParentPathsSync(src, srcStat, dest, funcName) {
    const srcParent = path9.resolve(path9.dirname(src));
    const destParent = path9.resolve(path9.dirname(dest));
    if (destParent === srcParent || destParent === path9.parse(destParent).root)
      return;
    let destStat;
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs9.statSync(destParent, { bigint: true });
      } else {
        destStat = fs9.statSync(destParent);
      }
    } catch (err) {
      if (err.code === "ENOENT")
        return;
      throw err;
    }
    if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return checkParentPathsSync(src, srcStat, destParent, funcName);
  }
  function isSrcSubdir(src, dest) {
    const srcArr = path9.resolve(src).split(path9.sep).filter((i) => i);
    const destArr = path9.resolve(dest).split(path9.sep).filter((i) => i);
    return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
  }
  function errMsg(src, dest, funcName) {
    return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
  }
  module2.exports = {
    checkPaths,
    checkPathsSync,
    checkParentPaths,
    checkParentPathsSync,
    isSrcSubdir
  };
});
var require_buffer2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = function(size) {
    if (typeof Buffer.allocUnsafe === "function") {
      try {
        return Buffer.allocUnsafe(size);
      } catch (e) {
        return new Buffer(size);
      }
    }
    return new Buffer(size);
  };
});
var require_copy_sync3 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdirpSync = require_mkdirs4().mkdirsSync;
  var utimesSync = require_utimes2().utimesMillisSync;
  var stat = require_stat();
  function copySync(src, dest, opts) {
    if (typeof opts === "function") {
      opts = { filter: opts };
    }
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy");
    stat.checkParentPathsSync(src, srcStat, dest, "copy");
    return handleFilterAndCopy(destStat, src, dest, opts);
  }
  function handleFilterAndCopy(destStat, src, dest, opts) {
    if (opts.filter && !opts.filter(src, dest))
      return;
    const destParent = path9.dirname(dest);
    if (!fs9.existsSync(destParent))
      mkdirpSync(destParent);
    return startCopy(destStat, src, dest, opts);
  }
  function startCopy(destStat, src, dest, opts) {
    if (opts.filter && !opts.filter(src, dest))
      return;
    return getStats(destStat, src, dest, opts);
  }
  function getStats(destStat, src, dest, opts) {
    const statSync = opts.dereference ? fs9.statSync : fs9.lstatSync;
    const srcStat = statSync(src);
    if (srcStat.isDirectory())
      return onDir(srcStat, destStat, src, dest, opts);
    else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
      return onFile(srcStat, destStat, src, dest, opts);
    else if (srcStat.isSymbolicLink())
      return onLink(destStat, src, dest, opts);
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return copyFile(srcStat, src, dest, opts);
    return mayCopyFile(srcStat, src, dest, opts);
  }
  function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.overwrite) {
      fs9.unlinkSync(dest);
      return copyFile(srcStat, src, dest, opts);
    } else if (opts.errorOnExist) {
      throw new Error(`'${dest}' already exists`);
    }
  }
  function copyFile(srcStat, src, dest, opts) {
    if (typeof fs9.copyFileSync === "function") {
      fs9.copyFileSync(src, dest);
      fs9.chmodSync(dest, srcStat.mode);
      if (opts.preserveTimestamps) {
        return utimesSync(dest, srcStat.atime, srcStat.mtime);
      }
      return;
    }
    return copyFileFallback(srcStat, src, dest, opts);
  }
  function copyFileFallback(srcStat, src, dest, opts) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = require_buffer2()(BUF_LENGTH);
    const fdr = fs9.openSync(src, "r");
    const fdw = fs9.openSync(dest, "w", srcStat.mode);
    let pos = 0;
    while (pos < srcStat.size) {
      const bytesRead = fs9.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      fs9.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }
    if (opts.preserveTimestamps)
      fs9.futimesSync(fdw, srcStat.atime, srcStat.mtime);
    fs9.closeSync(fdr);
    fs9.closeSync(fdw);
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return mkDirAndCopy(srcStat, src, dest, opts);
    if (destStat && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
    }
    return copyDir(src, dest, opts);
  }
  function mkDirAndCopy(srcStat, src, dest, opts) {
    fs9.mkdirSync(dest);
    copyDir(src, dest, opts);
    return fs9.chmodSync(dest, srcStat.mode);
  }
  function copyDir(src, dest, opts) {
    fs9.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
  }
  function copyDirItem(item, src, dest, opts) {
    const srcItem = path9.join(src, item);
    const destItem = path9.join(dest, item);
    const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy");
    return startCopy(destStat, srcItem, destItem, opts);
  }
  function onLink(destStat, src, dest, opts) {
    let resolvedSrc = fs9.readlinkSync(src);
    if (opts.dereference) {
      resolvedSrc = path9.resolve(process.cwd(), resolvedSrc);
    }
    if (!destStat) {
      return fs9.symlinkSync(resolvedSrc, dest);
    } else {
      let resolvedDest;
      try {
        resolvedDest = fs9.readlinkSync(dest);
      } catch (err) {
        if (err.code === "EINVAL" || err.code === "UNKNOWN")
          return fs9.symlinkSync(resolvedSrc, dest);
        throw err;
      }
      if (opts.dereference) {
        resolvedDest = path9.resolve(process.cwd(), resolvedDest);
      }
      if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (fs9.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      return copyLink(resolvedSrc, dest);
    }
  }
  function copyLink(resolvedSrc, dest) {
    fs9.unlinkSync(dest);
    return fs9.symlinkSync(resolvedSrc, dest);
  }
  module2.exports = copySync;
});
var require_copy_sync4 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    copySync: require_copy_sync3()
  };
});
var require_path_exists2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromPromise;
  var fs9 = require_fs2();
  function pathExists(path9) {
    return fs9.access(path9).then(() => true).catch(() => false);
  }
  module2.exports = {
    pathExists: u(pathExists),
    pathExistsSync: fs9.existsSync
  };
});
var require_copy3 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdirp = require_mkdirs4().mkdirs;
  var pathExists = require_path_exists2().pathExists;
  var utimes = require_utimes2().utimesMillis;
  var stat = require_stat();
  function copy(src, dest, opts, cb) {
    if (typeof opts === "function" && !cb) {
      cb = opts;
      opts = {};
    } else if (typeof opts === "function") {
      opts = { filter: opts };
    }
    cb = cb || function() {
    };
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    stat.checkPaths(src, dest, "copy", (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      stat.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
        if (err2)
          return cb(err2);
        if (opts.filter)
          return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
        return checkParentDir(destStat, src, dest, opts, cb);
      });
    });
  }
  function checkParentDir(destStat, src, dest, opts, cb) {
    const destParent = path9.dirname(dest);
    pathExists(destParent, (err, dirExists) => {
      if (err)
        return cb(err);
      if (dirExists)
        return startCopy(destStat, src, dest, opts, cb);
      mkdirp(destParent, (err2) => {
        if (err2)
          return cb(err2);
        return startCopy(destStat, src, dest, opts, cb);
      });
    });
  }
  function handleFilter(onInclude, destStat, src, dest, opts, cb) {
    Promise.resolve(opts.filter(src, dest)).then((include) => {
      if (include)
        return onInclude(destStat, src, dest, opts, cb);
      return cb();
    }, (error) => cb(error));
  }
  function startCopy(destStat, src, dest, opts, cb) {
    if (opts.filter)
      return handleFilter(getStats, destStat, src, dest, opts, cb);
    return getStats(destStat, src, dest, opts, cb);
  }
  function getStats(destStat, src, dest, opts, cb) {
    const stat2 = opts.dereference ? fs9.stat : fs9.lstat;
    stat2(src, (err, srcStat) => {
      if (err)
        return cb(err);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts, cb);
    });
  }
  function onFile(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return copyFile(srcStat, src, dest, opts, cb);
    return mayCopyFile(srcStat, src, dest, opts, cb);
  }
  function mayCopyFile(srcStat, src, dest, opts, cb) {
    if (opts.overwrite) {
      fs9.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return copyFile(srcStat, src, dest, opts, cb);
      });
    } else if (opts.errorOnExist) {
      return cb(new Error(`'${dest}' already exists`));
    } else
      return cb();
  }
  function copyFile(srcStat, src, dest, opts, cb) {
    if (typeof fs9.copyFile === "function") {
      return fs9.copyFile(src, dest, (err) => {
        if (err)
          return cb(err);
        return setDestModeAndTimestamps(srcStat, dest, opts, cb);
      });
    }
    return copyFileFallback(srcStat, src, dest, opts, cb);
  }
  function copyFileFallback(srcStat, src, dest, opts, cb) {
    const rs = fs9.createReadStream(src);
    rs.on("error", (err) => cb(err)).once("open", () => {
      const ws = fs9.createWriteStream(dest, { mode: srcStat.mode });
      ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
    });
  }
  function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
    fs9.chmod(dest, srcStat.mode, (err) => {
      if (err)
        return cb(err);
      if (opts.preserveTimestamps) {
        return utimes(dest, srcStat.atime, srcStat.mtime, cb);
      }
      return cb();
    });
  }
  function onDir(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return mkDirAndCopy(srcStat, src, dest, opts, cb);
    if (destStat && !destStat.isDirectory()) {
      return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
    }
    return copyDir(src, dest, opts, cb);
  }
  function mkDirAndCopy(srcStat, src, dest, opts, cb) {
    fs9.mkdir(dest, (err) => {
      if (err)
        return cb(err);
      copyDir(src, dest, opts, (err2) => {
        if (err2)
          return cb(err2);
        return fs9.chmod(dest, srcStat.mode, cb);
      });
    });
  }
  function copyDir(src, dest, opts, cb) {
    fs9.readdir(src, (err, items) => {
      if (err)
        return cb(err);
      return copyDirItems(items, src, dest, opts, cb);
    });
  }
  function copyDirItems(items, src, dest, opts, cb) {
    const item = items.pop();
    if (!item)
      return cb();
    return copyDirItem(items, item, src, dest, opts, cb);
  }
  function copyDirItem(items, item, src, dest, opts, cb) {
    const srcItem = path9.join(src, item);
    const destItem = path9.join(dest, item);
    stat.checkPaths(srcItem, destItem, "copy", (err, stats) => {
      if (err)
        return cb(err);
      const { destStat } = stats;
      startCopy(destStat, srcItem, destItem, opts, (err2) => {
        if (err2)
          return cb(err2);
        return copyDirItems(items, src, dest, opts, cb);
      });
    });
  }
  function onLink(destStat, src, dest, opts, cb) {
    fs9.readlink(src, (err, resolvedSrc) => {
      if (err)
        return cb(err);
      if (opts.dereference) {
        resolvedSrc = path9.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs9.symlink(resolvedSrc, dest, cb);
      } else {
        fs9.readlink(dest, (err2, resolvedDest) => {
          if (err2) {
            if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
              return fs9.symlink(resolvedSrc, dest, cb);
            return cb(err2);
          }
          if (opts.dereference) {
            resolvedDest = path9.resolve(process.cwd(), resolvedDest);
          }
          if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
            return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
          }
          if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
            return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
          }
          return copyLink(resolvedSrc, dest, cb);
        });
      }
    });
  }
  function copyLink(resolvedSrc, dest, cb) {
    fs9.unlink(dest, (err) => {
      if (err)
        return cb(err);
      return fs9.symlink(resolvedSrc, dest, cb);
    });
  }
  module2.exports = copy;
});
var require_copy4 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  module2.exports = {
    copy: u(require_copy3())
  };
});
var require_rimraf2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var assert = __require("assert");
  var isWindows = process.platform === "win32";
  function defaults(options2) {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m) => {
      options2[m] = options2[m] || fs9[m];
      m = m + "Sync";
      options2[m] = options2[m] || fs9[m];
    });
    options2.maxBusyTries = options2.maxBusyTries || 3;
  }
  function rimraf(p, options2, cb) {
    let busyTries = 0;
    if (typeof options2 === "function") {
      cb = options2;
      options2 = {};
    }
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert.strictEqual(typeof cb, "function", "rimraf: callback function required");
    assert(options2, "rimraf: invalid options argument provided");
    assert.strictEqual(typeof options2, "object", "rimraf: options should be object");
    defaults(options2);
    rimraf_(p, options2, function CB(er) {
      if (er) {
        if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options2.maxBusyTries) {
          busyTries++;
          const time = busyTries * 100;
          return setTimeout(() => rimraf_(p, options2, CB), time);
        }
        if (er.code === "ENOENT")
          er = null;
      }
      cb(er);
    });
  }
  function rimraf_(p, options2, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    options2.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT") {
        return cb(null);
      }
      if (er && er.code === "EPERM" && isWindows) {
        return fixWinEPERM(p, options2, er, cb);
      }
      if (st && st.isDirectory()) {
        return rmdir(p, options2, er, cb);
      }
      options2.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT") {
            return cb(null);
          }
          if (er2.code === "EPERM") {
            return isWindows ? fixWinEPERM(p, options2, er2, cb) : rmdir(p, options2, er2, cb);
          }
          if (er2.code === "EISDIR") {
            return rmdir(p, options2, er2, cb);
          }
        }
        return cb(er2);
      });
    });
  }
  function fixWinEPERM(p, options2, er, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    if (er) {
      assert(er instanceof Error);
    }
    options2.chmod(p, 438, (er2) => {
      if (er2) {
        cb(er2.code === "ENOENT" ? null : er);
      } else {
        options2.stat(p, (er3, stats) => {
          if (er3) {
            cb(er3.code === "ENOENT" ? null : er);
          } else if (stats.isDirectory()) {
            rmdir(p, options2, er, cb);
          } else {
            options2.unlink(p, cb);
          }
        });
      }
    });
  }
  function fixWinEPERMSync(p, options2, er) {
    let stats;
    assert(p);
    assert(options2);
    if (er) {
      assert(er instanceof Error);
    }
    try {
      options2.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    try {
      stats = options2.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    if (stats.isDirectory()) {
      rmdirSync(p, options2, er);
    } else {
      options2.unlinkSync(p);
    }
  }
  function rmdir(p, options2, originalEr, cb) {
    assert(p);
    assert(options2);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    assert(typeof cb === "function");
    options2.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
        rmkids(p, options2, cb);
      } else if (er && er.code === "ENOTDIR") {
        cb(originalEr);
      } else {
        cb(er);
      }
    });
  }
  function rmkids(p, options2, cb) {
    assert(p);
    assert(options2);
    assert(typeof cb === "function");
    options2.readdir(p, (er, files) => {
      if (er)
        return cb(er);
      let n = files.length;
      let errState;
      if (n === 0)
        return options2.rmdir(p, cb);
      files.forEach((f) => {
        rimraf(path9.join(p, f), options2, (er2) => {
          if (errState) {
            return;
          }
          if (er2)
            return cb(errState = er2);
          if (--n === 0) {
            options2.rmdir(p, cb);
          }
        });
      });
    });
  }
  function rimrafSync(p, options2) {
    let st;
    options2 = options2 || {};
    defaults(options2);
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert(options2, "rimraf: missing options");
    assert.strictEqual(typeof options2, "object", "rimraf: options should be object");
    try {
      st = options2.lstatSync(p);
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      }
      if (er.code === "EPERM" && isWindows) {
        fixWinEPERMSync(p, options2, er);
      }
    }
    try {
      if (st && st.isDirectory()) {
        rmdirSync(p, options2, null);
      } else {
        options2.unlinkSync(p);
      }
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      } else if (er.code === "EPERM") {
        return isWindows ? fixWinEPERMSync(p, options2, er) : rmdirSync(p, options2, er);
      } else if (er.code !== "EISDIR") {
        throw er;
      }
      rmdirSync(p, options2, er);
    }
  }
  function rmdirSync(p, options2, originalEr) {
    assert(p);
    assert(options2);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    try {
      options2.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOTDIR") {
        throw originalEr;
      } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
        rmkidsSync(p, options2);
      } else if (er.code !== "ENOENT") {
        throw er;
      }
    }
  }
  function rmkidsSync(p, options2) {
    assert(p);
    assert(options2);
    options2.readdirSync(p).forEach((f) => rimrafSync(path9.join(p, f), options2));
    if (isWindows) {
      const startTime = Date.now();
      do {
        try {
          const ret = options2.rmdirSync(p, options2);
          return ret;
        } catch (er) {
        }
      } while (Date.now() - startTime < 500);
    } else {
      const ret = options2.rmdirSync(p, options2);
      return ret;
    }
  }
  module2.exports = rimraf;
  rimraf.sync = rimrafSync;
});
var require_remove3 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var rimraf = require_rimraf2();
  module2.exports = {
    remove: u(rimraf),
    removeSync: rimraf.sync
  };
});
var require_empty2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdir = require_mkdirs4();
  var remove = require_remove3();
  var emptyDir = u(function emptyDir2(dir, callback) {
    callback = callback || function() {
    };
    fs9.readdir(dir, (err, items) => {
      if (err)
        return mkdir.mkdirs(dir, callback);
      items = items.map((item) => path9.join(dir, item));
      deleteItem();
      function deleteItem() {
        const item = items.pop();
        if (!item)
          return callback();
        remove.remove(item, (err2) => {
          if (err2)
            return callback(err2);
          deleteItem();
        });
      }
    });
  });
  function emptyDirSync(dir) {
    let items;
    try {
      items = fs9.readdirSync(dir);
    } catch (err) {
      return mkdir.mkdirsSync(dir);
    }
    items.forEach((item) => {
      item = path9.join(dir, item);
      remove.removeSync(item);
    });
  }
  module2.exports = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };
});
var require_file2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var mkdir = require_mkdirs4();
  var pathExists = require_path_exists2().pathExists;
  function createFile(file, callback) {
    function makeFile() {
      fs9.writeFile(file, "", (err) => {
        if (err)
          return callback(err);
        callback();
      });
    }
    fs9.stat(file, (err, stats) => {
      if (!err && stats.isFile())
        return callback();
      const dir = path9.dirname(file);
      pathExists(dir, (err2, dirExists) => {
        if (err2)
          return callback(err2);
        if (dirExists)
          return makeFile();
        mkdir.mkdirs(dir, (err3) => {
          if (err3)
            return callback(err3);
          makeFile();
        });
      });
    });
  }
  function createFileSync(file) {
    let stats;
    try {
      stats = fs9.statSync(file);
    } catch (e) {
    }
    if (stats && stats.isFile())
      return;
    const dir = path9.dirname(file);
    if (!fs9.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    fs9.writeFileSync(file, "");
  }
  module2.exports = {
    createFile: u(createFile),
    createFileSync
  };
});
var require_link2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var mkdir = require_mkdirs4();
  var pathExists = require_path_exists2().pathExists;
  function createLink(srcpath, dstpath, callback) {
    function makeLink(srcpath2, dstpath2) {
      fs9.link(srcpath2, dstpath2, (err) => {
        if (err)
          return callback(err);
        callback(null);
      });
    }
    pathExists(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      fs9.lstat(srcpath, (err2) => {
        if (err2) {
          err2.message = err2.message.replace("lstat", "ensureLink");
          return callback(err2);
        }
        const dir = path9.dirname(dstpath);
        pathExists(dir, (err3, dirExists) => {
          if (err3)
            return callback(err3);
          if (dirExists)
            return makeLink(srcpath, dstpath);
          mkdir.mkdirs(dir, (err4) => {
            if (err4)
              return callback(err4);
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }
  function createLinkSync(srcpath, dstpath) {
    const destinationExists = fs9.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    try {
      fs9.lstatSync(srcpath);
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureLink");
      throw err;
    }
    const dir = path9.dirname(dstpath);
    const dirExists = fs9.existsSync(dir);
    if (dirExists)
      return fs9.linkSync(srcpath, dstpath);
    mkdir.mkdirsSync(dir);
    return fs9.linkSync(srcpath, dstpath);
  }
  module2.exports = {
    createLink: u(createLink),
    createLinkSync
  };
});
var require_symlink_paths2 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var pathExists = require_path_exists2().pathExists;
  function symlinkPaths(srcpath, dstpath, callback) {
    if (path9.isAbsolute(srcpath)) {
      return fs9.lstat(srcpath, (err) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          return callback(err);
        }
        return callback(null, {
          "toCwd": srcpath,
          "toDst": srcpath
        });
      });
    } else {
      const dstdir = path9.dirname(dstpath);
      const relativeToDst = path9.join(dstdir, srcpath);
      return pathExists(relativeToDst, (err, exists) => {
        if (err)
          return callback(err);
        if (exists) {
          return callback(null, {
            "toCwd": relativeToDst,
            "toDst": srcpath
          });
        } else {
          return fs9.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureSymlink");
              return callback(err2);
            }
            return callback(null, {
              "toCwd": srcpath,
              "toDst": path9.relative(dstdir, srcpath)
            });
          });
        }
      });
    }
  }
  function symlinkPathsSync(srcpath, dstpath) {
    let exists;
    if (path9.isAbsolute(srcpath)) {
      exists = fs9.existsSync(srcpath);
      if (!exists)
        throw new Error("absolute srcpath does not exist");
      return {
        "toCwd": srcpath,
        "toDst": srcpath
      };
    } else {
      const dstdir = path9.dirname(dstpath);
      const relativeToDst = path9.join(dstdir, srcpath);
      exists = fs9.existsSync(relativeToDst);
      if (exists) {
        return {
          "toCwd": relativeToDst,
          "toDst": srcpath
        };
      } else {
        exists = fs9.existsSync(srcpath);
        if (!exists)
          throw new Error("relative srcpath does not exist");
        return {
          "toCwd": srcpath,
          "toDst": path9.relative(dstdir, srcpath)
        };
      }
    }
  }
  module2.exports = {
    symlinkPaths,
    symlinkPathsSync
  };
});
var require_symlink_type2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  function symlinkType(srcpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    if (type)
      return callback(null, type);
    fs9.lstat(srcpath, (err, stats) => {
      if (err)
        return callback(null, "file");
      type = stats && stats.isDirectory() ? "dir" : "file";
      callback(null, type);
    });
  }
  function symlinkTypeSync(srcpath, type) {
    let stats;
    if (type)
      return type;
    try {
      stats = fs9.lstatSync(srcpath);
    } catch (e) {
      return "file";
    }
    return stats && stats.isDirectory() ? "dir" : "file";
  }
  module2.exports = {
    symlinkType,
    symlinkTypeSync
  };
});
var require_symlink2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var path9 = __require("path");
  var fs9 = require_graceful_fs();
  var _mkdirs = require_mkdirs4();
  var mkdirs = _mkdirs.mkdirs;
  var mkdirsSync = _mkdirs.mkdirsSync;
  var _symlinkPaths = require_symlink_paths2();
  var symlinkPaths = _symlinkPaths.symlinkPaths;
  var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
  var _symlinkType = require_symlink_type2();
  var symlinkType = _symlinkType.symlinkType;
  var symlinkTypeSync = _symlinkType.symlinkTypeSync;
  var pathExists = require_path_exists2().pathExists;
  function createSymlink(srcpath, dstpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    pathExists(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      symlinkPaths(srcpath, dstpath, (err2, relative) => {
        if (err2)
          return callback(err2);
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type, (err3, type2) => {
          if (err3)
            return callback(err3);
          const dir = path9.dirname(dstpath);
          pathExists(dir, (err4, dirExists) => {
            if (err4)
              return callback(err4);
            if (dirExists)
              return fs9.symlink(srcpath, dstpath, type2, callback);
            mkdirs(dir, (err5) => {
              if (err5)
                return callback(err5);
              fs9.symlink(srcpath, dstpath, type2, callback);
            });
          });
        });
      });
    });
  }
  function createSymlinkSync(srcpath, dstpath, type) {
    const destinationExists = fs9.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    const relative = symlinkPathsSync(srcpath, dstpath);
    srcpath = relative.toDst;
    type = symlinkTypeSync(relative.toCwd, type);
    const dir = path9.dirname(dstpath);
    const exists = fs9.existsSync(dir);
    if (exists)
      return fs9.symlinkSync(srcpath, dstpath, type);
    mkdirsSync(dir);
    return fs9.symlinkSync(srcpath, dstpath, type);
  }
  module2.exports = {
    createSymlink: u(createSymlink),
    createSymlinkSync
  };
});
var require_ensure2 = __commonJSMin((exports, module2) => {
  "use strict";
  var file = require_file2();
  var link = require_link2();
  var symlink = require_symlink2();
  module2.exports = {
    createFile: file.createFile,
    createFileSync: file.createFileSync,
    ensureFile: file.createFile,
    ensureFileSync: file.createFileSync,
    createLink: link.createLink,
    createLinkSync: link.createLinkSync,
    ensureLink: link.createLink,
    ensureLinkSync: link.createLinkSync,
    createSymlink: symlink.createSymlink,
    createSymlinkSync: symlink.createSymlinkSync,
    ensureSymlink: symlink.createSymlink,
    ensureSymlinkSync: symlink.createSymlinkSync
  };
});
var require_jsonfile3 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var jsonFile = require_jsonfile();
  module2.exports = {
    readJson: u(jsonFile.readFile),
    readJsonSync: jsonFile.readFileSync,
    writeJson: u(jsonFile.writeFile),
    writeJsonSync: jsonFile.writeFileSync
  };
});
var require_output_json2 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var mkdir = require_mkdirs4();
  var pathExists = require_path_exists2().pathExists;
  var jsonFile = require_jsonfile3();
  function outputJson(file, data, options2, callback) {
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    const dir = path9.dirname(file);
    pathExists(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return jsonFile.writeJson(file, data, options2, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        jsonFile.writeJson(file, data, options2, callback);
      });
    });
  }
  module2.exports = outputJson;
});
var require_output_json_sync2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdir = require_mkdirs4();
  var jsonFile = require_jsonfile3();
  function outputJsonSync(file, data, options2) {
    const dir = path9.dirname(file);
    if (!fs9.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    jsonFile.writeJsonSync(file, data, options2);
  }
  module2.exports = outputJsonSync;
});
var require_json3 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var jsonFile = require_jsonfile3();
  jsonFile.outputJson = u(require_output_json2());
  jsonFile.outputJsonSync = require_output_json_sync2();
  jsonFile.outputJSON = jsonFile.outputJson;
  jsonFile.outputJSONSync = jsonFile.outputJsonSync;
  jsonFile.writeJSON = jsonFile.writeJson;
  jsonFile.writeJSONSync = jsonFile.writeJsonSync;
  jsonFile.readJSON = jsonFile.readJson;
  jsonFile.readJSONSync = jsonFile.readJsonSync;
  module2.exports = jsonFile;
});
var require_move_sync2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var copySync = require_copy_sync4().copySync;
  var removeSync = require_remove3().removeSync;
  var mkdirpSync = require_mkdirs4().mkdirpSync;
  var stat = require_stat();
  function moveSync(src, dest, opts) {
    opts = opts || {};
    const overwrite = opts.overwrite || opts.clobber || false;
    const { srcStat } = stat.checkPathsSync(src, dest, "move");
    stat.checkParentPathsSync(src, srcStat, dest, "move");
    mkdirpSync(path9.dirname(dest));
    return doRename(src, dest, overwrite);
  }
  function doRename(src, dest, overwrite) {
    if (overwrite) {
      removeSync(dest);
      return rename(src, dest, overwrite);
    }
    if (fs9.existsSync(dest))
      throw new Error("dest already exists.");
    return rename(src, dest, overwrite);
  }
  function rename(src, dest, overwrite) {
    try {
      fs9.renameSync(src, dest);
    } catch (err) {
      if (err.code !== "EXDEV")
        throw err;
      return moveAcrossDevice(src, dest, overwrite);
    }
  }
  function moveAcrossDevice(src, dest, overwrite) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copySync(src, dest, opts);
    return removeSync(src);
  }
  module2.exports = moveSync;
});
var require_move_sync3 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    moveSync: require_move_sync2()
  };
});
var require_move2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var copy = require_copy4().copy;
  var remove = require_remove3().remove;
  var mkdirp = require_mkdirs4().mkdirp;
  var pathExists = require_path_exists2().pathExists;
  var stat = require_stat();
  function move(src, dest, opts, cb) {
    if (typeof opts === "function") {
      cb = opts;
      opts = {};
    }
    const overwrite = opts.overwrite || opts.clobber || false;
    stat.checkPaths(src, dest, "move", (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat } = stats;
      stat.checkParentPaths(src, srcStat, dest, "move", (err2) => {
        if (err2)
          return cb(err2);
        mkdirp(path9.dirname(dest), (err3) => {
          if (err3)
            return cb(err3);
          return doRename(src, dest, overwrite, cb);
        });
      });
    });
  }
  function doRename(src, dest, overwrite, cb) {
    if (overwrite) {
      return remove(dest, (err) => {
        if (err)
          return cb(err);
        return rename(src, dest, overwrite, cb);
      });
    }
    pathExists(dest, (err, destExists) => {
      if (err)
        return cb(err);
      if (destExists)
        return cb(new Error("dest already exists."));
      return rename(src, dest, overwrite, cb);
    });
  }
  function rename(src, dest, overwrite, cb) {
    fs9.rename(src, dest, (err) => {
      if (!err)
        return cb();
      if (err.code !== "EXDEV")
        return cb(err);
      return moveAcrossDevice(src, dest, overwrite, cb);
    });
  }
  function moveAcrossDevice(src, dest, overwrite, cb) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copy(src, dest, opts, (err) => {
      if (err)
        return cb(err);
      return remove(src, cb);
    });
  }
  module2.exports = move;
});
var require_move3 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  module2.exports = {
    move: u(require_move2())
  };
});
var require_output2 = __commonJSMin((exports, module2) => {
  "use strict";
  var u = require_universalify().fromCallback;
  var fs9 = require_graceful_fs();
  var path9 = __require("path");
  var mkdir = require_mkdirs4();
  var pathExists = require_path_exists2().pathExists;
  function outputFile(file, data, encoding, callback) {
    if (typeof encoding === "function") {
      callback = encoding;
      encoding = "utf8";
    }
    const dir = path9.dirname(file);
    pathExists(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return fs9.writeFile(file, data, encoding, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        fs9.writeFile(file, data, encoding, callback);
      });
    });
  }
  function outputFileSync(file, ...args) {
    const dir = path9.dirname(file);
    if (fs9.existsSync(dir)) {
      return fs9.writeFileSync(file, ...args);
    }
    mkdir.mkdirsSync(dir);
    fs9.writeFileSync(file, ...args);
  }
  module2.exports = {
    outputFile: u(outputFile),
    outputFileSync
  };
});
var require_lib4 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = Object.assign({}, require_fs2(), require_copy_sync4(), require_copy4(), require_empty2(), require_ensure2(), require_json3(), require_mkdirs4(), require_move_sync3(), require_move3(), require_output2(), require_path_exists2(), require_remove3());
  var fs9 = __require("fs");
  if (Object.getOwnPropertyDescriptor(fs9, "promises")) {
    Object.defineProperty(module2.exports, "promises", {
      get() {
        return fs9.promises;
      }
    });
  }
});
var require_array_union = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = (...arguments_) => {
    return [...new Set([].concat(...arguments_))];
  };
});
var require_merge2 = __commonJSMin((exports, module2) => {
  "use strict";
  var Stream2 = __require("stream");
  var PassThrough2 = Stream2.PassThrough;
  var slice = Array.prototype.slice;
  module2.exports = merge2;
  function merge2() {
    const streamsQueue = [];
    const args = slice.call(arguments);
    let merging = false;
    let options2 = args[args.length - 1];
    if (options2 && !Array.isArray(options2) && options2.pipe == null) {
      args.pop();
    } else {
      options2 = {};
    }
    const doEnd = options2.end !== false;
    const doPipeError = options2.pipeError === true;
    if (options2.objectMode == null) {
      options2.objectMode = true;
    }
    if (options2.highWaterMark == null) {
      options2.highWaterMark = 64 * 1024;
    }
    const mergedStream = PassThrough2(options2);
    function addStream() {
      for (let i = 0, len = arguments.length; i < len; i++) {
        streamsQueue.push(pauseStreams(arguments[i], options2));
      }
      mergeStream();
      return this;
    }
    function mergeStream() {
      if (merging) {
        return;
      }
      merging = true;
      let streams = streamsQueue.shift();
      if (!streams) {
        process.nextTick(endStream);
        return;
      }
      if (!Array.isArray(streams)) {
        streams = [streams];
      }
      let pipesCount = streams.length + 1;
      function next() {
        if (--pipesCount > 0) {
          return;
        }
        merging = false;
        mergeStream();
      }
      function pipe(stream) {
        function onend() {
          stream.removeListener("merge2UnpipeEnd", onend);
          stream.removeListener("end", onend);
          if (doPipeError) {
            stream.removeListener("error", onerror);
          }
          next();
        }
        function onerror(err) {
          mergedStream.emit("error", err);
        }
        if (stream._readableState.endEmitted) {
          return next();
        }
        stream.on("merge2UnpipeEnd", onend);
        stream.on("end", onend);
        if (doPipeError) {
          stream.on("error", onerror);
        }
        stream.pipe(mergedStream, { end: false });
        stream.resume();
      }
      for (let i = 0; i < streams.length; i++) {
        pipe(streams[i]);
      }
      next();
    }
    function endStream() {
      merging = false;
      mergedStream.emit("queueDrain");
      if (doEnd) {
        mergedStream.end();
      }
    }
    mergedStream.setMaxListeners(0);
    mergedStream.add = addStream;
    mergedStream.on("unpipe", function(stream) {
      stream.emit("merge2UnpipeEnd");
    });
    if (args.length) {
      addStream.apply(null, args);
    }
    return mergedStream;
  }
  function pauseStreams(streams, options2) {
    if (!Array.isArray(streams)) {
      if (!streams._readableState && streams.pipe) {
        streams = streams.pipe(PassThrough2(options2));
      }
      if (!streams._readableState || !streams.pause || !streams.pipe) {
        throw new Error("Only readable stream can be merged.");
      }
      streams.pause();
    } else {
      for (let i = 0, len = streams.length; i < len; i++) {
        streams[i] = pauseStreams(streams[i], options2);
      }
    }
    return streams;
  }
});
var require_array = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.splitWhen = exports.flatten = void 0;
  function flatten2(items) {
    return items.reduce((collection, item) => [].concat(collection, item), []);
  }
  exports.flatten = flatten2;
  function splitWhen(items, predicate) {
    const result = [[]];
    let groupIndex = 0;
    for (const item of items) {
      if (predicate(item)) {
        groupIndex++;
        result[groupIndex] = [];
      } else {
        result[groupIndex].push(item);
      }
    }
    return result;
  }
  exports.splitWhen = splitWhen;
});
var require_errno = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEnoentCodeError = void 0;
  function isEnoentCodeError(error) {
    return error.code === "ENOENT";
  }
  exports.isEnoentCodeError = isEnoentCodeError;
});
var require_fs3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createDirentFromStats = void 0;
  var DirentFromStats = class {
    constructor(name2, stats) {
      this.name = name2;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  };
  function createDirentFromStats(name2, stats) {
    return new DirentFromStats(name2, stats);
  }
  exports.createDirentFromStats = createDirentFromStats;
});
var require_path2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;
  var path9 = __require("path");
  var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
  var UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
  function unixify(filepath) {
    return filepath.replace(/\\/g, "/");
  }
  exports.unixify = unixify;
  function makeAbsolute(cwd, filepath) {
    return path9.resolve(cwd, filepath);
  }
  exports.makeAbsolute = makeAbsolute;
  function escape(pattern) {
    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  exports.escape = escape;
  function removeLeadingDotSegment(entry) {
    if (entry.charAt(0) === ".") {
      const secondCharactery = entry.charAt(1);
      if (secondCharactery === "/" || secondCharactery === "\\") {
        return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
      }
    }
    return entry;
  }
  exports.removeLeadingDotSegment = removeLeadingDotSegment;
});
var require_is_extglob = __commonJSMin((exports, module2) => {
  module2.exports = function isExtglob(str) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    var match;
    while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
      if (match[2])
        return true;
      str = str.slice(match.index + match[0].length);
    }
    return false;
  };
});
var require_is_glob = __commonJSMin((exports, module2) => {
  var isExtglob = require_is_extglob();
  var chars = { "{": "}", "(": ")", "[": "]" };
  var strictCheck = function(str) {
    if (str[0] === "!") {
      return true;
    }
    var index = 0;
    var pipeIndex = -2;
    var closeSquareIndex = -2;
    var closeCurlyIndex = -2;
    var closeParenIndex = -2;
    var backSlashIndex = -2;
    while (index < str.length) {
      if (str[index] === "*") {
        return true;
      }
      if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
        return true;
      }
      if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
        if (closeSquareIndex < index) {
          closeSquareIndex = str.indexOf("]", index);
        }
        if (closeSquareIndex > index) {
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
        }
      }
      if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
        closeCurlyIndex = str.indexOf("}", index);
        if (closeCurlyIndex > index) {
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
            return true;
          }
        }
      }
      if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
        closeParenIndex = str.indexOf(")", index);
        if (closeParenIndex > index) {
          backSlashIndex = str.indexOf("\\", index);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
      if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
        if (pipeIndex < index) {
          pipeIndex = str.indexOf("|", index);
        }
        if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
          closeParenIndex = str.indexOf(")", pipeIndex);
          if (closeParenIndex > pipeIndex) {
            backSlashIndex = str.indexOf("\\", pipeIndex);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
      }
      if (str[index] === "\\") {
        var open = str[index + 1];
        index += 2;
        var close = chars[open];
        if (close) {
          var n = str.indexOf(close, index);
          if (n !== -1) {
            index = n + 1;
          }
        }
        if (str[index] === "!") {
          return true;
        }
      } else {
        index++;
      }
    }
    return false;
  };
  var relaxedCheck = function(str) {
    if (str[0] === "!") {
      return true;
    }
    var index = 0;
    while (index < str.length) {
      if (/[*?{}()[\]]/.test(str[index])) {
        return true;
      }
      if (str[index] === "\\") {
        var open = str[index + 1];
        index += 2;
        var close = chars[open];
        if (close) {
          var n = str.indexOf(close, index);
          if (n !== -1) {
            index = n + 1;
          }
        }
        if (str[index] === "!") {
          return true;
        }
      } else {
        index++;
      }
    }
    return false;
  };
  module2.exports = function isGlob(str, options2) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    if (isExtglob(str)) {
      return true;
    }
    var check = strictCheck;
    if (options2 && options2.strict === false) {
      check = relaxedCheck;
    }
    return check(str);
  };
});
var require_glob_parent = __commonJSMin((exports, module2) => {
  "use strict";
  var isGlob = require_is_glob();
  var pathPosixDirname = __require("path").posix.dirname;
  var isWin32 = __require("os").platform() === "win32";
  var slash = "/";
  var backslash = /\\/g;
  var enclosure = /[\{\[].*[\}\]]$/;
  var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
  var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
  module2.exports = function globParent(str, opts) {
    var options2 = Object.assign({ flipBackslashes: true }, opts);
    if (options2.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
      str = str.replace(backslash, slash);
    }
    if (enclosure.test(str)) {
      str += slash;
    }
    str += "a";
    do {
      str = pathPosixDirname(str);
    } while (isGlob(str) || globby.test(str));
    return str.replace(escaped, "$1");
  };
});
var require_utils5 = __commonJSMin((exports) => {
  "use strict";
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type) => {
    let node = block.nodes[n];
    if (!node)
      return;
    if (type && node.type === type || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
      }
      return result;
    };
    flat(args);
    return result;
  };
});
var require_stringify = __commonJSMin((exports, module2) => {
  "use strict";
  var utils = require_utils5();
  module2.exports = (ast, options2 = {}) => {
    let stringify = (node, parent = {}) => {
      let invalidBlock = options2.escapeInvalid && utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options2.escapeInvalid === true;
      let output = "";
      if (node.value) {
        if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
          return "\\" + node.value;
        }
        return node.value;
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += stringify(child);
        }
      }
      return output;
    };
    return stringify(ast);
  };
});
var require_is_number = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = function(num) {
    if (typeof num === "number") {
      return num - num === 0;
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
    }
    return false;
  };
});
var require_to_regex_range = __commonJSMin((exports, module2) => {
  "use strict";
  var isNumber = require_is_number();
  var toRegexRange = (min, max, options2) => {
    if (isNumber(min) === false) {
      throw new TypeError("toRegexRange: expected the first argument to be a number");
    }
    if (max === void 0 || min === max) {
      return String(min);
    }
    if (isNumber(max) === false) {
      throw new TypeError("toRegexRange: expected the second argument to be a number.");
    }
    let opts = { relaxZeros: true, ...options2 };
    if (typeof opts.strictZeros === "boolean") {
      opts.relaxZeros = opts.strictZeros === false;
    }
    let relax = String(opts.relaxZeros);
    let shorthand = String(opts.shorthand);
    let capture = String(opts.capture);
    let wrap = String(opts.wrap);
    let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
    if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
      return toRegexRange.cache[cacheKey].result;
    }
    let a = Math.min(min, max);
    let b = Math.max(min, max);
    if (Math.abs(a - b) === 1) {
      let result = min + "|" + max;
      if (opts.capture) {
        return `(${result})`;
      }
      if (opts.wrap === false) {
        return result;
      }
      return `(?:${result})`;
    }
    let isPadded = hasPadding(min) || hasPadding(max);
    let state = { min, max, a, b };
    let positives = [];
    let negatives = [];
    if (isPadded) {
      state.isPadded = isPadded;
      state.maxLen = String(state.max).length;
    }
    if (a < 0) {
      let newMin = b < 0 ? Math.abs(b) : 1;
      negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
      a = state.a = 0;
    }
    if (b >= 0) {
      positives = splitToPatterns(a, b, state, opts);
    }
    state.negatives = negatives;
    state.positives = positives;
    state.result = collatePatterns(negatives, positives, opts);
    if (opts.capture === true) {
      state.result = `(${state.result})`;
    } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
      state.result = `(?:${state.result})`;
    }
    toRegexRange.cache[cacheKey] = state;
    return state.result;
  };
  function collatePatterns(neg, pos, options2) {
    let onlyNegative = filterPatterns(neg, pos, "-", false, options2) || [];
    let onlyPositive = filterPatterns(pos, neg, "", false, options2) || [];
    let intersected = filterPatterns(neg, pos, "-?", true, options2) || [];
    let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
    return subpatterns.join("|");
  }
  function splitToRanges(min, max) {
    let nines = 1;
    let zeros = 1;
    let stop = countNines(min, nines);
    let stops = /* @__PURE__ */ new Set([max]);
    while (min <= stop && stop <= max) {
      stops.add(stop);
      nines += 1;
      stop = countNines(min, nines);
    }
    stop = countZeros(max + 1, zeros) - 1;
    while (min < stop && stop <= max) {
      stops.add(stop);
      zeros += 1;
      stop = countZeros(max + 1, zeros) - 1;
    }
    stops = [...stops];
    stops.sort(compare);
    return stops;
  }
  function rangeToPattern(start, stop, options2) {
    if (start === stop) {
      return { pattern: start, count: [], digits: 0 };
    }
    let zipped = zip(start, stop);
    let digits = zipped.length;
    let pattern = "";
    let count = 0;
    for (let i = 0; i < digits; i++) {
      let [startDigit, stopDigit] = zipped[i];
      if (startDigit === stopDigit) {
        pattern += startDigit;
      } else if (startDigit !== "0" || stopDigit !== "9") {
        pattern += toCharacterClass(startDigit, stopDigit, options2);
      } else {
        count++;
      }
    }
    if (count) {
      pattern += options2.shorthand === true ? "\\d" : "[0-9]";
    }
    return { pattern, count: [count], digits };
  }
  function splitToPatterns(min, max, tok, options2) {
    let ranges = splitToRanges(min, max);
    let tokens = [];
    let start = min;
    let prev;
    for (let i = 0; i < ranges.length; i++) {
      let max2 = ranges[i];
      let obj = rangeToPattern(String(start), String(max2), options2);
      let zeros = "";
      if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
        if (prev.count.length > 1) {
          prev.count.pop();
        }
        prev.count.push(obj.count[0]);
        prev.string = prev.pattern + toQuantifier(prev.count);
        start = max2 + 1;
        continue;
      }
      if (tok.isPadded) {
        zeros = padZeros(max2, tok, options2);
      }
      obj.string = zeros + obj.pattern + toQuantifier(obj.count);
      tokens.push(obj);
      start = max2 + 1;
      prev = obj;
    }
    return tokens;
  }
  function filterPatterns(arr, comparison, prefix2, intersection, options2) {
    let result = [];
    for (let ele of arr) {
      let { string } = ele;
      if (!intersection && !contains(comparison, "string", string)) {
        result.push(prefix2 + string);
      }
      if (intersection && contains(comparison, "string", string)) {
        result.push(prefix2 + string);
      }
    }
    return result;
  }
  function zip(a, b) {
    let arr = [];
    for (let i = 0; i < a.length; i++)
      arr.push([a[i], b[i]]);
    return arr;
  }
  function compare(a, b) {
    return a > b ? 1 : b > a ? -1 : 0;
  }
  function contains(arr, key, val) {
    return arr.some((ele) => ele[key] === val);
  }
  function countNines(min, len) {
    return Number(String(min).slice(0, -len) + "9".repeat(len));
  }
  function countZeros(integer, zeros) {
    return integer - integer % Math.pow(10, zeros);
  }
  function toQuantifier(digits) {
    let [start = 0, stop = ""] = digits;
    if (stop || start > 1) {
      return `{${start + (stop ? "," + stop : "")}}`;
    }
    return "";
  }
  function toCharacterClass(a, b, options2) {
    return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
  }
  function hasPadding(str) {
    return /^-?(0+)\d/.test(str);
  }
  function padZeros(value, tok, options2) {
    if (!tok.isPadded) {
      return value;
    }
    let diff = Math.abs(tok.maxLen - String(value).length);
    let relax = options2.relaxZeros !== false;
    switch (diff) {
      case 0:
        return "";
      case 1:
        return relax ? "0?" : "0";
      case 2:
        return relax ? "0{0,2}" : "00";
      default: {
        return relax ? `0{0,${diff}}` : `0{${diff}}`;
      }
    }
  }
  toRegexRange.cache = {};
  toRegexRange.clearCache = () => toRegexRange.cache = {};
  module2.exports = toRegexRange;
});
var require_fill_range = __commonJSMin((exports, module2) => {
  "use strict";
  var util2 = __require("util");
  var toRegexRange = require_to_regex_range();
  var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  var transform = (toNumber) => {
    return (value) => toNumber === true ? Number(value) : String(value);
  };
  var isValidValue = (value) => {
    return typeof value === "number" || typeof value === "string" && value !== "";
  };
  var isNumber = (num) => Number.isInteger(+num);
  var zeros = (input) => {
    let value = `${input}`;
    let index = -1;
    if (value[0] === "-")
      value = value.slice(1);
    if (value === "0")
      return false;
    while (value[++index] === "0")
      ;
    return index > 0;
  };
  var stringify = (start, end, options2) => {
    if (typeof start === "string" || typeof end === "string") {
      return true;
    }
    return options2.stringify === true;
  };
  var pad = (input, maxLength, toNumber) => {
    if (maxLength > 0) {
      let dash = input[0] === "-" ? "-" : "";
      if (dash)
        input = input.slice(1);
      input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
    }
    if (toNumber === false) {
      return String(input);
    }
    return input;
  };
  var toMaxLen = (input, maxLength) => {
    let negative = input[0] === "-" ? "-" : "";
    if (negative) {
      input = input.slice(1);
      maxLength--;
    }
    while (input.length < maxLength)
      input = "0" + input;
    return negative ? "-" + input : input;
  };
  var toSequence = (parts, options2) => {
    parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    let prefix2 = options2.capture ? "" : "?:";
    let positives = "";
    let negatives = "";
    let result;
    if (parts.positives.length) {
      positives = parts.positives.join("|");
    }
    if (parts.negatives.length) {
      negatives = `-(${prefix2}${parts.negatives.join("|")})`;
    }
    if (positives && negatives) {
      result = `${positives}|${negatives}`;
    } else {
      result = positives || negatives;
    }
    if (options2.wrap) {
      return `(${prefix2}${result})`;
    }
    return result;
  };
  var toRange = (a, b, isNumbers, options2) => {
    if (isNumbers) {
      return toRegexRange(a, b, { wrap: false, ...options2 });
    }
    let start = String.fromCharCode(a);
    if (a === b)
      return start;
    let stop = String.fromCharCode(b);
    return `[${start}-${stop}]`;
  };
  var toRegex = (start, end, options2) => {
    if (Array.isArray(start)) {
      let wrap = options2.wrap === true;
      let prefix2 = options2.capture ? "" : "?:";
      return wrap ? `(${prefix2}${start.join("|")})` : start.join("|");
    }
    return toRegexRange(start, end, options2);
  };
  var rangeError = (...args) => {
    return new RangeError("Invalid range arguments: " + util2.inspect(...args));
  };
  var invalidRange = (start, end, options2) => {
    if (options2.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  };
  var invalidStep = (step, options2) => {
    if (options2.strictRanges === true) {
      throw new TypeError(`Expected step "${step}" to be a number`);
    }
    return [];
  };
  var fillNumbers = (start, end, step = 1, options2 = {}) => {
    let a = Number(start);
    let b = Number(end);
    if (!Number.isInteger(a) || !Number.isInteger(b)) {
      if (options2.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    }
    if (a === 0)
      a = 0;
    if (b === 0)
      b = 0;
    let descending = a > b;
    let startString = String(start);
    let endString = String(end);
    let stepString = String(step);
    step = Math.max(Math.abs(step), 1);
    let padded = zeros(startString) || zeros(endString) || zeros(stepString);
    let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
    let toNumber = padded === false && stringify(start, end, options2) === false;
    let format2 = options2.transform || transform(toNumber);
    if (options2.toRegex && step === 1) {
      return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options2);
    }
    let parts = { negatives: [], positives: [] };
    let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      if (options2.toRegex === true && step > 1) {
        push(a);
      } else {
        range.push(pad(format2(a, index), maxLen, toNumber));
      }
      a = descending ? a - step : a + step;
      index++;
    }
    if (options2.toRegex === true) {
      return step > 1 ? toSequence(parts, options2) : toRegex(range, null, { wrap: false, ...options2 });
    }
    return range;
  };
  var fillLetters = (start, end, step = 1, options2 = {}) => {
    if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
      return invalidRange(start, end, options2);
    }
    let format2 = options2.transform || ((val) => String.fromCharCode(val));
    let a = `${start}`.charCodeAt(0);
    let b = `${end}`.charCodeAt(0);
    let descending = a > b;
    let min = Math.min(a, b);
    let max = Math.max(a, b);
    if (options2.toRegex && step === 1) {
      return toRange(min, max, false, options2);
    }
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      range.push(format2(a, index));
      a = descending ? a - step : a + step;
      index++;
    }
    if (options2.toRegex === true) {
      return toRegex(range, null, { wrap: false, options: options2 });
    }
    return range;
  };
  var fill = (start, end, step, options2 = {}) => {
    if (end == null && isValidValue(start)) {
      return [start];
    }
    if (!isValidValue(start) || !isValidValue(end)) {
      return invalidRange(start, end, options2);
    }
    if (typeof step === "function") {
      return fill(start, end, 1, { transform: step });
    }
    if (isObject2(step)) {
      return fill(start, end, 0, step);
    }
    let opts = { ...options2 };
    if (opts.capture === true)
      opts.wrap = true;
    step = step || opts.step || 1;
    if (!isNumber(step)) {
      if (step != null && !isObject2(step))
        return invalidStep(step, opts);
      return fill(start, end, 1, step);
    }
    if (isNumber(start) && isNumber(end)) {
      return fillNumbers(start, end, step, opts);
    }
    return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
  };
  module2.exports = fill;
});
var require_compile = __commonJSMin((exports, module2) => {
  "use strict";
  var fill = require_fill_range();
  var utils = require_utils5();
  var compile = (ast, options2 = {}) => {
    let walk = (node, parent = {}) => {
      let invalidBlock = utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options2.escapeInvalid === true;
      let invalid = invalidBlock === true || invalidNode === true;
      let prefix2 = options2.escapeInvalid === true ? "\\" : "";
      let output = "";
      if (node.isOpen === true) {
        return prefix2 + node.value;
      }
      if (node.isClose === true) {
        return prefix2 + node.value;
      }
      if (node.type === "open") {
        return invalid ? prefix2 + node.value : "(";
      }
      if (node.type === "close") {
        return invalid ? prefix2 + node.value : ")";
      }
      if (node.type === "comma") {
        return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes && node.ranges > 0) {
        let args = utils.reduce(node.nodes);
        let range = fill(...args, { ...options2, wrap: false, toRegex: true });
        if (range.length !== 0) {
          return args.length > 1 && range.length > 1 ? `(${range})` : range;
        }
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += walk(child, node);
        }
      }
      return output;
    };
    return walk(ast);
  };
  module2.exports = compile;
});
var require_expand = __commonJSMin((exports, module2) => {
  "use strict";
  var fill = require_fill_range();
  var stringify = require_stringify();
  var utils = require_utils5();
  var append = (queue = "", stash = "", enclose = false) => {
    let result = [];
    queue = [].concat(queue);
    stash = [].concat(stash);
    if (!stash.length)
      return queue;
    if (!queue.length) {
      return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
    }
    for (let item of queue) {
      if (Array.isArray(item)) {
        for (let value of item) {
          result.push(append(value, stash, enclose));
        }
      } else {
        for (let ele of stash) {
          if (enclose === true && typeof ele === "string")
            ele = `{${ele}}`;
          result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
        }
      }
    }
    return utils.flatten(result);
  };
  var expand2 = (ast, options2 = {}) => {
    let rangeLimit = options2.rangeLimit === void 0 ? 1e3 : options2.rangeLimit;
    let walk = (node, parent = {}) => {
      node.queue = [];
      let p = parent;
      let q = parent.queue;
      while (p.type !== "brace" && p.type !== "root" && p.parent) {
        p = p.parent;
        q = p.queue;
      }
      if (node.invalid || node.dollar) {
        q.push(append(q.pop(), stringify(node, options2)));
        return;
      }
      if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
        q.push(append(q.pop(), ["{}"]));
        return;
      }
      if (node.nodes && node.ranges > 0) {
        let args = utils.reduce(node.nodes);
        if (utils.exceedsLimit(...args, options2.step, rangeLimit)) {
          throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
        }
        let range = fill(...args, options2);
        if (range.length === 0) {
          range = stringify(node, options2);
        }
        q.push(append(q.pop(), range));
        node.nodes = [];
        return;
      }
      let enclose = utils.encloseBrace(node);
      let queue = node.queue;
      let block = node;
      while (block.type !== "brace" && block.type !== "root" && block.parent) {
        block = block.parent;
        queue = block.queue;
      }
      for (let i = 0; i < node.nodes.length; i++) {
        let child = node.nodes[i];
        if (child.type === "comma" && node.type === "brace") {
          if (i === 1)
            queue.push("");
          queue.push("");
          continue;
        }
        if (child.type === "close") {
          q.push(append(q.pop(), queue, enclose));
          continue;
        }
        if (child.value && child.type !== "open") {
          queue.push(append(queue.pop(), child.value));
          continue;
        }
        if (child.nodes) {
          walk(child, node);
        }
      }
      return queue;
    };
    return utils.flatten(walk(ast));
  };
  module2.exports = expand2;
});
var require_constants2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    MAX_LENGTH: 1024 * 64,
    CHAR_0: "0",
    CHAR_9: "9",
    CHAR_UPPERCASE_A: "A",
    CHAR_LOWERCASE_A: "a",
    CHAR_UPPERCASE_Z: "Z",
    CHAR_LOWERCASE_Z: "z",
    CHAR_LEFT_PARENTHESES: "(",
    CHAR_RIGHT_PARENTHESES: ")",
    CHAR_ASTERISK: "*",
    CHAR_AMPERSAND: "&",
    CHAR_AT: "@",
    CHAR_BACKSLASH: "\\",
    CHAR_BACKTICK: "`",
    CHAR_CARRIAGE_RETURN: "\r",
    CHAR_CIRCUMFLEX_ACCENT: "^",
    CHAR_COLON: ":",
    CHAR_COMMA: ",",
    CHAR_DOLLAR: "$",
    CHAR_DOT: ".",
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: "=",
    CHAR_EXCLAMATION_MARK: "!",
    CHAR_FORM_FEED: "\f",
    CHAR_FORWARD_SLASH: "/",
    CHAR_HASH: "#",
    CHAR_HYPHEN_MINUS: "-",
    CHAR_LEFT_ANGLE_BRACKET: "<",
    CHAR_LEFT_CURLY_BRACE: "{",
    CHAR_LEFT_SQUARE_BRACKET: "[",
    CHAR_LINE_FEED: "\n",
    CHAR_NO_BREAK_SPACE: "\xA0",
    CHAR_PERCENT: "%",
    CHAR_PLUS: "+",
    CHAR_QUESTION_MARK: "?",
    CHAR_RIGHT_ANGLE_BRACKET: ">",
    CHAR_RIGHT_CURLY_BRACE: "}",
    CHAR_RIGHT_SQUARE_BRACKET: "]",
    CHAR_SEMICOLON: ";",
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: " ",
    CHAR_TAB: "	",
    CHAR_UNDERSCORE: "_",
    CHAR_VERTICAL_LINE: "|",
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  };
});
var require_parse3 = __commonJSMin((exports, module2) => {
  "use strict";
  var stringify = require_stringify();
  var {
    MAX_LENGTH,
    CHAR_BACKSLASH,
    CHAR_BACKTICK,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_LEFT_PARENTHESES,
    CHAR_RIGHT_PARENTHESES,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_RIGHT_SQUARE_BRACKET,
    CHAR_DOUBLE_QUOTE,
    CHAR_SINGLE_QUOTE,
    CHAR_NO_BREAK_SPACE,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE
  } = require_constants2();
  var parse4 = (input, options2 = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    let opts = options2 || {};
    let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    if (input.length > max) {
      throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
    }
    let ast = { type: "root", input, nodes: [] };
    let stack = [ast];
    let block = ast;
    let prev = ast;
    let brackets = 0;
    let length = input.length;
    let index = 0;
    let depth = 0;
    let value;
    let memo = {};
    const advance = () => input[index++];
    const push = (node) => {
      if (node.type === "text" && prev.type === "dot") {
        prev.type = "text";
      }
      if (prev && prev.type === "text" && node.type === "text") {
        prev.value += node.value;
        return;
      }
      block.nodes.push(node);
      node.parent = block;
      node.prev = prev;
      prev = node;
      return node;
    };
    push({ type: "bos" });
    while (index < length) {
      block = stack[stack.length - 1];
      value = advance();
      if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
        continue;
      }
      if (value === CHAR_BACKSLASH) {
        push({ type: "text", value: (options2.keepEscaping ? value : "") + advance() });
        continue;
      }
      if (value === CHAR_RIGHT_SQUARE_BRACKET) {
        push({ type: "text", value: "\\" + value });
        continue;
      }
      if (value === CHAR_LEFT_SQUARE_BRACKET) {
        brackets++;
        let closed = true;
        let next;
        while (index < length && (next = advance())) {
          value += next;
          if (next === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            continue;
          }
          if (next === CHAR_BACKSLASH) {
            value += advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            brackets--;
            if (brackets === 0) {
              break;
            }
          }
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_PARENTHESES) {
        block = push({ type: "paren", nodes: [] });
        stack.push(block);
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_RIGHT_PARENTHESES) {
        if (block.type !== "paren") {
          push({ type: "text", value });
          continue;
        }
        block = stack.pop();
        push({ type: "text", value });
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
        let open = value;
        let next;
        if (options2.keepQuotes !== true) {
          value = "";
        }
        while (index < length && (next = advance())) {
          if (next === CHAR_BACKSLASH) {
            value += next + advance();
            continue;
          }
          if (next === open) {
            if (options2.keepQuotes === true)
              value += next;
            break;
          }
          value += next;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === CHAR_LEFT_CURLY_BRACE) {
        depth++;
        let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
        let brace = {
          type: "brace",
          open: true,
          close: false,
          dollar,
          depth,
          commas: 0,
          ranges: 0,
          nodes: []
        };
        block = push(brace);
        stack.push(block);
        push({ type: "open", value });
        continue;
      }
      if (value === CHAR_RIGHT_CURLY_BRACE) {
        if (block.type !== "brace") {
          push({ type: "text", value });
          continue;
        }
        let type = "close";
        block = stack.pop();
        block.close = true;
        push({ type, value });
        depth--;
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_COMMA && depth > 0) {
        if (block.ranges > 0) {
          block.ranges = 0;
          let open = block.nodes.shift();
          block.nodes = [open, { type: "text", value: stringify(block) }];
        }
        push({ type: "comma", value });
        block.commas++;
        continue;
      }
      if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
        let siblings = block.nodes;
        if (depth === 0 || siblings.length === 0) {
          push({ type: "text", value });
          continue;
        }
        if (prev.type === "dot") {
          block.range = [];
          prev.value += value;
          prev.type = "range";
          if (block.nodes.length !== 3 && block.nodes.length !== 5) {
            block.invalid = true;
            block.ranges = 0;
            prev.type = "text";
            continue;
          }
          block.ranges++;
          block.args = [];
          continue;
        }
        if (prev.type === "range") {
          siblings.pop();
          let before = siblings[siblings.length - 1];
          before.value += prev.value + value;
          prev = before;
          block.ranges--;
          continue;
        }
        push({ type: "dot", value });
        continue;
      }
      push({ type: "text", value });
    }
    do {
      block = stack.pop();
      if (block.type !== "root") {
        block.nodes.forEach((node) => {
          if (!node.nodes) {
            if (node.type === "open")
              node.isOpen = true;
            if (node.type === "close")
              node.isClose = true;
            if (!node.nodes)
              node.type = "text";
            node.invalid = true;
          }
        });
        let parent = stack[stack.length - 1];
        let index2 = parent.nodes.indexOf(block);
        parent.nodes.splice(index2, 1, ...block.nodes);
      }
    } while (stack.length > 0);
    push({ type: "eos" });
    return ast;
  };
  module2.exports = parse4;
});
var require_braces = __commonJSMin((exports, module2) => {
  "use strict";
  var stringify = require_stringify();
  var compile = require_compile();
  var expand2 = require_expand();
  var parse4 = require_parse3();
  var braces = (input, options2 = {}) => {
    let output = [];
    if (Array.isArray(input)) {
      for (let pattern of input) {
        let result = braces.create(pattern, options2);
        if (Array.isArray(result)) {
          output.push(...result);
        } else {
          output.push(result);
        }
      }
    } else {
      output = [].concat(braces.create(input, options2));
    }
    if (options2 && options2.expand === true && options2.nodupes === true) {
      output = [...new Set(output)];
    }
    return output;
  };
  braces.parse = (input, options2 = {}) => parse4(input, options2);
  braces.stringify = (input, options2 = {}) => {
    if (typeof input === "string") {
      return stringify(braces.parse(input, options2), options2);
    }
    return stringify(input, options2);
  };
  braces.compile = (input, options2 = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options2);
    }
    return compile(input, options2);
  };
  braces.expand = (input, options2 = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options2);
    }
    let result = expand2(input, options2);
    if (options2.noempty === true) {
      result = result.filter(Boolean);
    }
    if (options2.nodupes === true) {
      result = [...new Set(result)];
    }
    return result;
  };
  braces.create = (input, options2 = {}) => {
    if (input === "" || input.length < 3) {
      return [input];
    }
    return options2.expand !== true ? braces.compile(input, options2) : braces.expand(input, options2);
  };
  module2.exports = braces;
});
var require_constants3 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var WIN_SLASH = "\\\\/";
  var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  var DOT_LITERAL = "\\.";
  var PLUS_LITERAL = "\\+";
  var QMARK_LITERAL = "\\?";
  var SLASH_LITERAL = "\\/";
  var ONE_CHAR = "(?=.)";
  var QMARK = "[^/]";
  var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  var NO_DOT = `(?!${DOT_LITERAL})`;
  var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  var STAR = `${QMARK}*?`;
  var POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  var WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  var POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  module2.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path9.sep,
    extglobChars(chars) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" }
      };
    },
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
});
var require_utils6 = __commonJSMin((exports) => {
  "use strict";
  var path9 = __require("path");
  var win32 = process.platform === "win32";
  var {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = require_constants3();
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options2) => {
    if (options2 && typeof options2.windows === "boolean") {
      return options2.windows;
    }
    return win32 === true || path9.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options2 = {}) => {
    const prepend = options2.contains ? "" : "^";
    const append = options2.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
});
var require_scan = __commonJSMin((exports, module2) => {
  "use strict";
  var utils = require_utils6();
  var {
    CHAR_ASTERISK,
    CHAR_AT,
    CHAR_BACKWARD_SLASH,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_EXCLAMATION_MARK,
    CHAR_FORWARD_SLASH,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_LEFT_PARENTHESES,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_PLUS,
    CHAR_QUESTION_MARK,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_RIGHT_PARENTHESES,
    CHAR_RIGHT_SQUARE_BRACKET
  } = require_constants3();
  var isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  var depth = (token) => {
    if (token.isPrefix !== true) {
      token.depth = token.isGlobstar ? Infinity : 1;
    }
  };
  var scan = (input, options2) => {
    const opts = options2 || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = { value: "", depth: 0, isGlob: false };
    const eos = () => index >= length;
    const peek = () => str.charCodeAt(index + 1);
    const advance = () => {
      prev = code;
      return str.charCodeAt(++index);
    };
    while (index < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
        braces++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE) {
            braces--;
            if (braces === 0) {
              braceEscaped = false;
              isBrace = token.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index);
        tokens.push(token);
        token = { value: "", depth: 0, isGlob: false };
        if (finished === true)
          continue;
        if (prev === CHAR_DOT && index === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          isExtglob = token.isExtglob = true;
          finished = true;
          if (code === CHAR_EXCLAMATION_MARK && index === start) {
            negatedExtglob = true;
          }
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK) {
        if (prev === CHAR_ASTERISK)
          isGlobstar = token.isGlobstar = true;
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            isBracket = token.isBracket = true;
            isGlob = token.isGlob = true;
            finished = true;
            break;
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
        negated = token.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base = str;
    let prefix2 = "";
    let glob = "";
    if (start > 0) {
      prefix2 = str.slice(0, start);
      str = str.slice(start);
      lastIndex -= start;
    }
    if (base && isGlob === true && lastIndex > 0) {
      base = str.slice(0, lastIndex);
      glob = str.slice(lastIndex);
    } else if (isGlob === true) {
      base = "";
      glob = str;
    } else {
      base = str;
    }
    if (base && base !== "" && base !== "/" && base !== str) {
      if (isPathSeparator(base.charCodeAt(base.length - 1))) {
        base = base.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob)
        glob = utils.removeBackslashes(glob);
      if (base && backslashes === true) {
        base = utils.removeBackslashes(base);
      }
    }
    const state = {
      prefix: prefix2,
      input,
      start,
      base,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated,
      negatedExtglob
    };
    if (opts.tokens === true) {
      state.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token);
      }
      state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0; idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value = input.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix2;
          } else {
            tokens[idx].value = value;
          }
          depth(tokens[idx]);
          state.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value !== "") {
          parts.push(value);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input.length) {
        const value = input.slice(prevIndex + 1);
        parts.push(value);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value;
          depth(tokens[tokens.length - 1]);
          state.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state.slashes = slashes;
      state.parts = parts;
    }
    return state;
  };
  module2.exports = scan;
});
var require_parse4 = __commonJSMin((exports, module2) => {
  "use strict";
  var constants = require_constants3();
  var utils = require_utils6();
  var {
    MAX_LENGTH,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants;
  var expandRange = (args, options2) => {
    if (typeof options2.expandRange === "function") {
      return options2.expandRange(...args, options2);
    }
    args.sort();
    const value = `[${args.join("-")}]`;
    try {
      new RegExp(value);
    } catch (ex) {
      return args.map((v) => utils.escapeRegex(v)).join("..");
    }
    return value;
  };
  var syntaxError = (type, char) => {
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  var parse4 = (input, options2) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    input = REPLACEMENTS[input] || input;
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    let len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = { type: "bos", value: "", output: opts.prepend || "" };
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils.isWindows(options2);
    const PLATFORM_CHARS = constants.globChars(win32);
    const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state = {
      input,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input = utils.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    const eos = () => state.index === len - 1;
    const peek = state.peek = (n = 1) => input[state.index + n];
    const advance = state.advance = () => input[++state.index] || "";
    const remaining = () => input.slice(state.index + 1);
    const consume = (value2 = "", num = 0) => {
      state.consumed += value2;
      state.index += num;
    };
    const append = (token) => {
      state.output += token.output != null ? token.output : token.value;
      consume(token.value);
    };
    const negate = () => {
      let count = 1;
      while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
        advance();
        state.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state.negated = true;
      state.start++;
      return true;
    };
    const increment = (type) => {
      state[type]++;
      stack.push(type);
    };
    const decrement = (type) => {
      state[type]--;
      stack.pop();
    };
    const push = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren") {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output)
        append(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type, value2) => {
      const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
      token.prev = prev;
      token.parens = state.parens;
      token.output = state.output;
      const output = (opts.capture ? "(" : "") + token.open;
      increment("parens");
      push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
      push({ type: "paren", extglob: true, value: advance(), output });
      extglobs.push(token);
    };
    const extglobClose = (token) => {
      let output = token.close + (opts.capture ? ")" : "");
      let rest;
      if (token.type === "negate") {
        let extglobStar = star;
        if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token.close = `)$))${extglobStar}`;
        }
        if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
          output = token.close = `)${rest})${extglobStar})`;
        }
        if (token.prev.type === "bos") {
          state.negatedExtglob = true;
        }
      }
      push({ type: "paren", extglob: true, value, output });
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
      let backslashes = false;
      let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input && opts.contains === true) {
        state.output = input;
        return state;
      }
      state.output = utils.wrapOutput(output, state, options2);
      return state;
    }
    while (!eos()) {
      value = advance();
      if (value === "\0") {
        continue;
      }
      if (value === "\\") {
        const next = peek();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value += "\\";
          push({ type: "text", value });
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state.index += slashes;
          if (slashes % 2 !== 0) {
            value += "\\";
          }
        }
        if (opts.unescape === true) {
          value = advance();
        } else {
          value += advance();
        }
        if (state.brackets === 0) {
          push({ type: "text", value });
          continue;
        }
      }
      if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
          value = `\\${value}`;
        }
        if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
          value = `\\${value}`;
        }
        if (opts.posix === true && value === "!" && prev.value === "[") {
          value = "^";
        }
        prev.value += value;
        append({ value });
        continue;
      }
      if (state.quotes === 1 && value !== '"') {
        value = utils.escapeRegex(value);
        prev.value += value;
        append({ value });
        continue;
      }
      if (value === '"') {
        state.quotes = state.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push({ type: "text", value });
        }
        continue;
      }
      if (value === "(") {
        increment("parens");
        push({ type: "paren", value });
        continue;
      }
      if (value === ")") {
        if (state.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
        decrement("parens");
        continue;
      }
      if (value === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("closing", "]"));
          }
          value = `\\${value}`;
        } else {
          increment("brackets");
        }
        push({ type: "bracket", value });
        continue;
      }
      if (value === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        if (state.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "["));
          }
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value = `/${value}`;
        }
        prev.value += value;
        append({ value });
        if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils.escapeRegex(prev.value);
        state.output = state.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state.output += prev.value;
        continue;
      }
      if (value === "{" && opts.nobrace !== true) {
        increment("braces");
        const open = {
          type: "brace",
          value,
          output: "(",
          outputIndex: state.output.length,
          tokensIndex: state.tokens.length
        };
        braces.push(open);
        push(open);
        continue;
      }
      if (value === "}") {
        const brace = braces[braces.length - 1];
        if (opts.nobrace === true || !brace) {
          push({ type: "text", value, output: value });
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1; i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state.output.slice(0, brace.outputIndex);
          const toks = state.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value = output = "\\}";
          state.output = out;
          for (const t of toks) {
            state.output += t.output || t.value;
          }
        }
        push({ type: "brace", value, output });
        decrement("braces");
        braces.pop();
        continue;
      }
      if (value === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === ",") {
        let output = value;
        const brace = braces[braces.length - 1];
        if (brace && stack[stack.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push({ type: "comma", value, output });
        continue;
      }
      if (value === "/") {
        if (prev.type === "dot" && state.index === state.start + 1) {
          state.start = state.index + 1;
          state.consumed = "";
          state.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push({ type: "slash", value, output: SLASH_LITERAL });
        continue;
      }
      if (value === ".") {
        if (state.braces > 0 && prev.type === "dot") {
          if (prev.value === ".")
            prev.output = DOT_LITERAL;
          const brace = braces[braces.length - 1];
          prev.type = "dots";
          prev.output += value;
          prev.value += value;
          brace.dots = true;
          continue;
        }
        if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push({ type: "text", value, output: DOT_LITERAL });
          continue;
        }
        push({ type: "dot", value, output: DOT_LITERAL });
        continue;
      }
      if (value === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("qmark", value);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek();
          let output = value;
          if (next === "<" && !utils.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value}`;
          }
          push({ type: "text", value, output });
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push({ type: "qmark", value, output: QMARK_NO_DOT });
          continue;
        }
        push({ type: "qmark", value, output: QMARK });
        continue;
      }
      if (value === "!") {
        if (opts.noextglob !== true && peek() === "(") {
          if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
            extglobOpen("negate", value);
            continue;
          }
        }
        if (opts.nonegate !== true && state.index === 0) {
          negate();
          continue;
        }
      }
      if (value === "+") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("plus", value);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push({ type: "plus", value, output: PLUS_LITERAL });
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
          push({ type: "plus", value });
          continue;
        }
        push({ type: "plus", value: PLUS_LITERAL });
        continue;
      }
      if (value === "@") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          push({ type: "at", extglob: true, value, output: "" });
          continue;
        }
        push({ type: "text", value });
        continue;
      }
      if (value !== "*") {
        if (value === "$" || value === "^") {
          value = `\\${value}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value += match[0];
          state.index += match[0].length;
        }
        push({ type: "text", value });
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value;
        prev.output = star;
        state.backtrack = true;
        state.globstar = true;
        consume(value);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push({ type: "star", value, output: "" });
          continue;
        }
        const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push({ type: "star", value, output: "" });
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input[state.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value;
          prev.output = globstar(opts);
          state.output = prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value;
          state.globstar = true;
          state.output += prior.output + prev.output;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== void 0 ? "|$" : "";
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value;
          state.output += prior.output + prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state.output = prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value;
        state.output += prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      const token = { type: "star", value, output: star };
      if (opts.bash === true) {
        token.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token.output = nodot + token.output;
        }
        push(token);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token.output = value;
        push(token);
        continue;
      }
      if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state.output += nodot;
          prev.output += nodot;
        }
        if (peek() !== "*") {
          state.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push(token);
    }
    while (state.brackets > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "]"));
      state.output = utils.escapeLast(state.output, "[");
      decrement("brackets");
    }
    while (state.parens > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", ")"));
      state.output = utils.escapeLast(state.output, "(");
      decrement("parens");
    }
    while (state.braces > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "}"));
      state.output = utils.escapeLast(state.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
    }
    if (state.backtrack === true) {
      state.output = "";
      for (const token of state.tokens) {
        state.output += token.output != null ? token.output : token.value;
        if (token.suffix) {
          state.output += token.suffix;
        }
      }
    }
    return state;
  };
  parse4.fastpaths = (input, options2) => {
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    const len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input = REPLACEMENTS[input] || input;
    const win32 = utils.isWindows(options2);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = { negated: false, prefix: "" };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true)
        return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str) => {
      switch (str) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str);
          if (!match)
            return;
          const source2 = create(match[1]);
          if (!source2)
            return;
          return source2 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) {
      source += `${SLASH_LITERAL}?`;
    }
    return source;
  };
  module2.exports = parse4;
});
var require_picomatch = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var scan = require_scan();
  var parse4 = require_parse4();
  var utils = require_utils6();
  var constants = require_constants3();
  var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
  var picomatch = (glob, options2, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input) => picomatch(input, options2, returnState));
      const arrayMatcher = (str) => {
        for (const isMatch of fns) {
          const state2 = isMatch(str);
          if (state2)
            return state2;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject2(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options2 || {};
    const posix = utils.isWindows(options2);
    const regex = isState ? picomatch.compileRe(glob, options2) : picomatch.makeRe(glob, options2, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = { ...options2, ignore: null, onMatch: null, onResult: null };
      isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false) => {
      const { isMatch, match, output } = picomatch.test(input, regex, options2, { glob, posix });
      const result = { glob, state, regex, posix, input, output, match, isMatch };
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state;
    }
    return matcher;
  };
  picomatch.test = (input, regex, options2, { glob, posix } = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input === "") {
      return { isMatch: false, output: "" };
    }
    const opts = options2 || {};
    const format2 = opts.format || (posix ? utils.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format2 ? format2(input) : input;
    if (match === false) {
      output = format2 ? format2(input) : input;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch.matchBase(input, regex, options2, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return { isMatch: Boolean(match), match, output };
  };
  picomatch.matchBase = (input, glob, options2, posix = utils.isWindows(options2)) => {
    const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options2);
    return regex.test(path9.basename(input));
  };
  picomatch.isMatch = (str, patterns, options2) => picomatch(patterns, options2)(str);
  picomatch.parse = (pattern, options2) => {
    if (Array.isArray(pattern))
      return pattern.map((p) => picomatch.parse(p, options2));
    return parse4(pattern, { ...options2, fastpaths: false });
  };
  picomatch.scan = (input, options2) => scan(input, options2);
  picomatch.compileRe = (state, options2, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return state.output;
    }
    const opts = options2 || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${state.output})${append}`;
    if (state && state.negated === true) {
      source = `^(?!${source}).*$`;
    }
    const regex = picomatch.toRegex(source, options2);
    if (returnState === true) {
      regex.state = state;
    }
    return regex;
  };
  picomatch.makeRe = (input, options2 = {}, returnOutput = false, returnState = false) => {
    if (!input || typeof input !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    let parsed = { negated: false, fastpaths: true };
    if (options2.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
      parsed.output = parse4.fastpaths(input, options2);
    }
    if (!parsed.output) {
      parsed = parse4(input, options2);
    }
    return picomatch.compileRe(parsed, options2, returnOutput, returnState);
  };
  picomatch.toRegex = (source, options2) => {
    try {
      const opts = options2 || {};
      return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options2 && options2.debug === true)
        throw err;
      return /$^/;
    }
  };
  picomatch.constants = constants;
  module2.exports = picomatch;
});
var require_picomatch2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = require_picomatch();
});
var require_micromatch = __commonJSMin((exports, module2) => {
  "use strict";
  var util2 = __require("util");
  var braces = require_braces();
  var picomatch = require_picomatch2();
  var utils = require_utils6();
  var isEmptyString = (val) => val === "" || val === "./";
  var micromatch2 = (list, patterns, options2) => {
    patterns = [].concat(patterns);
    list = [].concat(list);
    let omit2 = /* @__PURE__ */ new Set();
    let keep = /* @__PURE__ */ new Set();
    let items = /* @__PURE__ */ new Set();
    let negatives = 0;
    let onResult = (state) => {
      items.add(state.output);
      if (options2 && options2.onResult) {
        options2.onResult(state);
      }
    };
    for (let i = 0; i < patterns.length; i++) {
      let isMatch = picomatch(String(patterns[i]), { ...options2, onResult }, true);
      let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
      if (negated)
        negatives++;
      for (let item of list) {
        let matched = isMatch(item, true);
        let match = negated ? !matched.isMatch : matched.isMatch;
        if (!match)
          continue;
        if (negated) {
          omit2.add(matched.output);
        } else {
          omit2.delete(matched.output);
          keep.add(matched.output);
        }
      }
    }
    let result = negatives === patterns.length ? [...items] : [...keep];
    let matches = result.filter((item) => !omit2.has(item));
    if (options2 && matches.length === 0) {
      if (options2.failglob === true) {
        throw new Error(`No matches found for "${patterns.join(", ")}"`);
      }
      if (options2.nonull === true || options2.nullglob === true) {
        return options2.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
      }
    }
    return matches;
  };
  micromatch2.match = micromatch2;
  micromatch2.matcher = (pattern, options2) => picomatch(pattern, options2);
  micromatch2.isMatch = (str, patterns, options2) => picomatch(patterns, options2)(str);
  micromatch2.any = micromatch2.isMatch;
  micromatch2.not = (list, patterns, options2 = {}) => {
    patterns = [].concat(patterns).map(String);
    let result = /* @__PURE__ */ new Set();
    let items = [];
    let onResult = (state) => {
      if (options2.onResult)
        options2.onResult(state);
      items.push(state.output);
    };
    let matches = micromatch2(list, patterns, { ...options2, onResult });
    for (let item of items) {
      if (!matches.includes(item)) {
        result.add(item);
      }
    }
    return [...result];
  };
  micromatch2.contains = (str, pattern, options2) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
    }
    if (Array.isArray(pattern)) {
      return pattern.some((p) => micromatch2.contains(str, p, options2));
    }
    if (typeof pattern === "string") {
      if (isEmptyString(str) || isEmptyString(pattern)) {
        return false;
      }
      if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
        return true;
      }
    }
    return micromatch2.isMatch(str, pattern, { ...options2, contains: true });
  };
  micromatch2.matchKeys = (obj, patterns, options2) => {
    if (!utils.isObject(obj)) {
      throw new TypeError("Expected the first argument to be an object");
    }
    let keys = micromatch2(Object.keys(obj), patterns, options2);
    let res = {};
    for (let key of keys)
      res[key] = obj[key];
    return res;
  };
  micromatch2.some = (list, patterns, options2) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options2);
      if (items.some((item) => isMatch(item))) {
        return true;
      }
    }
    return false;
  };
  micromatch2.every = (list, patterns, options2) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options2);
      if (!items.every((item) => isMatch(item))) {
        return false;
      }
    }
    return true;
  };
  micromatch2.all = (str, patterns, options2) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
    }
    return [].concat(patterns).every((p) => picomatch(p, options2)(str));
  };
  micromatch2.capture = (glob, input, options2) => {
    let posix = utils.isWindows(options2);
    let regex = picomatch.makeRe(String(glob), { ...options2, capture: true });
    let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
    if (match) {
      return match.slice(1).map((v) => v === void 0 ? "" : v);
    }
  };
  micromatch2.makeRe = (...args) => picomatch.makeRe(...args);
  micromatch2.scan = (...args) => picomatch.scan(...args);
  micromatch2.parse = (patterns, options2) => {
    let res = [];
    for (let pattern of [].concat(patterns || [])) {
      for (let str of braces(String(pattern), options2)) {
        res.push(picomatch.parse(str, options2));
      }
    }
    return res;
  };
  micromatch2.braces = (pattern, options2) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    if (options2 && options2.nobrace === true || !/\{.*\}/.test(pattern)) {
      return [pattern];
    }
    return braces(pattern, options2);
  };
  micromatch2.braceExpand = (pattern, options2) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    return micromatch2.braces(pattern, { ...options2, expand: true });
  };
  module2.exports = micromatch2;
});
var require_pattern = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
  var path9 = __require("path");
  var globParent = require_glob_parent();
  var micromatch2 = require_micromatch();
  var GLOBSTAR = "**";
  var ESCAPE_SYMBOL = "\\";
  var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
  var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[.*]/;
  var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\(.*\|.*\)/;
  var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\(.*\)/;
  var BRACE_EXPANSIONS_SYMBOLS_RE = /{.*(?:,|\.\.).*}/;
  function isStaticPattern(pattern, options2 = {}) {
    return !isDynamicPattern(pattern, options2);
  }
  exports.isStaticPattern = isStaticPattern;
  function isDynamicPattern(pattern, options2 = {}) {
    if (pattern === "") {
      return false;
    }
    if (options2.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
      return true;
    }
    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options2.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options2.braceExpansion !== false && BRACE_EXPANSIONS_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    return false;
  }
  exports.isDynamicPattern = isDynamicPattern;
  function convertToPositivePattern(pattern) {
    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
  }
  exports.convertToPositivePattern = convertToPositivePattern;
  function convertToNegativePattern(pattern) {
    return "!" + pattern;
  }
  exports.convertToNegativePattern = convertToNegativePattern;
  function isNegativePattern(pattern) {
    return pattern.startsWith("!") && pattern[1] !== "(";
  }
  exports.isNegativePattern = isNegativePattern;
  function isPositivePattern(pattern) {
    return !isNegativePattern(pattern);
  }
  exports.isPositivePattern = isPositivePattern;
  function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern);
  }
  exports.getNegativePatterns = getNegativePatterns;
  function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern);
  }
  exports.getPositivePatterns = getPositivePatterns;
  function getPatternsInsideCurrentDirectory(patterns) {
    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
  }
  exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
  function getPatternsOutsideCurrentDirectory(patterns) {
    return patterns.filter(isPatternRelatedToParentDirectory);
  }
  exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
  function isPatternRelatedToParentDirectory(pattern) {
    return pattern.startsWith("..") || pattern.startsWith("./..");
  }
  exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
  function getBaseDirectory(pattern) {
    return globParent(pattern, { flipBackslashes: false });
  }
  exports.getBaseDirectory = getBaseDirectory;
  function hasGlobStar(pattern) {
    return pattern.includes(GLOBSTAR);
  }
  exports.hasGlobStar = hasGlobStar;
  function endsWithSlashGlobStar(pattern) {
    return pattern.endsWith("/" + GLOBSTAR);
  }
  exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
  function isAffectDepthOfReadingPattern(pattern) {
    const basename = path9.basename(pattern);
    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
  }
  exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
  function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern) => {
      return collection.concat(expandBraceExpansion(pattern));
    }, []);
  }
  exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
  function expandBraceExpansion(pattern) {
    return micromatch2.braces(pattern, {
      expand: true,
      nodupes: true
    });
  }
  exports.expandBraceExpansion = expandBraceExpansion;
  function getPatternParts(pattern, options2) {
    let { parts } = micromatch2.scan(pattern, Object.assign(Object.assign({}, options2), { parts: true }));
    if (parts.length === 0) {
      parts = [pattern];
    }
    if (parts[0].startsWith("/")) {
      parts[0] = parts[0].slice(1);
      parts.unshift("");
    }
    return parts;
  }
  exports.getPatternParts = getPatternParts;
  function makeRe(pattern, options2) {
    return micromatch2.makeRe(pattern, options2);
  }
  exports.makeRe = makeRe;
  function convertPatternsToRe(patterns, options2) {
    return patterns.map((pattern) => makeRe(pattern, options2));
  }
  exports.convertPatternsToRe = convertPatternsToRe;
  function matchAny(entry, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry));
  }
  exports.matchAny = matchAny;
});
var require_stream2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.merge = void 0;
  var merge2 = require_merge2();
  function merge3(streams) {
    const mergedStream = merge2(streams);
    streams.forEach((stream) => {
      stream.once("error", (error) => mergedStream.emit("error", error));
    });
    mergedStream.once("close", () => propagateCloseEventToSources(streams));
    mergedStream.once("end", () => propagateCloseEventToSources(streams));
    return mergedStream;
  }
  exports.merge = merge3;
  function propagateCloseEventToSources(streams) {
    streams.forEach((stream) => stream.emit("close"));
  }
});
var require_string = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEmpty = exports.isString = void 0;
  function isString(input) {
    return typeof input === "string";
  }
  exports.isString = isString;
  function isEmpty(input) {
    return input === "";
  }
  exports.isEmpty = isEmpty;
});
var require_utils7 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
  var array = require_array();
  exports.array = array;
  var errno = require_errno();
  exports.errno = errno;
  var fs9 = require_fs3();
  exports.fs = fs9;
  var path9 = require_path2();
  exports.path = path9;
  var pattern = require_pattern();
  exports.pattern = pattern;
  var stream = require_stream2();
  exports.stream = stream;
  var string = require_string();
  exports.string = string;
});
var require_tasks = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
  var utils = require_utils7();
  function generate(patterns, settings) {
    const positivePatterns = getPositivePatterns(patterns);
    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
    return staticTasks.concat(dynamicTasks);
  }
  exports.generate = generate;
  function convertPatternsToTasks(positive, negative, dynamic) {
    const tasks = [];
    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
    if ("." in insideCurrentDirectoryGroup) {
      tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
    } else {
      tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
    }
    return tasks;
  }
  exports.convertPatternsToTasks = convertPatternsToTasks;
  function getPositivePatterns(patterns) {
    return utils.pattern.getPositivePatterns(patterns);
  }
  exports.getPositivePatterns = getPositivePatterns;
  function getNegativePatternsAsPositive(patterns, ignore) {
    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
    const positive = negative.map(utils.pattern.convertToPositivePattern);
    return positive;
  }
  exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
  function groupPatternsByBaseDirectory(patterns) {
    const group = {};
    return patterns.reduce((collection, pattern) => {
      const base = utils.pattern.getBaseDirectory(pattern);
      if (base in collection) {
        collection[base].push(pattern);
      } else {
        collection[base] = [pattern];
      }
      return collection;
    }, group);
  }
  exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
  function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base) => {
      return convertPatternGroupToTask(base, positive[base], negative, dynamic);
    });
  }
  exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
  function convertPatternGroupToTask(base, positive, negative, dynamic) {
    return {
      dynamic,
      positive,
      negative,
      base,
      patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
    };
  }
  exports.convertPatternGroupToTask = convertPatternGroupToTask;
});
var require_async = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.read = void 0;
  function read2(path9, settings, callback) {
    settings.fs.lstat(path9, (lstatError, lstat2) => {
      if (lstatError !== null) {
        callFailureCallback(callback, lstatError);
        return;
      }
      if (!lstat2.isSymbolicLink() || !settings.followSymbolicLink) {
        callSuccessCallback(callback, lstat2);
        return;
      }
      settings.fs.stat(path9, (statError, stat) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            callFailureCallback(callback, statError);
            return;
          }
          callSuccessCallback(callback, lstat2);
          return;
        }
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        callSuccessCallback(callback, stat);
      });
    });
  }
  exports.read = read2;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});
var require_sync = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.read = void 0;
  function read2(path9, settings) {
    const lstat2 = settings.fs.lstatSync(path9);
    if (!lstat2.isSymbolicLink() || !settings.followSymbolicLink) {
      return lstat2;
    }
    try {
      const stat = settings.fs.statSync(path9);
      if (settings.markSymbolicLink) {
        stat.isSymbolicLink = () => true;
      }
      return stat;
    } catch (error) {
      if (!settings.throwErrorOnBrokenSymbolicLink) {
        return lstat2;
      }
      throw error;
    }
  }
  exports.read = read2;
});
var require_fs4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
  var fs9 = __require("fs");
  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs9.lstat,
    stat: fs9.stat,
    lstatSync: fs9.lstatSync,
    statSync: fs9.statSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === void 0) {
      return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports.createFileSystemAdapter = createFileSystemAdapter;
});
var require_settings = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var fs9 = require_fs4();
  var Settings = class {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
      this.fs = fs9.createFileSystemAdapter(this._options.fs);
      this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
      return option !== null && option !== void 0 ? option : value;
    }
  };
  exports.default = Settings;
});
var require_out = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.statSync = exports.stat = exports.Settings = void 0;
  var async = require_async();
  var sync2 = require_sync();
  var settings_1 = require_settings();
  exports.Settings = settings_1.default;
  function stat(path9, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async.read(path9, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async.read(path9, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports.stat = stat;
  function statSync(path9, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync2.read(path9, settings);
  }
  exports.statSync = statSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});
var require_queue_microtask = __commonJSMin((exports, module2) => {
  var promise;
  module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
    throw err;
  }, 0));
});
var require_run_parallel = __commonJSMin((exports, module2) => {
  module2.exports = runParallel;
  var queueMicrotask2 = require_queue_microtask();
  function runParallel(tasks, cb) {
    let results, pending, keys;
    let isSync = true;
    if (Array.isArray(tasks)) {
      results = [];
      pending = tasks.length;
    } else {
      keys = Object.keys(tasks);
      results = {};
      pending = keys.length;
    }
    function done(err) {
      function end() {
        if (cb)
          cb(err, results);
        cb = null;
      }
      if (isSync)
        queueMicrotask2(end);
      else
        end();
    }
    function each(i, err, result) {
      results[i] = result;
      if (--pending === 0 || err) {
        done(err);
      }
    }
    if (!pending) {
      done(null);
    } else if (keys) {
      keys.forEach(function(key) {
        tasks[key](function(err, result) {
          each(key, err, result);
        });
      });
    } else {
      tasks.forEach(function(task, i) {
        task(function(err, result) {
          each(i, err, result);
        });
      });
    }
    isSync = false;
  }
});
var require_constants4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
  var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
  if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
  }
  var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
  var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
  var SUPPORTED_MAJOR_VERSION = 10;
  var SUPPORTED_MINOR_VERSION = 10;
  var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
  var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
  exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
});
var require_fs5 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createDirentFromStats = void 0;
  var DirentFromStats = class {
    constructor(name2, stats) {
      this.name = name2;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  };
  function createDirentFromStats(name2, stats) {
    return new DirentFromStats(name2, stats);
  }
  exports.createDirentFromStats = createDirentFromStats;
});
var require_utils8 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fs = void 0;
  var fs9 = require_fs5();
  exports.fs = fs9;
});
var require_common2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.joinPathSegments = void 0;
  function joinPathSegments(a, b, separator) {
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  exports.joinPathSegments = joinPathSegments;
});
var require_async2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
  var fsStat = require_out();
  var rpl = require_run_parallel();
  var constants_1 = require_constants4();
  var utils = require_utils8();
  var common = require_common2();
  function read2(directory, settings, callback) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      readdirWithFileTypes(directory, settings, callback);
      return;
    }
    readdir(directory, settings, callback);
  }
  exports.read = read2;
  function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const entries = dirents.map((dirent) => ({
        dirent,
        name: dirent.name,
        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
      }));
      if (!settings.followSymbolicLinks) {
        callSuccessCallback(callback, entries);
        return;
      }
      const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
      rpl(tasks, (rplError, rplEntries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, rplEntries);
      });
    });
  }
  exports.readdirWithFileTypes = readdirWithFileTypes;
  function makeRplTaskEntry(entry, settings) {
    return (done) => {
      if (!entry.dirent.isSymbolicLink()) {
        done(null, entry);
        return;
      }
      settings.fs.stat(entry.path, (statError, stats) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            done(statError);
            return;
          }
          done(null, entry);
          return;
        }
        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        done(null, entry);
      });
    };
  }
  function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const tasks = names.map((name2) => {
        const path9 = common.joinPathSegments(directory, name2, settings.pathSegmentSeparator);
        return (done) => {
          fsStat.stat(path9, settings.fsStatSettings, (error, stats) => {
            if (error !== null) {
              done(error);
              return;
            }
            const entry = {
              name: name2,
              path: path9,
              dirent: utils.fs.createDirentFromStats(name2, stats)
            };
            if (settings.stats) {
              entry.stats = stats;
            }
            done(null, entry);
          });
        };
      });
      rpl(tasks, (rplError, entries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, entries);
      });
    });
  }
  exports.readdir = readdir;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});
var require_sync2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
  var fsStat = require_out();
  var constants_1 = require_constants4();
  var utils = require_utils8();
  var common = require_common2();
  function read2(directory, settings) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings);
    }
    return readdir(directory, settings);
  }
  exports.read = read2;
  function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
    return dirents.map((dirent) => {
      const entry = {
        dirent,
        name: dirent.name,
        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
      };
      if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
        try {
          const stats = settings.fs.statSync(entry.path);
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        } catch (error) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            throw error;
          }
        }
      }
      return entry;
    });
  }
  exports.readdirWithFileTypes = readdirWithFileTypes;
  function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory);
    return names.map((name2) => {
      const entryPath = common.joinPathSegments(directory, name2, settings.pathSegmentSeparator);
      const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
      const entry = {
        name: name2,
        path: entryPath,
        dirent: utils.fs.createDirentFromStats(name2, stats)
      };
      if (settings.stats) {
        entry.stats = stats;
      }
      return entry;
    });
  }
  exports.readdir = readdir;
});
var require_fs6 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
  var fs9 = __require("fs");
  exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs9.lstat,
    stat: fs9.stat,
    lstatSync: fs9.lstatSync,
    statSync: fs9.statSync,
    readdir: fs9.readdir,
    readdirSync: fs9.readdirSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === void 0) {
      return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports.createFileSystemAdapter = createFileSystemAdapter;
});
var require_settings2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var path9 = __require("path");
  var fsStat = require_out();
  var fs9 = require_fs6();
  var Settings = class {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
      this.fs = fs9.createFileSystemAdapter(this._options.fs);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path9.sep);
      this.stats = this._getValue(this._options.stats, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      this.fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this.followSymbolicLinks,
        fs: this.fs,
        throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option !== null && option !== void 0 ? option : value;
    }
  };
  exports.default = Settings;
});
var require_out2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Settings = exports.scandirSync = exports.scandir = void 0;
  var async = require_async2();
  var sync2 = require_sync2();
  var settings_1 = require_settings2();
  exports.Settings = settings_1.default;
  function scandir(path9, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async.read(path9, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async.read(path9, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports.scandir = scandir;
  function scandirSync(path9, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync2.read(path9, settings);
  }
  exports.scandirSync = scandirSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});
var require_reusify = __commonJSMin((exports, module2) => {
  "use strict";
  function reusify(Constructor) {
    var head = new Constructor();
    var tail = head;
    function get() {
      var current = head;
      if (current.next) {
        head = current.next;
      } else {
        head = new Constructor();
        tail = head;
      }
      current.next = null;
      return current;
    }
    function release2(obj) {
      tail.next = obj;
      tail = obj;
    }
    return {
      get,
      release: release2
    };
  }
  module2.exports = reusify;
});
var require_queue = __commonJSMin((exports, module2) => {
  "use strict";
  var reusify = require_reusify();
  function fastqueue(context3, worker, concurrency) {
    if (typeof context3 === "function") {
      concurrency = worker;
      worker = context3;
      context3 = null;
    }
    if (concurrency < 1) {
      throw new Error("fastqueue concurrency must be greater than 1");
    }
    var cache = reusify(Task);
    var queueHead = null;
    var queueTail = null;
    var _running = 0;
    var errorHandler = null;
    var self2 = {
      push,
      drain: noop,
      saturated: noop,
      pause,
      paused: false,
      concurrency,
      running,
      resume,
      idle,
      length,
      getQueue,
      unshift,
      empty: noop,
      kill,
      killAndDrain,
      error
    };
    return self2;
    function running() {
      return _running;
    }
    function pause() {
      self2.paused = true;
    }
    function length() {
      var current = queueHead;
      var counter = 0;
      while (current) {
        current = current.next;
        counter++;
      }
      return counter;
    }
    function getQueue() {
      var current = queueHead;
      var tasks = [];
      while (current) {
        tasks.push(current.value);
        current = current.next;
      }
      return tasks;
    }
    function resume() {
      if (!self2.paused)
        return;
      self2.paused = false;
      for (var i = 0; i < self2.concurrency; i++) {
        _running++;
        release2();
      }
    }
    function idle() {
      return _running === 0 && self2.length() === 0;
    }
    function push(value, done) {
      var current = cache.get();
      current.context = context3;
      current.release = release2;
      current.value = value;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running === self2.concurrency || self2.paused) {
        if (queueTail) {
          queueTail.next = current;
          queueTail = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context3, current.value, current.worked);
      }
    }
    function unshift(value, done) {
      var current = cache.get();
      current.context = context3;
      current.release = release2;
      current.value = value;
      current.callback = done || noop;
      if (_running === self2.concurrency || self2.paused) {
        if (queueHead) {
          current.next = queueHead;
          queueHead = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context3, current.value, current.worked);
      }
    }
    function release2(holder) {
      if (holder) {
        cache.release(holder);
      }
      var next = queueHead;
      if (next) {
        if (!self2.paused) {
          if (queueTail === queueHead) {
            queueTail = null;
          }
          queueHead = next.next;
          next.next = null;
          worker.call(context3, next.value, next.worked);
          if (queueTail === null) {
            self2.empty();
          }
        } else {
          _running--;
        }
      } else if (--_running === 0) {
        self2.drain();
      }
    }
    function kill() {
      queueHead = null;
      queueTail = null;
      self2.drain = noop;
    }
    function killAndDrain() {
      queueHead = null;
      queueTail = null;
      self2.drain();
      self2.drain = noop;
    }
    function error(handler) {
      errorHandler = handler;
    }
  }
  function noop() {
  }
  function Task() {
    this.value = null;
    this.callback = noop;
    this.next = null;
    this.release = noop;
    this.context = null;
    this.errorHandler = null;
    var self2 = this;
    this.worked = function worked(err, result) {
      var callback = self2.callback;
      var errorHandler = self2.errorHandler;
      var val = self2.value;
      self2.value = null;
      self2.callback = noop;
      if (self2.errorHandler) {
        errorHandler(err, val);
      }
      callback.call(self2.context, err, result);
      self2.release(self2);
    };
  }
  function queueAsPromised(context3, worker, concurrency) {
    if (typeof context3 === "function") {
      concurrency = worker;
      worker = context3;
      context3 = null;
    }
    function asyncWrapper(arg, cb) {
      worker.call(this, arg).then(function(res) {
        cb(null, res);
      }, cb);
    }
    var queue = fastqueue(context3, asyncWrapper, concurrency);
    var pushCb = queue.push;
    var unshiftCb = queue.unshift;
    queue.push = push;
    queue.unshift = unshift;
    queue.drained = drained;
    return queue;
    function push(value) {
      var p = new Promise(function(resolve, reject) {
        pushCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function unshift(value) {
      var p = new Promise(function(resolve, reject) {
        unshiftCb(value, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function drained() {
      var previousDrain = queue.drain;
      var p = new Promise(function(resolve) {
        queue.drain = function() {
          previousDrain();
          resolve();
        };
      });
      return p;
    }
  }
  module2.exports = fastqueue;
  module2.exports.promise = queueAsPromised;
});
var require_common3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
  function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
      return true;
    }
    return !settings.errorFilter(error);
  }
  exports.isFatalError = isFatalError;
  function isAppliedFilter(filter, value) {
    return filter === null || filter(value);
  }
  exports.isAppliedFilter = isAppliedFilter;
  function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[/\\]/).join(separator);
  }
  exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
  function joinPathSegments(a, b, separator) {
    if (a === "") {
      return b;
    }
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  exports.joinPathSegments = joinPathSegments;
});
var require_reader = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var common = require_common3();
  var Reader = class {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
  };
  exports.default = Reader;
});
var require_async3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var events_1 = __require("events");
  var fsScandir = require_out2();
  var fastq = require_queue();
  var common = require_common3();
  var reader_1 = require_reader();
  var AsyncReader = class extends reader_1.default {
    constructor(_root, _settings) {
      super(_root, _settings);
      this._settings = _settings;
      this._scandir = fsScandir.scandir;
      this._emitter = new events_1.EventEmitter();
      this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
      this._isFatalError = false;
      this._isDestroyed = false;
      this._queue.drain = () => {
        if (!this._isFatalError) {
          this._emitter.emit("end");
        }
      };
    }
    read() {
      this._isFatalError = false;
      this._isDestroyed = false;
      setImmediate(() => {
        this._pushToQueue(this._root, this._settings.basePath);
      });
      return this._emitter;
    }
    get isDestroyed() {
      return this._isDestroyed;
    }
    destroy() {
      if (this._isDestroyed) {
        throw new Error("The reader is already destroyed");
      }
      this._isDestroyed = true;
      this._queue.killAndDrain();
    }
    onEntry(callback) {
      this._emitter.on("entry", callback);
    }
    onError(callback) {
      this._emitter.once("error", callback);
    }
    onEnd(callback) {
      this._emitter.once("end", callback);
    }
    _pushToQueue(directory, base) {
      const queueItem = { directory, base };
      this._queue.push(queueItem, (error) => {
        if (error !== null) {
          this._handleError(error);
        }
      });
    }
    _worker(item, done) {
      this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
        if (error !== null) {
          done(error, void 0);
          return;
        }
        for (const entry of entries) {
          this._handleEntry(entry, item.base);
        }
        done(null, void 0);
      });
    }
    _handleError(error) {
      if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
        return;
      }
      this._isFatalError = true;
      this._isDestroyed = true;
      this._emitter.emit("error", error);
    }
    _handleEntry(entry, base) {
      if (this._isDestroyed || this._isFatalError) {
        return;
      }
      const fullpath = entry.path;
      if (base !== void 0) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._emitEntry(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
      }
    }
    _emitEntry(entry) {
      this._emitter.emit("entry", entry);
    }
  };
  exports.default = AsyncReader;
});
var require_async4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var async_1 = require_async3();
  var AsyncProvider = class {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._storage = [];
    }
    read(callback) {
      this._reader.onError((error) => {
        callFailureCallback(callback, error);
      });
      this._reader.onEntry((entry) => {
        this._storage.push(entry);
      });
      this._reader.onEnd(() => {
        callSuccessCallback(callback, this._storage);
      });
      this._reader.read();
    }
  };
  exports.default = AsyncProvider;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, entries) {
    callback(null, entries);
  }
});
var require_stream3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var async_1 = require_async3();
  var StreamProvider = class {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._stream = new stream_1.Readable({
        objectMode: true,
        read: () => {
        },
        destroy: () => {
          if (!this._reader.isDestroyed) {
            this._reader.destroy();
          }
        }
      });
    }
    read() {
      this._reader.onError((error) => {
        this._stream.emit("error", error);
      });
      this._reader.onEntry((entry) => {
        this._stream.push(entry);
      });
      this._reader.onEnd(() => {
        this._stream.push(null);
      });
      this._reader.read();
      return this._stream;
    }
  };
  exports.default = StreamProvider;
});
var require_sync3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var fsScandir = require_out2();
  var common = require_common3();
  var reader_1 = require_reader();
  var SyncReader = class extends reader_1.default {
    constructor() {
      super(...arguments);
      this._scandir = fsScandir.scandirSync;
      this._storage = [];
      this._queue = /* @__PURE__ */ new Set();
    }
    read() {
      this._pushToQueue(this._root, this._settings.basePath);
      this._handleQueue();
      return this._storage;
    }
    _pushToQueue(directory, base) {
      this._queue.add({ directory, base });
    }
    _handleQueue() {
      for (const item of this._queue.values()) {
        this._handleDirectory(item.directory, item.base);
      }
    }
    _handleDirectory(directory, base) {
      try {
        const entries = this._scandir(directory, this._settings.fsScandirSettings);
        for (const entry of entries) {
          this._handleEntry(entry, base);
        }
      } catch (error) {
        this._handleError(error);
      }
    }
    _handleError(error) {
      if (!common.isFatalError(this._settings, error)) {
        return;
      }
      throw error;
    }
    _handleEntry(entry, base) {
      const fullpath = entry.path;
      if (base !== void 0) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._pushToStorage(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
      }
    }
    _pushToStorage(entry) {
      this._storage.push(entry);
    }
  };
  exports.default = SyncReader;
});
var require_sync4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var sync_1 = require_sync3();
  var SyncProvider = class {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
      return this._reader.read();
    }
  };
  exports.default = SyncProvider;
});
var require_settings3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var path9 = __require("path");
  var fsScandir = require_out2();
  var Settings = class {
    constructor(_options = {}) {
      this._options = _options;
      this.basePath = this._getValue(this._options.basePath, void 0);
      this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
      this.deepFilter = this._getValue(this._options.deepFilter, null);
      this.entryFilter = this._getValue(this._options.entryFilter, null);
      this.errorFilter = this._getValue(this._options.errorFilter, null);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path9.sep);
      this.fsScandirSettings = new fsScandir.Settings({
        followSymbolicLinks: this._options.followSymbolicLinks,
        fs: this._options.fs,
        pathSegmentSeparator: this._options.pathSegmentSeparator,
        stats: this._options.stats,
        throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option !== null && option !== void 0 ? option : value;
    }
  };
  exports.default = Settings;
});
var require_out3 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
  var async_1 = require_async4();
  var stream_1 = require_stream3();
  var sync_1 = require_sync4();
  var settings_1 = require_settings3();
  exports.Settings = settings_1.default;
  function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
      return;
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
  }
  exports.walk = walk;
  function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new sync_1.default(directory, settings);
    return provider.read();
  }
  exports.walkSync = walkSync;
  function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new stream_1.default(directory, settings);
    return provider.read();
  }
  exports.walkStream = walkStream;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});
var require_reader2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var path9 = __require("path");
  var fsStat = require_out();
  var utils = require_utils7();
  var Reader = class {
    constructor(_settings) {
      this._settings = _settings;
      this._fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
      });
    }
    _getFullEntryPath(filepath) {
      return path9.resolve(this._settings.cwd, filepath);
    }
    _makeEntry(stats, pattern) {
      const entry = {
        name: pattern,
        path: pattern,
        dirent: utils.fs.createDirentFromStats(pattern, stats)
      };
      if (this._settings.stats) {
        entry.stats = stats;
      }
      return entry;
    }
    _isFatalError(error) {
      return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
    }
  };
  exports.default = Reader;
});
var require_stream4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var fsStat = require_out();
  var fsWalk = require_out3();
  var reader_1 = require_reader2();
  var ReaderStream = class extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkStream = fsWalk.walkStream;
      this._stat = fsStat.stat;
    }
    dynamic(root, options2) {
      return this._walkStream(root, options2);
    }
    static(patterns, options2) {
      const filepaths = patterns.map(this._getFullEntryPath, this);
      const stream = new stream_1.PassThrough({ objectMode: true });
      stream._write = (index, _enc, done) => {
        return this._getEntry(filepaths[index], patterns[index], options2).then((entry) => {
          if (entry !== null && options2.entryFilter(entry)) {
            stream.push(entry);
          }
          if (index === filepaths.length - 1) {
            stream.end();
          }
          done();
        }).catch(done);
      };
      for (let i = 0; i < filepaths.length; i++) {
        stream.write(i);
      }
      return stream;
    }
    _getEntry(filepath, pattern, options2) {
      return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
        if (options2.errorFilter(error)) {
          return null;
        }
        throw error;
      });
    }
    _getStat(filepath) {
      return new Promise((resolve, reject) => {
        this._stat(filepath, this._fsStatSettings, (error, stats) => {
          return error === null ? resolve(stats) : reject(error);
        });
      });
    }
  };
  exports.default = ReaderStream;
});
var require_matcher = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils7();
  var Matcher = class {
    constructor(_patterns, _settings, _micromatchOptions) {
      this._patterns = _patterns;
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this._storage = [];
      this._fillStorage();
    }
    _fillStorage() {
      const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);
      for (const pattern of patterns) {
        const segments = this._getPatternSegments(pattern);
        const sections = this._splitSegmentsIntoSections(segments);
        this._storage.push({
          complete: sections.length <= 1,
          pattern,
          segments,
          sections
        });
      }
    }
    _getPatternSegments(pattern) {
      const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
      return parts.map((part) => {
        const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part
          };
        }
        return {
          dynamic: true,
          pattern: part,
          patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
        };
      });
    }
    _splitSegmentsIntoSections(segments) {
      return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
    }
  };
  exports.default = Matcher;
});
var require_partial = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var matcher_1 = require_matcher();
  var PartialMatcher = class extends matcher_1.default {
    match(filepath) {
      const parts = filepath.split("/");
      const levels = parts.length;
      const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
      for (const pattern of patterns) {
        const section = pattern.sections[0];
        if (!pattern.complete && levels > section.length) {
          return true;
        }
        const match = parts.every((part, index) => {
          const segment = pattern.segments[index];
          if (segment.dynamic && segment.patternRe.test(part)) {
            return true;
          }
          if (!segment.dynamic && segment.pattern === part) {
            return true;
          }
          return false;
        });
        if (match) {
          return true;
        }
      }
      return false;
    }
  };
  exports.default = PartialMatcher;
});
var require_deep = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils7();
  var partial_1 = require_partial();
  var DeepFilter = class {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
    }
    getFilter(basePath, positive, negative) {
      const matcher = this._getMatcher(positive);
      const negativeRe = this._getNegativePatternsRe(negative);
      return (entry) => this._filter(basePath, entry, matcher, negativeRe);
    }
    _getMatcher(patterns) {
      return new partial_1.default(patterns, this._settings, this._micromatchOptions);
    }
    _getNegativePatternsRe(patterns) {
      const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
      return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
    _filter(basePath, entry, matcher, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry.path)) {
        return false;
      }
      if (this._isSkippedSymbolicLink(entry)) {
        return false;
      }
      const filepath = utils.path.removeLeadingDotSegment(entry.path);
      if (this._isSkippedByPositivePatterns(filepath, matcher)) {
        return false;
      }
      return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
    _isSkippedByDeep(basePath, entryPath) {
      if (this._settings.deep === Infinity) {
        return false;
      }
      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
    _getEntryLevel(basePath, entryPath) {
      const entryPathDepth = entryPath.split("/").length;
      if (basePath === "") {
        return entryPathDepth;
      }
      const basePathDepth = basePath.split("/").length;
      return entryPathDepth - basePathDepth;
    }
    _isSkippedSymbolicLink(entry) {
      return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
    }
    _isSkippedByPositivePatterns(entryPath, matcher) {
      return !this._settings.baseNameMatch && !matcher.match(entryPath);
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils.pattern.matchAny(entryPath, patternsRe);
    }
  };
  exports.default = DeepFilter;
});
var require_entry = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils7();
  var EntryFilter = class {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this.index = /* @__PURE__ */ new Map();
    }
    getFilter(positive, negative) {
      const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
      const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
      return (entry) => this._filter(entry, positiveRe, negativeRe);
    }
    _filter(entry, positiveRe, negativeRe) {
      if (this._settings.unique && this._isDuplicateEntry(entry)) {
        return false;
      }
      if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
        return false;
      }
      if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
        return false;
      }
      const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
      const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);
      if (this._settings.unique && isMatched) {
        this._createIndexRecord(entry);
      }
      return isMatched;
    }
    _isDuplicateEntry(entry) {
      return this.index.has(entry.path);
    }
    _createIndexRecord(entry) {
      this.index.set(entry.path, void 0);
    }
    _onlyFileFilter(entry) {
      return this._settings.onlyFiles && !entry.dirent.isFile();
    }
    _onlyDirectoryFilter(entry) {
      return this._settings.onlyDirectories && !entry.dirent.isDirectory();
    }
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
      if (!this._settings.absolute) {
        return false;
      }
      const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
      return utils.pattern.matchAny(fullpath, patternsRe);
    }
    _isMatchToPatterns(entryPath, patternsRe) {
      const filepath = utils.path.removeLeadingDotSegment(entryPath);
      return utils.pattern.matchAny(filepath, patternsRe);
    }
  };
  exports.default = EntryFilter;
});
var require_error2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils7();
  var ErrorFilter = class {
    constructor(_settings) {
      this._settings = _settings;
    }
    getFilter() {
      return (error) => this._isNonFatalError(error);
    }
    _isNonFatalError(error) {
      return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
    }
  };
  exports.default = ErrorFilter;
});
var require_entry2 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var utils = require_utils7();
  var EntryTransformer = class {
    constructor(_settings) {
      this._settings = _settings;
    }
    getTransformer() {
      return (entry) => this._transform(entry);
    }
    _transform(entry) {
      let filepath = entry.path;
      if (this._settings.absolute) {
        filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
        filepath = utils.path.unixify(filepath);
      }
      if (this._settings.markDirectories && entry.dirent.isDirectory()) {
        filepath += "/";
      }
      if (!this._settings.objectMode) {
        return filepath;
      }
      return Object.assign(Object.assign({}, entry), { path: filepath });
    }
  };
  exports.default = EntryTransformer;
});
var require_provider = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var path9 = __require("path");
  var deep_1 = require_deep();
  var entry_1 = require_entry();
  var error_1 = require_error2();
  var entry_2 = require_entry2();
  var Provider = class {
    constructor(_settings) {
      this._settings = _settings;
      this.errorFilter = new error_1.default(this._settings);
      this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
      this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
      this.entryTransformer = new entry_2.default(this._settings);
    }
    _getRootDirectory(task) {
      return path9.resolve(this._settings.cwd, task.base);
    }
    _getReaderOptions(task) {
      const basePath = task.base === "." ? "" : task.base;
      return {
        basePath,
        pathSegmentSeparator: "/",
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer()
      };
    }
    _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false
      };
    }
  };
  exports.default = Provider;
});
var require_async5 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = require_stream4();
  var provider_1 = require_provider();
  var ProviderAsync = class extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options2 = this._getReaderOptions(task);
      const entries = [];
      return new Promise((resolve, reject) => {
        const stream = this.api(root, task, options2);
        stream.once("error", reject);
        stream.on("data", (entry) => entries.push(options2.transform(entry)));
        stream.once("end", () => resolve(entries));
      });
    }
    api(root, task, options2) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options2);
      }
      return this._reader.static(task.patterns, options2);
    }
  };
  exports.default = ProviderAsync;
});
var require_stream5 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var stream_1 = __require("stream");
  var stream_2 = require_stream4();
  var provider_1 = require_provider();
  var ProviderStream = class extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_2.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options2 = this._getReaderOptions(task);
      const source = this.api(root, task, options2);
      const destination = new stream_1.Readable({ objectMode: true, read: () => {
      } });
      source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options2.transform(entry))).once("end", () => destination.emit("end"));
      destination.once("close", () => source.destroy());
      return destination;
    }
    api(root, task, options2) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options2);
      }
      return this._reader.static(task.patterns, options2);
    }
  };
  exports.default = ProviderStream;
});
var require_sync5 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var fsStat = require_out();
  var fsWalk = require_out3();
  var reader_1 = require_reader2();
  var ReaderSync = class extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkSync = fsWalk.walkSync;
      this._statSync = fsStat.statSync;
    }
    dynamic(root, options2) {
      return this._walkSync(root, options2);
    }
    static(patterns, options2) {
      const entries = [];
      for (const pattern of patterns) {
        const filepath = this._getFullEntryPath(pattern);
        const entry = this._getEntry(filepath, pattern, options2);
        if (entry === null || !options2.entryFilter(entry)) {
          continue;
        }
        entries.push(entry);
      }
      return entries;
    }
    _getEntry(filepath, pattern, options2) {
      try {
        const stats = this._getStat(filepath);
        return this._makeEntry(stats, pattern);
      } catch (error) {
        if (options2.errorFilter(error)) {
          return null;
        }
        throw error;
      }
    }
    _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings);
    }
  };
  exports.default = ReaderSync;
});
var require_sync6 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var sync_1 = require_sync5();
  var provider_1 = require_provider();
  var ProviderSync = class extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new sync_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options2 = this._getReaderOptions(task);
      const entries = this.api(root, task, options2);
      return entries.map(options2.transform);
    }
    api(root, task, options2) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options2);
      }
      return this._reader.static(task.patterns, options2);
    }
  };
  exports.default = ProviderSync;
});
var require_settings4 = __commonJSMin((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
  var fs9 = __require("fs");
  var os2 = __require("os");
  var CPU_COUNT = Math.max(os2.cpus().length, 1);
  exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: fs9.lstat,
    lstatSync: fs9.lstatSync,
    stat: fs9.stat,
    statSync: fs9.statSync,
    readdir: fs9.readdir,
    readdirSync: fs9.readdirSync
  };
  var Settings = class {
    constructor(_options = {}) {
      this._options = _options;
      this.absolute = this._getValue(this._options.absolute, false);
      this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
      this.braceExpansion = this._getValue(this._options.braceExpansion, true);
      this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
      this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
      this.cwd = this._getValue(this._options.cwd, process.cwd());
      this.deep = this._getValue(this._options.deep, Infinity);
      this.dot = this._getValue(this._options.dot, false);
      this.extglob = this._getValue(this._options.extglob, true);
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
      this.fs = this._getFileSystemMethods(this._options.fs);
      this.globstar = this._getValue(this._options.globstar, true);
      this.ignore = this._getValue(this._options.ignore, []);
      this.markDirectories = this._getValue(this._options.markDirectories, false);
      this.objectMode = this._getValue(this._options.objectMode, false);
      this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
      this.onlyFiles = this._getValue(this._options.onlyFiles, true);
      this.stats = this._getValue(this._options.stats, false);
      this.suppressErrors = this._getValue(this._options.suppressErrors, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
      this.unique = this._getValue(this._options.unique, true);
      if (this.onlyDirectories) {
        this.onlyFiles = false;
      }
      if (this.stats) {
        this.objectMode = true;
      }
    }
    _getValue(option, value) {
      return option === void 0 ? value : option;
    }
    _getFileSystemMethods(methods = {}) {
      return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
    }
  };
  exports.default = Settings;
});
var require_out4 = __commonJSMin((exports, module2) => {
  "use strict";
  var taskManager = require_tasks();
  var async_1 = require_async5();
  var stream_1 = require_stream5();
  var sync_1 = require_sync6();
  var settings_1 = require_settings4();
  var utils = require_utils7();
  async function FastGlob(source, options2) {
    assertPatternsInput(source);
    const works = getWorks(source, async_1.default, options2);
    const result = await Promise.all(works);
    return utils.array.flatten(result);
  }
  (function(FastGlob2) {
    function sync2(source, options2) {
      assertPatternsInput(source);
      const works = getWorks(source, sync_1.default, options2);
      return utils.array.flatten(works);
    }
    FastGlob2.sync = sync2;
    function stream(source, options2) {
      assertPatternsInput(source);
      const works = getWorks(source, stream_1.default, options2);
      return utils.stream.merge(works);
    }
    FastGlob2.stream = stream;
    function generateTasks(source, options2) {
      assertPatternsInput(source);
      const patterns = [].concat(source);
      const settings = new settings_1.default(options2);
      return taskManager.generate(patterns, settings);
    }
    FastGlob2.generateTasks = generateTasks;
    function isDynamicPattern(source, options2) {
      assertPatternsInput(source);
      const settings = new settings_1.default(options2);
      return utils.pattern.isDynamicPattern(source, settings);
    }
    FastGlob2.isDynamicPattern = isDynamicPattern;
    function escapePath(source) {
      assertPatternsInput(source);
      return utils.path.escape(source);
    }
    FastGlob2.escapePath = escapePath;
  })(FastGlob || (FastGlob = {}));
  function getWorks(source, _Provider, options2) {
    const patterns = [].concat(source);
    const settings = new settings_1.default(options2);
    const tasks = taskManager.generate(patterns, settings);
    const provider = new _Provider(settings);
    return tasks.map(provider.read, provider);
  }
  function assertPatternsInput(input) {
    const source = [].concat(input);
    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
    if (!isValidSource) {
      throw new TypeError("Patterns must be a string (non empty) or an array of strings");
    }
  }
  module2.exports = FastGlob;
});
var require_path_type = __commonJSMin((exports) => {
  "use strict";
  var { promisify } = __require("util");
  var fs9 = __require("fs");
  async function isType(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      const stats = await promisify(fs9[fsStatType])(filePath);
      return stats[statsMethodName]();
    } catch (error) {
      if (error.code === "ENOENT") {
        return false;
      }
      throw error;
    }
  }
  function isTypeSync(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      return fs9[fsStatType](filePath)[statsMethodName]();
    } catch (error) {
      if (error.code === "ENOENT") {
        return false;
      }
      throw error;
    }
  }
  exports.isFile = isType.bind(null, "stat", "isFile");
  exports.isDirectory = isType.bind(null, "stat", "isDirectory");
  exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
  exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
  exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
  exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
});
var require_dir_glob = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var pathType = require_path_type();
  var getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
  var getPath = (filepath, cwd) => {
    const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
    return path9.isAbsolute(pth) ? pth : path9.join(cwd, pth);
  };
  var addExtensions = (file, extensions) => {
    if (path9.extname(file)) {
      return `**/${file}`;
    }
    return `**/${file}.${getExtensions(extensions)}`;
  };
  var getGlob = (directory, options2) => {
    if (options2.files && !Array.isArray(options2.files)) {
      throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options2.files}\``);
    }
    if (options2.extensions && !Array.isArray(options2.extensions)) {
      throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options2.extensions}\``);
    }
    if (options2.files && options2.extensions) {
      return options2.files.map((x) => path9.posix.join(directory, addExtensions(x, options2.extensions)));
    }
    if (options2.files) {
      return options2.files.map((x) => path9.posix.join(directory, `**/${x}`));
    }
    if (options2.extensions) {
      return [path9.posix.join(directory, `**/*.${getExtensions(options2.extensions)}`)];
    }
    return [path9.posix.join(directory, "**")];
  };
  module2.exports = async (input, options2) => {
    options2 = {
      cwd: process.cwd(),
      ...options2
    };
    if (typeof options2.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options2.cwd}\``);
    }
    const globs = await Promise.all([].concat(input).map(async (x) => {
      const isDirectory = await pathType.isDirectory(getPath(x, options2.cwd));
      return isDirectory ? getGlob(x, options2) : x;
    }));
    return [].concat.apply([], globs);
  };
  module2.exports.sync = (input, options2) => {
    options2 = {
      cwd: process.cwd(),
      ...options2
    };
    if (typeof options2.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options2.cwd}\``);
    }
    const globs = [].concat(input).map((x) => pathType.isDirectorySync(getPath(x, options2.cwd)) ? getGlob(x, options2) : x);
    return [].concat.apply([], globs);
  };
});
var require_ignore = __commonJSMin((exports, module2) => {
  function makeArray(subject) {
    return Array.isArray(subject) ? subject : [subject];
  }
  var EMPTY = "";
  var SPACE = " ";
  var ESCAPE = "\\";
  var REGEX_TEST_BLANK_LINE = /^\s+$/;
  var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
  var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
  var REGEX_SPLITALL_CRLF = /\r?\n/g;
  var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
  var SLASH = "/";
  var KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
  var define2 = (object, key, value) => Object.defineProperty(object, key, { value });
  var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
  var sanitizeRange = (range) => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY);
  var cleanRangeBackSlash = (slashes) => {
    const { length } = slashes;
    return slashes.slice(0, length - length % 2);
  };
  var REPLACERS = [
    [
      /\\?\s+$/,
      (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
    ],
    [
      /\\\s/g,
      () => SPACE
    ],
    [
      /[\\$.|*+(){^]/g,
      (match) => `\\${match}`
    ],
    [
      /(?!\\)\?/g,
      () => "[^/]"
    ],
    [
      /^\//,
      () => "^"
    ],
    [
      /\//g,
      () => "\\/"
    ],
    [
      /^\^*\\\*\\\*\\\//,
      () => "^(?:.*\\/)?"
    ],
    [
      /^(?=[^^])/,
      function startingReplacer() {
        return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
      }
    ],
    [
      /\\\/\\\*\\\*(?=\\\/|$)/g,
      (_, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
    ],
    [
      /(^|[^\\]+)\\\*(?=.+)/g,
      (_, p1) => `${p1}[^\\/]*`
    ],
    [
      /\\\\\\(?=[$.|*+(){^])/g,
      () => ESCAPE
    ],
    [
      /\\\\/g,
      () => ESCAPE
    ],
    [
      /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
      (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
    ],
    [
      /(?:[^*])$/,
      (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
    ],
    [
      /(\^|\\\/)?\\\*$/,
      (_, p1) => {
        const prefix2 = p1 ? `${p1}[^/]+` : "[^/]*";
        return `${prefix2}(?=$|\\/$)`;
      }
    ]
  ];
  var regexCache = /* @__PURE__ */ Object.create(null);
  var makeRegex = (pattern, negative, ignorecase) => {
    const r = regexCache[pattern];
    if (r) {
      return r;
    }
    const source = REPLACERS.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);
    return regexCache[pattern] = ignorecase ? new RegExp(source, "i") : new RegExp(source);
  };
  var isString = (subject) => typeof subject === "string";
  var checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
  var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
  var IgnoreRule = class {
    constructor(origin, pattern, negative, regex) {
      this.origin = origin;
      this.pattern = pattern;
      this.negative = negative;
      this.regex = regex;
    }
  };
  var createRule = (pattern, ignorecase) => {
    const origin = pattern;
    let negative = false;
    if (pattern.indexOf("!") === 0) {
      negative = true;
      pattern = pattern.substr(1);
    }
    pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
    const regex = makeRegex(pattern, negative, ignorecase);
    return new IgnoreRule(origin, pattern, negative, regex);
  };
  var throwError = (message, Ctor) => {
    throw new Ctor(message);
  };
  var checkPath = (path9, originalPath, doThrow) => {
    if (!isString(path9)) {
      return doThrow(`path must be a string, but got \`${originalPath}\``, TypeError);
    }
    if (!path9) {
      return doThrow(`path must not be empty`, TypeError);
    }
    if (checkPath.isNotRelative(path9)) {
      const r = "`path.relative()`d";
      return doThrow(`path should be a ${r} string, but got "${originalPath}"`, RangeError);
    }
    return true;
  };
  var isNotRelative = (path9) => REGEX_TEST_INVALID_PATH.test(path9);
  checkPath.isNotRelative = isNotRelative;
  checkPath.convert = (p) => p;
  var Ignore = class {
    constructor({
      ignorecase = true
    } = {}) {
      this._rules = [];
      this._ignorecase = ignorecase;
      define2(this, KEY_IGNORE, true);
      this._initCache();
    }
    _initCache() {
      this._ignoreCache = /* @__PURE__ */ Object.create(null);
      this._testCache = /* @__PURE__ */ Object.create(null);
    }
    _addPattern(pattern) {
      if (pattern && pattern[KEY_IGNORE]) {
        this._rules = this._rules.concat(pattern._rules);
        this._added = true;
        return;
      }
      if (checkPattern(pattern)) {
        const rule = createRule(pattern, this._ignorecase);
        this._added = true;
        this._rules.push(rule);
      }
    }
    add(pattern) {
      this._added = false;
      makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);
      if (this._added) {
        this._initCache();
      }
      return this;
    }
    addPattern(pattern) {
      return this.add(pattern);
    }
    _testOne(path9, checkUnignored) {
      let ignored = false;
      let unignored = false;
      this._rules.forEach((rule) => {
        const { negative } = rule;
        if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
          return;
        }
        const matched = rule.regex.test(path9);
        if (matched) {
          ignored = !negative;
          unignored = negative;
        }
      });
      return {
        ignored,
        unignored
      };
    }
    _test(originalPath, cache, checkUnignored, slices) {
      const path9 = originalPath && checkPath.convert(originalPath);
      checkPath(path9, originalPath, throwError);
      return this._t(path9, cache, checkUnignored, slices);
    }
    _t(path9, cache, checkUnignored, slices) {
      if (path9 in cache) {
        return cache[path9];
      }
      if (!slices) {
        slices = path9.split(SLASH);
      }
      slices.pop();
      if (!slices.length) {
        return cache[path9] = this._testOne(path9, checkUnignored);
      }
      const parent = this._t(slices.join(SLASH) + SLASH, cache, checkUnignored, slices);
      return cache[path9] = parent.ignored ? parent : this._testOne(path9, checkUnignored);
    }
    ignores(path9) {
      return this._test(path9, this._ignoreCache, false).ignored;
    }
    createFilter() {
      return (path9) => !this.ignores(path9);
    }
    filter(paths) {
      return makeArray(paths).filter(this.createFilter());
    }
    test(path9) {
      return this._test(path9, this._testCache, true);
    }
  };
  var factory = (options2) => new Ignore(options2);
  var returnFalse = () => false;
  var isPathValid = (path9) => checkPath(path9 && checkPath.convert(path9), path9, returnFalse);
  factory.isPathValid = isPathValid;
  factory.default = factory;
  module2.exports = factory;
  if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
    const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
    checkPath.convert = makePosix;
    const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
    checkPath.isNotRelative = (path9) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path9) || isNotRelative(path9);
  }
});
var require_slash2 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = (path9) => {
    const isExtendedLengthPath = /^\\\\\?\\/.test(path9);
    const hasNonAscii = /[^\u0000-\u0080]+/.test(path9);
    if (isExtendedLengthPath || hasNonAscii) {
      return path9;
    }
    return path9.replace(/\\/g, "/");
  };
});
var require_gitignore = __commonJSMin((exports, module2) => {
  "use strict";
  var { promisify } = __require("util");
  var fs9 = __require("fs");
  var path9 = __require("path");
  var fastGlob = require_out4();
  var gitIgnore = require_ignore();
  var slash = require_slash2();
  var DEFAULT_IGNORE = [
    "**/node_modules/**",
    "**/flow-typed/**",
    "**/coverage/**",
    "**/.git"
  ];
  var readFileP = promisify(fs9.readFile);
  var mapGitIgnorePatternTo = (base) => (ignore) => {
    if (ignore.startsWith("!")) {
      return "!" + path9.posix.join(base, ignore.slice(1));
    }
    return path9.posix.join(base, ignore);
  };
  var parseGitIgnore = (content, options2) => {
    const base = slash(path9.relative(options2.cwd, path9.dirname(options2.fileName)));
    return content.split(/\r?\n/).filter(Boolean).filter((line) => !line.startsWith("#")).map(mapGitIgnorePatternTo(base));
  };
  var reduceIgnore = (files) => {
    const ignores = gitIgnore();
    for (const file of files) {
      ignores.add(parseGitIgnore(file.content, {
        cwd: file.cwd,
        fileName: file.filePath
      }));
    }
    return ignores;
  };
  var ensureAbsolutePathForCwd = (cwd, p) => {
    cwd = slash(cwd);
    if (path9.isAbsolute(p)) {
      if (slash(p).startsWith(cwd)) {
        return p;
      }
      throw new Error(`Path ${p} is not in cwd ${cwd}`);
    }
    return path9.join(cwd, p);
  };
  var getIsIgnoredPredecate = (ignores, cwd) => {
    return (p) => ignores.ignores(slash(path9.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));
  };
  var getFile = async (file, cwd) => {
    const filePath = path9.join(cwd, file);
    const content = await readFileP(filePath, "utf8");
    return {
      cwd,
      filePath,
      content
    };
  };
  var getFileSync = (file, cwd) => {
    const filePath = path9.join(cwd, file);
    const content = fs9.readFileSync(filePath, "utf8");
    return {
      cwd,
      filePath,
      content
    };
  };
  var normalizeOptions = ({
    ignore = [],
    cwd = slash(process.cwd())
  } = {}) => {
    return { ignore, cwd };
  };
  module2.exports = async (options2) => {
    options2 = normalizeOptions(options2);
    const paths = await fastGlob("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options2.ignore),
      cwd: options2.cwd
    });
    const files = await Promise.all(paths.map((file) => getFile(file, options2.cwd)));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options2.cwd);
  };
  module2.exports.sync = (options2) => {
    options2 = normalizeOptions(options2);
    const paths = fastGlob.sync("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options2.ignore),
      cwd: options2.cwd
    });
    const files = paths.map((file) => getFileSync(file, options2.cwd));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options2.cwd);
  };
});
var require_stream_utils = __commonJSMin((exports, module2) => {
  "use strict";
  var { Transform } = __require("stream");
  var ObjectTransform = class extends Transform {
    constructor() {
      super({
        objectMode: true
      });
    }
  };
  var FilterStream = class extends ObjectTransform {
    constructor(filter) {
      super();
      this._filter = filter;
    }
    _transform(data, encoding, callback) {
      if (this._filter(data)) {
        this.push(data);
      }
      callback();
    }
  };
  var UniqueStream = class extends ObjectTransform {
    constructor() {
      super();
      this._pushed = /* @__PURE__ */ new Set();
    }
    _transform(data, encoding, callback) {
      if (!this._pushed.has(data)) {
        this.push(data);
        this._pushed.add(data);
      }
      callback();
    }
  };
  module2.exports = {
    FilterStream,
    UniqueStream
  };
});
var require_globby2 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = __require("fs");
  var arrayUnion = require_array_union();
  var merge2 = require_merge2();
  var fastGlob = require_out4();
  var dirGlob = require_dir_glob();
  var gitignore = require_gitignore();
  var { FilterStream, UniqueStream } = require_stream_utils();
  var DEFAULT_FILTER = () => false;
  var isNegative = (pattern) => pattern[0] === "!";
  var assertPatternsInput = (patterns) => {
    if (!patterns.every((pattern) => typeof pattern === "string")) {
      throw new TypeError("Patterns must be a string or an array of strings");
    }
  };
  var checkCwdOption = (options2 = {}) => {
    if (!options2.cwd) {
      return;
    }
    let stat;
    try {
      stat = fs9.statSync(options2.cwd);
    } catch {
      return;
    }
    if (!stat.isDirectory()) {
      throw new Error("The `cwd` option must be a path to a directory");
    }
  };
  var getPathString = (p) => p.stats instanceof fs9.Stats ? p.path : p;
  var generateGlobTasks = (patterns, taskOptions) => {
    patterns = arrayUnion([].concat(patterns));
    assertPatternsInput(patterns);
    checkCwdOption(taskOptions);
    const globTasks = [];
    taskOptions = {
      ignore: [],
      expandDirectories: true,
      ...taskOptions
    };
    for (const [index, pattern] of patterns.entries()) {
      if (isNegative(pattern)) {
        continue;
      }
      const ignore = patterns.slice(index).filter((pattern2) => isNegative(pattern2)).map((pattern2) => pattern2.slice(1));
      const options2 = {
        ...taskOptions,
        ignore: taskOptions.ignore.concat(ignore)
      };
      globTasks.push({ pattern, options: options2 });
    }
    return globTasks;
  };
  var globDirs = (task, fn) => {
    let options2 = {};
    if (task.options.cwd) {
      options2.cwd = task.options.cwd;
    }
    if (Array.isArray(task.options.expandDirectories)) {
      options2 = {
        ...options2,
        files: task.options.expandDirectories
      };
    } else if (typeof task.options.expandDirectories === "object") {
      options2 = {
        ...options2,
        ...task.options.expandDirectories
      };
    }
    return fn(task.pattern, options2);
  };
  var getPattern = (task, fn) => task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
  var getFilterSync = (options2) => {
    return options2 && options2.gitignore ? gitignore.sync({ cwd: options2.cwd, ignore: options2.ignore }) : DEFAULT_FILTER;
  };
  var globToTask = (task) => (glob) => {
    const { options: options2 } = task;
    if (options2.ignore && Array.isArray(options2.ignore) && options2.expandDirectories) {
      options2.ignore = dirGlob.sync(options2.ignore);
    }
    return {
      pattern: glob,
      options: options2
    };
  };
  module2.exports = async (patterns, options2) => {
    const globTasks = generateGlobTasks(patterns, options2);
    const getFilter = async () => {
      return options2 && options2.gitignore ? gitignore({ cwd: options2.cwd, ignore: options2.ignore }) : DEFAULT_FILTER;
    };
    const getTasks = async () => {
      const tasks2 = await Promise.all(globTasks.map(async (task) => {
        const globs = await getPattern(task, dirGlob);
        return Promise.all(globs.map(globToTask(task)));
      }));
      return arrayUnion(...tasks2);
    };
    const [filter, tasks] = await Promise.all([getFilter(), getTasks()]);
    const paths = await Promise.all(tasks.map((task) => fastGlob(task.pattern, task.options)));
    return arrayUnion(...paths).filter((path_) => !filter(getPathString(path_)));
  };
  module2.exports.sync = (patterns, options2) => {
    const globTasks = generateGlobTasks(patterns, options2);
    const tasks = [];
    for (const task of globTasks) {
      const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
      tasks.push(...newTask);
    }
    const filter = getFilterSync(options2);
    let matches = [];
    for (const task of tasks) {
      matches = arrayUnion(matches, fastGlob.sync(task.pattern, task.options));
    }
    return matches.filter((path_) => !filter(path_));
  };
  module2.exports.stream = (patterns, options2) => {
    const globTasks = generateGlobTasks(patterns, options2);
    const tasks = [];
    for (const task of globTasks) {
      const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
      tasks.push(...newTask);
    }
    const filter = getFilterSync(options2);
    const filterStream = new FilterStream((p) => !filter(p));
    const uniqueStream = new UniqueStream();
    return merge2(tasks.map((task) => fastGlob.stream(task.pattern, task.options))).pipe(filterStream).pipe(uniqueStream);
  };
  module2.exports.generateGlobTasks = generateGlobTasks;
  module2.exports.hasMagic = (patterns, options2) => [].concat(patterns).some((pattern) => fastGlob.isDynamicPattern(pattern, options2));
  module2.exports.gitignore = gitignore;
});
var require_pify = __commonJSMin((exports, module2) => {
  "use strict";
  var processFn = (fn, options2) => function(...args) {
    const P = options2.promiseModule;
    return new P((resolve, reject) => {
      if (options2.multiArgs) {
        args.push((...result) => {
          if (options2.errorFirst) {
            if (result[0]) {
              reject(result);
            } else {
              result.shift();
              resolve(result);
            }
          } else {
            resolve(result);
          }
        });
      } else if (options2.errorFirst) {
        args.push((error, result) => {
          if (error) {
            reject(error);
          } else {
            resolve(result);
          }
        });
      } else {
        args.push(resolve);
      }
      fn.apply(this, args);
    });
  };
  module2.exports = (input, options2) => {
    options2 = Object.assign({
      exclude: [/.+(Sync|Stream)$/],
      errorFirst: true,
      promiseModule: Promise
    }, options2);
    const objType = typeof input;
    if (!(input !== null && (objType === "object" || objType === "function"))) {
      throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
    }
    const filter = (key) => {
      const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
      return options2.include ? options2.include.some(match) : !options2.exclude.some(match);
    };
    let ret;
    if (objType === "function") {
      ret = function(...args) {
        return options2.excludeMain ? input(...args) : processFn(input, options2).apply(this, args);
      };
    } else {
      ret = Object.create(Object.getPrototypeOf(input));
    }
    for (const key in input) {
      const property = input[key];
      ret[key] = typeof property === "function" && filter(key) ? processFn(property, options2) : property;
    }
    return ret;
  };
});
var require_strip_bom = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = (x) => {
    if (typeof x !== "string") {
      throw new TypeError("Expected a string, got " + typeof x);
    }
    if (x.charCodeAt(0) === 65279) {
      return x.slice(1);
    }
    return x;
  };
});
var require_read_yaml_file = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = require_graceful_fs();
  var pify = require_pify();
  var stripBom = require_strip_bom();
  var yaml2 = require_js_yaml3();
  var parse4 = (data) => yaml2.safeLoad(stripBom(data));
  var readYamlFile = (fp) => pify(fs9.readFile)(fp, "utf8").then((data) => parse4(data));
  module2.exports = readYamlFile;
  module2.exports.default = readYamlFile;
  module2.exports.sync = (fp) => parse4(fs9.readFileSync(fp, "utf8"));
});
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var init_asyncToGenerator = __esmMin(() => {
});
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var init_classCallCheck = __esmMin(() => {
});
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
var init_typeof = __esmMin(() => {
});
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var init_assertThisInitialized = __esmMin(() => {
});
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
var init_possibleConstructorReturn = __esmMin(() => {
  init_typeof();
  init_assertThisInitialized();
});
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var init_getPrototypeOf = __esmMin(() => {
});
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
var init_setPrototypeOf = __esmMin(() => {
});
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
var init_inherits = __esmMin(() => {
  init_setPrototypeOf();
});
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
var init_isNativeFunction = __esmMin(() => {
});
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var init_isNativeReflectConstruct = __esmMin(() => {
});
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
var init_construct = __esmMin(() => {
  init_setPrototypeOf();
  init_isNativeReflectConstruct();
});
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var init_wrapNativeSuper = __esmMin(() => {
  init_getPrototypeOf();
  init_setPrototypeOf();
  init_isNativeFunction();
  init_construct();
});
var require_p_try = __commonJSMin((exports, module2) => {
  "use strict";
  var pTry = (fn, ...arguments_) => new Promise((resolve) => {
    resolve(fn(...arguments_));
  });
  module2.exports = pTry;
  module2.exports.default = pTry;
});
var require_p_limit = __commonJSMin((exports, module2) => {
  "use strict";
  var pTry = require_p_try();
  var pLimit = (concurrency) => {
    if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
      return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
    }
    const queue = [];
    let activeCount = 0;
    const next = () => {
      activeCount--;
      if (queue.length > 0) {
        queue.shift()();
      }
    };
    const run = (fn, resolve, ...args) => {
      activeCount++;
      const result = pTry(fn, ...args);
      resolve(result);
      result.then(next, next);
    };
    const enqueue = (fn, resolve, ...args) => {
      if (activeCount < concurrency) {
        run(fn, resolve, ...args);
      } else {
        queue.push(run.bind(null, fn, resolve, ...args));
      }
    };
    const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
    Object.defineProperties(generator, {
      activeCount: {
        get: () => activeCount
      },
      pendingCount: {
        get: () => queue.length
      },
      clearQueue: {
        value: () => {
          queue.length = 0;
        }
      }
    });
    return generator;
  };
  module2.exports = pLimit;
  module2.exports.default = pLimit;
});
var require_p_locate = __commonJSMin((exports, module2) => {
  "use strict";
  var pLimit = require_p_limit();
  var EndError = class extends Error {
    constructor(value) {
      super();
      this.value = value;
    }
  };
  var testElement = async (element, tester) => tester(await element);
  var finder = async (element) => {
    const values = await Promise.all(element);
    if (values[1] === true) {
      throw new EndError(values[0]);
    }
    return false;
  };
  var pLocate = async (iterable, tester, options2) => {
    options2 = {
      concurrency: Infinity,
      preserveOrder: true,
      ...options2
    };
    const limit = pLimit(options2.concurrency);
    const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
    const checkLimit = pLimit(options2.preserveOrder ? 1 : Infinity);
    try {
      await Promise.all(items.map((element) => checkLimit(finder, element)));
    } catch (error) {
      if (error instanceof EndError) {
        return error.value;
      }
      throw error;
    }
  };
  module2.exports = pLocate;
  module2.exports.default = pLocate;
});
var require_locate_path = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var fs9 = __require("fs");
  var { promisify } = __require("util");
  var pLocate = require_p_locate();
  var fsStat = promisify(fs9.stat);
  var fsLStat = promisify(fs9.lstat);
  var typeMappings = {
    directory: "isDirectory",
    file: "isFile"
  };
  function checkType({ type }) {
    if (type in typeMappings) {
      return;
    }
    throw new Error(`Invalid type specified: ${type}`);
  }
  var matchType = (type, stat) => type === void 0 || stat[typeMappings[type]]();
  module2.exports = async (paths, options2) => {
    options2 = {
      cwd: process.cwd(),
      type: "file",
      allowSymlinks: true,
      ...options2
    };
    checkType(options2);
    const statFn = options2.allowSymlinks ? fsStat : fsLStat;
    return pLocate(paths, async (path_) => {
      try {
        const stat = await statFn(path9.resolve(options2.cwd, path_));
        return matchType(options2.type, stat);
      } catch (_) {
        return false;
      }
    }, options2);
  };
  module2.exports.sync = (paths, options2) => {
    options2 = {
      cwd: process.cwd(),
      allowSymlinks: true,
      type: "file",
      ...options2
    };
    checkType(options2);
    const statFn = options2.allowSymlinks ? fs9.statSync : fs9.lstatSync;
    for (const path_ of paths) {
      try {
        const stat = statFn(path9.resolve(options2.cwd, path_));
        if (matchType(options2.type, stat)) {
          return path_;
        }
      } catch (_) {
      }
    }
  };
});
var require_path_exists3 = __commonJSMin((exports, module2) => {
  "use strict";
  var fs9 = __require("fs");
  var { promisify } = __require("util");
  var pAccess = promisify(fs9.access);
  module2.exports = async (path9) => {
    try {
      await pAccess(path9);
      return true;
    } catch (_) {
      return false;
    }
  };
  module2.exports.sync = (path9) => {
    try {
      fs9.accessSync(path9);
      return true;
    } catch (_) {
      return false;
    }
  };
});
var require_find_up = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var locatePath = require_locate_path();
  var pathExists = require_path_exists3();
  var stop = Symbol("findUp.stop");
  module2.exports = async (name2, options2 = {}) => {
    let directory = path9.resolve(options2.cwd || "");
    const { root } = path9.parse(directory);
    const paths = [].concat(name2);
    const runMatcher = async (locateOptions) => {
      if (typeof name2 !== "function") {
        return locatePath(paths, locateOptions);
      }
      const foundPath = await name2(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({ ...options2, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path9.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path9.dirname(directory);
    }
  };
  module2.exports.sync = (name2, options2 = {}) => {
    let directory = path9.resolve(options2.cwd || "");
    const { root } = path9.parse(directory);
    const paths = [].concat(name2);
    const runMatcher = (locateOptions) => {
      if (typeof name2 !== "function") {
        return locatePath.sync(paths, locateOptions);
      }
      const foundPath = name2(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({ ...options2, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path9.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path9.dirname(directory);
    }
  };
  module2.exports.exists = pathExists;
  module2.exports.sync.exists = pathExists.sync;
  module2.exports.stop = stop;
});
var find_root_esm_exports = {};
__export(find_root_esm_exports, {
  NoPkgJsonFound: () => NoPkgJsonFound,
  findRoot: () => findRoot,
  findRootSync: () => findRootSync
});
function hasWorkspacesConfiguredViaPkgJson(_x, _x2) {
  return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaPkgJson() {
  _hasWorkspacesConfiguredViaPkgJson = _asyncToGenerator(/* @__PURE__ */ import_regenerator.default.mark(function _callee(directory, firstPkgJsonDirRef) {
    var pkgJson;
    return import_regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return import_fs_extra.default.readJson(import_path.default.join(directory, "package.json"));
          case 3:
            pkgJson = _context.sent;
            if (firstPkgJsonDirRef.current === void 0) {
              firstPkgJsonDirRef.current = directory;
            }
            if (!(pkgJson.workspaces || pkgJson.bolt)) {
              _context.next = 7;
              break;
            }
            return _context.abrupt("return", directory);
          case 7:
            _context.next = 13;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            if (!(_context.t0.code !== "ENOENT")) {
              _context.next = 13;
              break;
            }
            throw _context.t0;
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  }));
  return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
}
function hasWorkspacesConfiguredViaLerna(_x3) {
  return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaLerna() {
  _hasWorkspacesConfiguredViaLerna = _asyncToGenerator(/* @__PURE__ */ import_regenerator.default.mark(function _callee2(directory) {
    var lernaJson;
    return import_regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return import_fs_extra.default.readJson(import_path.default.join(directory, "lerna.json"));
          case 3:
            lernaJson = _context2.sent;
            if (!(lernaJson.useWorkspaces !== true)) {
              _context2.next = 6;
              break;
            }
            return _context2.abrupt("return", directory);
          case 6:
            _context2.next = 12;
            break;
          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](0);
            if (!(_context2.t0.code !== "ENOENT")) {
              _context2.next = 12;
              break;
            }
            throw _context2.t0;
          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 8]]);
  }));
  return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
}
function hasWorkspacesConfiguredViaPnpm(_x4) {
  return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaPnpm() {
  _hasWorkspacesConfiguredViaPnpm = _asyncToGenerator(/* @__PURE__ */ import_regenerator.default.mark(function _callee3(directory) {
    var pnpmWorkspacesFileExists;
    return import_regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return import_fs_extra.default.exists(import_path.default.join(directory, "pnpm-workspace.yaml"));
          case 2:
            pnpmWorkspacesFileExists = _context3.sent;
            if (!pnpmWorkspacesFileExists) {
              _context3.next = 5;
              break;
            }
            return _context3.abrupt("return", directory);
          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
}
function findRoot(_x5) {
  return _findRoot.apply(this, arguments);
}
function _findRoot() {
  _findRoot = _asyncToGenerator(/* @__PURE__ */ import_regenerator.default.mark(function _callee4(cwd) {
    var firstPkgJsonDirRef, dir;
    return import_regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            firstPkgJsonDirRef = {
              current: void 0
            };
            _context4.next = 3;
            return (0, import_find_up.default)(function(directory) {
              return Promise.all([hasWorkspacesConfiguredViaLerna(directory), hasWorkspacesConfiguredViaPkgJson(directory, firstPkgJsonDirRef), hasWorkspacesConfiguredViaPnpm(directory)]).then(function(x) {
                return x.find(function(dir2) {
                  return dir2;
                });
              });
            }, {
              cwd,
              type: "directory"
            });
          case 3:
            dir = _context4.sent;
            if (!(firstPkgJsonDirRef.current === void 0)) {
              _context4.next = 6;
              break;
            }
            throw new NoPkgJsonFound(cwd);
          case 6:
            if (!(dir === void 0)) {
              _context4.next = 8;
              break;
            }
            return _context4.abrupt("return", firstPkgJsonDirRef.current);
          case 8:
            return _context4.abrupt("return", dir);
          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _findRoot.apply(this, arguments);
}
function hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef) {
  try {
    var pkgJson = import_fs_extra.default.readJsonSync(import_path.default.join(directory, "package.json"));
    if (firstPkgJsonDirRef.current === void 0) {
      firstPkgJsonDirRef.current = directory;
    }
    if (pkgJson.workspaces || pkgJson.bolt) {
      return directory;
    }
  } catch (err) {
    if (err.code !== "ENOENT") {
      throw err;
    }
  }
}
function hasWorkspacesConfiguredViaLernaSync(directory) {
  try {
    var lernaJson = import_fs_extra.default.readJsonSync(import_path.default.join(directory, "lerna.json"));
    if (lernaJson.useWorkspaces !== true) {
      return directory;
    }
  } catch (err) {
    if (err.code !== "ENOENT") {
      throw err;
    }
  }
}
function hasWorkspacesConfiguredViaPnpmSync(directory) {
  var pnpmWorkspacesFileExists = import_fs_extra.default.existsSync(import_path.default.join(directory, "pnpm-workspace.yaml"));
  if (pnpmWorkspacesFileExists) {
    return directory;
  }
}
function findRootSync(cwd) {
  var firstPkgJsonDirRef = {
    current: void 0
  };
  var dir = (0, import_find_up.sync)(function(directory) {
    return [hasWorkspacesConfiguredViaLernaSync(directory), hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef), hasWorkspacesConfiguredViaPnpmSync(directory)].find(function(dir2) {
      return dir2;
    });
  }, {
    cwd,
    type: "directory"
  });
  if (firstPkgJsonDirRef.current === void 0) {
    throw new NoPkgJsonFound(cwd);
  }
  if (dir === void 0) {
    return firstPkgJsonDirRef.current;
  }
  return dir;
}
var import_regenerator, import_find_up, import_fs_extra, NoPkgJsonFound;
var init_find_root_esm = __esmMin(() => {
  import_regenerator = __toESM2(require_regenerator());
  init_asyncToGenerator();
  init_classCallCheck();
  init_possibleConstructorReturn();
  init_getPrototypeOf();
  init_inherits();
  init_wrapNativeSuper();
  import_find_up = __toESM2(require_find_up());
  import_fs_extra = __toESM2(require_lib4());
  NoPkgJsonFound = /* @__PURE__ */ function(_Error) {
    _inherits(NoPkgJsonFound2, _Error);
    function NoPkgJsonFound2(directory) {
      var _this;
      _classCallCheck(this, NoPkgJsonFound2);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(NoPkgJsonFound2).call(this, "No package.json could be found upwards from the directory ".concat(directory)));
      _this.directory = directory;
      return _this;
    }
    return NoPkgJsonFound2;
  }(_wrapNativeSuper(Error));
});
var require_get_packages_cjs_prod = __commonJSMin((exports) => {
  "use strict";
  function _interopDefault(ex) {
    return ex && typeof ex == "object" && "default" in ex ? ex.default : ex;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _regeneratorRuntime2 = _interopDefault(require_regenerator());
  var _asyncToGenerator2 = _interopDefault(require_asyncToGenerator());
  var _classCallCheck2 = _interopDefault(require_classCallCheck());
  var _possibleConstructorReturn2 = _interopDefault(require_possibleConstructorReturn());
  var _getPrototypeOf2 = _interopDefault(require_getPrototypeOf());
  var _inherits2 = _interopDefault(require_inherits());
  var _wrapNativeSuper2 = _interopDefault(require_wrapNativeSuper());
  var fs9 = _interopDefault(require_lib4());
  var path9 = _interopDefault(__require("path"));
  var globby = require_globby2();
  var globby__default = _interopDefault(globby);
  var readYamlFile = require_read_yaml_file();
  var readYamlFile__default = _interopDefault(readYamlFile);
  var findRoot2 = (init_find_root_esm(), __toCommonJS(find_root_esm_exports));
  var PackageJsonMissingNameError = function(_Error) {
    function PackageJsonMissingNameError2(directories) {
      var _this;
      return _classCallCheck2(this, PackageJsonMissingNameError2), (_this = _possibleConstructorReturn2(this, _getPrototypeOf2(PackageJsonMissingNameError2).call(this, 'The following package.jsons are missing the "name" field:\n'.concat(directories.join("\n"))))).directories = directories, _this;
    }
    return _inherits2(PackageJsonMissingNameError2, _Error), PackageJsonMissingNameError2;
  }(_wrapNativeSuper2(Error));
  function getPackages3(_x) {
    return _getPackages.apply(this, arguments);
  }
  function _getPackages() {
    return (_getPackages = _asyncToGenerator2(_regeneratorRuntime2.mark(function _callee(dir) {
      var cwd, pkg, tool, manifest, lernaJson, root, relativeDirectories, directories, pkgJsonsMissingNameField, results;
      return _regeneratorRuntime2.wrap(function(_context) {
        for (; ; )
          switch (_context.prev = _context.next) {
            case 0:
              return _context.next = 2, findRoot2.findRoot(dir);
            case 2:
              return cwd = _context.sent, _context.next = 5, fs9.readJson(path9.join(cwd, "package.json"));
            case 5:
              if (!(pkg = _context.sent).workspaces) {
                _context.next = 10;
                break;
              }
              Array.isArray(pkg.workspaces) ? tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces
              } : pkg.workspaces.packages && (tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces.packages
              }), _context.next = 37;
              break;
            case 10:
              if (!pkg.bolt || !pkg.bolt.workspaces) {
                _context.next = 14;
                break;
              }
              tool = {
                type: "bolt",
                packageGlobs: pkg.bolt.workspaces
              }, _context.next = 37;
              break;
            case 14:
              return _context.prev = 14, _context.next = 17, readYamlFile__default(path9.join(cwd, "pnpm-workspace.yaml"));
            case 17:
              (manifest = _context.sent) && manifest.packages && (tool = {
                type: "pnpm",
                packageGlobs: manifest.packages
              }), _context.next = 25;
              break;
            case 21:
              if (_context.prev = 21, _context.t0 = _context.catch(14), _context.t0.code === "ENOENT") {
                _context.next = 25;
                break;
              }
              throw _context.t0;
            case 25:
              if (tool) {
                _context.next = 37;
                break;
              }
              return _context.prev = 26, _context.next = 29, fs9.readJson(path9.join(cwd, "lerna.json"));
            case 29:
              (lernaJson = _context.sent) && (tool = {
                type: "lerna",
                packageGlobs: lernaJson.packages || ["packages/*"]
              }), _context.next = 37;
              break;
            case 33:
              if (_context.prev = 33, _context.t1 = _context.catch(26), _context.t1.code === "ENOENT") {
                _context.next = 37;
                break;
              }
              throw _context.t1;
            case 37:
              if (tool) {
                _context.next = 42;
                break;
              }
              if (root = {
                dir: cwd,
                packageJson: pkg
              }, pkg.name) {
                _context.next = 41;
                break;
              }
              throw new PackageJsonMissingNameError(["package.json"]);
            case 41:
              return _context.abrupt("return", {
                tool: "root",
                root,
                packages: [root]
              });
            case 42:
              return _context.next = 44, globby__default(tool.packageGlobs, {
                cwd,
                onlyDirectories: true,
                expandDirectories: false,
                ignore: ["**/node_modules"]
              });
            case 44:
              return relativeDirectories = _context.sent, directories = relativeDirectories.map(function(p) {
                return path9.resolve(cwd, p);
              }), pkgJsonsMissingNameField = [], _context.next = 49, Promise.all(directories.sort().map(function(dir2) {
                return fs9.readJson(path9.join(dir2, "package.json")).then(function(packageJson2) {
                  return packageJson2.name || pkgJsonsMissingNameField.push(path9.relative(cwd, path9.join(dir2, "package.json"))), {
                    packageJson: packageJson2,
                    dir: dir2
                  };
                }).catch(function(err) {
                  if (err.code === "ENOENT")
                    return null;
                  throw err;
                });
              }));
            case 49:
              if (_context.t2 = function(x) {
                return x;
              }, results = _context.sent.filter(_context.t2), pkgJsonsMissingNameField.length === 0) {
                _context.next = 54;
                break;
              }
              throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
            case 54:
              return _context.abrupt("return", {
                tool: tool.type,
                root: {
                  dir: cwd,
                  packageJson: pkg
                },
                packages: results
              });
            case 55:
            case "end":
              return _context.stop();
          }
      }, _callee, null, [[14, 21], [26, 33]]);
    }))).apply(this, arguments);
  }
  function getPackagesSync(dir) {
    var tool, cwd = findRoot2.findRootSync(dir), pkg = fs9.readJsonSync(path9.join(cwd, "package.json"));
    if (pkg.workspaces)
      Array.isArray(pkg.workspaces) ? tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces
      } : pkg.workspaces.packages && (tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces.packages
      });
    else if (pkg.bolt && pkg.bolt.workspaces)
      tool = {
        type: "bolt",
        packageGlobs: pkg.bolt.workspaces
      };
    else {
      try {
        var manifest = readYamlFile.sync(path9.join(cwd, "pnpm-workspace.yaml"));
        manifest && manifest.packages && (tool = {
          type: "pnpm",
          packageGlobs: manifest.packages
        });
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
      if (!tool)
        try {
          var lernaJson = fs9.readJsonSync(path9.join(cwd, "lerna.json"));
          lernaJson && (tool = {
            type: "lerna",
            packageGlobs: lernaJson.packages || ["packages/*"]
          });
        } catch (err) {
          if (err.code !== "ENOENT")
            throw err;
        }
    }
    if (!tool) {
      var root = {
        dir: cwd,
        packageJson: pkg
      };
      if (!pkg.name)
        throw new PackageJsonMissingNameError(["package.json"]);
      return {
        tool: "root",
        root,
        packages: [root]
      };
    }
    var directories = globby.sync(tool.packageGlobs, {
      cwd,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    }).map(function(p) {
      return path9.resolve(cwd, p);
    }), pkgJsonsMissingNameField = [], results = directories.sort().map(function(dir2) {
      try {
        var packageJson2 = fs9.readJsonSync(path9.join(dir2, "package.json"));
        return packageJson2.name || pkgJsonsMissingNameField.push(path9.relative(cwd, path9.join(dir2, "package.json"))), {
          packageJson: packageJson2,
          dir: dir2
        };
      } catch (err) {
        if (err.code === "ENOENT")
          return null;
        throw err;
      }
    }).filter(function(x) {
      return x;
    });
    if (pkgJsonsMissingNameField.length !== 0)
      throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    return {
      tool: tool.type,
      root: {
        dir: cwd,
        packageJson: pkg
      },
      packages: results
    };
  }
  exports.PackageJsonMissingNameError = PackageJsonMissingNameError, exports.getPackages = getPackages3, exports.getPackagesSync = getPackagesSync;
});
var require_get_packages_cjs = __commonJSMin((exports, module2) => {
  "use strict";
  if (true) {
    module2.exports = require_get_packages_cjs_prod();
  } else {
    module2.exports = null;
  }
});
var require_bld = __commonJSMin((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  var ExtendableError2 = function(_super) {
    __extends(ExtendableError3, _super);
    function ExtendableError3(message) {
      var _newTarget = this.constructor;
      if (message === void 0) {
        message = "";
      }
      var _this = _super.call(this, message) || this;
      _this.message = message;
      Object.setPrototypeOf(_this, _newTarget.prototype);
      delete _this.stack;
      _this.name = _newTarget.name;
      _this._error = new Error();
      return _this;
    }
    Object.defineProperty(ExtendableError3.prototype, "stack", {
      get: function() {
        if (this._stack) {
          return this._stack;
        }
        var prototype = Object.getPrototypeOf(this);
        var depth = 1;
        loop:
          while (prototype) {
            switch (prototype) {
              case ExtendableError3.prototype:
                break loop;
              case Object.prototype:
                depth = 1;
                break loop;
              default:
                depth++;
                break;
            }
            prototype = Object.getPrototypeOf(prototype);
          }
        var stackLines = (this._error.stack || "").match(/.+/g) || [];
        var nameLine = this.name;
        if (this.message) {
          nameLine += ": " + this.message;
        }
        stackLines.splice(0, depth + 1, nameLine);
        return this._stack = stackLines.join("\n");
      },
      enumerable: true,
      configurable: true
    });
    return ExtendableError3;
  }(Error);
  exports.ExtendableError = ExtendableError2;
  exports.default = ExtendableError2;
});
var require_is_windows = __commonJSMin((exports, module2) => {
  (function(factory) {
    if (exports && typeof exports === "object" && typeof module2 !== "undefined") {
      module2.exports = factory();
    } else if (typeof define === "function" && define.amd) {
      define([], factory);
    } else if (typeof window !== "undefined") {
      window.isWindows = factory();
    } else if (typeof global !== "undefined") {
      global.isWindows = factory();
    } else if (typeof self !== "undefined") {
      self.isWindows = factory();
    } else {
      this.isWindows = factory();
    }
  })(function() {
    "use strict";
    return function isWindows() {
      return process && (process.platform === "win32" || /^(msys|cygwin)$/.test(process.env.OSTYPE));
    };
  });
});
var require_better_path_resolve = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var isWindows = require_is_windows();
  module2.exports = isWindows() ? winResolve : path9.resolve;
  function winResolve(p) {
    if (arguments.length === 0)
      return path9.resolve();
    if (typeof p !== "string") {
      return path9.resolve(p);
    }
    if (p[1] === ":") {
      const cc = p[0].charCodeAt();
      if (cc < 65 || cc > 90) {
        p = `${p[0].toUpperCase()}${p.substr(1)}`;
      }
    }
    if (p.endsWith(":")) {
      return p;
    }
    return path9.resolve(p);
  }
});
var require_is_subdir = __commonJSMin((exports, module2) => {
  "use strict";
  var betterPathResolve = require_better_path_resolve();
  var path9 = __require("path");
  function isSubdir2(parentDir, subdir) {
    const rParent = `${betterPathResolve(parentDir)}${path9.sep}`;
    const rDir = `${betterPathResolve(subdir)}${path9.sep}`;
    return rDir.startsWith(rParent);
  }
  isSubdir2.strict = function isSubdirStrict(parentDir, subdir) {
    const rParent = `${betterPathResolve(parentDir)}${path9.sep}`;
    const rDir = `${betterPathResolve(subdir)}${path9.sep}`;
    return rDir !== rParent && rDir.startsWith(rParent);
  };
  module2.exports = isSubdir2;
});
var require_escape_string_regexp = __commonJSMin((exports, module2) => {
  "use strict";
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  module2.exports = function(str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
});
var require_color_name = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
});
var require_conversions = __commonJSMin((exports, module2) => {
  var cssKeywords = require_color_name();
  var reverseKeywords = {};
  for (key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }
  var key;
  var convert2 = module2.exports = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  for (model in convert2) {
    if (convert2.hasOwnProperty(model)) {
      if (!("channels" in convert2[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert2[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert2[model].labels.length !== convert2[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      channels = convert2[model].channels;
      labels = convert2[model].labels;
      delete convert2[model].channels;
      delete convert2[model].labels;
      Object.defineProperty(convert2[model], "channels", { value: channels });
      Object.defineProperty(convert2[model], "labels", { value: labels });
    }
  }
  var channels;
  var labels;
  var model;
  convert2.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert2.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert2.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert2.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert2.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert2.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert2.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert2.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert2.rgb.lab = function(rgb) {
    var xyz = convert2.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert2.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert2.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert2.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert2.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert2.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert2.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert2.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert2.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert2.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert2.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert2.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert2.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert2.hsv.ansi16 = function(args) {
    return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
  };
  convert2.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert2.ansi16.rgb = function(args) {
    var color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert2.ansi256.rgb = function(args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert2.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert2.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert2.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert2.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2 * s * l;
    } else {
      c = 2 * s * (1 - l);
    }
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert2.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert2.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert2.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    var f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert2.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c) + 0.5 * c;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert2.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert2.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert2.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert2.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert2.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert2.gray.hsl = convert2.gray.hsv = function(args) {
    return [0, 0, args[0]];
  };
  convert2.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert2.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert2.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert2.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert2.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
});
var require_route = __commonJSMin((exports, module2) => {
  var conversions = require_conversions();
  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path9 = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path9.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path9;
    return fn;
  }
  module2.exports = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
});
var require_color_convert = __commonJSMin((exports, module2) => {
  var conversions = require_conversions();
  var route = require_route();
  var convert2 = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function(args) {
      if (args === void 0 || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn(args);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert2[fromModel] = {};
    Object.defineProperty(convert2[fromModel], "channels", { value: conversions[fromModel].channels });
    Object.defineProperty(convert2[fromModel], "labels", { value: conversions[fromModel].labels });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
      var fn = routes[toModel];
      convert2[fromModel][toModel] = wrapRounded(fn);
      convert2[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module2.exports = convert2;
});
var require_ansi_styles = __commonJSMin((exports, module2) => {
  "use strict";
  var colorConvert = require_color_convert();
  var wrapAnsi16 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `\x1B[${code + offset}m`;
  };
  var wrapAnsi256 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `\x1B[${38 + offset};5;${code}m`;
  };
  var wrapAnsi16m = (fn, offset) => function() {
    const rgb = fn.apply(colorConvert, arguments);
    return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  function assembleStyles() {
    const codes = /* @__PURE__ */ new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.grey = styles.color.gray;
    for (const groupName of Object.keys(styles)) {
      const group = styles[groupName];
      for (const styleName of Object.keys(group)) {
        const style = group[styleName];
        styles[styleName] = {
          open: `\x1B[${style[0]}m`,
          close: `\x1B[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
    }
    const ansi2ansi = (n) => n;
    const rgb2rgb = (r, g, b) => [r, g, b];
    styles.color.close = "\x1B[39m";
    styles.bgColor.close = "\x1B[49m";
    styles.color.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 0)
    };
    styles.color.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    styles.color.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    styles.bgColor.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 10)
    };
    styles.bgColor.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    styles.bgColor.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let key of Object.keys(colorConvert)) {
      if (typeof colorConvert[key] !== "object") {
        continue;
      }
      const suite = colorConvert[key];
      if (key === "ansi16") {
        key = "ansi";
      }
      if ("ansi16" in suite) {
        styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
        styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
      }
      if ("ansi256" in suite) {
        styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
        styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
      }
      if ("rgb" in suite) {
        styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
        styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
      }
    }
    return styles;
  }
  Object.defineProperty(module2, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});
var require_browser = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = {
    stdout: false,
    stderr: false
  };
});
var require_templates = __commonJSMin((exports, module2) => {
  "use strict";
  var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  var ESCAPES = /* @__PURE__ */ new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", "\x1B"],
    ["a", "\x07"]
  ]);
  function unescape(c) {
    if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name2, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name2 = matches[1];
      if (matches[2]) {
        const args = parseArguments(name2, matches[2]);
        results.push([name2].concat(args));
      } else {
        results.push([name2]);
      }
    }
    return results;
  }
  function buildStyle(chalk4, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk4;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  module2.exports = (chalk4, tmp) => {
    const styles = [];
    const chunks = [];
    let chunk = [];
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? str : buildStyle(chalk4, styles)(str));
        styles.push({ inverse, styles: parseStyle(style) });
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk4, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
});
var require_chalk2 = __commonJSMin((exports, module2) => {
  "use strict";
  var escapeStringRegexp = require_escape_string_regexp();
  var ansiStyles = require_ansi_styles();
  var stdoutColor = require_browser().stdout;
  var template = require_templates();
  var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
  var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
  var skipModels = /* @__PURE__ */ new Set(["gray"]);
  var styles = /* @__PURE__ */ Object.create(null);
  function applyOptions(obj, options2) {
    options2 = options2 || {};
    const scLevel = stdoutColor ? stdoutColor.level : 0;
    obj.level = options2.level === void 0 ? scLevel : options2.level;
    obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
  }
  function Chalk(options2) {
    if (!this || !(this instanceof Chalk) || this.template) {
      const chalk4 = {};
      applyOptions(chalk4, options2);
      chalk4.template = function() {
        const args = [].slice.call(arguments);
        return chalkTag.apply(null, [chalk4.template].concat(args));
      };
      Object.setPrototypeOf(chalk4, Chalk.prototype);
      Object.setPrototypeOf(chalk4.template, chalk4);
      chalk4.template.constructor = Chalk;
      return chalk4.template;
    }
    applyOptions(this, options2);
  }
  if (isSimpleWindowsTerm) {
    ansiStyles.blue.open = "\x1B[94m";
  }
  for (const key of Object.keys(ansiStyles)) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
    styles[key] = {
      get() {
        const codes = ansiStyles[key];
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
      }
    };
  }
  styles.visible = {
    get() {
      return build.call(this, this._styles || [], true, "visible");
    }
  };
  ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
  for (const model of Object.keys(ansiStyles.color.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    styles[model] = {
      get() {
        const level = this.level;
        return function() {
          const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.color.close,
            closeRe: ansiStyles.color.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
  for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const level = this.level;
        return function() {
          const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.bgColor.close,
            closeRe: ansiStyles.bgColor.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  var proto = Object.defineProperties(() => {
  }, styles);
  function build(_styles, _empty, key) {
    const builder = function() {
      return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder._empty = _empty;
    const self2 = this;
    Object.defineProperty(builder, "level", {
      enumerable: true,
      get() {
        return self2.level;
      },
      set(level) {
        self2.level = level;
      }
    });
    Object.defineProperty(builder, "enabled", {
      enumerable: true,
      get() {
        return self2.enabled;
      },
      set(enabled) {
        self2.enabled = enabled;
      }
    });
    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
    builder.__proto__ = proto;
    return builder;
  }
  function applyStyle() {
    const args = arguments;
    const argsLen = args.length;
    let str = String(arguments[0]);
    if (argsLen === 0) {
      return "";
    }
    if (argsLen > 1) {
      for (let a = 1; a < argsLen; a++) {
        str += " " + args[a];
      }
    }
    if (!this.enabled || this.level <= 0 || !str) {
      return this._empty ? "" : str;
    }
    const originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && this.hasGrey) {
      ansiStyles.dim.open = "";
    }
    for (const code of this._styles.slice().reverse()) {
      str = code.open + str.replace(code.closeRe, code.open) + code.close;
      str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
    }
    ansiStyles.dim.open = originalDim;
    return str;
  }
  function chalkTag(chalk4, strings) {
    if (!Array.isArray(strings)) {
      return [].slice.call(arguments, 1).join(" ");
    }
    const args = [].slice.call(arguments, 2);
    const parts = [strings.raw[0]];
    for (let i = 1; i < strings.length; i++) {
      parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
      parts.push(String(strings.raw[i]));
    }
    return template(chalk4, parts.join(""));
  }
  Object.defineProperties(Chalk.prototype, styles);
  module2.exports = Chalk();
  module2.exports.supportsColor = stdoutColor;
  module2.exports.default = module2.exports;
});
var require_p_map = __commonJSMin((exports, module2) => {
  "use strict";
  var pMap = (iterable, mapper, options2) => new Promise((resolve, reject) => {
    options2 = Object.assign({
      concurrency: Infinity
    }, options2);
    if (typeof mapper !== "function") {
      throw new TypeError("Mapper function is required");
    }
    const { concurrency } = options2;
    if (!(typeof concurrency === "number" && concurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${concurrency}\` (${typeof concurrency})`);
    }
    const ret = [];
    const iterator2 = iterable[Symbol.iterator]();
    let isRejected = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;
    const next = () => {
      if (isRejected) {
        return;
      }
      const nextItem = iterator2.next();
      const i = currentIndex;
      currentIndex++;
      if (nextItem.done) {
        isIterableDone = true;
        if (resolvingCount === 0) {
          resolve(ret);
        }
        return;
      }
      resolvingCount++;
      Promise.resolve(nextItem.value).then((element) => mapper(element, i)).then((value) => {
        ret[i] = value;
        resolvingCount--;
        next();
      }, (error) => {
        isRejected = true;
        reject(error);
      });
    };
    for (let i = 0; i < concurrency; i++) {
      next();
      if (isIterableDone) {
        break;
      }
    }
  });
  module2.exports = pMap;
  module2.exports.default = pMap;
});
var require_p_filter = __commonJSMin((exports, module2) => {
  "use strict";
  var pMap = require_p_map();
  var pFilter2 = async (iterable, filterer, options2) => {
    const values = await pMap(iterable, (element, index) => Promise.all([filterer(element, index), element]), options2);
    return values.filter((value) => Boolean(value[0])).map((value) => value[1]);
  };
  module2.exports = pFilter2;
  module2.exports.default = pFilter2;
});
var require_get_packages_cjs_prod2 = __commonJSMin((exports) => {
  "use strict";
  function _interopDefault(ex) {
    return ex && typeof ex == "object" && "default" in ex ? ex.default : ex;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _regeneratorRuntime2 = _interopDefault(require_regenerator());
  var _asyncToGenerator2 = _interopDefault(require_asyncToGenerator());
  var _classCallCheck2 = _interopDefault(require_classCallCheck());
  var _possibleConstructorReturn2 = _interopDefault(require_possibleConstructorReturn());
  var _getPrototypeOf2 = _interopDefault(require_getPrototypeOf());
  var _inherits2 = _interopDefault(require_inherits());
  var _wrapNativeSuper2 = _interopDefault(require_wrapNativeSuper());
  var fs9 = _interopDefault(require_lib4());
  var path9 = _interopDefault(__require("path"));
  var globby = require_globby2();
  var globby__default = _interopDefault(globby);
  var readYamlFile = require_read_yaml_file();
  var readYamlFile__default = _interopDefault(readYamlFile);
  var findRoot2 = (init_find_root_esm(), __toCommonJS(find_root_esm_exports));
  var PackageJsonMissingNameError = function(_Error) {
    function PackageJsonMissingNameError2(directories) {
      var _this;
      return _classCallCheck2(this, PackageJsonMissingNameError2), (_this = _possibleConstructorReturn2(this, _getPrototypeOf2(PackageJsonMissingNameError2).call(this, 'The following package.jsons are missing the "name" field:\n'.concat(directories.join("\n"))))).directories = directories, _this;
    }
    return _inherits2(PackageJsonMissingNameError2, _Error), PackageJsonMissingNameError2;
  }(_wrapNativeSuper2(Error));
  function getPackages3(_x) {
    return _getPackages.apply(this, arguments);
  }
  function _getPackages() {
    return (_getPackages = _asyncToGenerator2(_regeneratorRuntime2.mark(function _callee(dir) {
      var cwd, pkg, tool, manifest, lernaJson, root, directories, pkgJsonsMissingNameField, results;
      return _regeneratorRuntime2.wrap(function(_context) {
        for (; ; )
          switch (_context.prev = _context.next) {
            case 0:
              return _context.next = 2, findRoot2.findRoot(dir);
            case 2:
              return cwd = _context.sent, _context.next = 5, fs9.readJson(path9.join(cwd, "package.json"));
            case 5:
              if (!(pkg = _context.sent).workspaces) {
                _context.next = 10;
                break;
              }
              Array.isArray(pkg.workspaces) ? tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces
              } : pkg.workspaces.packages && (tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces.packages
              }), _context.next = 37;
              break;
            case 10:
              if (!pkg.bolt || !pkg.bolt.workspaces) {
                _context.next = 14;
                break;
              }
              tool = {
                type: "bolt",
                packageGlobs: pkg.bolt.workspaces
              }, _context.next = 37;
              break;
            case 14:
              return _context.prev = 14, _context.next = 17, readYamlFile__default(path9.join(cwd, "pnpm-workspace.yaml"));
            case 17:
              (manifest = _context.sent) && manifest.packages && (tool = {
                type: "pnpm",
                packageGlobs: manifest.packages
              }), _context.next = 25;
              break;
            case 21:
              if (_context.prev = 21, _context.t0 = _context.catch(14), _context.t0.code === "ENOENT") {
                _context.next = 25;
                break;
              }
              throw _context.t0;
            case 25:
              if (tool) {
                _context.next = 37;
                break;
              }
              return _context.prev = 26, _context.next = 29, fs9.readJson(path9.join(cwd, "lerna.json"));
            case 29:
              (lernaJson = _context.sent) && (tool = {
                type: "lerna",
                packageGlobs: lernaJson.packages || ["packages/*"]
              }), _context.next = 37;
              break;
            case 33:
              if (_context.prev = 33, _context.t1 = _context.catch(26), _context.t1.code === "ENOENT") {
                _context.next = 37;
                break;
              }
              throw _context.t1;
            case 37:
              if (tool) {
                _context.next = 42;
                break;
              }
              if (root = {
                dir: cwd,
                packageJson: pkg
              }, pkg.name) {
                _context.next = 41;
                break;
              }
              throw new PackageJsonMissingNameError(["package.json"]);
            case 41:
              return _context.abrupt("return", {
                tool: "root",
                root,
                packages: [root]
              });
            case 42:
              return _context.next = 44, globby__default(tool.packageGlobs, {
                cwd,
                onlyDirectories: true,
                absolute: true,
                expandDirectories: false,
                ignore: ["**/node_modules"]
              });
            case 44:
              return directories = _context.sent, pkgJsonsMissingNameField = [], _context.next = 48, Promise.all(directories.sort().map(function(dir2) {
                return fs9.readJson(path9.join(dir2, "package.json")).then(function(packageJson2) {
                  return packageJson2.name || pkgJsonsMissingNameField.push(path9.relative(cwd, path9.join(dir2, "package.json"))), {
                    packageJson: packageJson2,
                    dir: dir2
                  };
                }).catch(function(err) {
                  if (err.code === "ENOENT")
                    return null;
                  throw err;
                });
              }));
            case 48:
              if (_context.t2 = function(x) {
                return x;
              }, results = _context.sent.filter(_context.t2), pkgJsonsMissingNameField.length === 0) {
                _context.next = 53;
                break;
              }
              throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
            case 53:
              return _context.abrupt("return", {
                tool: tool.type,
                root: {
                  dir: cwd,
                  packageJson: pkg
                },
                packages: results
              });
            case 54:
            case "end":
              return _context.stop();
          }
      }, _callee, null, [[14, 21], [26, 33]]);
    }))).apply(this, arguments);
  }
  function getPackagesSync(dir) {
    var tool, cwd = findRoot2.findRootSync(dir), pkg = fs9.readJsonSync(path9.join(cwd, "package.json"));
    if (pkg.workspaces)
      Array.isArray(pkg.workspaces) ? tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces
      } : pkg.workspaces.packages && (tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces.packages
      });
    else if (pkg.bolt && pkg.bolt.workspaces)
      tool = {
        type: "bolt",
        packageGlobs: pkg.bolt.workspaces
      };
    else {
      try {
        var manifest = readYamlFile.sync(path9.join(cwd, "pnpm-workspace.yaml"));
        manifest && manifest.packages && (tool = {
          type: "pnpm",
          packageGlobs: manifest.packages
        });
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
      if (!tool)
        try {
          var lernaJson = fs9.readJsonSync(path9.join(cwd, "lerna.json"));
          lernaJson && (tool = {
            type: "lerna",
            packageGlobs: lernaJson.packages || ["packages/*"]
          });
        } catch (err) {
          if (err.code !== "ENOENT")
            throw err;
        }
    }
    if (!tool) {
      var root = {
        dir: cwd,
        packageJson: pkg
      };
      if (!pkg.name)
        throw new PackageJsonMissingNameError(["package.json"]);
      return {
        tool: "root",
        root,
        packages: [root]
      };
    }
    var directories = globby.sync(tool.packageGlobs, {
      cwd,
      onlyDirectories: true,
      absolute: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    }), pkgJsonsMissingNameField = [], results = directories.sort().map(function(dir2) {
      try {
        var packageJson2 = fs9.readJsonSync(path9.join(dir2, "package.json"));
        return packageJson2.name || pkgJsonsMissingNameField.push(path9.relative(cwd, path9.join(dir2, "package.json"))), {
          packageJson: packageJson2,
          dir: dir2
        };
      } catch (err) {
        if (err.code === "ENOENT")
          return null;
        throw err;
      }
    }).filter(function(x) {
      return x;
    });
    if (pkgJsonsMissingNameField.length !== 0)
      throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    return {
      tool: tool.type,
      root: {
        dir: cwd,
        packageJson: pkg
      },
      packages: results
    };
  }
  exports.PackageJsonMissingNameError = PackageJsonMissingNameError, exports.getPackages = getPackages3, exports.getPackagesSync = getPackagesSync;
});
var require_get_packages_cjs2 = __commonJSMin((exports, module2) => {
  "use strict";
  if (true) {
    module2.exports = require_get_packages_cjs_prod2();
  } else {
    module2.exports = null;
  }
});
var require_constants5 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var WIN_SLASH = "\\\\/";
  var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  var DOT_LITERAL = "\\.";
  var PLUS_LITERAL = "\\+";
  var QMARK_LITERAL = "\\?";
  var SLASH_LITERAL = "\\/";
  var ONE_CHAR = "(?=.)";
  var QMARK = "[^/]";
  var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  var NO_DOT = `(?!${DOT_LITERAL})`;
  var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  var STAR = `${QMARK}*?`;
  var POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  var WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  var POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  module2.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path9.sep,
    extglobChars(chars) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" }
      };
    },
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
});
var require_utils9 = __commonJSMin((exports) => {
  "use strict";
  var path9 = __require("path");
  var win32 = process.platform === "win32";
  var {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = require_constants5();
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
  exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options2) => {
    if (options2 && typeof options2.windows === "boolean") {
      return options2.windows;
    }
    return win32 === true || path9.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports.wrapOutput = (input, state = {}, options2 = {}) => {
    const prepend = options2.contains ? "" : "^";
    const append = options2.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
});
var require_scan2 = __commonJSMin((exports, module2) => {
  "use strict";
  var utils = require_utils9();
  var {
    CHAR_ASTERISK,
    CHAR_AT,
    CHAR_BACKWARD_SLASH,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_EXCLAMATION_MARK,
    CHAR_FORWARD_SLASH,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_LEFT_PARENTHESES,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_PLUS,
    CHAR_QUESTION_MARK,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_RIGHT_PARENTHESES,
    CHAR_RIGHT_SQUARE_BRACKET
  } = require_constants5();
  var isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  var depth = (token) => {
    if (token.isPrefix !== true) {
      token.depth = token.isGlobstar ? Infinity : 1;
    }
  };
  var scan = (input, options2) => {
    const opts = options2 || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = { value: "", depth: 0, isGlob: false };
    const eos = () => index >= length;
    const peek = () => str.charCodeAt(index + 1);
    const advance = () => {
      prev = code;
      return str.charCodeAt(++index);
    };
    while (index < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
        braces++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE) {
            braces--;
            if (braces === 0) {
              braceEscaped = false;
              isBrace = token.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index);
        tokens.push(token);
        token = { value: "", depth: 0, isGlob: false };
        if (finished === true)
          continue;
        if (prev === CHAR_DOT && index === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          isExtglob = token.isExtglob = true;
          finished = true;
          if (code === CHAR_EXCLAMATION_MARK && index === start) {
            negatedExtglob = true;
          }
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK) {
        if (prev === CHAR_ASTERISK)
          isGlobstar = token.isGlobstar = true;
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            isBracket = token.isBracket = true;
            isGlob = token.isGlob = true;
            finished = true;
            break;
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
        negated = token.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base = str;
    let prefix2 = "";
    let glob = "";
    if (start > 0) {
      prefix2 = str.slice(0, start);
      str = str.slice(start);
      lastIndex -= start;
    }
    if (base && isGlob === true && lastIndex > 0) {
      base = str.slice(0, lastIndex);
      glob = str.slice(lastIndex);
    } else if (isGlob === true) {
      base = "";
      glob = str;
    } else {
      base = str;
    }
    if (base && base !== "" && base !== "/" && base !== str) {
      if (isPathSeparator(base.charCodeAt(base.length - 1))) {
        base = base.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob)
        glob = utils.removeBackslashes(glob);
      if (base && backslashes === true) {
        base = utils.removeBackslashes(base);
      }
    }
    const state = {
      prefix: prefix2,
      input,
      start,
      base,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated,
      negatedExtglob
    };
    if (opts.tokens === true) {
      state.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token);
      }
      state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0; idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value = input.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix2;
          } else {
            tokens[idx].value = value;
          }
          depth(tokens[idx]);
          state.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value !== "") {
          parts.push(value);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input.length) {
        const value = input.slice(prevIndex + 1);
        parts.push(value);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value;
          depth(tokens[tokens.length - 1]);
          state.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state.slashes = slashes;
      state.parts = parts;
    }
    return state;
  };
  module2.exports = scan;
});
var require_parse5 = __commonJSMin((exports, module2) => {
  "use strict";
  var constants = require_constants5();
  var utils = require_utils9();
  var {
    MAX_LENGTH,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants;
  var expandRange = (args, options2) => {
    if (typeof options2.expandRange === "function") {
      return options2.expandRange(...args, options2);
    }
    args.sort();
    const value = `[${args.join("-")}]`;
    try {
      new RegExp(value);
    } catch (ex) {
      return args.map((v) => utils.escapeRegex(v)).join("..");
    }
    return value;
  };
  var syntaxError = (type, char) => {
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  var parse4 = (input, options2) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    input = REPLACEMENTS[input] || input;
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    let len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = { type: "bos", value: "", output: opts.prepend || "" };
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils.isWindows(options2);
    const PLATFORM_CHARS = constants.globChars(win32);
    const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state = {
      input,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input = utils.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    const eos = () => state.index === len - 1;
    const peek = state.peek = (n = 1) => input[state.index + n];
    const advance = state.advance = () => input[++state.index] || "";
    const remaining = () => input.slice(state.index + 1);
    const consume = (value2 = "", num = 0) => {
      state.consumed += value2;
      state.index += num;
    };
    const append = (token) => {
      state.output += token.output != null ? token.output : token.value;
      consume(token.value);
    };
    const negate = () => {
      let count = 1;
      while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
        advance();
        state.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state.negated = true;
      state.start++;
      return true;
    };
    const increment = (type) => {
      state[type]++;
      stack.push(type);
    };
    const decrement = (type) => {
      state[type]--;
      stack.pop();
    };
    const push = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren") {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output)
        append(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type, value2) => {
      const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
      token.prev = prev;
      token.parens = state.parens;
      token.output = state.output;
      const output = (opts.capture ? "(" : "") + token.open;
      increment("parens");
      push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
      push({ type: "paren", extglob: true, value: advance(), output });
      extglobs.push(token);
    };
    const extglobClose = (token) => {
      let output = token.close + (opts.capture ? ")" : "");
      let rest;
      if (token.type === "negate") {
        let extglobStar = star;
        if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token.close = `)$))${extglobStar}`;
        }
        if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
          const expression = parse4(rest, { ...options2, fastpaths: false }).output;
          output = token.close = `)${expression})${extglobStar})`;
        }
        if (token.prev.type === "bos") {
          state.negatedExtglob = true;
        }
      }
      push({ type: "paren", extglob: true, value, output });
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
      let backslashes = false;
      let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input && opts.contains === true) {
        state.output = input;
        return state;
      }
      state.output = utils.wrapOutput(output, state, options2);
      return state;
    }
    while (!eos()) {
      value = advance();
      if (value === "\0") {
        continue;
      }
      if (value === "\\") {
        const next = peek();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value += "\\";
          push({ type: "text", value });
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state.index += slashes;
          if (slashes % 2 !== 0) {
            value += "\\";
          }
        }
        if (opts.unescape === true) {
          value = advance();
        } else {
          value += advance();
        }
        if (state.brackets === 0) {
          push({ type: "text", value });
          continue;
        }
      }
      if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
          value = `\\${value}`;
        }
        if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
          value = `\\${value}`;
        }
        if (opts.posix === true && value === "!" && prev.value === "[") {
          value = "^";
        }
        prev.value += value;
        append({ value });
        continue;
      }
      if (state.quotes === 1 && value !== '"') {
        value = utils.escapeRegex(value);
        prev.value += value;
        append({ value });
        continue;
      }
      if (value === '"') {
        state.quotes = state.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push({ type: "text", value });
        }
        continue;
      }
      if (value === "(") {
        increment("parens");
        push({ type: "paren", value });
        continue;
      }
      if (value === ")") {
        if (state.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
        decrement("parens");
        continue;
      }
      if (value === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("closing", "]"));
          }
          value = `\\${value}`;
        } else {
          increment("brackets");
        }
        push({ type: "bracket", value });
        continue;
      }
      if (value === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        if (state.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "["));
          }
          push({ type: "text", value, output: `\\${value}` });
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value = `/${value}`;
        }
        prev.value += value;
        append({ value });
        if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils.escapeRegex(prev.value);
        state.output = state.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state.output += prev.value;
        continue;
      }
      if (value === "{" && opts.nobrace !== true) {
        increment("braces");
        const open = {
          type: "brace",
          value,
          output: "(",
          outputIndex: state.output.length,
          tokensIndex: state.tokens.length
        };
        braces.push(open);
        push(open);
        continue;
      }
      if (value === "}") {
        const brace = braces[braces.length - 1];
        if (opts.nobrace === true || !brace) {
          push({ type: "text", value, output: value });
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1; i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state.output.slice(0, brace.outputIndex);
          const toks = state.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value = output = "\\}";
          state.output = out;
          for (const t of toks) {
            state.output += t.output || t.value;
          }
        }
        push({ type: "brace", value, output });
        decrement("braces");
        braces.pop();
        continue;
      }
      if (value === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push({ type: "text", value });
        continue;
      }
      if (value === ",") {
        let output = value;
        const brace = braces[braces.length - 1];
        if (brace && stack[stack.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push({ type: "comma", value, output });
        continue;
      }
      if (value === "/") {
        if (prev.type === "dot" && state.index === state.start + 1) {
          state.start = state.index + 1;
          state.consumed = "";
          state.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push({ type: "slash", value, output: SLASH_LITERAL });
        continue;
      }
      if (value === ".") {
        if (state.braces > 0 && prev.type === "dot") {
          if (prev.value === ".")
            prev.output = DOT_LITERAL;
          const brace = braces[braces.length - 1];
          prev.type = "dots";
          prev.output += value;
          prev.value += value;
          brace.dots = true;
          continue;
        }
        if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push({ type: "text", value, output: DOT_LITERAL });
          continue;
        }
        push({ type: "dot", value, output: DOT_LITERAL });
        continue;
      }
      if (value === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("qmark", value);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek();
          let output = value;
          if (next === "<" && !utils.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value}`;
          }
          push({ type: "text", value, output });
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push({ type: "qmark", value, output: QMARK_NO_DOT });
          continue;
        }
        push({ type: "qmark", value, output: QMARK });
        continue;
      }
      if (value === "!") {
        if (opts.noextglob !== true && peek() === "(") {
          if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
            extglobOpen("negate", value);
            continue;
          }
        }
        if (opts.nonegate !== true && state.index === 0) {
          negate();
          continue;
        }
      }
      if (value === "+") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("plus", value);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push({ type: "plus", value, output: PLUS_LITERAL });
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
          push({ type: "plus", value });
          continue;
        }
        push({ type: "plus", value: PLUS_LITERAL });
        continue;
      }
      if (value === "@") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          push({ type: "at", extglob: true, value, output: "" });
          continue;
        }
        push({ type: "text", value });
        continue;
      }
      if (value !== "*") {
        if (value === "$" || value === "^") {
          value = `\\${value}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value += match[0];
          state.index += match[0].length;
        }
        push({ type: "text", value });
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value;
        prev.output = star;
        state.backtrack = true;
        state.globstar = true;
        consume(value);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push({ type: "star", value, output: "" });
          continue;
        }
        const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push({ type: "star", value, output: "" });
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input[state.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value;
          prev.output = globstar(opts);
          state.output = prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value;
          state.globstar = true;
          state.output += prior.output + prev.output;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== void 0 ? "|$" : "";
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value;
          state.output += prior.output + prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state.output = prev.output;
          state.globstar = true;
          consume(value + advance());
          push({ type: "slash", value: "/", output: "" });
          continue;
        }
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value;
        state.output += prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      const token = { type: "star", value, output: star };
      if (opts.bash === true) {
        token.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token.output = nodot + token.output;
        }
        push(token);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token.output = value;
        push(token);
        continue;
      }
      if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state.output += nodot;
          prev.output += nodot;
        }
        if (peek() !== "*") {
          state.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push(token);
    }
    while (state.brackets > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "]"));
      state.output = utils.escapeLast(state.output, "[");
      decrement("brackets");
    }
    while (state.parens > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", ")"));
      state.output = utils.escapeLast(state.output, "(");
      decrement("parens");
    }
    while (state.braces > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "}"));
      state.output = utils.escapeLast(state.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
    }
    if (state.backtrack === true) {
      state.output = "";
      for (const token of state.tokens) {
        state.output += token.output != null ? token.output : token.value;
        if (token.suffix) {
          state.output += token.suffix;
        }
      }
    }
    return state;
  };
  parse4.fastpaths = (input, options2) => {
    const opts = { ...options2 };
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    const len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input = REPLACEMENTS[input] || input;
    const win32 = utils.isWindows(options2);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = { negated: false, prefix: "" };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true)
        return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str) => {
      switch (str) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str);
          if (!match)
            return;
          const source2 = create(match[1]);
          if (!source2)
            return;
          return source2 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) {
      source += `${SLASH_LITERAL}?`;
    }
    return source;
  };
  module2.exports = parse4;
});
var require_picomatch3 = __commonJSMin((exports, module2) => {
  "use strict";
  var path9 = __require("path");
  var scan = require_scan2();
  var parse4 = require_parse5();
  var utils = require_utils9();
  var constants = require_constants5();
  var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
  var picomatch = (glob, options2, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input) => picomatch(input, options2, returnState));
      const arrayMatcher = (str) => {
        for (const isMatch of fns) {
          const state2 = isMatch(str);
          if (state2)
            return state2;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject2(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options2 || {};
    const posix = utils.isWindows(options2);
    const regex = isState ? picomatch.compileRe(glob, options2) : picomatch.makeRe(glob, options2, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = { ...options2, ignore: null, onMatch: null, onResult: null };
      isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false) => {
      const { isMatch, match, output } = picomatch.test(input, regex, options2, { glob, posix });
      const result = { glob, state, regex, posix, input, output, match, isMatch };
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state;
    }
    return matcher;
  };
  picomatch.test = (input, regex, options2, { glob, posix } = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input === "") {
      return { isMatch: false, output: "" };
    }
    const opts = options2 || {};
    const format2 = opts.format || (posix ? utils.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format2 ? format2(input) : input;
    if (match === false) {
      output = format2 ? format2(input) : input;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch.matchBase(input, regex, options2, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return { isMatch: Boolean(match), match, output };
  };
  picomatch.matchBase = (input, glob, options2, posix = utils.isWindows(options2)) => {
    const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options2);
    return regex.test(path9.basename(input));
  };
  picomatch.isMatch = (str, patterns, options2) => picomatch(patterns, options2)(str);
  picomatch.parse = (pattern, options2) => {
    if (Array.isArray(pattern))
      return pattern.map((p) => picomatch.parse(p, options2));
    return parse4(pattern, { ...options2, fastpaths: false });
  };
  picomatch.scan = (input, options2) => scan(input, options2);
  picomatch.compileRe = (state, options2, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return state.output;
    }
    const opts = options2 || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${state.output})${append}`;
    if (state && state.negated === true) {
      source = `^(?!${source}).*$`;
    }
    const regex = picomatch.toRegex(source, options2);
    if (returnState === true) {
      regex.state = state;
    }
    return regex;
  };
  picomatch.makeRe = (input, options2 = {}, returnOutput = false, returnState = false) => {
    if (!input || typeof input !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    let parsed = { negated: false, fastpaths: true };
    if (options2.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
      parsed.output = parse4.fastpaths(input, options2);
    }
    if (!parsed.output) {
      parsed = parse4(input, options2);
    }
    return picomatch.compileRe(parsed, options2, returnOutput, returnState);
  };
  picomatch.toRegex = (source, options2) => {
    try {
      const opts = options2 || {};
      return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options2 && options2.debug === true)
        throw err;
      return /$^/;
    }
  };
  picomatch.constants = constants;
  module2.exports = picomatch;
});
var require_picomatch4 = __commonJSMin((exports, module2) => {
  "use strict";
  module2.exports = require_picomatch3();
});
var require_micromatch2 = __commonJSMin((exports, module2) => {
  "use strict";
  var util2 = __require("util");
  var braces = require_braces();
  var picomatch = require_picomatch4();
  var utils = require_utils9();
  var isEmptyString = (val) => val === "" || val === "./";
  var micromatch2 = (list, patterns, options2) => {
    patterns = [].concat(patterns);
    list = [].concat(list);
    let omit2 = /* @__PURE__ */ new Set();
    let keep = /* @__PURE__ */ new Set();
    let items = /* @__PURE__ */ new Set();
    let negatives = 0;
    let onResult = (state) => {
      items.add(state.output);
      if (options2 && options2.onResult) {
        options2.onResult(state);
      }
    };
    for (let i = 0; i < patterns.length; i++) {
      let isMatch = picomatch(String(patterns[i]), { ...options2, onResult }, true);
      let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
      if (negated)
        negatives++;
      for (let item of list) {
        let matched = isMatch(item, true);
        let match = negated ? !matched.isMatch : matched.isMatch;
        if (!match)
          continue;
        if (negated) {
          omit2.add(matched.output);
        } else {
          omit2.delete(matched.output);
          keep.add(matched.output);
        }
      }
    }
    let result = negatives === patterns.length ? [...items] : [...keep];
    let matches = result.filter((item) => !omit2.has(item));
    if (options2 && matches.length === 0) {
      if (options2.failglob === true) {
        throw new Error(`No matches found for "${patterns.join(", ")}"`);
      }
      if (options2.nonull === true || options2.nullglob === true) {
        return options2.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
      }
    }
    return matches;
  };
  micromatch2.match = micromatch2;
  micromatch2.matcher = (pattern, options2) => picomatch(pattern, options2);
  micromatch2.isMatch = (str, patterns, options2) => picomatch(patterns, options2)(str);
  micromatch2.any = micromatch2.isMatch;
  micromatch2.not = (list, patterns, options2 = {}) => {
    patterns = [].concat(patterns).map(String);
    let result = /* @__PURE__ */ new Set();
    let items = [];
    let onResult = (state) => {
      if (options2.onResult)
        options2.onResult(state);
      items.push(state.output);
    };
    let matches = new Set(micromatch2(list, patterns, { ...options2, onResult }));
    for (let item of items) {
      if (!matches.has(item)) {
        result.add(item);
      }
    }
    return [...result];
  };
  micromatch2.contains = (str, pattern, options2) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
    }
    if (Array.isArray(pattern)) {
      return pattern.some((p) => micromatch2.contains(str, p, options2));
    }
    if (typeof pattern === "string") {
      if (isEmptyString(str) || isEmptyString(pattern)) {
        return false;
      }
      if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
        return true;
      }
    }
    return micromatch2.isMatch(str, pattern, { ...options2, contains: true });
  };
  micromatch2.matchKeys = (obj, patterns, options2) => {
    if (!utils.isObject(obj)) {
      throw new TypeError("Expected the first argument to be an object");
    }
    let keys = micromatch2(Object.keys(obj), patterns, options2);
    let res = {};
    for (let key of keys)
      res[key] = obj[key];
    return res;
  };
  micromatch2.some = (list, patterns, options2) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options2);
      if (items.some((item) => isMatch(item))) {
        return true;
      }
    }
    return false;
  };
  micromatch2.every = (list, patterns, options2) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options2);
      if (!items.every((item) => isMatch(item))) {
        return false;
      }
    }
    return true;
  };
  micromatch2.all = (str, patterns, options2) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
    }
    return [].concat(patterns).every((p) => picomatch(p, options2)(str));
  };
  micromatch2.capture = (glob, input, options2) => {
    let posix = utils.isWindows(options2);
    let regex = picomatch.makeRe(String(glob), { ...options2, capture: true });
    let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
    if (match) {
      return match.slice(1).map((v) => v === void 0 ? "" : v);
    }
  };
  micromatch2.makeRe = (...args) => picomatch.makeRe(...args);
  micromatch2.scan = (...args) => picomatch.scan(...args);
  micromatch2.parse = (patterns, options2) => {
    let res = [];
    for (let pattern of [].concat(patterns || [])) {
      for (let str of braces(String(pattern), options2)) {
        res.push(picomatch.parse(str, options2));
      }
    }
    return res;
  };
  micromatch2.braces = (pattern, options2) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    if (options2 && options2.nobrace === true || !/\{.*\}/.test(pattern)) {
      return [pattern];
    }
    return braces(pattern, options2);
  };
  micromatch2.braceExpand = (pattern, options2) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    return micromatch2.braces(pattern, { ...options2, expand: true });
  };
  module2.exports = micromatch2;
});
var require_semver2 = __commonJSMin((exports, module2) => {
  exports = module2.exports = SemVer;
  var debug;
  if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug = function() {
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift("SEMVER");
      console.log.apply(console, args);
    };
  } else {
    debug = function() {
    };
  }
  exports.SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var re = exports.re = [];
  var src = exports.src = [];
  var R = 0;
  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
  var MAINVERSION = R++;
  src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASE = R++;
  src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
  var BUILD = R++;
  src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
  var FULL = R++;
  var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
  src[FULL] = "^" + FULLPLAIN + "$";
  var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
  var LOOSE = R++;
  src[LOOSE] = "^" + LOOSEPLAIN + "$";
  var GTLT = R++;
  src[GTLT] = "((?:<|>)?=?)";
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGE = R++;
  src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
  var COERCE = R++;
  src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
  var LONETILDE = R++;
  src[LONETILDE] = "(?:~>?)";
  var TILDETRIM = R++;
  src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
  re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
  var tildeTrimReplace = "$1~";
  var TILDE = R++;
  src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
  var TILDELOOSE = R++;
  src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
  var LONECARET = R++;
  src[LONECARET] = "(?:\\^)";
  var CARETTRIM = R++;
  src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
  re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
  var caretTrimReplace = "$1^";
  var CARET = R++;
  src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
  var CARETLOOSE = R++;
  src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
  var COMPARATOR = R++;
  src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
  var comparatorTrimReplace = "$1$2$3";
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
  var STAR = R++;
  src[STAR] = "(<|>)?=?\\s*\\*";
  for (i = 0; i < R; i++) {
    debug(i, src[i]);
    if (!re[i]) {
      re[i] = new RegExp(src[i]);
    }
  }
  var i;
  exports.parse = parse4;
  function parse4(version2, options2) {
    if (!options2 || typeof options2 !== "object") {
      options2 = {
        loose: !!options2,
        includePrerelease: false
      };
    }
    if (version2 instanceof SemVer) {
      return version2;
    }
    if (typeof version2 !== "string") {
      return null;
    }
    if (version2.length > MAX_LENGTH) {
      return null;
    }
    var r = options2.loose ? re[LOOSE] : re[FULL];
    if (!r.test(version2)) {
      return null;
    }
    try {
      return new SemVer(version2, options2);
    } catch (er) {
      return null;
    }
  }
  exports.valid = valid;
  function valid(version2, options2) {
    var v = parse4(version2, options2);
    return v ? v.version : null;
  }
  exports.clean = clean;
  function clean(version2, options2) {
    var s = parse4(version2.trim().replace(/^[=v]+/, ""), options2);
    return s ? s.version : null;
  }
  exports.SemVer = SemVer;
  function SemVer(version2, options2) {
    if (!options2 || typeof options2 !== "object") {
      options2 = {
        loose: !!options2,
        includePrerelease: false
      };
    }
    if (version2 instanceof SemVer) {
      if (version2.loose === options2.loose) {
        return version2;
      } else {
        version2 = version2.version;
      }
    } else if (typeof version2 !== "string") {
      throw new TypeError("Invalid Version: " + version2);
    }
    if (version2.length > MAX_LENGTH) {
      throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    }
    if (!(this instanceof SemVer)) {
      return new SemVer(version2, options2);
    }
    debug("SemVer", version2, options2);
    this.options = options2;
    this.loose = !!options2.loose;
    var m = version2.trim().match(options2.loose ? re[LOOSE] : re[FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: " + version2);
    }
    this.raw = version2;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError("Invalid major version");
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError("Invalid patch version");
    }
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split(".").map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split(".") : [];
    this.format();
  }
  SemVer.prototype.format = function() {
    this.version = this.major + "." + this.minor + "." + this.patch;
    if (this.prerelease.length) {
      this.version += "-" + this.prerelease.join(".");
    }
    return this.version;
  };
  SemVer.prototype.toString = function() {
    return this.version;
  };
  SemVer.prototype.compare = function(other) {
    debug("SemVer.compare", this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  };
  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i2 = 0;
    do {
      var a = this.prerelease[i2];
      var b = other.prerelease[i2];
      debug("prerelease compare", i2, a, b);
      if (a === void 0 && b === void 0) {
        return 0;
      } else if (b === void 0) {
        return 1;
      } else if (a === void 0) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i2);
  };
  SemVer.prototype.inc = function(release2, identifier) {
    switch (release2) {
      case "premajor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        this.prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      case "prerelease":
        if (this.prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case "minor":
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case "patch":
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i2 = this.prerelease.length;
          while (--i2 >= 0) {
            if (typeof this.prerelease[i2] === "number") {
              this.prerelease[i2]++;
              i2 = -2;
            }
          }
          if (i2 === -1) {
            this.prerelease.push(0);
          }
        }
        if (identifier) {
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: " + release2);
    }
    this.format();
    this.raw = this.version;
    return this;
  };
  exports.inc = inc2;
  function inc2(version2, release2, loose, identifier) {
    if (typeof loose === "string") {
      identifier = loose;
      loose = void 0;
    }
    try {
      return new SemVer(version2, loose).inc(release2, identifier).version;
    } catch (er) {
      return null;
    }
  }
  exports.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse4(version1);
      var v2 = parse4(version2);
      var prefix2 = "";
      if (v1.prerelease.length || v2.prerelease.length) {
        prefix2 = "pre";
        var defaultResult = "prerelease";
      }
      for (var key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix2 + key;
          }
        }
      }
      return defaultResult;
    }
  }
  exports.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports.compare(a, b, loose);
    });
  }
  exports.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports.rcompare(a, b, loose);
    });
  }
  exports.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case "===":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError("Invalid operator: " + op);
    }
  }
  exports.Comparator = Comparator;
  function Comparator(comp, options2) {
    if (!options2 || typeof options2 !== "object") {
      options2 = {
        loose: !!options2,
        includePrerelease: false
      };
    }
    if (comp instanceof Comparator) {
      if (comp.loose === !!options2.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }
    if (!(this instanceof Comparator)) {
      return new Comparator(comp, options2);
    }
    debug("comparator", comp, options2);
    this.options = options2;
    this.loose = !!options2.loose;
    this.parse(comp);
    if (this.semver === ANY) {
      this.value = "";
    } else {
      this.value = this.operator + this.semver.version;
    }
    debug("comp", this);
  }
  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);
    if (!m) {
      throw new TypeError("Invalid comparator: " + comp);
    }
    this.operator = m[1];
    if (this.operator === "=") {
      this.operator = "";
    }
    if (!m[2]) {
      this.semver = ANY;
    } else {
      this.semver = new SemVer(m[2], this.options.loose);
    }
  };
  Comparator.prototype.toString = function() {
    return this.value;
  };
  Comparator.prototype.test = function(version2) {
    debug("Comparator.test", version2, this.options.loose);
    if (this.semver === ANY) {
      return true;
    }
    if (typeof version2 === "string") {
      version2 = new SemVer(version2, this.options);
    }
    return cmp(version2, this.operator, this.semver, this.options);
  };
  Comparator.prototype.intersects = function(comp, options2) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError("a Comparator is required");
    }
    if (!options2 || typeof options2 !== "object") {
      options2 = {
        loose: !!options2,
        includePrerelease: false
      };
    }
    var rangeTmp;
    if (this.operator === "") {
      rangeTmp = new Range(comp.value, options2);
      return satisfies(this.value, rangeTmp, options2);
    } else if (comp.operator === "") {
      rangeTmp = new Range(this.value, options2);
      return satisfies(comp.semver, rangeTmp, options2);
    }
    var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
    var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
    var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options2) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
    var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options2) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };
  exports.Range = Range;
  function Range(range, options2) {
    if (!options2 || typeof options2 !== "object") {
      options2 = {
        loose: !!options2,
        includePrerelease: false
      };
    }
    if (range instanceof Range) {
      if (range.loose === !!options2.loose && range.includePrerelease === !!options2.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options2);
      }
    }
    if (range instanceof Comparator) {
      return new Range(range.value, options2);
    }
    if (!(this instanceof Range)) {
      return new Range(range, options2);
    }
    this.options = options2;
    this.loose = !!options2.loose;
    this.includePrerelease = !!options2.includePrerelease;
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
      return this.parseRange(range2.trim());
    }, this).filter(function(c) {
      return c.length;
    });
    if (!this.set.length) {
      throw new TypeError("Invalid SemVer Range: " + range);
    }
    this.format();
  }
  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(" ").trim();
    }).join("||").trim();
    return this.range;
  };
  Range.prototype.toString = function() {
    return this.range;
  };
  Range.prototype.parseRange = function(range) {
    var loose = this.options.loose;
    range = range.trim();
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug("hyphen replace", range);
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug("comparator trim", range, re[COMPARATORTRIM]);
    range = range.replace(re[TILDETRIM], tildeTrimReplace);
    range = range.replace(re[CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(" ");
    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(" ").map(function(comp) {
      return parseComparator(comp, this.options);
    }, this).join(" ").split(/\s+/);
    if (this.options.loose) {
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, this.options);
    }, this);
    return set;
  };
  Range.prototype.intersects = function(range, options2) {
    if (!(range instanceof Range)) {
      throw new TypeError("a Range is required");
    }
    return this.set.some(function(thisComparators) {
      return thisComparators.every(function(thisComparator) {
        return range.set.some(function(rangeComparators) {
          return rangeComparators.every(function(rangeComparator) {
            return thisComparator.intersects(rangeComparator, options2);
          });
        });
      });
    });
  };
  exports.toComparators = toComparators;
  function toComparators(range, options2) {
    return new Range(range, options2).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(" ").trim().split(" ");
    });
  }
  function parseComparator(comp, options2) {
    debug("comp", comp, options2);
    comp = replaceCarets(comp, options2);
    debug("caret", comp);
    comp = replaceTildes(comp, options2);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options2);
    debug("xrange", comp);
    comp = replaceStars(comp, options2);
    debug("stars", comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === "x" || id === "*";
  }
  function replaceTildes(comp, options2) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceTilde(comp2, options2);
    }).join(" ");
  }
  function replaceTilde(comp, options2) {
    var r = options2.loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug("tilde", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      } else if (pr) {
        debug("replaceTilde pr", pr);
        ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
      } else {
        ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
      }
      debug("tilde return", ret);
      return ret;
    });
  }
  function replaceCarets(comp, options2) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceCaret(comp2, options2);
    }).join(" ");
  }
  function replaceCaret(comp, options2) {
    debug("caret", comp, options2);
    var r = options2.loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug("caret", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        if (M === "0") {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
        }
      } else if (pr) {
        debug("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
        }
      } else {
        debug("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
        }
      }
      debug("caret return", ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options2) {
    debug("replaceXRanges", comp, options2);
    return comp.split(/\s+/).map(function(comp2) {
      return replaceXRange(comp2, options2);
    }).join(" ");
  }
  function replaceXRange(comp, options2) {
    comp = comp.trim();
    var r = options2.loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        ret = gtlt + M + "." + m + "." + p;
      } else if (xm) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (xp) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      }
      debug("xRange return", ret);
      return ret;
    });
  }
  function replaceStars(comp, options2) {
    debug("replaceStars", comp, options2);
    return comp.trim().replace(re[STAR], "");
  }
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = ">=" + fM + ".0.0";
    } else if (isX(fp)) {
      from = ">=" + fM + "." + fm + ".0";
    } else {
      from = ">=" + from;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = "<" + (+tM + 1) + ".0.0";
    } else if (isX(tp)) {
      to = "<" + tM + "." + (+tm + 1) + ".0";
    } else if (tpr) {
      to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
    } else {
      to = "<=" + to;
    }
    return (from + " " + to).trim();
  }
  Range.prototype.test = function(version2) {
    if (!version2) {
      return false;
    }
    if (typeof version2 === "string") {
      version2 = new SemVer(version2, this.options);
    }
    for (var i2 = 0; i2 < this.set.length; i2++) {
      if (testSet(this.set[i2], version2, this.options)) {
        return true;
      }
    }
    return false;
  };
  function testSet(set, version2, options2) {
    for (var i2 = 0; i2 < set.length; i2++) {
      if (!set[i2].test(version2)) {
        return false;
      }
    }
    if (version2.prerelease.length && !options2.includePrerelease) {
      for (i2 = 0; i2 < set.length; i2++) {
        debug(set[i2].semver);
        if (set[i2].semver === ANY) {
          continue;
        }
        if (set[i2].semver.prerelease.length > 0) {
          var allowed = set[i2].semver;
          if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  }
  exports.satisfies = satisfies;
  function satisfies(version2, range, options2) {
    try {
      range = new Range(range, options2);
    } catch (er) {
      return false;
    }
    return range.test(version2);
  }
  exports.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options2) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, options2);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options2);
        }
      }
    });
    return max;
  }
  exports.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options2) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, options2);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options2);
        }
      }
    });
    return min;
  }
  exports.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      comparators.forEach(function(comparator) {
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error("Unexpected operation: " + comparator.operator);
        }
      });
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  }
  exports.validRange = validRange;
  function validRange(range, options2) {
    try {
      return new Range(range, options2).range || "*";
    } catch (er) {
      return null;
    }
  }
  exports.ltr = ltr;
  function ltr(version2, range, options2) {
    return outside(version2, range, "<", options2);
  }
  exports.gtr = gtr;
  function gtr(version2, range, options2) {
    return outside(version2, range, ">", options2);
  }
  exports.outside = outside;
  function outside(version2, range, hilo, options2) {
    version2 = new SemVer(version2, options2);
    range = new Range(range, options2);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version2, range, options2)) {
      return false;
    }
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      var high = null;
      var low = null;
      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options2)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options2)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
        return false;
      }
    }
    return true;
  }
  exports.prerelease = prerelease;
  function prerelease(version2, options2) {
    var parsed = parse4(version2, options2);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports.intersects = intersects;
  function intersects(r1, r2, options2) {
    r1 = new Range(r1, options2);
    r2 = new Range(r2, options2);
    return r1.intersects(r2);
  }
  exports.coerce = coerce;
  function coerce(version2) {
    if (version2 instanceof SemVer) {
      return version2;
    }
    if (typeof version2 !== "string") {
      return null;
    }
    var match = version2.match(re[COERCE]);
    if (match == null) {
      return null;
    }
    return parse4(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
  }
});
var core3 = __toESM2(require_core());
var core = __toESM2(require_core());
var import_execa = __toESM2(require_execa());
function execaWithStreamLog(command, args, options2) {
  const promise = (0, import_execa.default)(command, args, {
    stdin: "inherit",
    stdout: "inherit",
    stderr: "inherit",
    ...options2
  });
  return promise;
}
var import_utils = __toESM2(require_dist());
var gitConfigUser = async () => {
  console.info("git config user...");
  await execaWithStreamLog("git", [
    "config",
    "--global",
    "--add",
    `safe.directory`,
    "/github/workspace"
  ]);
  await execaWithStreamLog("git", [
    "config",
    "--global",
    "user.name",
    `"github-actions[bot]"`
  ]);
  await execaWithStreamLog("git", [
    "config",
    "--global",
    "user.email",
    `"github-actions[bot]@users.noreply.github.com"`
  ]);
};
var gitCommitAll = async (message) => {
  console.info("git commit all...");
  await execaWithStreamLog("git", ["status"]);
  await execaWithStreamLog("git", ["add", "."]);
  await execaWithStreamLog("git", ["commit", "-m", message, "-n"]);
  await execaWithStreamLog("git", ["status"]);
};
var gitCommitWithIgnore = async (message, ignore) => {
  const { stdout } = await (0, import_utils.execa)("git", ["diff", "--name-only", "HEAD"]);
  const files = stdout.split("\n");
  for (const file of files) {
    if (!ignore || !file.match(ignore)) {
      await execaWithStreamLog("git", ["add", file]);
    }
  }
  await execaWithStreamLog("git", ["commit", "-m", message]);
};
var gitPush = async (branch, { force } = {}) => {
  await execaWithStreamLog("git", ["push", "origin", `HEAD:${branch}`, force && "--force"].filter(Boolean));
};
var gitSwitchToMaybeExistingBranch = async (branch) => {
  try {
    await execaWithStreamLog("git", ["rev-parse", "--verify", branch], {
      ignoreReturnCode: true
    });
    await execaWithStreamLog("git", ["checkout", branch]);
  } catch (e) {
    await execaWithStreamLog("git", ["checkout", "-b", branch]);
  }
};
var gitReset = async (pathSpec, mode = "hard") => {
  await execaWithStreamLog("git", ["reset", `--${mode}`, pathSpec]);
};
var gitCheckoutPRHead = async (pullRequestNumber) => {
  await execaWithStreamLog("git", [
    "fetch",
    `origin`,
    `pull/${pullRequestNumber}/head:release-${pullRequestNumber}`
  ]);
  await execaWithStreamLog("git", ["checkout", `release-${pullRequestNumber}`]);
  return `release-${pullRequestNumber}`;
};
var import_utils2 = __toESM2(require_dist());
var changePublishBranch = async (branch, pullRequestNumber, cwd = process.cwd()) => {
  let result = branch;
  if (pullRequestNumber) {
    result = await gitCheckoutPRHead(pullRequestNumber);
  }
  console.info("change publish branch...");
  const config = await import_utils2.fs.readJSON(import_path2.default.join(cwd, ".changeset", "config.json"));
  config.baseBranch = result;
  await import_utils2.fs.writeJSON(import_path2.default.join(cwd, ".changeset", "config.json"), config, "utf-8");
  return result;
};
var github = __toESM2(require_github());
var import_utils3 = __toESM2(require_dist());
var writeGithubToken = async (githubToken) => {
  await import_utils3.fs.writeFile(import_path3.default.join(process.env.HOME, ".netrc"), `machine github.com
login github-actions[bot]
password ${githubToken}`);
};
var createPullRequest = async (options2) => {
  const { githubToken, branch: baseBranch, title, body } = options2;
  const repo = `${github.context.repo.owner}/${github.context.repo.repo}`;
  const branch = github.context.ref.replace("refs/heads/", "");
  const octokit = github.getOctokit(githubToken);
  const searchQuery = `repo:${repo}+state:open+head:${baseBranch}+base:${branch}`;
  const searchResult = await octokit.rest.search.issuesAndPullRequests({
    q: searchQuery
  });
  if (searchResult.data.items.length === 0) {
    console.info("creating pull request");
    const { data: newPullRequest } = await octokit.rest.pulls.create({
      base: branch,
      head: baseBranch,
      title,
      body,
      ...github.context.repo
    });
    return {
      pullRequestNumber: newPullRequest.number
    };
  } else {
    const [pullRequest2] = searchResult.data.items;
    console.info(`updating found pull request #${pullRequest2.number}`);
    await octokit.rest.pulls.update({
      pull_number: pullRequest2.number,
      title,
      body,
      ...github.context.repo
    });
    return {
      pullRequestNumber: pullRequest2.number
    };
  }
};
var createRelease = async (options2) => {
  const { githubToken, publishBranch, baseBranch } = options2;
  const publishInfo = publishBranch.split("-");
  if (publishInfo.length <= 1) {
    console.info("current publishBranch not support create release");
    return;
  }
  const tagName = publishInfo[1];
  const octokit = github.getOctokit(githubToken);
  const pulls = await octokit.rest.pulls.list({
    head: publishBranch,
    base: baseBranch || "main",
    ...github.context.repo
  });
  if (pulls.data.length === 0) {
    throw Error("not found release pull request");
  }
  const content = pulls.data[0].body;
  console.info("pulls body", content);
  await octokit.rest.repos.createRelease({
    name: tagName,
    tag_name: tagName,
    body: content || "",
    target_commitish: publishBranch,
    ...github.context.repo
  });
};
var createComment = async (options2) => {
  const { githubToken, content, pullRequestNumber } = options2;
  const octokit = github.getOctokit(githubToken);
  octokit.rest.issues.createComment({
    issue_number: Number(pullRequestNumber),
    body: content,
    ...github.context.repo
  });
};
var import_utils5 = __toESM2(require_dist());
var import_execa2 = __toESM2(require_execa());
var import_utils4 = __toESM2(require_dist());
async function canUseYarn() {
  try {
    await (0, import_execa2.default)("yarn", ["--version"], {
      env: process.env
    });
    return true;
  } catch (e) {
    return false;
  }
}
async function canUsePnpm() {
  try {
    await (0, import_execa2.default)("pnpm", ["--version"], {
      env: process.env
    });
    return true;
  } catch (e) {
    return false;
  }
}
async function getPackageManager(cwd = process.cwd()) {
  let appDirectory = cwd;
  while (import_os.default.homedir() !== appDirectory) {
    if (appDirectory === import_path4.default.sep) {
      break;
    }
    if (import_utils4.fs.existsSync(import_path4.default.resolve(appDirectory, "pnpm-lock.yaml"))) {
      return "pnpm";
    }
    if (import_utils4.fs.existsSync(import_path4.default.resolve(appDirectory, "yarn.lock"))) {
      return "yarn";
    }
    if (import_utils4.fs.existsSync(import_path4.default.resolve(appDirectory, "package-lock.json"))) {
      return "npm";
    }
    appDirectory = import_path4.default.join(appDirectory, "..");
  }
  if (await canUsePnpm()) {
    return "pnpm";
  }
  return await canUseYarn() ? "yarn" : "npm";
}
function getPackageInfo(packageName) {
  if (!packageName) {
    throw new Error("package is not exisit");
  }
  const splitAt = packageName.split("@");
  let pkgVersion = "latest";
  let pkgName = packageName;
  if (!packageName.startsWith("@") && splitAt.length === 2 || packageName.startsWith("@") && splitAt.length === 3) {
    const semverValid = import_utils4.semver.valid(splitAt[splitAt.length - 1]);
    if (semverValid === null) {
      pkgVersion = splitAt[splitAt.length - 1];
      pkgName = packageName.slice(0, packageName.lastIndexOf("@"));
    } else {
      pkgVersion = semverValid;
      pkgName = packageName.split(semverValid)[0].slice(0, -1);
    }
  }
  return {
    name: pkgName,
    version: pkgVersion
  };
}
var writeNpmrc = async () => {
  const npmrcPath = `${process.env.HOME}/.npmrc`;
  if (import_utils5.fs.existsSync(npmrcPath)) {
    console.info("Found existing .npmrc file");
  } else {
    console.info("No .npmrc file found, creating one");
    import_utils5.fs.writeFileSync(npmrcPath, `//registry.npmjs.org/:_authToken=${process.env.NPM_TOKEN}`);
  }
};
var updateLockFile = async (cwd = process.cwd()) => {
  const packageManager = await getPackageManager(cwd);
  await execaWithStreamLog(packageManager, ["install", "--ignore-scripts", "--lockfile-only"], {
    cwd
  });
};
var bumpCanaryVersion = async (cwd = process.cwd(), publishVersion = "canary", tools) => {
  const packageManager = await getPackageManager(cwd);
  const params = ["run"];
  if (tools === "modern") {
    params.push("bump");
  } else {
    params.push("changeset");
    params.push("version");
  }
  await execaWithStreamLog(packageManager, [
    ...params,
    "--snapshot",
    publishVersion
  ]);
};
var runRelease = async (cwd = process.cwd(), tag, tools = "modern") => {
  const packageManager = await getPackageManager(cwd);
  const params = ["run"];
  if (tools === "modern") {
    params.push("release");
  } else {
    params.push("changeset");
    params.push("publish");
  }
  if (tag) {
    params.push("--tag", tag);
  }
  if (tools === "modern") {
    params.push("--no-git-checks");
  }
  console.info("[run release]", packageManager, params);
  await execaWithStreamLog(packageManager, params, {
    cwd
  });
};
var listTagsAndGetPackages = async () => {
  const { stdout } = await (0, import_utils5.execa)("git", ["--no-pager", "tag", "-l"]);
  const result = {};
  stdout.split("\n").forEach((info) => {
    const { name: name2, version: version2 } = getPackageInfo(info);
    if (version2 !== "latest") {
      result[name2] = version2;
    }
  });
  console.info("[Tags]: list tags:");
  console.info(stdout);
  console.info("[Packages]:");
  console.info(JSON.stringify(result));
  return `Packages: ${JSON.stringify(result)}`;
};
var VERSION_REGEX = /^modern-(\d*)$/;
var release = async () => {
  const githubToken = process.env.GITHUB_TOKEN;
  const pullRequestNumber = process.env.PULL_REQUEST_NUMBER;
  const publishVersion = core.getInput("version");
  let publishBranch = core.getInput("branch");
  const publishTools = core.getInput("tools") || "modern";
  console.info("[publishVersion]:", publishVersion);
  console.info("[publishTools]:", publishTools);
  if (!githubToken) {
    core.setFailed("Please add the GITHUB_TOKEN");
    return;
  }
  await gitConfigUser();
  publishBranch = await changePublishBranch(publishBranch, pullRequestNumber);
  console.info("[publishBranch]:", publishBranch);
  await writeNpmrc();
  if (publishVersion === "canary") {
    await bumpCanaryVersion(void 0, publishVersion, publishTools);
    await gitCommitAll("publish canary");
    await runRelease(process.cwd(), "canary", publishTools);
  } else if (publishVersion === "next") {
    await bumpCanaryVersion(void 0, publishVersion, publishTools);
    await gitCommitAll("publish next");
    await runRelease(process.cwd(), "next", publishTools);
  } else if (publishVersion === "pre") {
    await gitCommitAll("publish pre");
    await runRelease(process.cwd(), "pre", publishTools);
  } else if (publishVersion === "alpha") {
    await gitCommitAll("publish alpha");
    await runRelease(process.cwd(), "alpha", publishTools);
  } else if (publishVersion === "beta") {
    await gitCommitAll("publish beta");
    await runRelease(process.cwd(), "beta", publishTools);
  } else if (VERSION_REGEX.test(publishVersion)) {
    const baseBranch = `v${publishVersion.split("-")[1]}`;
    await gitCommitAll(`publish ${publishVersion}`);
    await runRelease(process.cwd(), publishVersion);
    await createRelease({
      publishBranch,
      githubToken,
      baseBranch
    });
  } else {
    await gitCommitAll("publish latest");
    await runRelease(process.cwd(), "latest", publishTools);
    await createRelease({
      publishBranch,
      githubToken
    });
  }
  const content = await listTagsAndGetPackages();
  if (pullRequestNumber) {
    await createComment({
      githubToken,
      content,
      pullRequestNumber
    });
  }
};
var core2 = __toESM2(require_core());
var github2 = __toESM2(require_github());
var import_fs_extra2 = __toESM2(require_lib3());
var import_js_yaml = __toESM2(require_js_yaml3());
var mdRegex = /\s*---([^]*?)\n\s*---(\s*(?:\n|$)[^]*)/;
function parseChangesetFile(contents) {
  const execResult = mdRegex.exec(contents);
  if (!execResult) {
    throw new Error(`could not parse changeset - invalid frontmatter: ${contents}`);
  }
  let [, roughReleases, roughSummary] = execResult;
  let summary = roughSummary.trim();
  let releases;
  try {
    const yamlStuff = import_js_yaml.default.safeLoad(roughReleases);
    if (yamlStuff) {
      releases = Object.entries(yamlStuff).map(([name2, type]) => ({
        name: name2,
        type
      }));
    } else {
      releases = [];
    }
  } catch (e) {
    throw new Error(`could not parse changeset - invalid frontmatter: ${contents}`);
  }
  if (!releases) {
    throw new Error(`could not parse changeset - unknown error: ${contents}`);
  }
  return {
    releases,
    summary
  };
}
var parse_esm_default = parseChangesetFile;
var import_spawndamnit = __toESM2(require_spawndamnit());
var import_get_packages = __toESM2(require_get_packages_cjs());
var import_extendable_error = __toESM2(require_bld());
var GitError = class extends import_extendable_error.default {
  constructor(code, message) {
    super(`${message}, exit code: ${code}`);
    this.code = code;
  }
};
var ValidationError = class extends import_extendable_error.default {
};
var InternalError = class extends import_extendable_error.default {
  constructor(message) {
    super(message);
  }
};
var import_is_subdir = __toESM2(require_is_subdir());
async function getDivergedCommit(cwd, ref) {
  const cmd = await (0, import_spawndamnit.default)("git", ["merge-base", ref, "HEAD"], {
    cwd
  });
  if (cmd.code !== 0) {
    throw new Error(`Failed to find where HEAD diverged from ${ref}. Does ${ref} exist?`);
  }
  return cmd.stdout.toString().trim();
}
var getCommitThatAddsFile = (0, import_util.deprecate)(async (gitPath, cwd) => {
  return (await getCommitsThatAddFiles([gitPath], cwd))[0];
}, "Use the bulk getCommitsThatAddFiles function instead");
async function getCommitsThatAddFiles(gitPaths, cwd) {
  const map = /* @__PURE__ */ new Map();
  let remaining = gitPaths;
  do {
    const commitInfos = await Promise.all(remaining.map(async (gitPath) => {
      const [commitSha, parentSha] = (await (0, import_spawndamnit.default)("git", ["log", "--diff-filter=A", "--max-count=1", "--pretty=format:%h:%p", gitPath], {
        cwd
      })).stdout.toString().split(":");
      return {
        path: gitPath,
        commitSha,
        parentSha
      };
    }));
    let commitsWithMissingParents = [];
    for (const info of commitInfos) {
      if (info.commitSha) {
        if (info.parentSha) {
          map.set(info.path, info.commitSha);
        } else {
          commitsWithMissingParents.push(info);
        }
      }
    }
    if (commitsWithMissingParents.length === 0) {
      break;
    }
    if (await isRepoShallow({
      cwd
    })) {
      await deepenCloneBy({
        by: 50,
        cwd
      });
      remaining = commitsWithMissingParents.map((p) => p.path);
    } else {
      for (const unresolved of commitsWithMissingParents) {
        map.set(unresolved.path, unresolved.commitSha);
      }
      break;
    }
  } while (true);
  return gitPaths.map((p) => map.get(p));
}
async function isRepoShallow({
  cwd
}) {
  const isShallowRepoOutput = (await (0, import_spawndamnit.default)("git", ["rev-parse", "--is-shallow-repository"], {
    cwd
  })).stdout.toString().trim();
  if (isShallowRepoOutput === "--is-shallow-repository") {
    const gitDir = (await (0, import_spawndamnit.default)("git", ["rev-parse", "--git-dir"], {
      cwd
    })).stdout.toString().trim();
    const fullGitDir = import_path6.default.resolve(cwd, gitDir);
    return import_fs.default.existsSync(import_path6.default.join(fullGitDir, "shallow"));
  } else {
    return isShallowRepoOutput === "true";
  }
}
async function deepenCloneBy({
  by,
  cwd
}) {
  await (0, import_spawndamnit.default)("git", ["fetch", `--deepen=${by}`], {
    cwd
  });
}
async function getChangedChangesetFilesSinceRef({
  cwd,
  ref
}) {
  try {
    const divergedAt = await getDivergedCommit(cwd, ref);
    const cmd = await (0, import_spawndamnit.default)("git", ["diff", "--name-only", "--diff-filter=d", divergedAt], {
      cwd
    });
    let tester = /.changeset\/[^/]+\.md$/;
    const files = cmd.stdout.toString().trim().split("\n").filter((file) => tester.test(file));
    return files;
  } catch (err) {
    if (err instanceof GitError)
      return [];
    throw err;
  }
}
var import_chalk2 = __toESM2(require_chalk2());
var import_p_filter = __toESM2(require_p_filter());
var import_chalk = __toESM2(require_chalk2());
var prefix = "\u{1F98B} ";
function format(args, customPrefix) {
  let fullPrefix = prefix + (customPrefix === void 0 ? "" : " " + customPrefix);
  return fullPrefix + import_util2.default.format("", ...args).split("\n").join("\n" + fullPrefix + " ");
}
function warn(...args) {
  console.warn(format(args, import_chalk.default.yellow("warn")));
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var importantSeparator = import_chalk2.default.red("===============================IMPORTANT!===============================");
var importantEnd = import_chalk2.default.red("----------------------------------------------------------------------");
async function getOldChangesets(changesetBase, dirs) {
  let changesets = await (0, import_p_filter.default)(dirs, async (dir) => (await (0, import_fs_extra2.lstat)(import_path5.default.join(changesetBase, dir))).isDirectory());
  const changesetContents = changesets.map(async (changesetDir) => {
    const jsonPath = import_path5.default.join(changesetBase, changesetDir, "changes.json");
    const [summary, json] = await Promise.all([(0, import_fs_extra2.readFile)(import_path5.default.join(changesetBase, changesetDir, "changes.md"), "utf-8"), (0, import_fs_extra2.readJson)(jsonPath)]);
    return {
      releases: json.releases,
      summary,
      id: changesetDir
    };
  });
  return Promise.all(changesetContents);
}
async function getOldChangesetsAndWarn(changesetBase, dirs) {
  let oldChangesets = await getOldChangesets(changesetBase, dirs);
  if (oldChangesets.length === 0) {
    return [];
  }
  warn(importantSeparator);
  warn("There were old changesets from version 1 found");
  warn("These are being applied now but the dependents graph may have changed");
  warn("Make sure you validate all your dependencies");
  warn("In a future major version, we will no longer apply these old changesets, and will instead throw here");
  warn(importantEnd);
  return oldChangesets;
}
async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
  const newChangesets = await getChangedChangesetFilesSinceRef({
    cwd: changesetBase,
    ref: sinceRef
  });
  const newHashes = newChangesets.map((c) => c.split("/")[1]);
  return changesets.filter((dir) => newHashes.includes(dir));
}
async function getChangesets(cwd, sinceRef) {
  let changesetBase = import_path5.default.join(cwd, ".changeset");
  let contents;
  try {
    contents = await import_fs_extra2.default.readdir(changesetBase);
  } catch (err) {
    if (err.code === "ENOENT") {
      throw new Error("There is no .changeset directory in this project");
    }
    throw err;
  }
  if (sinceRef !== void 0) {
    contents = await filterChangesetsSinceRef(contents, changesetBase, sinceRef);
  }
  let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
  let changesets = contents.filter((file) => !file.startsWith(".") && file.endsWith(".md") && file !== "README.md");
  const changesetContents = changesets.map(async (file) => {
    const changeset = await import_fs_extra2.default.readFile(import_path5.default.join(changesetBase, file), "utf-8");
    return _objectSpread2(_objectSpread2({}, parse_esm_default(changeset)), {}, {
      id: file.replace(".md", "")
    });
  });
  return [...await oldChangesetsPromise, ...await Promise.all(changesetContents)];
}
var read_esm_default = getChangesets;
var import_get_packages2 = __toESM2(require_get_packages_cjs2());
var import_fs_extra3 = __toESM2(require_lib3());
var import_micromatch = __toESM2(require_micromatch2());
var import_semver = __toESM2(require_semver2());
var import_chalk3 = __toESM2(require_chalk2());
var DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
var getAllDependencies = (config) => {
  const allDependencies = /* @__PURE__ */ new Map();
  for (const type of DEPENDENCY_TYPES) {
    const deps = config[type];
    if (!deps)
      continue;
    for (const name2 of Object.keys(deps)) {
      const depRange = deps[name2];
      if ((depRange.startsWith("link:") || depRange.startsWith("file:")) && type === "devDependencies") {
        continue;
      }
      allDependencies.set(name2, depRange);
    }
  }
  return allDependencies;
};
var isProtocolRange = (range) => range.indexOf(":") !== -1;
var getValidRange = (potentialRange) => {
  if (isProtocolRange(potentialRange)) {
    return null;
  }
  try {
    return new import_semver.default.Range(potentialRange);
  } catch (_unused) {
    return null;
  }
};
function getDependencyGraph(packages, opts) {
  const graph = /* @__PURE__ */ new Map();
  let valid = true;
  const packagesByName = {
    [packages.root.packageJson.name]: packages.root
  };
  const queue = [packages.root];
  for (const pkg of packages.packages) {
    queue.push(pkg);
    packagesByName[pkg.packageJson.name] = pkg;
  }
  for (const pkg of queue) {
    const {
      name: name2
    } = pkg.packageJson;
    const dependencies = [];
    const allDependencies = getAllDependencies(pkg.packageJson);
    for (let [depName, depRange] of allDependencies) {
      const match = packagesByName[depName];
      if (!match)
        continue;
      const expected = match.packageJson.version;
      const usesWorkspaceRange = depRange.startsWith("workspace:");
      if (usesWorkspaceRange) {
        depRange = depRange.replace(/^workspace:/, "");
        if (depRange === "*" || depRange === "^" || depRange === "~") {
          dependencies.push(depName);
          continue;
        }
      } else if ((opts === null || opts === void 0 ? void 0 : opts.bumpVersionsWithWorkspaceProtocolOnly) === true) {
        continue;
      }
      const range = getValidRange(depRange);
      if (range && !range.test(expected) || isProtocolRange(depRange)) {
        valid = false;
        console.error(`Package ${import_chalk3.default.cyan(`"${name2}"`)} must depend on the current version of ${import_chalk3.default.cyan(`"${depName}"`)}: ${import_chalk3.default.green(`"${expected}"`)} vs ${import_chalk3.default.red(`"${depRange}"`)}`);
        continue;
      }
      if (!range) {
        continue;
      }
      dependencies.push(depName);
    }
    graph.set(name2, {
      pkg,
      dependencies
    });
  }
  return {
    graph,
    valid
  };
}
function getDependentsGraph(packages, opts) {
  const graph = /* @__PURE__ */ new Map();
  const {
    graph: dependencyGraph
  } = getDependencyGraph(packages, {
    bumpVersionsWithWorkspaceProtocolOnly: (opts === null || opts === void 0 ? void 0 : opts.bumpVersionsWithWorkspaceProtocolOnly) === true
  });
  const dependentsLookup = {};
  packages.packages.forEach((pkg) => {
    dependentsLookup[pkg.packageJson.name] = {
      pkg,
      dependents: []
    };
  });
  packages.packages.forEach((pkg) => {
    const dependent = pkg.packageJson.name;
    const valFromDependencyGraph = dependencyGraph.get(dependent);
    if (valFromDependencyGraph) {
      const dependencies = valFromDependencyGraph.dependencies;
      dependencies.forEach((dependency) => {
        dependentsLookup[dependency].dependents.push(dependent);
      });
    }
  });
  Object.keys(dependentsLookup).forEach((key) => {
    graph.set(key, dependentsLookup[key]);
  });
  const simplifiedDependentsGraph = /* @__PURE__ */ new Map();
  graph.forEach((pkgInfo, pkgName) => {
    simplifiedDependentsGraph.set(pkgName, pkgInfo.dependents);
  });
  return simplifiedDependentsGraph;
}
var packageJson = {
  name: "@changesets/config",
  version: "2.1.1",
  description: "Utilities for reading and parsing Changeset's config",
  main: "dist/config.cjs.js",
  module: "dist/config.esm.js",
  license: "MIT",
  repository: "https://github.com/changesets/changesets/tree/main/packages/config",
  files: [
    "dist",
    "schema.json"
  ],
  dependencies: {
    "@changesets/errors": "^0.1.4",
    "@changesets/get-dependents-graph": "^1.3.3",
    "@changesets/logger": "^0.0.5",
    "@changesets/types": "^5.1.0",
    "@manypkg/get-packages": "^1.1.3",
    "fs-extra": "^7.0.1",
    micromatch: "^4.0.2"
  },
  devDependencies: {
    "@types/micromatch": "^4.0.1",
    fixturez: "^1.1.0",
    "jest-in-case": "^1.0.2"
  }
};
var defaultWrittenConfig = {
  $schema: `https://unpkg.com/@changesets/config@${packageJson.version}/schema.json`,
  changelog: "@changesets/cli/changelog",
  commit: false,
  fixed: [],
  linked: [],
  access: "restricted",
  baseBranch: "master",
  updateInternalDependencies: "patch",
  ignore: []
};
function flatten(arr) {
  return [].concat(...arr);
}
function getNormalizedChangelogOption(thing) {
  if (thing === false) {
    return false;
  }
  if (typeof thing === "string") {
    return [thing, null];
  }
  return thing;
}
function getNormalizedCommitOption(thing) {
  if (thing === false) {
    return false;
  }
  if (thing === true) {
    return ["@changesets/cli/commit", {
      skipCI: "version"
    }];
  }
  if (typeof thing === "string") {
    return [thing, null];
  }
  return thing;
}
function getUnmatchedPatterns(listOfPackageNamesOrGlob, pkgNames) {
  return listOfPackageNamesOrGlob.filter((pkgNameOrGlob) => !pkgNames.some((pkgName) => import_micromatch.default.isMatch(pkgName, pkgNameOrGlob)));
}
var havePackageGroupsCorrectShape = (pkgGroups) => {
  return isArray(pkgGroups) && pkgGroups.every((arr) => isArray(arr) && arr.every((pkgName) => typeof pkgName === "string"));
};
function isArray(arg) {
  return Array.isArray(arg);
}
var read = async (cwd, packages) => {
  let json = await (0, import_fs_extra3.readJSON)(import_path7.default.join(cwd, ".changeset", "config.json"));
  return parse2(json, packages);
};
var parse2 = (json, packages) => {
  var _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental, _json$___experimental2, _json$___experimental3, _json$___experimental4;
  let messages = [];
  let pkgNames = packages.packages.map(({
    packageJson: packageJson2
  }) => packageJson2.name);
  if (json.changelog !== void 0 && json.changelog !== false && typeof json.changelog !== "string" && !(isArray(json.changelog) && json.changelog.length === 2 && typeof json.changelog[0] === "string")) {
    messages.push(`The \`changelog\` option is set as ${JSON.stringify(json.changelog, null, 2)} when the only valid values are undefined, false, a module path(e.g. "@changesets/cli/changelog" or "./some-module") or a tuple with a module path and config for the changelog generator(e.g. ["@changesets/cli/changelog", { someOption: true }])`);
  }
  let normalizedAccess = json.access;
  if (json.access === "private") {
    normalizedAccess = "restricted";
    warn('The `access` option is set as "private", but this is actually not a valid value - the correct form is "restricted".');
  }
  if (normalizedAccess !== void 0 && normalizedAccess !== "restricted" && normalizedAccess !== "public") {
    messages.push(`The \`access\` option is set as ${JSON.stringify(normalizedAccess, null, 2)} when the only valid values are undefined, "public" or "restricted"`);
  }
  if (json.commit !== void 0 && typeof json.commit !== "boolean" && typeof json.commit !== "string" && !(isArray(json.commit) && json.commit.length === 2 && typeof json.commit[0] === "string")) {
    messages.push(`The \`commit\` option is set as ${JSON.stringify(json.commit, null, 2)} when the only valid values are undefined or a boolean or a module path (e.g. "@changesets/cli/commit" or "./some-module") or a tuple with a module path and config for the commit message generator (e.g. ["@changesets/cli/commit", { "skipCI": "version" }])`);
  }
  if (json.baseBranch !== void 0 && typeof json.baseBranch !== "string") {
    messages.push(`The \`baseBranch\` option is set as ${JSON.stringify(json.baseBranch, null, 2)} but the \`baseBranch\` option can only be set as a string`);
  }
  let fixed = [];
  if (json.fixed !== void 0) {
    if (!havePackageGroupsCorrectShape(json.fixed)) {
      messages.push(`The \`fixed\` option is set as ${JSON.stringify(json.fixed, null, 2)} when the only valid values are undefined or an array of arrays of package names`);
    } else {
      let foundPkgNames = /* @__PURE__ */ new Set();
      let duplicatedPkgNames = /* @__PURE__ */ new Set();
      for (let fixedGroup of json.fixed) {
        messages.push(...getUnmatchedPatterns(fixedGroup, pkgNames).map((pkgOrGlob) => `The package or glob expression "${pkgOrGlob}" specified in the \`fixed\` option does not match any package in the project. You may have misspelled the package name or provided an invalid glob expression. Note that glob expressions must be defined according to https://www.npmjs.com/package/micromatch.`));
        let expandedFixedGroup = (0, import_micromatch.default)(pkgNames, fixedGroup);
        fixed.push(expandedFixedGroup);
        for (let fixedPkgName of expandedFixedGroup) {
          if (foundPkgNames.has(fixedPkgName)) {
            duplicatedPkgNames.add(fixedPkgName);
          }
          foundPkgNames.add(fixedPkgName);
        }
      }
      if (duplicatedPkgNames.size) {
        duplicatedPkgNames.forEach((pkgName) => {
          messages.push(`The package "${pkgName}" is defined in multiple sets of fixed packages. Packages can only be defined in a single set of fixed packages. If you are using glob expressions, make sure that they are valid according to https://www.npmjs.com/package/micromatch.`);
        });
      }
    }
  }
  let linked = [];
  if (json.linked !== void 0) {
    if (!havePackageGroupsCorrectShape(json.linked)) {
      messages.push(`The \`linked\` option is set as ${JSON.stringify(json.linked, null, 2)} when the only valid values are undefined or an array of arrays of package names`);
    } else {
      let foundPkgNames = /* @__PURE__ */ new Set();
      let duplicatedPkgNames = /* @__PURE__ */ new Set();
      for (let linkedGroup of json.linked) {
        messages.push(...getUnmatchedPatterns(linkedGroup, pkgNames).map((pkgOrGlob) => `The package or glob expression "${pkgOrGlob}" specified in the \`linked\` option does not match any package in the project. You may have misspelled the package name or provided an invalid glob expression. Note that glob expressions must be defined according to https://www.npmjs.com/package/micromatch.`));
        let expandedLinkedGroup = (0, import_micromatch.default)(pkgNames, linkedGroup);
        linked.push(expandedLinkedGroup);
        for (let linkedPkgName of expandedLinkedGroup) {
          if (foundPkgNames.has(linkedPkgName)) {
            duplicatedPkgNames.add(linkedPkgName);
          }
          foundPkgNames.add(linkedPkgName);
        }
      }
      if (duplicatedPkgNames.size) {
        duplicatedPkgNames.forEach((pkgName) => {
          messages.push(`The package "${pkgName}" is defined in multiple sets of linked packages. Packages can only be defined in a single set of linked packages. If you are using glob expressions, make sure that they are valid according to https://www.npmjs.com/package/micromatch.`);
        });
      }
    }
  }
  const allFixedPackages = new Set(flatten(fixed));
  const allLinkedPackages = new Set(flatten(linked));
  allFixedPackages.forEach((pkgName) => {
    if (allLinkedPackages.has(pkgName)) {
      messages.push(`The package "${pkgName}" can be found in both fixed and linked groups. A package can only be either fixed or linked.`);
    }
  });
  if (json.updateInternalDependencies !== void 0 && !["patch", "minor"].includes(json.updateInternalDependencies)) {
    messages.push(`The \`updateInternalDependencies\` option is set as ${JSON.stringify(json.updateInternalDependencies, null, 2)} but can only be 'patch' or 'minor'`);
  }
  if (json.ignore) {
    if (!(isArray(json.ignore) && json.ignore.every((pkgName) => typeof pkgName === "string"))) {
      messages.push(`The \`ignore\` option is set as ${JSON.stringify(json.ignore, null, 2)} when the only valid values are undefined or an array of package names`);
    } else {
      messages.push(...getUnmatchedPatterns(json.ignore, pkgNames).map((pkgOrGlob) => `The package or glob expression "${pkgOrGlob}" is specified in the \`ignore\` option but it is not found in the project. You may have misspelled the package name or provided an invalid glob expression. Note that glob expressions must be defined according to https://www.npmjs.com/package/micromatch.`));
      const dependentsGraph = getDependentsGraph(packages);
      for (const ignoredPackage of json.ignore) {
        const dependents = dependentsGraph.get(ignoredPackage) || [];
        for (const dependent of dependents) {
          if (!json.ignore.includes(dependent)) {
            messages.push(`The package "${dependent}" depends on the ignored package "${ignoredPackage}", but "${dependent}" is not being ignored. Please add "${dependent}" to the \`ignore\` option.`);
          }
        }
      }
    }
  }
  const {
    snapshot
  } = json;
  if (snapshot !== void 0) {
    if (snapshot.useCalculatedVersion !== void 0 && typeof snapshot.useCalculatedVersion !== "boolean") {
      messages.push(`The \`snapshot.useCalculatedVersion\` option is set as ${JSON.stringify(snapshot.useCalculatedVersion, null, 2)} when the only valid values are undefined or a boolean`);
    }
    if (snapshot.prereleaseTemplate !== void 0 && typeof snapshot.prereleaseTemplate !== "string") {
      messages.push(`The \`snapshot.prereleaseTemplate\` option is set as ${JSON.stringify(snapshot.prereleaseTemplate, null, 2)} when the only valid values are undefined, or a template string.`);
    }
  }
  if (json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH !== void 0) {
    const {
      onlyUpdatePeerDependentsWhenOutOfRange,
      updateInternalDependents,
      useCalculatedVersionForSnapshots
    } = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH;
    if (onlyUpdatePeerDependentsWhenOutOfRange !== void 0 && typeof onlyUpdatePeerDependentsWhenOutOfRange !== "boolean") {
      messages.push(`The \`onlyUpdatePeerDependentsWhenOutOfRange\` option is set as ${JSON.stringify(onlyUpdatePeerDependentsWhenOutOfRange, null, 2)} when the only valid values are undefined or a boolean`);
    }
    if (updateInternalDependents !== void 0 && !["always", "out-of-range"].includes(updateInternalDependents)) {
      messages.push(`The \`updateInternalDependents\` option is set as ${JSON.stringify(updateInternalDependents, null, 2)} but can only be 'always' or 'out-of-range'`);
    }
    if (useCalculatedVersionForSnapshots && useCalculatedVersionForSnapshots !== void 0) {
      console.warn(`Experimental flag "useCalculatedVersionForSnapshots" is deprecated since snapshot feature became stable. Please use "snapshot.useCalculatedVersion" instead.`);
      if (typeof useCalculatedVersionForSnapshots !== "boolean") {
        messages.push(`The \`useCalculatedVersionForSnapshots\` option is set as ${JSON.stringify(useCalculatedVersionForSnapshots, null, 2)} when the only valid values are undefined or a boolean`);
      }
    }
  }
  if (messages.length) {
    throw new ValidationError(`Some errors occurred when validating the changesets config:
` + messages.join("\n"));
  }
  let config = {
    changelog: getNormalizedChangelogOption(json.changelog === void 0 ? defaultWrittenConfig.changelog : json.changelog),
    access: normalizedAccess === void 0 ? defaultWrittenConfig.access : normalizedAccess,
    commit: getNormalizedCommitOption(json.commit === void 0 ? defaultWrittenConfig.commit : json.commit),
    fixed,
    linked,
    baseBranch: json.baseBranch === void 0 ? defaultWrittenConfig.baseBranch : json.baseBranch,
    updateInternalDependencies: json.updateInternalDependencies === void 0 ? defaultWrittenConfig.updateInternalDependencies : json.updateInternalDependencies,
    ignore: json.ignore === void 0 ? defaultWrittenConfig.ignore : (0, import_micromatch.default)(pkgNames, json.ignore),
    bumpVersionsWithWorkspaceProtocolOnly: json.bumpVersionsWithWorkspaceProtocolOnly === true,
    snapshot: {
      prereleaseTemplate: (_json$snapshot$prerel = (_json$snapshot = json.snapshot) === null || _json$snapshot === void 0 ? void 0 : _json$snapshot.prereleaseTemplate) !== null && _json$snapshot$prerel !== void 0 ? _json$snapshot$prerel : null,
      useCalculatedVersion: ((_json$snapshot2 = json.snapshot) === null || _json$snapshot2 === void 0 ? void 0 : _json$snapshot2.useCalculatedVersion) !== void 0 ? json.snapshot.useCalculatedVersion : ((_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental === void 0 ? void 0 : _json$___experimental.useCalculatedVersionForSnapshots) !== void 0 ? (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental2 === void 0 ? void 0 : _json$___experimental2.useCalculatedVersionForSnapshots : false
    },
    ___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH: {
      onlyUpdatePeerDependentsWhenOutOfRange: json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH === void 0 || json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange === void 0 ? false : json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
      updateInternalDependents: (_json$___experimental3 = (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental4 === void 0 ? void 0 : _json$___experimental4.updateInternalDependents) !== null && _json$___experimental3 !== void 0 ? _json$___experimental3 : "out-of-range"
    }
  };
  return config;
};
var fakePackage = {
  dir: "",
  packageJson: {
    name: "",
    version: ""
  }
};
var defaultConfig = parse2(defaultWrittenConfig, {
  root: fakePackage,
  tool: "root",
  packages: [fakePackage]
});
var import_semver2 = __toESM2(require_semver2());
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function incrementVersion(release2, preInfo) {
  if (release2.type === "none") {
    return release2.oldVersion;
  }
  let version2 = (0, import_semver2.inc)(release2.oldVersion, release2.type);
  if (preInfo !== void 0 && preInfo.state.mode !== "exit") {
    let preVersion = preInfo.preVersions.get(release2.name);
    if (preVersion === void 0) {
      throw new InternalError(`preVersion for ${release2.name} does not exist when preState is defined`);
    }
    version2 += `-${preInfo.state.tag}.${preVersion}`;
  }
  return version2;
}
function determineDependents({
  releases,
  packagesByName,
  dependencyGraph,
  preInfo,
  config
}) {
  let updated = false;
  let pkgsToSearch = [...releases.values()];
  while (pkgsToSearch.length > 0) {
    const nextRelease = pkgsToSearch.shift();
    if (!nextRelease)
      continue;
    const pkgDependents = dependencyGraph.get(nextRelease.name);
    if (!pkgDependents) {
      throw new Error(`Error in determining dependents - could not find package in repository: ${nextRelease.name}`);
    }
    pkgDependents.map((dependent) => {
      let type;
      const dependentPackage = packagesByName.get(dependent);
      if (!dependentPackage)
        throw new Error("Dependency map is incorrect");
      if (config.ignore.includes(dependent)) {
        type = "none";
      } else {
        const dependencyVersionRanges = getDependencyVersionRanges(dependentPackage.packageJson, nextRelease);
        for (const {
          depType,
          versionRange
        } of dependencyVersionRanges) {
          if (shouldBumpMajor({
            dependent,
            depType,
            versionRange,
            releases,
            nextRelease,
            preInfo,
            onlyUpdatePeerDependentsWhenOutOfRange: config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
          })) {
            type = "major";
          } else {
            if ((!releases.has(dependent) || releases.get(dependent).type === "none") && (config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.updateInternalDependents === "always" || !import_semver2.default.satisfies(incrementVersion(nextRelease, preInfo), versionRange))) {
              switch (depType) {
                case "dependencies":
                case "optionalDependencies":
                case "peerDependencies":
                  if (type !== "major" && type !== "minor") {
                    type = "patch";
                  }
                  break;
                case "devDependencies": {
                  if (type !== "major" && type !== "minor" && type !== "patch") {
                    type = "none";
                  }
                }
              }
            }
          }
        }
      }
      if (releases.has(dependent) && releases.get(dependent).type === type) {
        type = void 0;
      }
      return {
        name: dependent,
        type,
        pkgJSON: dependentPackage.packageJson
      };
    }).filter(({
      type
    }) => type).forEach(({
      name: name2,
      type,
      pkgJSON
    }) => {
      updated = true;
      const existing = releases.get(name2);
      if (existing && type === "major" && existing.type !== "major") {
        existing.type = "major";
        pkgsToSearch.push(existing);
      } else {
        let newDependent = {
          name: name2,
          type,
          oldVersion: pkgJSON.version,
          changesets: []
        };
        pkgsToSearch.push(newDependent);
        releases.set(name2, newDependent);
      }
    });
  }
  return updated;
}
function getDependencyVersionRanges(dependentPkgJSON, dependencyRelease) {
  const DEPENDENCY_TYPES2 = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
  const dependencyVersionRanges = [];
  for (const type of DEPENDENCY_TYPES2) {
    var _dependentPkgJSON$typ;
    const versionRange = (_dependentPkgJSON$typ = dependentPkgJSON[type]) === null || _dependentPkgJSON$typ === void 0 ? void 0 : _dependentPkgJSON$typ[dependencyRelease.name];
    if (!versionRange)
      continue;
    if (versionRange.startsWith("workspace:")) {
      dependencyVersionRanges.push({
        depType: type,
        versionRange: versionRange === "workspace:*" ? dependencyRelease.oldVersion : versionRange.replace(/^workspace:/, "")
      });
    } else {
      dependencyVersionRanges.push({
        depType: type,
        versionRange
      });
    }
  }
  return dependencyVersionRanges;
}
function shouldBumpMajor({
  dependent,
  depType,
  versionRange,
  releases,
  nextRelease,
  preInfo,
  onlyUpdatePeerDependentsWhenOutOfRange
}) {
  return depType === "peerDependencies" && nextRelease.type !== "none" && nextRelease.type !== "patch" && (!onlyUpdatePeerDependentsWhenOutOfRange || !import_semver2.default.satisfies(incrementVersion(nextRelease, preInfo), versionRange)) && (!releases.has(dependent) || releases.has(dependent) && releases.get(dependent).type !== "major");
}
function flattenReleases(changesets, packagesByName, ignoredPackages) {
  let releases = /* @__PURE__ */ new Map();
  changesets.forEach((changeset) => {
    changeset.releases.filter(({
      name: name2
    }) => !ignoredPackages.includes(name2)).forEach(({
      name: name2,
      type
    }) => {
      let release2 = releases.get(name2);
      let pkg = packagesByName.get(name2);
      if (!pkg) {
        throw new Error(`"${changeset.id}" changeset mentions a release for a package "${name2}" but such a package could not be found.`);
      }
      if (!release2) {
        release2 = {
          name: name2,
          type,
          oldVersion: pkg.packageJson.version,
          changesets: [changeset.id]
        };
      } else {
        if (type === "major" || (release2.type === "patch" || release2.type === "none") && (type === "minor" || type === "patch")) {
          release2.type = type;
        }
        release2.changesets.push(changeset.id);
      }
      releases.set(name2, release2);
    });
  });
  return releases;
}
function getHighestReleaseType(releases) {
  if (releases.length === 0) {
    throw new Error(`Large internal Changesets error when calculating highest release type in the set of releases. Please contact the maintainers`);
  }
  let highestReleaseType = "none";
  for (let release2 of releases) {
    switch (release2.type) {
      case "major":
        return "major";
      case "minor":
        highestReleaseType = "minor";
        break;
      case "patch":
        if (highestReleaseType === "none") {
          highestReleaseType = "patch";
        }
        break;
    }
  }
  return highestReleaseType;
}
function getCurrentHighestVersion(packageGroup, packagesByName) {
  let highestVersion;
  for (let pkgName of packageGroup) {
    let pkg = packagesByName.get(pkgName);
    if (!pkg) {
      console.error(`FATAL ERROR IN CHANGESETS! We were unable to version for package group: ${pkgName} in package group: ${packageGroup.toString()}`);
      throw new Error(`fatal: could not resolve linked packages`);
    }
    if (highestVersion === void 0 || import_semver2.default.gt(pkg.packageJson.version, highestVersion)) {
      highestVersion = pkg.packageJson.version;
    }
  }
  return highestVersion;
}
function matchFixedConstraint(releases, packagesByName, config) {
  let updated = false;
  for (let fixedPackages of config.fixed) {
    let releasingFixedPackages = [...releases.values()].filter((release2) => fixedPackages.includes(release2.name) && release2.type !== "none");
    if (releasingFixedPackages.length === 0)
      continue;
    let highestReleaseType = getHighestReleaseType(releasingFixedPackages);
    let highestVersion = getCurrentHighestVersion(fixedPackages, packagesByName);
    for (let pkgName of fixedPackages) {
      if (config.ignore.includes(pkgName)) {
        continue;
      }
      let release2 = releases.get(pkgName);
      if (!release2) {
        updated = true;
        releases.set(pkgName, {
          name: pkgName,
          type: highestReleaseType,
          oldVersion: highestVersion,
          changesets: []
        });
        continue;
      }
      if (release2.type !== highestReleaseType) {
        updated = true;
        release2.type = highestReleaseType;
      }
      if (release2.oldVersion !== highestVersion) {
        updated = true;
        release2.oldVersion = highestVersion;
      }
    }
  }
  return updated;
}
function applyLinks(releases, packagesByName, linked) {
  let updated = false;
  for (let linkedPackages of linked) {
    let releasingLinkedPackages = [...releases.values()].filter((release2) => linkedPackages.includes(release2.name) && release2.type !== "none");
    if (releasingLinkedPackages.length === 0)
      continue;
    let highestReleaseType = getHighestReleaseType(releasingLinkedPackages);
    let highestVersion = getCurrentHighestVersion(linkedPackages, packagesByName);
    for (let linkedPackage of releasingLinkedPackages) {
      if (linkedPackage.type !== highestReleaseType) {
        updated = true;
        linkedPackage.type = highestReleaseType;
      }
      if (linkedPackage.oldVersion !== highestVersion) {
        updated = true;
        linkedPackage.oldVersion = highestVersion;
      }
    }
  }
  return updated;
}
function getPreVersion(version2) {
  let parsed = (0, import_semver2.parse)(version2);
  let preVersion = parsed.prerelease[1] === void 0 ? -1 : parsed.prerelease[1];
  if (typeof preVersion !== "number") {
    throw new InternalError("preVersion is not a number");
  }
  preVersion++;
  return preVersion;
}
function getSnapshotSuffix(template, snapshotParameters) {
  let snapshotRefDate = new Date();
  const placeholderValues = {
    commit: snapshotParameters.commit,
    tag: snapshotParameters.tag,
    timestamp: snapshotRefDate.getTime().toString(),
    datetime: snapshotRefDate.toISOString().replace(/\.\d{3}Z$/, "").replace(/[^\d]/g, "")
  };
  if (!template) {
    return [placeholderValues.tag, placeholderValues.datetime].filter(Boolean).join("-");
  }
  const placeholders = Object.keys(placeholderValues);
  if (!template.includes(`{tag}`) && placeholderValues.tag !== void 0) {
    throw new Error(`Failed to compose snapshot version: "{tag}" placeholder is missing, but the snapshot parameter is defined (value: '${placeholderValues.tag}')`);
  }
  return placeholders.reduce((prev, key) => {
    return prev.replace(new RegExp(`\\{${key}\\}`, "g"), () => {
      const value = placeholderValues[key];
      if (value === void 0) {
        throw new Error(`Failed to compose snapshot version: "{${key}}" placeholder is used without having a value defined!`);
      }
      return value;
    });
  }, template);
}
function getSnapshotVersion(release2, preInfo, useCalculatedVersion, snapshotSuffix) {
  if (release2.type === "none") {
    return release2.oldVersion;
  }
  const baseVersion = useCalculatedVersion ? incrementVersion(release2, preInfo) : `0.0.0`;
  return `${baseVersion}-${snapshotSuffix}`;
}
function getNewVersion(release2, preInfo) {
  if (release2.type === "none") {
    return release2.oldVersion;
  }
  return incrementVersion(release2, preInfo);
}
function assembleReleasePlan(changesets, packages, config, preState, snapshot) {
  const refinedConfig = config.snapshot ? config : _objectSpread22(_objectSpread22({}, config), {}, {
    snapshot: {
      prereleaseTemplate: null,
      useCalculatedVersion: config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.useCalculatedVersionForSnapshots
    }
  });
  const refinedSnapshot = typeof snapshot === "string" ? {
    tag: snapshot
  } : typeof snapshot === "boolean" ? {
    tag: void 0
  } : snapshot;
  let packagesByName = new Map(packages.packages.map((x) => [x.packageJson.name, x]));
  const relevantChangesets = getRelevantChangesets(changesets, refinedConfig.ignore, preState);
  const preInfo = getPreInfo(changesets, packagesByName, refinedConfig, preState);
  let releases = flattenReleases(relevantChangesets, packagesByName, refinedConfig.ignore);
  let dependencyGraph = getDependentsGraph(packages, {
    bumpVersionsWithWorkspaceProtocolOnly: refinedConfig.bumpVersionsWithWorkspaceProtocolOnly
  });
  let releasesValidated = false;
  while (releasesValidated === false) {
    let dependentAdded = determineDependents({
      releases,
      packagesByName,
      dependencyGraph,
      preInfo,
      config: refinedConfig
    });
    let fixedConstraintUpdated = matchFixedConstraint(releases, packagesByName, refinedConfig);
    let linksUpdated = applyLinks(releases, packagesByName, refinedConfig.linked);
    releasesValidated = !linksUpdated && !dependentAdded && !fixedConstraintUpdated;
  }
  if ((preInfo === null || preInfo === void 0 ? void 0 : preInfo.state.mode) === "exit") {
    for (let pkg of packages.packages) {
      if (preInfo.preVersions.get(pkg.packageJson.name) !== 0) {
        const existingRelease = releases.get(pkg.packageJson.name);
        if (!existingRelease) {
          releases.set(pkg.packageJson.name, {
            name: pkg.packageJson.name,
            type: "patch",
            oldVersion: pkg.packageJson.version,
            changesets: []
          });
        } else if (existingRelease.type === "none" && !refinedConfig.ignore.includes(pkg.packageJson.name)) {
          existingRelease.type = "patch";
        }
      }
    }
  }
  const snapshotSuffix = refinedSnapshot && getSnapshotSuffix(refinedConfig.snapshot.prereleaseTemplate, refinedSnapshot);
  return {
    changesets: relevantChangesets,
    releases: [...releases.values()].map((incompleteRelease) => {
      return _objectSpread22(_objectSpread22({}, incompleteRelease), {}, {
        newVersion: snapshotSuffix ? getSnapshotVersion(incompleteRelease, preInfo, refinedConfig.snapshot.useCalculatedVersion, snapshotSuffix) : getNewVersion(incompleteRelease, preInfo)
      });
    }),
    preState: preInfo === null || preInfo === void 0 ? void 0 : preInfo.state
  };
}
function getRelevantChangesets(changesets, ignored, preState) {
  for (const changeset of changesets) {
    const ignoredPackages = [];
    const notIgnoredPackages = [];
    for (const release2 of changeset.releases) {
      if (ignored.find((ignoredPackageName) => ignoredPackageName === release2.name)) {
        ignoredPackages.push(release2.name);
      } else {
        notIgnoredPackages.push(release2.name);
      }
    }
    if (ignoredPackages.length > 0 && notIgnoredPackages.length > 0) {
      throw new Error(`Found mixed changeset ${changeset.id}
Found ignored packages: ${ignoredPackages.join(" ")}
Found not ignored packages: ${notIgnoredPackages.join(" ")}
Mixed changesets that contain both ignored and not ignored packages are not allowed`);
    }
  }
  if (preState && preState.mode !== "exit") {
    let usedChangesetIds = new Set(preState.changesets);
    return changesets.filter((changeset) => !usedChangesetIds.has(changeset.id));
  }
  return changesets;
}
function getHighestPreVersion(packageGroup, packagesByName) {
  let highestPreVersion = 0;
  for (let pkg of packageGroup) {
    highestPreVersion = Math.max(getPreVersion(packagesByName.get(pkg).packageJson.version), highestPreVersion);
  }
  return highestPreVersion;
}
function getPreInfo(changesets, packagesByName, config, preState) {
  if (preState === void 0) {
    return;
  }
  let updatedPreState = _objectSpread22(_objectSpread22({}, preState), {}, {
    changesets: changesets.map((changeset) => changeset.id),
    initialVersions: _objectSpread22({}, preState.initialVersions)
  });
  for (const [, pkg] of packagesByName) {
    if (updatedPreState.initialVersions[pkg.packageJson.name] === void 0) {
      updatedPreState.initialVersions[pkg.packageJson.name] = pkg.packageJson.version;
    }
  }
  let preVersions = /* @__PURE__ */ new Map();
  for (const [, pkg] of packagesByName) {
    preVersions.set(pkg.packageJson.name, getPreVersion(pkg.packageJson.version));
  }
  for (let fixedGroup of config.fixed) {
    let highestPreVersion = getHighestPreVersion(fixedGroup, packagesByName);
    for (let fixedPackage of fixedGroup) {
      preVersions.set(fixedPackage, highestPreVersion);
    }
  }
  for (let linkedGroup of config.linked) {
    let highestPreVersion = getHighestPreVersion(linkedGroup, packagesByName);
    for (let linkedPackage of linkedGroup) {
      preVersions.set(linkedPackage, highestPreVersion);
    }
  }
  return {
    state: updatedPreState,
    preVersions
  };
}
var assemble_release_plan_esm_default = assembleReleasePlan;
var import_utils7 = __toESM2(require_dist());
async function runBumpVersion(releaseType, tools, cwd = process.cwd()) {
  const packageManager = await (0, import_utils7.getPackageManager)(cwd);
  const changesets = await read_esm_default(cwd);
  if (changesets.length === 0) {
    console.log("No changesets found");
    return;
  }
  const params = ["run"];
  if (tools === "changeset") {
    params.push("changeset");
    params.push("version");
  } else {
    params.push("bump");
  }
  if (releaseType === "release") {
    await execaWithStreamLog(packageManager, params, {
      cwd
    });
  } else {
    await execaWithStreamLog(packageManager, [...params, "--canary", "--preid", releaseType], {
      cwd
    });
  }
}
async function getReleaseNote(title, cwd = process.cwd()) {
  const packageManager = await (0, import_utils7.getPackageManager)(cwd);
  const { stdout } = await (0, import_utils7.execa)(packageManager, ["run", "gen-release-note"], {
    cwd
  });
  return `
# ${title}

${stdout.split("modern gen-release-note")[1]}
`;
}
async function getPreState(releaseType, tools, cwd = process.cwd()) {
  const packageManager = await (0, import_utils7.getPackageManager)(cwd);
  const prePath = import_path8.default.join(cwd, ".changeset", "pre.json");
  if (import_utils7.fs.existsSync(prePath)) {
    import_utils7.fs.removeSync(prePath);
  }
  if (tools === "modern") {
    await execaWithStreamLog(packageManager, ["run", "pre", "enter", releaseType], {
      cwd
    });
  } else {
    await execaWithStreamLog(packageManager, ["run", "changeset", "pre", "enter", releaseType], {
      cwd
    });
  }
  const preState = import_utils7.fs.readJSONSync(prePath, "utf-8");
  import_utils7.fs.removeSync(prePath);
  return preState;
}
var VERSION_REGEX2 = /^modern-(\d*)$/;
var pullRequest = async () => {
  const githubToken = process.env.GITHUB_TOKEN;
  let releaseType = core2.getInput("version") || "release";
  if (releaseType === "latest" || VERSION_REGEX2.test(releaseType)) {
    releaseType = "release";
  }
  let releaseVersion = core2.getInput("versionNumber");
  const releaseBranch = core2.getInput("branch");
  const publishTools = core2.getInput("tools") || "modern";
  console.info("[publishTools]:", publishTools);
  if (!releaseBranch) {
    throw Error("not found release branch");
  }
  const repo = process.env.REPOSITORY;
  const isModernRepo = repo === "modern-js-dev/modern.js";
  const cwd = process.cwd();
  const changesets = await read_esm_default(cwd);
  if (releaseType === "canary" && releaseVersion === "auto") {
    releaseVersion = `${new Date().toISOString().split("T")[0]}`;
  } else if (releaseVersion === "auto") {
    const packages = await (0, import_get_packages2.getPackages)(cwd);
    const config = await read(cwd, packages);
    let preState;
    if (releaseType === "pre" || releaseType === "beta" || releaseType === "alpha") {
      preState = await getPreState(releaseType, publishTools);
    }
    const releasePlan = assemble_release_plan_esm_default(changesets, packages, config, preState, releaseType === "canary" ? {
      tag: "canary"
    } : void 0);
    if (releasePlan.releases.length === 0) {
      return;
    }
    if (isModernRepo) {
      releaseVersion = `v${releasePlan.releases.filter((release2) => !release2.name.includes("generator"))[0].newVersion}`;
    } else {
      releaseVersion = `v${releasePlan.releases[0].newVersion}`;
    }
  }
  console.info("Release Version", releaseVersion);
  console.info("publishBranch", releaseBranch);
  if (!githubToken) {
    core2.setFailed("Please add the GITHUB_TOKEN");
    return;
  }
  await gitConfigUser();
  await writeGithubToken(githubToken);
  const branch = github2.context.ref.replace("refs/heads/", "");
  const versionBranch = releaseVersion ? `${releaseType}-${releaseVersion}` : `changeset-${releaseType}/${branch}`;
  const title = releaseVersion ? `Release ${releaseVersion}` : "Version Packages";
  await gitSwitchToMaybeExistingBranch(versionBranch);
  await gitReset(github2.context.sha);
  if (changesets.length === 0) {
    console.log("No changesets found");
    process.exit(1);
  }
  if (releaseType === "canary" || releaseType === "next") {
    console.info("git push");
    await gitPush(versionBranch, { force: true });
    return;
  }
  let releaseNote = "";
  if (publishTools === "modern") {
    releaseNote = await getReleaseNote(title);
  }
  await runBumpVersion(releaseType, publishTools);
  await updateLockFile();
  if (isModernRepo) {
    await gitCommitWithIgnore(title, /^test/);
  } else {
    await gitCommitAll(title);
  }
  await gitPush(versionBranch, { force: true });
  await createPullRequest({
    githubToken,
    title,
    body: releaseNote,
    branch: versionBranch
  });
};
(async () => {
  const actionType = core3.getInput("type");
  switch (actionType) {
    case "release":
      await release();
      break;
    case "pull request":
      await pullRequest();
      break;
    default:
      throw new Error("action type not support");
  }
})().catch((err) => {
  console.error(err);
  core3.setFailed(err.message);
});
